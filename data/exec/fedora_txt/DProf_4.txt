tdXD
__gmon_start__
_init
_fini
__cxa_finalize
_Jv_RegisterClasses
XS_Devel__DProf_NONESUCH
Perl_Istack_sp_ptr
Perl_Imarkstack_ptr_ptr
Perl_Istack_base_ptr
Perl_croak
g_prof_state
PerlIO_printf
times
Perl_PerlIO_flush
Perl_get_cv
Perl_croak_nocontext
boot_Devel__DProf
Perl_newSVpv
Perl_new_version
Perl_sv_derived_from
Perl_vcmp
XS_Devel__DProf_END
Perl_newXS
Perl_IDBsub_ptr
Perl_Idowarn_ptr
XS_DB_sub
XS_DB_goto
Perl_IDBsingle_ptr
Perl_sv_setiv
getenv
strtol
Perl_savepv
PerlIO_open
Perl_newHV
Perl_newSV
getpid
Perl_safesysmalloc
Perl_Icurstash_ptr
Perl_Iperldb_ptr
Perl_Idefstash_ptr
Perl_call_sv
Perl_Imarkstack_max_ptr
Perl_markstack_grow
Perl_Idebstash_ptr
Perl_PerlIO_tell
Perl_Iunitcheckav_ptr
Perl_Iscopestack_ix_ptr
Perl_call_list
Perl_Isv_yes_ptr
PL_memory_wrap
__errno_location
Perl_vstringify
Perl_form
Perl_get_sv
Perl_sv_2pv_flags
Perl_PerlIO_seek
Perl_PerlIO_close
Perl_safesysrealloc
strlen
Perl_sv_setpvn
Perl_sv_catpv
Perl_hv_common_key_len
Perl_sv_grow
Perl_sv_2iv_flags
Perl_Iop_ptr
Perl_block_gimme
Perl_Icurstackinfo_ptr
Perl_save_destructor_x
Perl_warn_nocontext
libc.so.6
_edata
__bss_start
_end
GLIBC_2.1.3
GLIBC_2.0
QD+U
\[^_]
[^_]
B@+B<+BL
B0+B +BH
B,+B
N`RQ
+~T)
|[^_]
,[^_]
Devel::DProf::NONESUCH
Usage: %s(%s)
- %lx
+ %lx
* %lx
/ %lx
@ %ld %ld %ld
& %lx %s %s
+ & Devel::DProf::write
- & Devel::DProf::write
XS_VERSION
%s::%s
20050603.00
version
bootstrap parameter
DProf.c
Devel::DProf::END
DB::sub
DB::goto
PERL_DPROF_BUFFER
PERL_DPROF_TICKS
PERL_DPROF_OUT_FILE_NAME
tmon.out
#fOrTyTwO
$hz=%ld;
$XS_VERSION='DProf %s';
# All values are given in HZ
Devel::DProf::NONESUCH_noxs
$over_tests=10000;
PART2
$total_marks=%ld
(null)
Profiler unknown prof code %d
((svtype)((_svi)->sv_flags & 0xff)) == SVt_IV || ((svtype)((_svi)->sv_flags & 0xff)) >= SVt_PVIV
Assertion %s failed: file "DProf.xs", line %d
((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVAV
((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVHV
((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVCV
!((((_svi)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svi)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svi)->sv_flags & 0xff)) == SVt_PVLV))
((svtype)((_svi)->sv_flags & 0xff)) >= SVt_RV
((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVFM
DProf: don't know what subroutine to profile
Assertion %s failed: file "DProf.c", line %d
%s object version %-p does not match %s%s%s%s %-p
DProf: run perl with -d to use DProf.
DProf: unable to write '%s', errno = %d
$over_utime=%ld; $over_stime=%ld; $over_rtime=%ld;
$rrun_utime=%ld; $rrun_stime=%ld; $rrun_rtime=%ld;
((svtype)((shplep)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((shplep)->sv_flags & 0xff)) == SVt_PVLV
((((shplep)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((shplep)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((shplep)->sv_flags & 0xff)) == SVt_PVLV))
g_prof_state.profstack_ix + 4 <= g_prof_state.profstack_max
((svtype)((_gv)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_gv)->sv_flags & 0xff)) >= SVt_PVLV
!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DProf.xs" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 409), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DProf.xs" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 409), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DProf.xs" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 409), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DProf.xs" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 409), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DProf.xs" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"DProf.xs\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 409), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 409), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
((svtype)((_svi)->sv_flags & 0xff)) >= SVt_PV
g_prof_state.profstack_ix + 2 <= g_prof_state.profstack_max
panic: Devel::DProf inconsistent subroutine return
garbled call depth when profiling
DProf.so.debug
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.ctors
.dtors
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.bss
.gnu_debuglink
