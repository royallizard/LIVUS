hD@=
C>K+
%2[x
__gmon_start__
_init
_fini
__cxa_finalize
_Jv_RegisterClasses
boot_SDBM_File
Perl_Istack_sp_ptr
Perl_Imarkstack_ptr_ptr
Perl_Istack_base_ptr
Perl_newSVpv
Perl_new_version
Perl_sv_derived_from
Perl_vcmp
XS_SDBM_File_TIEHASH
Perl_newXS
XS_SDBM_File_DESTROY
XS_SDBM_File_FETCH
XS_SDBM_File_STORE
XS_SDBM_File_DELETE
XS_SDBM_File_EXISTS
XS_SDBM_File_FIRSTKEY
XS_SDBM_File_NEXTKEY
XS_SDBM_File_error
XS_SDBM_File_clearerr
XS_SDBM_File_filter_fetch_key
XS_SDBM_File_filter_store_key
XS_SDBM_File_filter_fetch_value
XS_SDBM_File_filter_store_value
Perl_Iunitcheckav_ptr
Perl_Iscopestack_ix_ptr
Perl_call_list
Perl_Isv_yes_ptr
Perl_form
Perl_get_sv
Perl_sv_2pv_flags
Perl_croak_nocontext
Perl_vstringify
Perl_croak
Perl_Isv_undef_ptr
Perl_sv_2iv_flags
Perl_sv_mortalcopy
Perl_sv_setsv_flags
Perl_newSVsv
Perl_sv_free2
Perl_sv_free
Perl_Iop_ptr
Perl_sv_newmortal
Perl_sv_setiv
Perl_mg_set
Perl_pad_sv
Perl_push_scope
Perl_Idebug_ptr
Perl_Itmps_floor_ptr
Perl_save_int
Perl_Itmps_ix_ptr
Perl_Idefgv_ptr
Perl_save_sptr
Perl_Imarkstack_max_ptr
Perl_call_sv
Perl_pop_scope
Perl_sv_2mortal
Perl_Ina_ptr
Perl_sv_2pvbyte
sdbm_nextkey
Perl_sv_setpvn
Perl_Gthr_key_ptr
pthread_getspecific
Perl_deb
Perl_gv_SVadd
Perl_free_tmps
Perl_markstack_grow
sdbm_firstkey
sdbm_exists
sdbm_delete
sdbm_store
__errno_location
sdbm_fetch
sdbm_close
Perl_safesysfree
sdbm_open
Perl_safesysmalloc
Perl_sv_setref_pv
sdbm__getnkey
lseek64
read
sdbm__chkpage
sdbm_hash
sdbm__delpair
write
sdbm__splpage
sdbm__fitpair
sdbm__duppair
sdbm__putpair
sdbm__exipair
sdbm__getpair
sdbm_prep
open64
__fxstat64
strlen
strcpy
nullitem
memcpy
libc.so.6
__stack_chk_fail
_edata
__bss_start
_end
GLIBC_2.1.3
GLIBC_2.2
GLIBC_2.4
GLIBC_2.1
GLIBC_2.0
l[^_]
,[^_]
,[^_]
,[^_]
,[^_]
,[^_]
,[^_]
[^_]
[^_]
<[^_]
<[^_]
\[^_]
[^_]
[^_]
,[^_]
[^_]
[^_]
9q$tk
,[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
.dir
.pag
[^_]
XS_VERSION
%s::%s
1.06
version
bootstrap parameter
SDBM_File.c
SDBM_File::TIEHASH
SDBM_File::DESTROY
SDBM_File::FETCH
SDBM_File::STORE
SDBM_File::DELETE
SDBM_File::EXISTS
SDBM_File::FIRSTKEY
SDBM_File::NEXTKEY
SDBM_File::error
SDBM_File::clearerr
SDBM_File::filter_fetch_key
SDBM_File::filter_store_key
SDBM_File::filter_fetch_value
SDBM_File::filter_store_value
db, code
Usage: %s(%s)
SDBM_File
%s: %s is not of type %s
db, key
recursion detected in %s
ENTER
%s scope %ld at %s:%d
LEAVE
%s: %s is not a reference
dbtype, filename, flags, mode
((svtype)((_svi)->sv_flags & 0xff)) >= SVt_RV
Assertion %s failed: file "SDBM_File.c", line %d
%s object version %-p does not match %s%s%s%s %-p
((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVAV
((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVHV
((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVCV
((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVFM
!((((_svi)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svi)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svi)->sv_flags & 0xff)) == SVt_PVLV))
((svtype)((_svi)->sv_flags & 0xff)) == SVt_IV || ((svtype)((_svi)->sv_flags & 0xff)) >= SVt_PVIV
((svtype)((shplep)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((shplep)->sv_flags & 0xff)) == SVt_PVLV
((((shplep)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((shplep)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((shplep)->sv_flags & 0xff)) == SVt_PVLV))
((svtype)((_svi)->sv_flags & 0xff)) >= SVt_PV
db, key, value, flags = DBM_REPLACE
No write permission to sdbm file
sdbm store returned %d, errno %d, key "%s"
sdbm: cannot insert after SPLTMAX attempts.
SDBM_File.so.debug
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.ctors
.dtors
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.bss
.gnu_debuglink
