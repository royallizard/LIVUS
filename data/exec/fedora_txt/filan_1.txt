/lib64/ld-linux-x86-64.so.2
libutil.so.1
_ITM_deregisterTMCloneTable
__gmon_start__
_Jv_RegisterClasses
_ITM_registerTMCloneTable
openpty
libreadline.so.6
write_history
where_history
read_history
readline
append_history
using_history
add_history
libssl.so.10
libcrypto.so.10
libc.so.6
setuid
chroot
socket
fflush
__rawmemchr
fchmod
setgrent
_IO_putc
fopen
ftruncate
strrchr
pipe
__strdup
connect
ftruncate64
__fdelt_chk
initgroups
nanosleep
signal
strncpy
fork
sigprocmask
getgrent
__stack_chk_fail
__lxstat
unlink
listen
select
realloc
abort
stdin
socketpair
getpid
kill
strftime
mkstemp
flock
localtime_r
strtod
strtol
isatty
symlink
getppid
calloc
strlen
send
openlog
getaddrinfo
strstr
__errno_location
tcsetattr
bind
chdir
read
__syslog_chk
endgrent
asctime
getsockopt
setgroups
grantpt
ttyname
dup2
pause
unsetenv
__fxstat64
shutdown
poll
ptsname
__fprintf_chk
fchown
stdout
fputc
recv
getsid
fputs
lseek
memcpy
fclose
tcsetpgrp
__vsnprintf_chk
strtoul
setsockopt
malloc
umask
strcasecmp
setpgid
getpeername
getgid
__lxstat64
__xstat64
__ctype_b_loc
getenv
recvfrom
getservbyname
stderr
ioctl
alarm
system
gethostbyname
__snprintf_chk
getgroups
getuid
readlink
getegid
getpgid
execvp
__xmknod
creat
__fxstat
fileno
gethostname
usleep
fwrite
gettimeofday
sigaction
geteuid
waitpid
unlockpt
localtime
lseek64
strchr
getsockname
sendto
fdopen
accept
tcgetattr
__ctype_toupper_loc
__cxa_finalize
setsid
fcntl
__sprintf_chk
__xstat
uname
setgid
mkfifo
strcmp
recvmsg
strerror
tcgetpgrp
__libc_start_main
__cxa_atexit
_edata
__bss_start
_end
filan_followsymlinks
__libc_csu_init
__libc_csu_fini
filan_rawoutput
GLIBC_2.2.5
GLIBC_2.15
GLIBC_2.4
GLIBC_2.14
GLIBC_2.3.4
GLIBC_2.3
AWAVAUA
ATUSH
D$X1
t$8L
|$@1
\$XdH3
h[]A\A]A^A_
D$8H
|$81
D$8H
|$81
T$(I
+tLH
t$81
|$@1
fffff.
AVAUATUH
D$X1
l$PI
D$P^
L$XdH3
`[]A\A]A^
D$Px
AUATI
l$ L
dH34%(
[]A\A]A^
T$ H
D$ H
[]A\
ffffff.
AVAUI
t$ D
D$ f
[]A\A]A^A_
D$ f
ffffff.
tr~@
fffff.
AVAUATA
D$XH
D$`H
L$pH
T$xD
L$|L
T$(H
\$@L
T$8H
t$ M
D$HH
D$hH
L$XH
[]A\A]A^A_
T$(H
\$@L
T$8H
t$ M
D$HH
D$hH
ATUH
[]A\A]
fffff.
|$`L
[]A\
L$ H
D$ H
D$0H
fffff.
ATUS
[]A\A]A^
AWAVAUA
D$(%
[]A\A]A^A_
ffffff.
dH34%(
[]A\A]A^
ffffff.
eto~=@
AVAUATUS
[]A\A]A^
|$ 1
D$<0
D$@H
D$ H
t$PH
D$(H
unknown 
    
time    H
H;8t
H;8t
H;;t
ht2@
H;8t
AVAUATUSH
l$0H
C(Lc
C0Lc
C8Lc
C@Lc
[]A\A]A^A_
fffff.
AVAUATA
l$0H
C(Lc
C0Lc
C8Lc
C@Lc
[]A\A]A^A_
l$0H
[]A\
AVAUATA
[]A\A]A^A_
AUATU
[]A\A]A^
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
fffff.
[]A\
ffffff.
[]A\
fff.
[]A\
[]A\
AVAUATUH
[]A\A]A^
[]A\
[]A\
fffff.
ATUH
[]A\A]
ATUH
[]A\A]
[]A\A]
fffff.
[]A\A]
fffff.
ATUH
[]A\A]
ATUH
[]A\A]
ATUS
[]A\A]
AUATU
[]A\A]A^
ffffff.
ATUSH
[]A\A]
ffffff.
[]A\
[]A\
[]A\
ffffff.
[]A\
[]A\
fffff.
[]A\
fffff.
[]A\
fffff.
[]A\
[]A\
fff.
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
fffff.
[]A\
[]A\
fffff.
AWAVI
([]A\A]A^A_
[]A\
[]A\A]
[]A\
[]A\
[]A\
fff.
[]A\
[]A\
ATUH
[]A\
[]A\
AVAUA
([]A\A]A^A_
AVAUATA
[]A\A]A^A_
[]A\A]
[]A\
[]A\
AVAUA
ATUH
[]A\A]A^A_
AUATA
[]A\A]A^
AVAUATA
[]A\A]A^A_
[]A\A]A^
[]A\A]A^
[]A\A]
ffffff.
[]A\A]A^A_
fffff.
AVAUATA
D$ H
L$8H
[]A\A]A^A_
fff.
[]A\A]
L$ dH
[]A\A]A^A_
[]A\
fffff.
fff.
ATUH
(t0H
[]A\A]
[]A\
fff.
AWAVL
\$@L
T$8D
l$P1
dH34%(
[]A\A]A^A_
ffffff.
[]A\
[]A\
AVAUATUH
[]A\A]A^A_
AWAVA
|$ dH
D$0H
[]A\A]A^A_
 t&H
[]A\
[]A\
[]A\
[]A\A]A^A_
fffff.
[]A\
[]A\
 t&H
[]A\
[]A\
ATUSH
[]A\A]
ATUH
[]A\A]
fff.
ATUSH
[]A\A]
[]A\
AWAVI
[]A\A]A^A_
[]A\A]A^A_
fffff.
AUATI
[]A\A]
fff.
ffffff.
AVAUA
r/fA
[]A\A]A^A_
AWAVI
ATE1
[]A\A]A^A_
[]A\A]A^A_
AVAUATUSH
|$0H
T$ H
Ic<$
Ic<$H
[]A\A]A^A_
H9L$
T$ H
[]A\
ATUH
D$(1
L$(dH3
0[]A\
ATUSH
[]A\
AVAUA
ATUH
[]A\A]A^A_
AUATA
dH34%(
[]A\A]A^A_
 []A\
 []A\
AWAVE1
t1xG
[]A\A]A^A_
StiH
%hV 
-hV 
[]A\A]A^A_
Analyze file descriptors of the process
      -?|-h          print this help text
      -d             increase verbosity (use up to 4 times)
      -i<fdnum>      only analyze this fd
      -n<fdnum>      analyze all fds from 0 up to fdnum-1 (default: %u)
      -s             simple output with just type and socket address or path
      -f<filename>   analyze file system entry
      -T<seconds>    wait before analyzing, useful to connect with debugger
      -r             raw output for time stamps and rdev
      -L             show symlink properties instead of following it
      -o<filename>   output goes to filename, that can be:
                     a regular file name, the output goes to that
                     +<filedes> , output goes to the file descriptor (which must be open writable)
                     the 3 special names stdin stdout and stderr
option -i requires an argument
option -n requires an argument
option -f requires an argument
option -T requires an argument
option -o requires an argument
can't fdopen file descriptor %lu: %s
Usage:
filan [options]
   options:
unknown option %s
%d superfluous arguments
stdin
stdout
stderr
can't fopen '%s': %s
%5u 
filan by Gerhard Rieger - see http://www.dest-unreach.org/socat/
A	%ld
isatty(%d): %s
	NULL
tcgetattr(%d, %p): %s
 cc[%d]=%d
 cc[%d]=%s
getsockopt(,,, {}, %d)
%s=""	
getsockopt(,,, {%d}, %d)
%s=%d	
%08x 
getsockopt(,,, {%s}, %d)
%s={%s}	
getsockopt(,,, {%d,%d}, %d)
%s={%d,%d}	
getsockname(%d): %s
getpeername(%d): %s
 <-> 
fstat(%d, %p): %s
pipe
chrdev
blkdev
file
symlink
socket
undef
	sigio
%hu,%hu
				
	%d	x%06x
lstat("%s", %p): %s
checking file descriptor %u
fstat(%d): %s
fd %d is a %s
poll: 
PRI,
OUT,
ERR,
NVAL,
; FIONREAD=%Zu
recvmsg(): %s
recvmsg=%Zd, 
TCP_NODELAY
TCP_MAXSEG
TCP_CORK
TCP_KEEPIDLE
TCP_KEEPINTVL
TCP_KEEPCNT
TCP_SYNCNT
TCP_LINGER2
TCP_ACCEPT
TCP_WINDOW_CLAMP
TCP_INFO
TCP_QUICKACK
TCP_MD5SIG
IPV6_V6ONLY
IP_TOS
IP_TTL
IP_HDRINCL
IP_OPTIONS
IP_ROUTER_ALERT
IP_RECVOPTS
IP_RETOPTS
IP_PKTINFO
IP_PKTOPTIONS
IP_MTU_DISCOVER
IP_RECVERR
IP_RECVTTL
IP_RECVTOS
IP_MTU
IP_FREEBIND
IP_MULTICAST_TTL
IP_MULTICAST_LOOP
DEBUG
REUSEADDR
TYPE
ERROR
DONTROUTE
BROADCAST
SNDBUF
RCVBUF
KEEPALIVE
OOBINLINE
NO_CHECK
PRIORITY
LINGER
BSDCOMPAT
REUSEPORT
PASSCRED
PEERCRED
RCVLOWAT
SNDLOWAT
RCVTIMEO
SNDTIMEO
SECURITY_AUTHENTICATION
SECURITY_ENCRYPTION_TRANSPORT
SECURITY_ENCRYPTION_NETWORK
BINDTODEVICE
ATTACH_FILTER
DETACH_FILTER
STREAM
DGRAM
SEQPACKET
 	IFLAGS=%08x OFLAGS=%08x CFLAGS=%08x LFLAGS=%08x
getsockopt(%d, %d, %d, %p, {%u}): %s
getsockopt(%d, SOL_SOCKET, SO_TYPE, %p, {%u}): %s
fd %d: socket of type %d ("%s")
getsockopt(%d, SOL_SOCKET, %d, %p, {%u}): %s
**** NO FURTHER ANALYSIS FOR THIS SOCKET TYPE IMPLEMENTED
  FD  type	device	inode	mode	links	uid	gid	rdev	size	blksize	blocks	atime		mtime		ctime		cloexec	flags	sigown
  FD  type	device	inode	mode	links	uid	gid	rdev	size	blksize	blocks	atime				mtime				ctime				cloexec	flags	sigown
%4d: %s	%s	%lu	0%03o	%lu	%u	%u	%hu,%hu	%ld	%ld	%ld
open("%s", O_RDONLY|O_NOCTTY|O_NONBLOCK|O_LARGEFILE, 0700): %s
poll({%d, %hd, %hd}, 1, 0): %s
(listening)
datagram
unix%s%s %s
tcp%s %s %s
udp%s %s %s
ip %s
tcp6%s %s %s
udp6%s %s %s
ip6 %s
/proc
/proc/%d/fd/%d
readlink("%s", %p, %Zu): %s
socket %s
stat("%s"): %s
%Y/%m/%d %H:%M:%S
.%06ld 
%Y/%m/%d %H:%M:%S 
%s[%d] 
N exit(1)
DINWEF
unknown syslog facility "%s"
cannot open log file "%s": %s
unknown diagnostic option %c
HOSTNAME
auth
authpriv
cron
daemon
kern
local0
local1
local2
local3
local4
local5
local6
local7
mail
news
syslog
user
uucp
cannot read time:   %s[%d] E %s
%s(, {%lu,%lu,0%03o,%lu,%u,%u
,%lu
,%ld
,...}) -> %d
%s(, {}) -> %d
umask(0%03o)
umask() -> 0%03o
open("%s", 0%o, 0%03o)
open("%s", 0%o, 0%03o) -> %d
creat("%s", 0%03o)
creat("%s", 0%03o) -> %d
lseek(%d, %ld, %d)
lseek() -> %ld
lseek64(%d, %ld, %d)
lseek64() -> %ld
getpid()
getpid() -> %d
getppid()
getppid() -> %d
getpgrp()
getpgid(%d)
getpgid() -> %d
setpgid(%d, %d)
setpgid() -> %d
tcgetpgrp(%d)
tcgetpgrp() -> %d
tcsetpgrp(%d, %d)
tcsetpgrp() -> %d
getsid(%d)
getsid() -> %d
setsid()
setsid() -> %d
getuid()
getuid() -> %u
geteuid()
geteuid() -> %u
setuid(%u)
setuid() -> %d
getgid()
getgid() -> %u
getegid()
getegid() -> %u
setgid(%u)
setgid() -> %d
initgroups("%s", %u)
initgroups() -> %d
getgroups(%d, %u,...)
getgroups() -> %d
setgroups(%Zu, %u,...)
setgroups() -> %d
chdir("%s")
chdir() -> %d
chroot("%s")
chroot() -> %d
gettimeofday(%p, {%d,%d})
gettimeofday(%p, NULL)
mknod("%s", 0%o, %lu)
mknod() -> %d
mkfifo("%s", 0%o)
mkfifo() -> %d
fstat(%d, %p)
fstat
fstat64(%d, %p)
fstat64
lstat(%s, %p)
lstat
lstat64(%s, %p)
lstat64
dup(%d)
dup(%d) -> %d
dup2(%d, %d)
dup2(%d, %d) -> %d
pipe(%p)
pipe({%d,%d}) -> %d
read(%d, %p, %Zu)
read -> %Zd
write(%d, %p, %Zu)
write -> %Zd
fcntl(%d, %d)
fcntl() -> %d
fcntl(%d, %d, %ld)
ftruncate(%d, %ld)
ftruncate() -> %d
ftruncate64(%d, %ld)
ftruncate64() -> %d
flock(%d, %d)
flock() -> %d
ioctl(%d, 0x%x, %p{%lu})
ioctl(%d, 0x%x, 0x%p)
ioctl() -> %d
ioctl(%d, 0x%x, %d)
close(%d)
close()  -> %d
fchown(%d, %u, %u)
fchown() -> %d
fchmod(%d, 0%o)
fchmod()  -> %d
unlink("%s")
unlink()  -> %d
symlink("%s", "%s")
symlink()  -> %d
readlink("%s", %p, %Zu)
readlink() -> %d
chown("%s", %u, %u)
chown()  -> %d
chmod("%s", 0%o)
poll({%d,0x%02hx,}, , %u, %d)
poll(, {,,0x%02hx}) -> %d
NULL/
fork()
fork() -> %d
waitpid(%d, %p, %d)
waitpid(, {%d}, ) -> %d
signal(%d, %p)
signal() -> %p
sigaction(%d, %p, %p)
sigaction() -> %d
sigprocmask(%d, %p, %p)
sigprocmask() -> %d
alarm(%u)
alarm() -> %u
kill(%d, %d)
kill() -> %d
execvp("%s", "%s")
execvp("%s", "%s" "%s")
execvp("%s", "%s" "%s" "%s")
execvp() -> %d
system("%s")
system() -> %d
socketpair(%d, %d, %d, %p)
socket(%d, %d, %d)
socket(%d, %d, %d) -> %d
bind(%d, %s, %Zd)
bind() -> %d
connect(%d, {%d,%s}, %Zd)
connect() -> %d
listen(%d, %d)
listen() -> %d
accept(%d, %p, %p)
accept(,,) -> %d
getsockname(%d, %p, %p{%u})
getpeername(%d, %p, %p{%u})
setsockopt() -> %d
recv(%d, %p, %Zu, %d)
recv() -> %d
send() -> %d
sendto() -> %d
shutdown(%d, %d)
shutdown()  -> %d
sleep(%u)
sleep() -> %u
usleep(%lu)
usleep() ->
nanosleep({%ld,%ld},%p)
nanosleep(,{%ld,%ld}) -> %d
nanosleep() -> %d
pause()
pause() -> %d
gethostbyname("%s")
gethostbyname() -> NULL
getaddrinfo(,,,{%p}) -> %d
malloc(%Zd)
malloc() -> %p
malloc(%Zd): out of memory
calloc(%Zd, %Zd)
calloc() -> %p
realloc(%p, %Zd)
realloc() -> %p
tcgetattr(%d, %p)
%02x,
%02x
tcsetattr() -> %d
ttyname(%d)
ttyname() -> %s
ttyname() -> NULL
isatty(%d)
isatty() -> %d
openpty(%p, %p, %p, %p, %p)
grantpt(%d)
grantpt() -> %d
unlockpt(%d)
unlockpt() -> %d
ptsname(%d)
ptsname() -> %s
ptsname() -> NULL
uname(%p)
uname({%s, %s, %s, %s, %s})
gethostname(%p, %Zu)
gethostname("%s", ) -> %d
atexit(%p)
atexit() -> %d
exit(%d)
abort()
mkstemp("%s")
mkstemp({%s}) -> %d
setenv("%s", "%s", %d)
setenv() -> %d
unsetenv("%s")
unsetenv() ->
readline("%s")
readline(NULL)
readline() -> "..."
readline() -> NULL
using_history()
using_history() ->
read_history("%s")
read_history(NULL)
read_history() -> %d
read_history() -> 0
write_history("%s")
write_history(NULL)
write_history() -> %d
write_history() -> 0
append_history(%d, "%s")
append_history(%d, NULL)
append_history() -> %d
append_history() -> 0
where_history()
where_history() -> %d
add_history("%s")
add_history() ->
gettimeofday({%ld,%ld}, {%d,%d}) -> %d
gettimeofday({%ld,%ld},) -> %d
fcntl(%d, %d, {type=%hd,whence=%hd,start=%ld,len=%ld,pid=%d})
poll({%d,0x%02hx,}{%d,0x%02hx,}{%d,0x%02hx,}{%d,0x%02hx,}, %u, %d)
poll(, {,,0x%02hx}{,,0x%02hx}{,,0x%02hx}{,,0x%02hx}) -> %d
select(%d, &0x%lx, &0x%lx, &0x%lx, %s%lu.%06ld)
select -> (, 0x%lx, 0x%lx, 0x%lx, %s%lu.%06ld), %d
execvp("%s", "%s" "%s" "%s" "%s")
execvp("%s", "%s" "%s" "%s" "%s" "%s")
execvp("%s", "%s" "%s" "%s" "%s" "%s" ...)
socketpair(%d, %d, %d, {%d,%d}) -> %d
accept(%d, {%d, %s}, %Zd) -> %d
getsockname(, {%s}, {%u}) -> %d
getpeername(, {%s}, {%u}) -> %d
getsockopt(%d, %d, %d, %p, {%Zd})
getsockopt() -> (,,, 0x%08x, %d), %d
setsockopt(%d, %d, %d, {0x%x}, %d)
setsockopt(%d, %d, %d, {0x%08x,%08x}, %d)
recvfrom(%d, %p, %Zu, %d, %p, %Zu)
recvfrom(,,,, {%d,%s}, %Zd) -> %d
recvfrom(,,,, NULL, NULL) -> %d
recvmsg(%d, %p{%p,%u,%p,%u,%p,%u,%d}, %d)
recvmsg(, {%s,%u,,%u,,%u,}, ) -> %d
send(%d, %p[%08x...], %Zu, %d)
sendto(%d, %p[%08x...], %Zu, %d, {%s}, %d)
gethostbyname() -> %d.%d.%d.%d
getaddrinfo(%s%s%s, %s%s%s, {%d,%d,%d,%d,%Zu,%p,%p,%p}, %p)
getaddrinfo(,,,{{%s, %s}) -> 0
calloc(%Zd, %Zd): out of memory
realloc(%p, %Zd): out of memory
tcgetattr(, {%08x,%08x,%08x,%08x,%s}) -> %d
tcsetattr(%d, %d, {%08x,%08x,%08x,%08x,%s})
openpty({%d}, {%d}, {"%s"},,) -> %d
write(%d, %p, %Zu): %s
<anon>
%u.%u.%u.%u
%u.%u.%u.%u:%hu
AF=%d 
setenv("%s", "%s", 1): %s
write(%d, %p, %Zu): only wrote %Zu bytes, trying to continue 
socket_init(): unknown address family %d
inet4addr_info(): buffer too short
sockaddr_inet4_info(): buffer too short
[%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x]:%hu
sockaddr_inet6_info(): buffer too short
sockaddr_info(): buffer too short (%Zu)
0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x
sockaddr_info(): buffer too short
parseport("%s", %d): extra trailing data "%s"
cannot resolve service "%s/%d"
socket(PF_INET, SOCK_DGRAM, IPPROTO_IP): %s
ioctl(%d, SIOCGIFINDEX, {"%s"}): %s
ioctl(%d, SIOCGIFINDEX, {"%s"}) -> { %d }
;*3$"
filan.debug
7zXZ
$D	J]
a}rE7
}kw?
?aOS
:zb2o?p6
I5v+
{cP-
N8 D
@6ig
<LQYy
NY6P
:Q]M
P]M2
8X6Ge
.0]s	
* S:
2p5"
&p$v
|f5U0d
gBv[\{
"%]0
U6/N
R)I7L8
_c@[-,
u1oi
MDLa
YW>'
@D/W5
l}{!
f2As"''$a>
e1*7}|E
N{(N E
'h#F
IO{1V(
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.data
.bss
.gnu_debuglink
.gnu_debugdata
