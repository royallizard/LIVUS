xy[t
__gmon_start__
_init
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
strcasecmp
free
__strdup
strlen
strcmp
__memcpy_chk
format_name
plugin_log
ssnprintf
escape_string
stderr
__fprintf_chk
__xstat
fopen
fileno
getpid
fcntl
fclose
uc_get_rate
__errno_location
check_create_dir
fwrite
fputc
stdout
localtime_r
strftime
sstrerror
__stack_chk_fail
__assert_fail
module_register
plugin_register_config
plugin_register_write
libdl.so.2
libc.so.6
_edata
__bss_start
_end
csv.so
GLIBC_2.3.4
GLIBC_2.4
GLIBC_2.2.5
5B! 
%D! 
%B! 
%:! 
%2! 
%*! 
%"! 
%z  
%r  
%j  
%b  
%Z  
%R  
%J  
fffff.
=I  
5B  
fffff.
fffff.
~0Hc
AWAVI
AUATUSH
[]A\A]A^A_
AZA[
E;t$@
T$HH
T:@I
D$Hf
T$01
A;_@|
|$(L
DataDir
stdout
stderr
StoreRates
true
csv plugin: Buffer too small.
-%Y-%m-%d
csv plugin: strftime failed
csv.c
%.3f
,%lf
,%llu
,%li
,%lu
PUTVAL %s interval=%.3f %s
epoch
stat(%s) failed: %s
stat(%s): Not a regular file!
csv plugin: DS type does not match value list type
csv plugin: localtime_r failed
0 == __extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p (ds->type) && __builtin_constant_p (vl->type) && (__s1_len = strlen (ds->type), __s2_len = strlen (vl->type), (!((size_t)(const void *)((ds->type) + 1) - (size_t)(const void *)(ds->type) == 1) || __s1_len >= 4) && (!((size_t)(const void *)((vl->type) + 1) - (size_t)(const void *)(vl->type) == 1) || __s2_len >= 4)) ? __builtin_strcmp (ds->type, vl->type) : (__builtin_constant_p (ds->type) && ((size_t)(const void *)((ds->type) + 1) - (size_t)(const void *)(ds->type) == 1) && (__s1_len = strlen (ds->type), __s1_len < 4) ? (__builtin_constant_p (vl->type) && ((size_t)(const void *)((vl->type) + 1) - (size_t)(const void *)(vl->type) == 1) ? __builtin_strcmp (ds->type, vl->type) : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (vl->type); int __result = (((const unsigned char *) (const char *) (ds->type))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (ds->type))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (ds->type))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (ds->type))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p (vl->type) && ((size_t)(const void *)((vl->type) + 1) - (size_t)(const void *)(vl->type) == 1) && (__s2_len = strlen (vl->type), __s2_len < 4) ? (__builtin_constant_p (ds->type) && ((size_t)(const void *)((ds->type) + 1) - (size_t)(const void *)(ds->type) == 1) ? __builtin_strcmp (ds->type, vl->type) : (- (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) (ds->type); int __result = (((const unsigned char *) (const char *) (vl->type))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) (vl->type))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) (vl->type))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) (vl->type))[3] - __s2[3]); } } __result; })))) : __builtin_strcmp (ds->type, vl->type)))); })
csv plugin: uc_get_rate failed.
csv plugin: fopen (%s) failed: %s
csv plugin: flock (%s) failed: %s
value_list_to_string
;*3$"
csv.so.debug
7zXZ
3LF?
[luM
WL(R
nZV%	
oyz)
>n!*Dc
t>W\%#
r+Cu7&X
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.data
.bss
.gnu_debuglink
.gnu_debugdata
