!B' C
__gmon_start__
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
_ZN13bx_devmodel_c4initEv
_ZN13bx_devmodel_c5resetEj
_ZN13bx_devmodel_c14register_stateEv
_ZN13bx_devmodel_c19after_restore_stateEv
_ZN8bx_dma_c6get_TCEv
theDmaDevice
_ZN13bx_dma_stub_c10raise_HLDAEv
pluginlog
_ZN12logfunctions5panicEPKcz
_ZN13bx_dma_stub_c7set_DRQEjj
_ZN13bx_dma_stub_c6get_TCEv
_ZN13bx_dma_stub_c20unregisterDMAChannelEj
_ZN13bx_dma_stub_c20registerDMA16ChannelEjPFvPtES2_PKc
_ZN13bx_dma_stub_c19registerDMA8ChannelEjPFvPhES2_PKc
_ZN8bx_dma_c20unregisterDMAChannelEj
_ZN12logfunctions4infoEPKcz
_ZN8bx_dma_c12read_handlerEPvjj
_ZN12logfunctions6ldebugEPKcz
_ZN12logfunctions5errorEPKcz
channelindex
_ZN8bx_dma_c14register_stateEv
_Znwm
_ZN9bx_list_cC1EP10bx_param_cPKcS3_i
__sprintf_chk
_ZN9bx_list_cC1EP10bx_param_cPKci
_ZN16bx_shadow_bool_cC1EP10bx_param_cPKcPjh
_ZN15bx_shadow_num_cC1EP10bx_param_cPKcPhihh
_ZN15bx_shadow_num_cC1EP10bx_param_cPKcPtihh
_ZdlPv
_Unwind_Resume
__stack_chk_fail
__gxx_personality_v0
_ZN8bx_dma_c4initEv
pluginRegisterIOReadHandler
pluginRegisterIOWriteHandler
_ZN8bx_dma_c13write_handlerEPvjjj
_ZN13bx_devmodel_cD2Ev
_ZTV13bx_devmodel_c
_ZN12logfunctionsD2Ev
_ZN13bx_devmodel_cD1Ev
_ZN8bx_dma_c20registerDMA16ChannelEjPFvPtES2_PKc
_ZN8bx_dma_c19registerDMA8ChannelEjPFvPhES2_PKc
_ZN13bx_dma_stub_cD2Ev
_ZN13bx_dma_stub_cD1Ev
_ZN13bx_dma_stub_cD0Ev
_ZN13bx_devmodel_cD0Ev
_ZN8bx_dma_cD2Ev
_ZTV8bx_dma_c
_ZN8bx_dma_cD1Ev
_ZN8bx_dma_cD0Ev
_ZN8bx_dma_c10raise_HLDAEv
bx_pc_system
_ZN14bx_pc_system_c7set_HRQEj
_ZN8BX_MEM_C17writePhysicalPageEP8BX_CPU_CmjPv
_ZN8BX_MEM_C16readPhysicalPageEP8BX_CPU_CmjPv
libdma_LTX_plugin_fini
_ZN8bx_dma_cC2Ev
_ZN12logfunctionsC2Ev
_ZN12logfunctions3putEPKc
_ZN8bx_dma_cC1Ev
libdma_LTX_plugin_init
bx_devices
pluginRegisterDeviceDevmodel
_ZN8bx_dma_c16reset_controllerEj
_ZN8bx_dma_c5resetEj
_ZN8bx_dma_c11control_HRQEj
_ZN8bx_dma_c7set_DRQEjj
_ZTS8bx_dma_c
_ZTI8bx_dma_c
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTI13bx_dma_stub_c
_ZTI13bx_devmodel_c
_ZTVN10__cxxabiv121__vmi_class_type_infoE
_ZTS13bx_devmodel_c
_ZTI12logfunctions
_ZTVN10__cxxabiv117__class_type_infoE
_ZTS12logfunctions
_ZTS13bx_dma_stub_c
_ZTV13bx_dma_stub_c
libstdc++.so.6
libm.so.6
libc.so.6
libgcc_s.so.1
_edata
__bss_start
_end
libbx_dma.so.0
GCC_3.0
GLIBC_2.3.4
GLIBC_2.4
GLIBC_2.2.5
CXXABI_1.3
GLIBCXX_3.4
%z= 
%r= 
%j= 
%b= 
%Z= 
%R= 
%J= 
%B= 
%:= 
%2= 
%*= 
%"= 
=i< 
=/; 
fffff.
fffff.
fffff.
AWAVAUATUSH
D$81
D$$H
t$(H
l$$H
t$(H
T$8dH3
H[]A\A]A^A_
|$(H
AVAUATU1
[]A\A]A^A_
fffff.
-0. 
t$ H
fffff.
-3- 
T'tE
t$ H
fffff.
fff.
fffff.
\$(H
l$0L
d$8L
l$@L
t$HL
|$PH
=U* 
fffff.
%9$ 
l$ L
t$(L
|$0H
t$(L
|$0H
fff.
ATUS
[]A\A]A^
[]A\A]A^1
-;! 
[]A\A]A^1
PP[]A\A]D
[]A\A]D
[]A\A]A^
T>\H
T XE
\ XE
T(P1
T(nH
T(P1
raise_HLDA
set_DRQ
get_TC
unregisterDMAChannel
registerDMA16Channel
registerDMA8Channel
channel %u no longer used
read addr=%04x
DMA State
flip_flop
status_reg
command_reg
ctrl_disabled
DACK
mask
mode_type
address_decrement
autoinit_enable
transfer_type
base_address
current_address
base_count
current_count
page_reg
ext_page
0x%02x
DMA controller
channel 4 used by cascade
channel %u used by %s
Exit
set_DRQ() channel > 7
dma_base = %08x
dma_base_count = %08x
dma_roof = %08x
request outside %dk boundary
    base = %04x
    curr = %04x
DMA-%d: clear flip/flop
DMA-%d: master clear
DMA-%d: clear mask register
DMA-%d: write all mask bits
write ignored: %04xh = %02xh
%s called in %s stub. you must not have loaded the %s plugin
DMA-%d: read of temporary register always returns 0
read: extra page register 0x%04x (unused)
read: unsupported address=%04x
Init $Id: dma.cc 10209 2011-02-24 22:05:47Z sshwarts $
registerDMA16Channel: invalid channel number(%u).
registerDMA16Channel: channel(%u) already in use.
registerDMA8Channel: invalid channel number(%u).
registerDMA8Channel: channel(%u) already in use.
no dmaWrite handler for channel %u.
hlda: transfer_type 3 is undefined
set_DRQ(): channel %d not connected to device
set_DRQ: mode_type(%02x) not handled
write: address=%04x value=%02x
io write to address %08x, len=%u
  DMA-%d base and current address, channel %d
  DMA-%d base and current count, channel %d
write to command register: value 0x%02x not supported
DMA-%d: set request bit for channel %u
DMA-%d: cleared request bit for channel %u
DMA-%d: set_mask_bit=%u, channel=%u, mask now=%02xh
DMA-%d: mode register[%u] = %02x
DMA-1: page register %d = %02x
DMA-2: page register %d = %02x
write: extra page register 0x%04x (unused)
8bx_dma_c
13bx_devmodel_c
12logfunctions
13bx_dma_stub_c
;*3$"
zPLR
libbx_dma.so.0.0.0.debug
.data
.rodata
.shstrtab
.dynamic
.note.gnu.build-id
.gcc_except_table
.eh_frame
.gnu.hash
.fini
.gnu_debuglink
.dynsym
.gnu.version
.rela.dyn
.data.rel.ro
.gnu.version_r
.jcr
.eh_frame_hdr
.dynstr
.bss
.init
.rela.plt
.got.plt
.got
.text
.fini_array
.init_array
