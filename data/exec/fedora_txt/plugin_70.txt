__gmon_start__
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
value_area_get_width
value_area_get_height
value_dup
value_get_as_checked_bool
value_area_get_x_y
value_new_array_non_init
g_malloc_n
function_iterate_argument_values
value_release
g_slist_free_full
g_slist_reverse
g_slist_length
value_new_array_empty
g_slist_free
value_new_error_VALUE
__stack_chk_fail
g_slist_prepend
value_new_empty
value_new_int
g_utf8_collate
g_hash_table_destroy
go_mem_chunk_destroy
g_string_chunk_free
g_printerr
g_hash_table_size
g_hash_table_replace
collect_floats_value
value_get_as_int
value_new_float
value_peek_string
workbook_sheet_by_name
value_new_error_NUM
gnm_rangeref_normalize
range_height
value_new_array
value_array_set
gnm_sheet_get_size
value_new_error_REF
value_new_cellrange_unsafe
gnm_expr_eval
value_coerce_to_number
value_area_fetch_x_y
range_width
expr_name_is_active
value_equal
value_hash
g_hash_table_new_full
g_string_chunk_new
go_mem_chunk_new
g_assertion_message_expr
g_hash_table_lookup
value_get_as_float
value_get_rangeref
value_new_cellrange_r
gnm_regcomp_XL
go_regexec
go_regfree
g_utf8_casefold
g_string_chunk_insert
g_malloc0
g_realloc_n
g_log
value_new_error_NA
workbook_sheet_count
gnm_conventions_default
parse_pos_init_evalpos
gnm_expr_parse_str
gnm_expr_top_get_range
gnm_expr_top_unref
gnm_conventions_xls_r1c1
col_parse
gnm_float_equal
gnm_float_hash
g_hash_table_new
g_str_equal
g_str_hash
g_hash_table_lookup_extended
go_mem_chunk_alloc
g_hash_table_insert
g_return_if_fail_warning
value_get_as_bool
g_string_new
cellref_as_string
g_string_free
value_new_string_nocopy
g_string_insert_c
gnm_expr_conv_quote
go_plugin_init
gnm_debug_flag
gnm_app_get_app
g_signal_connect_data
go_plugin_shutdown
g_signal_handlers_disconnect_matched
lookup_functions
go_plugin_header
go_plugin_depends
libm.so.6
libc.so.6
_edata
__bss_start
_end
plugin.so
GLIBC_2.2.5
GLIBC_2.4
5bw 
%dw 
%bw 
%Zw 
%Rw 
%Jw 
%Bw 
%:w 
%2w 
%*w 
%"w 
%zv 
%rv 
%jv 
%bv 
%Zv 
%Rv 
%Jv 
%Bv 
%:v 
%2v 
%*v 
%"v 
%zu 
%ru 
%ju 
%bu 
%Zu 
%Ru 
%Ju 
%Bu 
%:u 
%2u 
%*u 
%"u 
=)u 
fffff.
fffff.
fffff.
AWAVAUATUSH
[]A\A]A^A_
d$,Hc
[]A\A]A^A_
D$8H
D$0f
D$ H
l$0M
D$ 9D$,
AWAVAUATUSH
D$$u*
[]A\A]A^A_
9D$$
[]A\A]A^A_
ffffff.
ZYt9H
5zo 
dH3<%(
=wn 
=Xn 
=9n 
=`m 
=Am 
=km 
=Qm 
ffffff.
AVAU
ATUI
 []A\A]A^
D9d$
AUATUSH
D$(1
8Ft-H
T$(dH3
8[]A\A]
fffff.
AVAUATUI
D$81
T$ H
T$(H
L$8dH3
@[]A\A]A^
l$,H
t$(E
t$ H
t$(D
ffff.
AVAUI
ATUH
]A\A]A^
]A\A]A^
]A\A]A^
AWAVAUATI
D$,1
[]A\A]A^A_
L$8H
T$0L
D$@H
D$PH
D$XH
D$`H
D$pH
D$xH
l$\t
l$|t
\$Xt
\$xt
\$xH
t$pH
AUATUSH
D$(1
8Ft-H
T$(dH3
8[]A\A]
fffff.
u3ATUSH
[]A\
[]A\
[]A\H
[]A\
AUATUSH
[]A\A]
fffff.
AWAVI
AUATI
D$h1
D$(A
D$(L
D$XD
D$PE1
|$hdH3<%(
x[]A\A]A^A_
\$XL
|$PI
|$PH;|$@
E;.}#L
-n[ 
L$PA
l$@L
=eZ 
|$$<
Hc3H
D$(H
t$0H
|$$<
=oY 
T$8H
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
:FuQH
AUATI
([]A\A]
ffff.
AUATI
D$81
t$8dH34%(
H[]A\A]
T$ I
|$ H;|$
=rR 
="R 
AWAVAUATA
D$X1
D$0D
D$(H
L$ 1
ED$ H
\$XdH3
h[]A\A]A^A_
D9|$
093u
=^Q 
D$(L
D9|$
D$0H
L$(1
ED$(
D9t$
AWAVA
AUATI
{ E1
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
~t!H
AUATUSH
<wyH
[]A\A]
[]A\A]
[]A\A]
AWAVA
AUATI
{ E1
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
~t!H
AWAVE1
AUATI
~ dH
D$h1
D$ t\H
D$ t
D$<A
L$hdH3
x[]A\A]A^A_
T$ H
R(sCH
t$0H
5oF 
5YF 
Clearing lookup caches [%ld]
lookup float pool
functions.c
Unexpected regcomp result
v != NULL
lookup-caches
recalc-clear-caches
Imbalance in string pool: %d
Imbalance in float pool: %d
address
ff|fbs
areas
choose
column
columnnumber
columns
hlookup
EAf|bb
hyperlink
indirect
index
A|fff
EA|r
match
EA|f
offset
rff|ff
rows
sheets
sheet
sort
transpose
vlookup
flip
ref:list of numbers
ARRAY
v:value
TRANSPOSE
FLIP:@{matrix} flipped
matrix:range
FLIP,MMULT
link_location:string
label:string, optional
=HYPERLINK("www.gnome.org")
=SHEET()
=SHEET("Sheet1")
SHEETS,ROW,COLUMNNUMBER
=SHEETS()
=ROWS(H7:I13)
COLUMN,COLUMNS,ROW
ROW:vector of row numbers
=ROW(A1:D3)
=ROW(1:3)
COLUMN,COLUMNS,ROWS
OFFSET:an offset cell range
range:reference or range
reference:array or area
=COLUMNS(H2:J3)
COLUMN,ROW,ROWS
name:column name such as "IV"
=COLUMNNUMBER("E")
ADDRESS
=COLUMN(A1:C4)
=COLUMN(A:C)
column() in G13 equals 7.
COLUMNS,ROW,ROWS
array:cell or inline array
ref_text:textual reference
AREAS,INDEX,CELL
seek:value to find
value:value to look up
vector1:range to search:
The data must be sorted.
VLOOKUP,HLOOKUP
value:search value
range:range to search
VLOOKUP
index:positive number
value1:first value
value2:second value
reference:range
=AREAS(A1,B2,C3)
ADDRESS,INDEX,INDIRECT,OFFSET
ADDRESS:cell address as text
row_num:row number
col_num:column number
=ADDRESS(5,4)
=ADDRESS(5,4,4)
=ADDRESS(5,4,4,FALSE)
goffice
gnumeric
1.12.23
gnumeric_hlookup
get_linear_lookup_cache
get_bisection_lookup_cache
gnumeric_vlookup
munG
SORT:sorted list of numbers as vertical array
order:0 (descending order) or 1 (ascending order); defaults to 0
Strings, booleans, and empty cells are ignored.
SORT({4,3,5}) evaluates to {5,4,3}
ARRAY:vertical array of the arguments
vertical:if true, @{matrix} is flipped vertically, otherwise horizontally; defaults to TRUE
TRANSPOSE:the transpose of @{matrix}
HYPERLINK:second or first arguments
HYPERLINK function currently returns its 2nd argument, or if that is omitted the 1st argument.
=HYPERLINK("www.gnome.org","GNOME")
SHEET:sheet number of @{reference}
reference:reference or literal sheet name, defaults to the current sheet
If @{reference} is neither a reference nor a literal sheet name, SHEET returns #VALUE!
SHEETS:number of sheets in @{reference}
reference:array, reference, or range, defaults to the maximum range
If @{reference} is neither an array nor a reference nor a range, SHEETS returns #VALUE!
ROWS:number of rows in @{reference}
reference:array, reference, or range
If @{reference} is neither an array nor a reference nor a range, ROWS returns #VALUE!
x:reference, defaults to the position of the current expression
ROW function returns a 1xN array containing the sequence of integers from the first row to the last row of @{x}.
If @{x} is neither an array nor a reference nor a range, returns #VALUE!
row:number of rows to offset @{range}
col:number of columns to offset @{range}
height:height of the offset range, defaults to height of @{range}
width:width of the offset range, defaults to width of @{range}
OFFSET returns the cell range starting at offset (@{row},@{col}) from @{range} of height @{height} and width @{width}.
If @{range} is neither a reference nor a range, OFFSET returns #VALUE!
COLUMN,COLUMNS,ROWS,INDEX,INDIRECT,ADDRESS
COLUMNS:number of columns in @{reference}
If @{reference} is neither an array nor a reference nor a range, COLUMNS returns #VALUE!
COLUMNNUMBER:column number for the given column called @{name}
If @{name} is invalid, COLUMNNUMBER returns #VALUE!
COLUMN:vector of column numbers
COLUMN function returns a Nx1 array containing the sequence of integers from the first column to the last column of @{x}.
INDEX:reference to a cell in the given @{array}
row:desired row, defaults to 1
col:desired column, defaults to 1
area:from which area to select a cell, defaults to 1
INDEX gives a reference to a cell in the given @{array}. The cell is selected by @{row} and @{col}, which count the rows and columns in the array.
If the reference falls outside the range of @{array}, INDEX returns #REF!
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1. Then INDEX(A1:A5,4,1,1) equals 25.9
INDIRECT:contents of the cell pointed to by the @{ref_text} string
format:if true, @{ref_text} is given in A1-style, otherwise it is given in R1C1 style; defaults to true
If @{ref_text} is not a valid reference in the style determined by @{format}, INDIRECT returns #REF!
If A1 contains 3.14 and A2 contains "A1", then
INDIRECT(A2) equals 3.14.
MATCH:the index of @{seek} in @{vector}
vector:n by 1 or 1 by n range to be searched
type:+1 (the default) to find the largest value 
 @{seek}, 0 to find the first value = @{seek}, or-1 to find the smallest value 
 @{seek}
MATCH searches @{vector} for @{seek} and returns the 1-based index.
 For @{type} = -1 the data must be sorted in descending order; for @{type} = +1 the data must be sorted in ascending order.
If @{seek} could not be found, #N/A is returned.
If @{vector} is neither n by 1 nor 1 by n, #N/A is returned.
LOOKUP:contents of @{vector2} at the corresponding location to @{value} in @{vector1}
vector2:range of return values
If  @{vector1} has more rows than columns, LOOKUP searches the first row of @{vector1}, otherwise the first column. If @{vector2} is omitted the return value is taken from the last row or column of @{vector1}.
If LOOKUP can't find @{value} it uses the largest value less than @{value}.
If @{value} is smaller than the first value it returns #N/A.
If the corresponding location does not exist in @{vector2}, it returns #N/A.
HLOOKUP:search the first row of @{range} for @{value}
row:1-based row offset indicating the return values 
approximate:if false, an exact match of @{value} must be found; defaults to TRUE
as_index:if true, the 0-based column offset is returned; defaults to FALSE
HLOOKUP function finds the row in @{range} that has a first cell similar to @{value}.  If @{approximate} is not true it finds the column with an exact equality. If @{approximate} is true, it finds the last column with first value less than or equal to @{value}. If @{as_index} is true the 0-based column offset is returned.
If @{approximate} is true, then the values must be sorted in order of ascending value.
HLOOKUP returns #REF! if @{row} falls outside @{range}.
VLOOKUP:search the first column of @{range} for @{value}
column:1-based column offset indicating the return values
as_index:if true, the 0-based row offset is returned; defaults to FALSE
VLOOKUP function finds the row in @{range} that has a first cell similar to @{value}.  If @{approximate} is not true it finds the row with an exact equality. If @{approximate} is true, it finds the last row with first value less than or equal to @{value}. If @{as_index} is true the 0-based row offset is returned.
VLOOKUP returns #REF! if @{column} falls outside @{range}.
CHOOSE:the (@{index}+1)th argument
CHOOSE returns its (@{index}+1)th argument.
@{index} is truncated to an integer. If @{index} < 1 or the truncated @{index} > number of values, CHOOSE returns #VALUE!
=CHOOSE(3,"Apple","Orange","Grape","Perry")
AREAS:number of areas in @{reference}
abs_num:1 for an absolute, 2 for a row absolute and column relative, 3 for a row relative and column absolute, and 4 for a relative reference; defaults to 1
a1:if TRUE, an A1-style reference is provided, otherwise an R1C1-style reference; defaults to TRUE
text:name of the worksheet, defaults to no sheet
If @{row_num} or @{col_num} is less than one, ADDRESS returns #VALUE!
If @{abs_num} is greater than 4 ADDRESS returns #VALUE!
=ADDRESS(5,4,4,FALSE,"Sheet99")
;*3$"
plugin.so.debug
7zXZ
ev*K
	8[v
TBm2W
i}`J
s;>Mk
Z#<V
O 	*I
0lU%84
ceGK
g [.
os0[
?$o/yd
Lr\g
%&O6
MD}6
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.bss
.gnu_debuglink
.gnu_debugdata
