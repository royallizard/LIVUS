/lib64/ld-linux-x86-64.so.2
{3Q;w
3YwY
libcrypto.so.7
__gmon_start__
_Jv_RegisterClasses
X509_free
EVP_PKEY_free
BN_is_prime
BN_new
RSA_print_fp
SSLeay
PEM_read_PrivateKey
EVP_get_digestbyname
BN_add
EVP_PKEY_new
X509_set_version
X509_new
DSA_new
BN_bn2hex
EVP_des_cbc
X509V3_EXT_conf_nid
BN_CTX_new
RAND_add
X509_get_issuer_name
BN_CTX_free
PEM_read_X509
RAND_status
RAND_bytes
OBJ_nid2sn
BN_generate_prime
X509_NAME_add_entry_by_txt
ERR_load_crypto_strings
BN_gcd
OPENSSL_add_all_algorithms_noconf
RSA_check_key
BN_cmp
BN_set_word
BN_value_one
BN_add_word
RSA_free
X509_set_serialNumber
BN_mod_inverse
BN_mod_exp
RAND_load_file
X509_get_subject_name
BN_sub_word
ERR_error_string
ERR_get_error
RAND_file_name
BN_mod_mul
BN_free
X509_EXTENSION_free
ASN1_INTEGER_set
BN_num_bits
BN_copy
X509_verify
OBJ_obj2nid
PEM_write_X509
BN_mul
BN_rand
BN_div
PEM_write_PrivateKey
X509_set_pubkey
DSA_free
DSA_generate_key
X509_add_ext
DSA_print_fp
X509_sign
RSA_generate_key
ASN1_INTEGER_free
CRYPTO_free
EVP_PKEY_set1_DSA
EVP_PKEY_assign
DSA_generate_parameters
BN_sub
X509_time_adj
X509_print_fp
BN_dup
ASN1_INTEGER_new
libcap.so.2
libc.so.6
fflush
strcpy
fchmod
__printf_chk
readdir
fopen
strncmp
strrchr
wait
regexec
pipe
__strdup
perror
closedir
fork
regfree
__stack_chk_fail
unlink
realloc
_exit
strpbrk
getpid
strspn
strftime
strtol
mmap
symlink
fgetc
strlen
memset
strstr
strcspn
__errno_location
dup2
__fprintf_chk
ctime
stdout
fputc
fputs
lseek
memcpy
fclose
strtoul
malloc
remove
__strncpy_chk
opendir
getenv
__ctype_b_loc
__open_2
regcomp
stderr
system
munmap
__snprintf_chk
readlink
freopen
gethostname
fwrite
fread
gettimeofday
srandom
localtime
strchr
fdopen
canonicalize_file_name
__ctype_toupper_loc
__strcpy_chk
__ctype_tolower_loc
__cxa_finalize
__sprintf_chk
__xstat
access
strcmp
strerror
__libc_start_main
sysconf
__cxa_atexit
_edata
__bss_start
_end
__libc_csu_fini
filename
trustname
rval
__libc_csu_init
ntp_keygenOptions
epoch
option_usage_fp
GLIBC_2.7
GLIBC_2.4
GLIBC_2.3
GLIBC_2.3.4
GLIBC_2.2.5
5j>!
%l>!
%j>!
%b>!
%Z>!
%R>!
%J>!
%B>!
%:>!
%2>!
%*>!
%">!
%z=!
%r=!
%j=!
%b=!
%Z=!
%R=!
%J=!
%B=!
%:=!
%2=!
%*=!
%"=!
%z<!
%r<!
%j<!
%b<!
%Z<!
%R<!
%J<!
%B<!
%:<!
%2<!
%*<!
%"<!
%z;!
%r;!
%j;!
%b;!
%Z;!
%R;!
%J;!
%B;!
%:;!
%2;!
%*;!
%";!
%z:!
%r:!
%j:!
%b:!
%Z:!
%R:!
%J:!
%B:!
%::!
%2:!
%*:!
%":!
=d4!
ATSubH
%|1!
=71!
%11!
d$ H
AWAVI
AUATUSH
t$(H
T$ H
-S0!
L$ 1
T$(L
\$0H
[]A\A]A^A_
AVAUATUSH
|$ H
t$8A
|$8A
T$8Ic
T$0H
D$8H
T$0H
D$8M
D$hI
|$ H
|$pE1
T$hA
D$xM
D$pH
T$hA
D$pH
|$ H
D$HE
T$@A
T$H1
D$@J
T$hH
T$@J
D$@H
T$hH
D$HM
T$HH
D$0M
T$8H
5|6!
t$PE1
|$(H
T$`H
T$`H
T$`H
T$`H
T$`H
T$@H
D$`J
T$HH
D$`J
D$`H
D$`H
T$@J
D$HJ
T$hJ
D$0J
T$8J
t$`H
t$XH
5P3!
t$`1
D$xH
D$hA
D$xH
u3E1
D$pA
T$xH
D$Pu
[]A\A]A^A_
AVAUATUSH
[]A\A]A^A_
|$ 1
T$ H
T$ L
T$ L
ffffff.
AVAUATUSH
[]A\A]A^A_
AVAUATUSH
D$H1
\$0H
T$HdH3
X[]A\A]A^A_
|$ 1
T$ H
T$ H
T$ L
|$(L
t$(M
fff.
D$(1
T$(dH3
\$8H
l$@L
d$HL
l$PL
t$XL
|$`H
-]!!
l$ L
t$(L
|$0H
StyH
AVAUATA
([]A\A]A^A_
AWAVAUATA
\$pH
|$`1
D$`H
D$ H
DD$PH
D$PH
DD$PH
D$PH
|$DH
t$HL
t$XH
[]A\A]A^A_
T$(L
L$PH
|$HL
t$0H
L$0H
l$HH
ffff.
fffff.
L$(L
ffff.
ffff.
tmv#
fffff.
l$ H
AUATI
[]A\A]
[]A\1
fffff.
AWAVE1
ATUSH
T$ H
t$(dH
[]A\A]A^A_
D$ H
l$ H
AVAUATUSH
D$81
l$ H
D$8dH3
H[]A\A]A^A_
fffff.
AWAVAUATUSH
[]A\A]A^A_
t)<\
ATUSH
[]A\A]
fffff.
l$ H
AVAUATI
I+D$xI
I+D$xI
I+\$xH
[]A\A]A^
[]A\
[]A\
[]A\
})Hc
l$ H
fffff.
l$ L
t$(L
|$0H
AWAVAUATUSH
D$(H
EP~`D
T$4A
D9T$0~
T$4A
|$(A
8[]A\A]A^A_
 HcT$4H
D$(H
[]A\A]A^A_
<-ta
 t(H
D;d$
D;d$
\$hH
l$pL
d$xL
\$xA
|$xH
[]A\A]
fff.
t	E1
T$ H
D$8%
D$8%
D$8L
D$8%
fff.
AWAVAUATUSH
t2f;
[]A\A]A^A_
<'uBH
[]A\
<'u*
[]A\H
AVAUATUSH
[]A\A]A^A_
 t2M
[]A\A]A^A_
V8H9
ffff.
AUATA
[]A\A]A^
L9s8
T$0H
L$0H
A\A]A^
T$0H
L$0H
d$ H
fffff.
<Ntd~B<ft^<n
l$ H
<0t,
 u9@
'tc@
/t=@
l$ H
d$(L
l$0L
t$8L
|$@H
< tC~:</
l$ H
d$(L
l$0L
t$8L
|$@H
<>toH
 ucA
AWAVI
ATUSH
|$ H
t$ L
tSM9
[]A\A]A^A_
AWAVAUATI
T$ L
T$ H
D$`H
T$(I
T$@H
T$ L
|$(E1
T$ H
[]A\A]A^A_
|$8H
|$(I
|$(M
T$4E1
D$`<1
D$a/
D$@H
t$8H
|$(E1
D$4E1
t$8H
|$(E1
|$(H
t$8L
 uVH
t$8L
 u H
t$8H
|$(L
 tyH
\$0H
l$8L
d$@L
l$HL
t$PH
l$ H
t$ H
[]A\A]
@u9H
AWAVAUATI
l$(I
t$xH
H9N8t#
hH9J8
t$xA
T$0I
T$0H
T$0H
@x u
T$0H
[]A\A]A^A_
|$0H
\$0I
T$0H
T$0H
T$0H
ATUSH
[]A\A]A^A_
\$(L
d$0H
AWAVI
AUATUSH
L$8I
L$ L
L$0H
D$(L
[]A\A]A^A_
u"E1
L$LH
t$(A
L$hH
|$ H
t$ H
H)L$XH
T$XH
L$PO
L$LL
t$(L
D$`I
|$0H
L$`I
F(~WA
|$XH
H;l$ I
ffff.
D$xM
L$0L
D$ H
D$@H
D$ 1
D$ u
D$xH
|$ L
H9D$
AVAUATUSH
|$ H
[]A\A]A^A_
D$8H
L$(H
L$@H
T$8I9
%Qy 
none
$ + 
H!D$(
H	D$(
H!D$(H
D$(I
AWAVAUATUSH
|$(H
t$ H
T$4H
DT$4
DT$4E1
T$4t'H
L$PH
[]A\A]A^A_
D$(H
t'<:
H;T$
t$ H
t$4H
</t2
/u8A
<.tpD
\$H+\$(
</tY<.
H+\$
L$@Hc
/t-H
fffff.
<$tS1
l$ L
t$(L
|$0H
fff.
AWAVI
ATUH
[]A\A]A^A_
AUE1
=j~ 
ATUH
AWAVAUATUH
WXdH
[]A\A]A^A_
D$(%
ffffff.
AWAVAUI
[]A\A]A^A_
 uDA
$A;U
t Ic
\$(I
L$PH
L$PH
fA9D$
L$PH
:-tmIc
fffff.
-o\ 
=h\ 
l$ L
t$(L
|$0H
ntpkey_%s_%s
%s->%s
%s %d %d %lu
%s		%d %d %lu
%s				%d %d %lu
%s						%d %d %lu
ntpkey_%s_%s.%lu
Write
# %s
# %s
Generating certificate %s
commonName
Assign key fails
critical,CA:TRUE
X509v3 Basic Constraints
%s: %s
Add extension field fails
digitalSignature,keyCertSign
X509v3 Key Usage
X509v3 Subject Key Identifier
X509v3 Extended Key Usage
%scert
Birthdays %d
Birthday keys rejected %d
Duplicate keys rejected %d
Duplicate keys rejected %d
Generating g[i] parameters
MVpar
Revoke key %d
MVkey%d
ntpkey_%s_%s.%lu
GQpar
RSA generate keys fails
IFFpar
DSA generate keys fails
DSAkey
Invalid RSA key
RSAkey
Invalid %s key type %s
Generating MD5 keys...
MD5key
%2d MD5 %16s	# MD5 key
Using OpenSSL version %lx
private
trustRoot
RAND_file_name %s
Random seed file %s %u bytes
host
sign
ntpkey_host_%s
Host key
Using host key %s
ntpkey_sign_%s
Sign key
Using sign key %s
Using host key as sign key
ntpkey_iff_%s
IFF parameters
Using IFF parameters %s
ntpkey_gq_%s
GQ parameters
Using GQ parameters %s
ntpkey_cert_%s
RSA-MD5
Cert 
Using scheme %s from %s
ntpkey_IFFkey_%s.%s
Writing new IFF key %s
Generating new %s file and link
Verify %s certificate fails
Generating MV parameters for %d keys (%d bits)...
Generating polynomial coefficients for %d roots (%d bits)
Confirm prod(g[i]^(x[j]^i)) = 1 for all i, j: %s
Updating GQ keys (%d bits)...
Confirm g^k = v^r y^b mod n: %s
Confirm u^b (u^-1)^b = 1 mod n: %s
Generating GQ parameters (%d bits)...
Generating IFF parameters (%d bits)...
DSA generate parameters fails
Generating IFF keys (%d bits)...
Confirm g^k = g^(k + b r) g^(q - b) r: %s
Confirm g^(q - b) g^b = 1 mod p: %s
Generating DSA parameters (%d bits)...
Generating DSA keys (%d bits)...
Generating RSA keys (%d bits)...
OpenSSL version mismatch. Built against %lx, you have %lx
RAND_load_file %s not found or empty
Invalid digest/signature combination %s
@%s error:  %s option value ``%s''is out of range.
%sit must lie in the range: %d to %d
				  
$HOME
NTP_KEYGEN
.ntprc
ntp-keygen copyright (c) 1970-2008 David L. Mills and/or others, all rights reserved
see html/copyright.html
ntp-keygen (ntp) - Create a NTP host key - Ver. 4.2.4p5
ntp-keygen (ntp) - Create a NTP host key - Ver. 4.2.4p5
USAGE:  %s [ -<flag> [<val>] | --<name>[{=| }<val>] ]...
If there is no new host key, look for an existing one.
If one is not found, create it.
http://bugs.ntp.isc.org, bugs@ntp.org
certificate scheme
CERTIFICATE
certificate
Increase output debug message level
DEBUG_LEVEL
debug-level
Set the output debug message level
SET_DEBUG_LEVEL
set-debug-level
Write identity keys
ID_KEY
id-key
Generate GQ parameters and keys
GQ_PARAMS
gq-params
update GQ keys
GQ_KEYS
gq-keys
generate RSA host key
HOST_KEY
host-key
generate IFF parameters
IFFKEY
iffkey
set issuer name
ISSUER_NAME
issuer-name
generate MD5 keys
MD5KEY
md5key
modulus
MODULUS
modulus
generate PC private certificate
PVT_CERT
pvt-cert
output private password
PVT_PASSWD
pvt-passwd
input private password
GET_PVT_PASSWD
get-pvt-passwd
generate sign key (RSA or DSA)
SIGN_KEY
sign-key
set subject name
SUBJECT_NAME
subject-name
trusted certificate (TC scheme)
TRUSTED_CERT
trusted-cert
generate <num> MV parameters
MV_PARAMS
mv-params
update <num> MV keys
MV_KEYS
mv-keys
Output version information and exit
version
Display usage information and exit
help
Extended usage information passed thru pager
more-help
Save the option state to a config file
save-opts
Load options from a config file
LOAD_OPTS
no-load-opts
 [arg]
AUTOOPTS_USAGE
autoopts
   -%c
  %s
%%-%ds
malloc of %d bytes failed
%s/%s
%-18s
  %d
false
true
typeset -x -i %s_
=%1$lu # 0x%1$lX
set --
 '%s'
'\''
OPTION_CT=0
VERSION
OPT_ARG_NEEDED=YES
OPT_ARG_NEEDED=OK
LONGUSAGE
OPT_ARG_NEEDED=NO
option
flag
/tmp/use.%lu
PAGER
more
INVALID-%d
%s_%s_TEXT='
SHELL
/bin/sh
%A %B %e, %Y at %r %Z
#! %s
env | grep '^%s_'
</%s>
[%s]
PATH
%s%s
POSIXLY_CORRECT
Automated Options version %s, copyright (c) 1999-2007 Bruce Korb
AO_CURRENT.AO_REVISION
%s WARNING:  cannot save options - 
export %s_%s_%d
%s_%s_%d=
%1$s_%2$s_CT=%3$d
export %1$s_%2$s_CT
%1$s_%2$s_MODE='%3$s'
export %1$s_%2$s_MODE
%1$s_%2$s='%3$s'
export %1$s_%2$s
export %s_%s
%s_%s=
%1$s_%2$s=%3$s
export %1$s_%2$s
%1$s_%2$s=%3$d # 0x%3$X
export %1$s_%2$s
OPTION_CT=%d
export OPTION_CT
%1$s /tmp/use.%2$lu ; rm -f /tmp/use.%2$lu
OPT_PROCESS=true
OPT_ARG="$1"
while ${OPT_PROCESS} && [ $# -gt 0 ]
    OPT_ELEMENT=''
    OPT_ARG_VAL=''
    case "${OPT_ARG}" in
    -- )
        OPT_PROCESS=false
        shift
        ;;
    --* )
        OPT_CODE=`echo "X${OPT_ARG}"|sed 's/^X-*//'`
        shift
        OPT_ARG="$1"
        case "${OPT_CODE}" in *=* )
            OPT_ARG_VAL=`echo "${OPT_CODE}"|sed 's/^[^=]*=//'`
            OPT_CODE=`echo "${OPT_CODE}"|sed 's/=.*$//'` ;; esac
        case "${OPT_ARG_NEEDED}" in
        NO )
            OPT_ARG_VAL=''
            ;;
        YES )
            if [ -z "${OPT_ARG_VAL}" ]
            then
                if [ $# -eq 0 ]
                then
                    echo No argument provided for ${OPT_NAME} option >&2
                    echo "$%s_USAGE_TEXT"
                    exit 1
                fi
                OPT_ARG_VAL="${OPT_ARG}"
                shift
                OPT_ARG="$1"
            fi
            ;;
        OK )
            if [ -z "${OPT_ARG_VAL}" ] && [ $# -gt 0 ]
            then
                case "${OPT_ARG}" in -* ) ;; * )
                    OPT_ARG_VAL="${OPT_ARG}"
                    shift
                    OPT_ARG="$1" ;; esac
            fi
            ;;
        esac
        ;;
    * )
         OPT_PROCESS=false
         ;;
    esac
OPT_ARG="$1"
while [ $# -gt 0 ]
    OPT_ELEMENT=''
    OPT_ARG_VAL=''
    OPT_ARG="${1}"
    -* )
        OPT_CODE=`echo "X${OPT_ARG}" | sed 's/X-\(.\).*/\1/'`
        OPT_ARG=` echo "X${OPT_ARG}" | sed 's/X-.//'`
        case "${OPT_ARG_NEEDED}" in
        NO )
            if [ -n "${OPT_ARG}" ]
            then
                OPT_ARG=-"${OPT_ARG}"
            else
                shift
                OPT_ARG="$1"
            fi
            ;;
        YES )
            if [ -n "${OPT_ARG}" ]
            then
                OPT_ARG_VAL="${OPT_ARG}"
            else
                if [ $# -eq 0 ]
                then
                    echo No argument provided for ${OPT_NAME} option >&2
                    echo "$%s_USAGE_TEXT"
                    exit 1
                fi
                shift
                OPT_ARG_VAL="$1"
            fi
            shift
            OPT_ARG="$1"
            ;;
        OK )
            if [ -n "${OPT_ARG}" ]
            then
                OPT_ARG_VAL="${OPT_ARG}"
                shift
                OPT_ARG="$1"
            else
                shift
                if [ $# -gt 0 ]
                then
                    case "$1" in -* ) ;; * )
                        OPT_ARG_VAL="$1"
                        shift ;; esac
                    OPT_ARG="$1"
                fi
            fi
            ;;
        esac
    if [ -n "${OPT_ARG_VAL}" ]
    then
        eval %1$s_${OPT_NAME}${OPT_ELEMENT}="'${OPT_ARG_VAL}'"
        export %1$s_${OPT_NAME}${OPT_ELEMENT}
    fi
done
unset OPT_PROCESS || :
unset OPT_ELEMENT || :
unset OPT_ARG || :
unset OPT_ARG_NEEDED || :
unset OPT_NAME || :
unset OPT_CODE || :
unset OPT_ARG_VAL || :
%2$s
# # # # # # # # # #
#  END OF AUTOMATED OPTION PROCESSING
# # # # # # # # # # -- do not modify this marker --
# # # # # # # # # # -- do not modify this marker --
#  DO NOT EDIT THIS SECTION
%s OF %s
#  From here to the next `-- do not modify this marker --',
#  the text has been generated %s
#  From the %s option definitions
stdout
if test -z "${%1$s_%2$s}"
then
  %1$s_%2$s_CT=0
else
  %1$s_%2$s_CT=1
  %1$s_%2$s_1="${%1$s_%2$s}"
export %1$s_%2$s_CT
%1$s_%2$s="${%1$s_%2$s-'%3$s'}"
%1$s_%2$s_set=false
export %1$s_%2$s
%1$s_%2$s="${%1$s_%2$s}"
%1$s_%2$s_set=false
export %1$s_%2$s
        case "${OPT_CODE}" in
        * )
            echo Unknown %s: "${OPT_CODE}" >&2
            echo "$%s_USAGE_TEXT"
            exit 1
            ;;
        esac
            echo "$%s_%s_TEXT"
            exit 0
            echo "$%s_LONGUSAGE_TEXT" | ${PAGER-more}
            exit 0
            %s
            if [ -n "${%1$s_%2$s}" ] && ${%1$s_%2$s_set} ; then
                echo Error:  duplicate %2$s option >&2
                echo "$%1$s_USAGE_TEXT"
                exit 1 ; fi
            %1$s_%2$s_set=true
            OPT_NAME='%2$s'
            if [ $%1$s_%2$s_CT -ge %3$d ] ; then
                echo Error:  more than %3$d %2$s options >&2
                echo "$%1$s_USAGE_TEXT"
                exit 1 ; fi
            %1$s_%2$s_CT=`expr ${%1$s_%2$s_CT} + 1`
            OPT_ELEMENT="_${%1$s_%2$s_CT}"
            OPT_NAME='%2$s'
            eval %1$s_%2$s${OPT_ELEMENT}=true
            export %1$s_%2$s${OPT_ELEMENT}
            OPT_ARG_NEEDED=NO
            eval %1$s_%2$s${OPT_ELEMENT}=true
            export %1$s_%2$s${OPT_ELEMENT}
            OPT_ARG_NEEDED=OK
            OPT_ARG_NEEDED=YES
            ;;
        '%s' )
        '%s' | \
            if [ -n "${%1$s_%2$s}" ] && ${%1$s_%2$s_set} ; then
                echo Error:  duplicate %2$s option >&2
                echo "$%1$s_USAGE_TEXT"
                exit 1 ; fi
            %1$s_%2$s_set=true
            %1$s_%2$s='%3$s'
            export %1$s_%2$s
            OPT_NAME='%2$s'
            %1$s_%2$s_CT=0
            OPT_ELEMENT=''
            %1$s_%2$s='%3$s'
            export %1$s_%2$s
            OPT_NAME='%2$s'
        '%c' )
 	:=
 ,|+	
*INVALID*
AutoOpts function called without option descriptor
	This exceeds the compiled library version:  
Automated Options Processing Error!
	%s called AutoOpts function with structure version %d:%d:%d.
	This is less than the minimum library version:  
				- an alternate for %s
%s error:  the keyword `%s' is ambiguous for %s
ambiguous
%s: Command line arguments required
%d %s%s options allowed
version and help options:
Error %d (%s) from the pipe(2) syscall
ERROR: version option argument '%c' invalid.  Use:
	'v' - version only
	'c' - version and copyright
	'n' - version and copyright notice
ERROR:  %s option conflicts with the %s option
%s(optionSaveState): error: cannot allocate %d bytes
				- default option for unnamed options
				- disabled as --%s
				- enabled by default
-equivalence
ERROR:  only 
 - examining environment variables named %s_*
     
Options are specified by doubled hyphens and their name
or by a single hyphen and the flag character.
%%-%ds %%s
fs error %d (%s) on fork - cannot obtain %s usage
File error %d (%s) opening %s for loading options
fs error %d (%s) reading file %s
= = = = = = = =
This incarnation of genshell will produce
a shell script to parse the options for %s:
=Cplx
[=arg]
--%2$s%1$s
%s: illegal option -- %c
%s: %s option -- %s
illegal
AutoOpts ERROR:  invalid option descriptor for %s
words=
cooked
keep
type=
uncooked
integer
nested
string
bool
keyword
				- is a set membership option
%s: option `%s' requires an argument
Equivalenced option '%s' was equivalenced to both
	'%s' and '%s'
				- must appear between %d and %d times
ERROR:  The %s option is required
%s: option `%s' cannot have an argument
%s: Command line arguments not allowed
error %d (%s) creating %s
Options are specified by single or double hyphens and their name.
%s error:  `%s' does not match any %s keywords
				- may appear multiple times
				- may not be preset
   Arg Option-Name    Description
  Flg Arg Option-Name    Description
error %d (%s) stat-ing %s
%s(optionRestore): error: no saved option state
none
'%s' not defined
ERROR:  The %s option must appear %d times
error:  cannot load options from non-regular file %s
%s error:  `%s' is not a recognizable number
 %3s %s
The '-#<number>' option may omit the hash char
one %s%s option allowed
All arguments are named options.
 - reading file %s
please send bug reports to:  %s
				- may NOT appear - preset only
#  preset/initialization file
#  %s#
The following option preset mechanisms are supported:
program
prohibits these options:
Operands and options may be intermixed.  They will be reordered.
ERROR:  %s option requires the %s option
 %3s %-14s %s
requires these options:
   Arg Option-Name   Req?  Description
  Flg Arg Option-Name   Req?  Description
members=
or you may use a numeric representation.  Preceding these with a '!' will
clear the bits, specifying 'none' will clear all bits, and 'all' will set them
all.  Multiple entries may be passed as an option argument list.
      
				- 
				-- and 
				%s
				- may appear up to %d times
The valid "%s" option keywords are:
GENSHELLOPT
genshellopt copyright (c) 1999-2007 Bruce Korb, all rights reserved
genshellopt is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
genshellopt is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
Lesser General Public License for more details.
You should have received a copy of the GNU Lesser General Public
License along with genshellopt.  If not, write to:
	The Free Software Foundation, Inc.,
	51 Franklin Street, Fifth Floor
	Boston, MA  02110-1301, USA.
genshellopt - Generate Shell Option Processing Script - Ver. 1
genshellopt - Generate Shell Option Processing Script - Ver. 1
USAGE:  %s [ -<flag> [<val>] | --<name>[{=| }<val>] ]...
Note that `shell' is only useful if the output file does not already
exist.  If it does, then the shell name and optional first argument
will be extracted from the script file.
If the script file already exists and contains Automated Option Processing
text, the second line of the file through the ending tag will be replaced
by the newly generated text.  The first `#!' line will be regenerated.
autogen-users@lists.sourceforge.net
LONGUSAGE
USAGE
VERSION
Output Script File
SCRIPT
script
Shell name (follows "#!" magic)
SHELL
no-shell
Output version information and exit
version
Display usage information and exit
help
Extended usage information passed thru pager
more-help
strdup of %d byte string failed
realloc of %d bytes at 0x%p failed
AutoOpts lib error: option type not selected
AutoOpts lib error: defaulted to option with optional arg
echo 'Warning:  Cannot load options files' >&2
echo 'Warning:  Cannot save options files' >&2
echo 'Warning:  Cannot suppress the loading of options files' >&2
 !"#$%&'()*+,-./0123456789:;<=>?@abcdefghijklmnopqrstuvwxyz[\]^_`abcdefghijklmnopqrstuvwxyz{|}~
=T/F
=KWd
=Mbr
=num
=str
ntp-keygen.debug
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.ctors
.dtors
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.data
.bss
.gnu_debuglink
