__gmon_start__
_fini
__cxa_finalize
_Jv_RegisterClasses
mod_auth_plugin_init
buffer_init_string
buffer_free
array_free
ldap_unbind_s
config_check_cond
buffer_is_equal_string
strncasecmp
strncmp
array_get_element
buffer_copy_string
buffer_append_string_buffer
buffer_append_string
response_header_insert
http_auth_digest_generate_nonce
strchr
log_error_write
__stack_chk_fail
http_auth_digest_check
http_auth_basic_check
buffer_copy_string_buffer
calloc
buffer_init
auth_ldap_init
__errno_location
strerror
buffer_copy_string_len
ldap_set_option
ldap_err2string
ldap_simple_bind_s
buffer_is_empty
ldap_start_tls_s
memcpy
config_insert_values_global
data_array_init
data_string_init
array_insert_unique
CvtHex
int2hex
MD5_Init
MD5_Update
LI_ltostr
rand
MD5_Final
stream_open
memchr
stream_close
strlen
strcasecmp
get_http_method_name
hex2int
strcmp
stderr
__fprintf_chk
abort
buffer_prepare_copy
__ctype_b_loc
ldap_search_s
ldap_first_entry
ldap_get_dn
ldap_msgfree
__strncpy_chk
crypt
__strncat_chk
__strcat_chk
strncpy
libcrypt.so.1
libldap-2.3.so.0
liblber-2.3.so.0
libc.so.6
_edata
__bss_start
_end
mod_auth.so
GLIBC_2.2.5
GLIBC_2.4
GLIBC_2.3
GLIBC_2.3.4
5bN 
%dN 
%bN 
%ZN 
%RN 
%JN 
%BN 
%:N 
%2N 
%*N 
%"N 
%zM 
%rM 
%jM 
%bM 
%ZM 
%RM 
%JM 
%BM 
%:M 
%2M 
%*M 
%"M 
%zL 
%rL 
%jL 
%bL 
%ZL 
%RL 
%JL 
= L 
ATSubH
%DE 
|$ 1
|$ H
[]A\A]
ffff.
AVAUI
ATUSH
J dH
D$H1
PdfA
P`fA
PbfA
tdE1
T$HdH3
X[]A\A]A^A_
\$ L
EdfA
D$@H
D$@L
E`fA
EbfA
ffff.
l$ L
d$(L
l$0H
AVAUATUSH
D$PH
D$XH
D$pH
T$HH
T$ H9P
[]A\A]A^A_
D$0H
T$0H
D$8u
D$0I
|$@H
|$@H
|$@H
T$(H9P
T$(H
[]A\
\$`H
[]A\A]
|$ H
\$hH
D$pH
t$hH
D$xL
|$pH
H+D$HH;D$@
H+D$HL
L$hL
|$ H
D$pH
D$pH
D$PH
D$xH
D$PH
D$81
D$`H
D$PH+D$8H9D$(
T$(H
D$0H+D$8H
|$0H)
D$XH+D$8H
|$XI)
D$`H+D$XH
L+l$PH
L+d$0I
t$PI
t$0H
t$XH
L$hH
|$ H
fff.
AUATUSH
HcT$
[]A\A]A^A_
AWAVAUATUSL
|$@H
t$(H
|$0H
t$@H
D$PH
D$hH
|$0L
[]A\A]A^A_
D$8A
tNHc]
D$ f
|$0L
|$0L
|$0L
|$0L
|$0L
|$0L
|$0L
|$0L
|$0L
t$ H
|$0M
|$0L
D$ f
|$0L
|$0L
t$ H
|$0E1
|$0L
T$ H
|$0L
|$0L
AWAVAUATM
t$0H
|$8H
T$(L
D$ dH
|$@H
T$@E1
tg<=
t9Hc
=u'H
T$@H
T$@L
T$@I
t$(H
|$8H
T$(H
T$0H
D$@L
|$8H
[]A\A]A^A_
L$@H
|$8L
|$8H
T$@H
T$@H
L$@H
|$8L
L$@H
|$8L
D$@H
T$HH
T$@H
D$ E1
t$(H
|$8E1
T$(H
t$@H
D$HH
H+D$XH
T$HL
D$(f
T$(H
D$(H
t$@H
T$(H
D$(H
D$(H
T$(H
|$8L
T$HA
D$HH
l$`L
T$PH
t$XL
T$PH
t$XH
T$PH
$aprf
VUUUUUUUH
T$PH
t$XH
T$HH
t$(H
|$8H
D$(L
T$(H
|$8L
|$8H
D$(f
|$8H
auth
auth.backend
auth.backend.plain.groupfile
auth.backend.plain.userfile
auth.require
auth.debug
auth.backend.ldap.hostname
auth.backend.ldap.base-dn
auth.backend.ldap.filter
auth.backend.ldap.ca-file
auth.backend.ldap.starttls
Authorization
method
Basic
basic
Digest
mod_auth.c
realm
Basic realm="
WWW-Authenticate
Digest realm="
", nonce="
", qop="auth"
ldap ...
ldap:
ldap startTLS failed:
htpasswd
htdigest
plain
ldap
auth.backend not supported:
the field is unknown in:
ssbs
" <- => "..." ) )
a string was expected for:
auth.backend.ldap.bind-dn
auth.backend.ldap.bind-pw
auth.backend.htdigest.userfile
auth.backend.htpasswd.userfile
auth.backend.ldap.allow-empty-pw
unknown authentification type:
ldap: auth.backend.ldap.filter is missing a replace-operator '$'
Loading CA certificate failed:
auth.require = ( "..." => ( ..., ...) )
auth.require should contain an array as in:
auth.require = ( "..." => ( ..., -> "
auth.require = ( "..." => ( ..., "method" => "..." ) )
the require field is missing in:
auth.require = ( "..." => ( ..., "method" => "...") )
method has to be either "basic" or "digest" in
auth.require = ( "..." => ( ..., "realm" => "..." ) )
auth.require = ( "..." => ( ..., "require" => "..." ) )
opening digest-userfile
sbss
http_auth.c
parsed error in
opening plain-userfile
valid-user
host
host ... (not implemented)
unknown key
group
group ... (not implemented)
unknown  key
nothing matched
username
algorigthm
cnonce
response
digest: missing field
md5-sess
%s.%d: aborted
auth-int
digest: digest mismatch
digest: auth failed for
wrong password
digest: rules did match
digest: auth ok
: is missing in
get_password failed
$apr1$
%s.%d
sssb
filter:
password doesn't match for
rules didn't match
username=
realm=
uri=
algorithm=
qop=
cnonce=
response=
expected 'username:realm:hashed password'
expected 'username:hashed password'
parsing the 'require' section in 'auth.require' failed: valid-user cannot be combined with other require rules
parsing the 'require' section in 'auth.require' failed: a = is missing
parsing the 'require' section in 'auth.require' failed: = out of range
digest: unsupported backend (only htdigest or plain)
digest: (md5-sess: missing field
decodeing base64-string failed
ldap: invalid character (a-zA-Z0-9 allowed) in username:
./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
mod_auth.so.debug
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.ctors
.dtors
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.bss
.gnu_debuglink
