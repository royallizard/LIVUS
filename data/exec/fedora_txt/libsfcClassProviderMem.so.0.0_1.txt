__gmon_start__
_init
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
rLock
MReadLock
wLock
MWriteLock
rUnLock
MReadUnlock
wUnLock
MWriteUnlock
_ptr_sfcb_trace_mask
_sfcb_debug
_sfcb_format_trace
_sfcb_trace
free
UtilFactory
sfcb_mem_namespaces
ClassRegisterFT
memUnlinkEncObj
malloc
MRWInit
__strdup
ClVerifyObjImplLevel
CMPIConstClassFT
calloc
mlogf
isAbstract
strcasecmp
pReg
pthread_once
ClClassGetQualifierCount
ClClassGetQualifierAt
ClClassAddQualifierSpecial
ClClassGetPropertyCount
ClClassGetPropertyAt
ClClassAddProperty
ClObjectGetClSection
ClClassGetPropQualifierCount
ClClassGetPropQualifierAt
ClClassAddPropertyQualifierSpecial
ClClassGetMethodCount
ClClassGetMethodAt
ClClassAddMethod
ClClassGetMethQualifierCount
ClClassGetMethQualifierAt
ClClassAddMethodQualifier
ClClassGetMethParameterCount
ClClassGetMethParameterAt
ClClassAddMethParameter
ClClassGetMethParamQualifierCount
ClClassGetMethParamQualifierAt
ClClassAddMethParamQualifier
ClClassNew
ClClassFreeClass
traverseChildren
sfcbSem
semRelease
ClassProvider_Create_ClassMI
ClassProvider_Create_MethodMI
sfcBrokerStart
old_mask
colorTrace
interop_classes
libsfcBrokerCore.so.0
libslp.so.1
libssl.so.10
libcurl.so.4
libsfcUtil.so.0
libdl.so.2
libpthread.so.0
libc.so.6
__stack_chk_fail
_edata
__bss_start
_end
libsfcClassProviderMem.so.0
/usr/lib/sfcb
GLIBC_2.0
SFCUTIL_1.1
GLIBC_2.1.3
GLIBC_2.4
t$,1
D$,e3
d$<[^_]
UWVS
[^_]
D$,1
D$,e3
d$<[^_]
|$\1
D$\e3
d$l[^_]
[^_]
d$,[^_]
d$,[^_]
d$,[^_]
L$L1
D$Le3
d$\[^_]
UWVS
D$,1
L$,e3
d$<[^_]
UWVS
D$<1
L$<e3
d$L[^_]
UWVS
D$\1
\$\e3
d$l[^_]
UWVS
D$\1
\$\e3
d$l[^_]
D$,1
D$8~cf
9t$8u
9l$<
9t$4u
D$Dk
D$4~\
9l$4u
D$89D$@
D$L9D$X
[^_]
UWVS
D$<1
L$<e3
d$L[^_]
UWVS
[^_]
UWVS
D$|1
L$8tL
T$|e3
[^_]
L$8tc
getClass
Entering: %s
classProviderMem.c
--- classname %s cReg %p
Leaving: %s
DMY_
repCandidate
cim_indicationfilter
cim_indicationsubscription
loopOnChildCount
loopOnChildChars
--- class %s
ClassProviderDeleteClass
ClassProviderGetClass
--- ClassName="%s"
--- Class found
--- Class not found
ClassProviderEnumClasss
CMPIInvocationFlags
ClassProviderEnumClassNames
$ClassProvider$
ClassProviderCreateClass
ClassProviderInvokeMethod
getchildren
class
--- getchildren %s
getallchildren
classignoreprov
--- getallchildren %s
--- count %d
--- loop %s
getassocs
ischild
listnamespaces
nslist
_startup
methodClassProvider
ClassClassProvider
--- %s is in wrong endian format - namespace skipped
--- %s contains non-class record(s) - namespace skipped
--- %s contains unsupported object implementation format (%d) - namespace skipped
--- %s contains invalid record(s) - namespace skipped
--- ClassProvider for %s (%d.%d-%d) using %ld bytes
--- ClassProvider for %s (no-version) using %ld bytes
--- ClassProvider: namespace hash table not initialized
--- ClassProvider: Invalid invokeMethod request %s
root/interop
CIM_ElementConformsToProfile
CIM_ListenerDestination
__Namespace
CIM_IndicationService
CIM_ObjectManager
CIM_WBEMService
CIM_ListenerDestinationCIMXML
SFCB_ServiceAffectsElement
CIM_IndicationSubscription
CIM_HostedService
CIM_ManagedSystemElement
CIM_ServiceAccessPoint
SFCB_RegisteredProfile
Test_Indication
CIM_Capabilities
CIM_IndicationFilter
CIM_InstModification
CIM_RegisteredProfile
CIM_ProcessIndication
CIM_SubProfileRequiresProfile
CIM_InstIndication
SFCB_IndicationSubscription
CIM_HostedDependency
CIM_EnabledLogicalElement
CIM_ManagedElement
CIM_ServiceAffectsElement
CIM_InstCreation
CIM_IndicationHandler
CIM_Namespace
SFCB_ElementCapabilities
CIM_Indication
CIM_ReferencedProfile
CIM_Dependency
CIM_RegisteredSubProfile
CIM_IndicationHandlerCIMXML
CIM_LogicalElement
CIM_Service
CIM_ElementCapabilities
SFCB_IndicationServiceCapabilities
CIM_ObjectManagerCommunicationMechanism
CIM_IndicationServiceCapabilities
CIM_AbstractIndicationSubscription
;*2$"
CIM_ElementCapabilities
Version
2.22.0
UMLPackagePath
CIM::Core::Capabilities
Description
ElementCapabilities represents the association between ManagedElements and their Capabilities. Note that the cardinality of the ManagedElement reference is Min(1), Max(1). This cardinality mandates the instantiation of the ElementCapabilities association for the referenced instance of Capabilities. ElementCapabilities describes the existence requirements and context for the referenced instance of ManagedElement. Specifically, the ManagedElement MUST exist and provides the context for the Capabilities.
ManagedElement
CIM_ManagedElement
Description
The managed element.
Capabilities
CIM_Capabilities
Description
The Capabilities object associated with the element.
Characteristics
Description
Characteristics provides descriptive information about the Capabilities. when the value 2 "Default" is specified, the associated Capabilities shall represent the default capabilities of the associated Managed Element \nwhen the value 2 "Default" is not specified, the Capabilities instance may represent the default capabilities of the Managed Element\nWhen the value 3 "Current" is specified, the associated Capabilities shall represent the current capabilities of the associated Managed Element\nWhen the value 3 "Current" is not specified, the Capabilities instance may represent the current capabilities of the Managed Element.
ValueMap
32768..65535
Values
Default
Current
DMTF Reserved
Vendor Specific
subsssi
. Specifical
CIM_Service
CIM_EnabledLogicalElement
Version
2.14.0
UMLPackagePath
CIM::Core::Service
Description
A Service is a LogicalElement that represents the availability of functionality that can be managed. This functionality may be provided by a seperately modeled entity such as a LogicalDevice or a SoftwareFeature, or both. The modeled Service typically provides only functionality required for management of itself or the elements it affects.
TransitioningToState
Description
TransitioningToState indicates the target state to which the instance is transitioning. \nA value of 5 "No Change" shall indicate that no transition is in progress.A value of 12 "Not Applicable" shall indicate the implementation does not support representing ongoing transitions. \nA value other than 5 or 12 shall identify the state to which the element is in the process of transitioning.
ValueMap
Values
Unknown
Enabled
Disabled
Shut Down
No Change
Offline
Test
Defer
Quiesce
Reboot
Reset
Not Applicable
DMTF Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.RequestStateChange
CIM_EnabledLogicalElement.RequestedState
CIM_EnabledLogicalElement.EnabledState
AvailableRequestedStates
Description
AvailableRequestedStates indicates the possible values for the RequestedState parameter of the method RequestStateChange, used to initiate a state change. The values listed shall be a subset of the values contained in the RequestedStatesSupported property of the associated instance of CIM_EnabledLogicalElementCapabilities where the values selected are a function of the current state of the CIM_EnabledLogicalElement. This property may be non-null if an implementation is able to advertise the set of possible values as a function of the current state. This property shall be null if an implementation is unable to determine the set of possible values as a function of the current state.
ValueMap
Values
Enabled
Disabled
Shut Down
Offline
Test
Defer
Quiesce
Reboot
Reset
DMTF Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.RequestStateChange
CIM_EnabledLogicalElementCapabilities.RequestedStatesSupported
TimeOfLastStateChange
Description
The date or time when the EnabledState of the element last changed. If the state of the element has not changed and this property is populated, then it must be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property must not be updated.
EnabledDefault
Write
Description
An enumerated value indicating an administrator\'s default or startup configuration for the Enabled State of an element. By default, the element is "Enabled" (value=2).
ValueMap
32768..65535
Values
Enabled
Disabled
Not Applicable
Enabled but Offline
No Default
Quiesce
DMTF Reserved
Vendor Reserved
RequestedState
Description
RequestedState is an integer enumeration that indicates the last requested or desired state for the element, irrespective of the mechanism through which it was requested. The actual state of the element is represented by EnabledState. This property is provided to compare the last requested and current enabled or disabled states. Note that when EnabledState is set to 5 ("Not Applicable"), then this property has no meaning. Refer to the EnabledState property description for explanations of the values in the RequestedState enumeration. \n"Unknown" (0) indicates the last requested state for the element is unknown.\nNote that the value "No Change" (5) has been deprecated in lieu of indicating the last requested state is "Unknown" (0). If the last requested or desired state is unknown, RequestedState should have the value "Unknown" (0), but may have the value "No Change" (5).Offline (6) indicates that the element has been requested to transition to the Enabled but Offline EnabledState. \nIt should be noted that there are two new values in RequestedState that build on the statuses of EnabledState. These are "Reboot" (10) and "Reset" (11). Reboot refers to doing a "Shut Down" and then moving to an "Enabled" state. Reset indicates that the element is first "Disabled" and then "Enabled". The distinction between requesting "Shut Down" and "Disabled" should also be noted. Shut Down requests an orderly transition to the Disabled state, and might involve removing power, to completely erase any existing state. The Disabled state requests an immediate disabling of the element, such that it will not execute or accept any commands or processing requests. \n\nThis property is set as the result of a method invocation (such as Start or StopService on CIM_Service), or can be overridden and defined as WRITEable in a subclass. The method approach is considered superior to a WRITEable property, because it allows an explicit invocation of the operation and the return of a result code. \n\nIf knowledge of the last RequestedState is not supported for the EnabledLogicalElement, the property shall be NULL or have the value 12 "Not Applicable".
ValueMap
32768..65535
Values
Unknown
Enabled
Disabled
Shut Down
No Change
Offline
Test
Deferred
Quiesce
Reboot
Reset
Not Applicable
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
OtherEnabledState
Description
A string that describes the enabled or disabled state of the element when the EnabledState property is set to 1 ("Other"). This property must be set to null when EnabledState is any value other than 1.
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
EnabledState
Description
EnabledState is an integer enumeration that indicates the enabled and disabled states of an element. It can also indicate the transitions between these requested states. For example, shutting down (value=4) and starting (value=10) are transient states between enabled and disabled. The following text briefly summarizes the various enabled and disabled states: \nEnabled (2) indicates that the element is or could be executing commands, will process any queued commands, and queues new requests. \nDisabled (3) indicates that the element will not execute commands and will drop any new requests. \nShutting Down (4) indicates that the element is in the process of going to a Disabled state. \nNot Applicable (5) indicates the element does not support being enabled or disabled. \nEnabled but Offline (6) indicates that the element might be completing commands, and will drop any new requests. \nTest (7) indicates that the element is in a test state. \nDeferred (8) indicates that the element might be completing commands, but will queue any new requests. \nQuiesce (9) indicates that the element is enabled but in a restricted mode.\nStarting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.
ValueMap
11..32767
32768..65535
Values
Unknown
Other
Enabled
Disabled
Shutting Down
Not Applicable
Enabled but Offline
In Test
Deferred
Quiesce
Starting
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.OtherEnabledState
PrimaryStatus
Description
PrimaryStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents. \nPrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. "Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"OK" indicates the ManagedElement is functioning normally. \n"Degraded" indicates the ManagedElement is functioning below normal. \n"Error" indicates the ManagedElement is in an Error condition.
ValueMap
0x8000..
Values
Unknown
Degraded
Error
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_ManagedSystemElement.DetailedStatus
CIM_ManagedSystemElement.HealthState
OperatingStatus
Description
OperatingStatus provides a current status value for the operational condition of the element and can be used for providing more detail with respect to the value of EnabledState. It can also provide the transitional states when an element is transitioning from one state to another, such as when an element is transitioning between EnabledState and RequestedState, as well as other transitional conditions.\nOperatingStatus consists of one of the following values: Unknown, Not Available, In Service, Starting, Stopping, Stopped, Aborted, Dormant, Completed, Migrating, Emmigrating, Immigrating, Snapshotting. Shutting Down, In Test \nA Null return indicates the implementation (provider) does not implement this property. \n"Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"None" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"Servicing" describes an element being configured, maintained, cleaned, or otherwise administered. \n"Starting" describes an element being initialized. \n"Stopping" describes an element being brought to an orderly stop. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Completed" indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded in the PrimaryStatus so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \n"Migrating" element is being moved between host elements. \n"Immigrating" element is being moved to new host element. \n"Emigrating" element is being moved away from host element. \n"Shutting Down" describes an element being brought to an abrupt stop. \n"In Test" element is performing test functions. \n"Transitioning" describes an element that is between states, that is, it is not fully available in either its previous state or its next state. This value should be used if other values indicating a transition to a specific state are not applicable.\n"In Service" describes an element that is in service and operational.
ValueMap
0x8000..
Values
Unknown
Not Available
Servicing
Starting
Stopping
Stopped
Aborted
Dormant
Completed
Migrating
Emigrating
Immigrating
Snapshotting
Shutting Down
In Test
Transitioning
In Service
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
DetailedStatus
Description
DetailedStatus compliments PrimaryStatus with additional status detail. It consists of one of the following values: Not Available, No Additional Information, Stressed, Predictive Failure, Error, Non-Recoverable Error, SupportingEntityInError. Detailed status is used to expand upon the PrimaryStatus of the element. \nA Null return indicates the implementation (provider) does not implement this property. \n"Not Available" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"No Additional Information" indicates that the element is functioning normally as indicated by PrimaryStatus = "OK". \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, and so on. \n"Predictive Failure" indicates that an element is functioning normally but a failure is predicted in the near future. \n"Non-Recoverable Error " indicates that this element is in an error condition that requires human intervention. \n"Supporting Entity in Error" indicates that this element might be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems.
ValueMap
0x8000..
Values
Not Available
No Additional Information
Stressed
Predictive Failure
Non-Recoverable Error
Supporting Entity in Error
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.PrimaryStatus
CIM_ManagedSystemElement.HealthState
CommunicationStatus
Description
CommunicationStatus indicates the ability of the instrumentation to communicate with the underlying ManagedElement. CommunicationStatus consists of one of the following values: Unknown, None, Communication OK, Lost Communication, or No Contact. \nA Null return indicates the implementation (provider) does not implement this property. \n"Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"Not Available" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"Communication OK " indicates communication is established with the element, but does not convey any quality of service. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the Managed Element is known to exist and has been contacted successfully in the past, but is currently unreachable.
ValueMap
0x8000..
Values
Unknown
Not Available
Communication OK
Lost Communication
No Contact
DMTF Reserved
Vendor Reserved
HealthState
Description
Indicates the current health of the element. This attribute expresses the health of this element but not necessarily that of its subcomponents. The possible values are 0 to 30, where 5 means the element is entirely healthy and 30 means the element is completely non-functional. The following continuum is defined: \n"Non-recoverable Error" (30) - The element has completely failed, and recovery is not possible. All functionality provided by this element has been lost. \n"Critical Failure" (25) - The element is non-functional and recovery might not be possible. \n"Major Failure" (20) - The element is failing. It is possible that some or all of the functionality of this component is degraded or not working. \n"Minor Failure" (15) - All functionality is available but some might be degraded. \n"Degraded/Warning" (10) - The element is in working order and all functionality is provided. However, the element is not working to the best of its abilities. For example, the element might not be operating at optimal performance or it might be reporting recoverable errors. \n"OK" (5) - The element is fully functional and is operating within normal operational parameters and without error. \n"Unknown" (0) - The implementation cannot report on HealthState at this time. \nDMTF has reserved the unused portion of the continuum for additional HealthStates in the future.
ValueMap
Values
Unknown
Degraded/Warning
Minor failure
Major failure
Critical failure
Non-recoverable error
DMTF Reserved
Status
Deprecated
CIM_ManagedSystemElement.OperationalStatus
Description
A string indicating the current status of the object. Various operational and non-operational statuses are defined. This property is deprecated in lieu of OperationalStatus, which includes the same semantics in its enumeration. This change is made for 3 reasons: \n1) Status is more correctly defined as an array. This definition overcomes the limitation of describing status using a single value, when it is really a multi-valued property (for example, an element might be OK AND Stopped. \n2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values. \n3) The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, Status was grandfathered into the Schema. Use of the deprecated qualifier allows the maintenance of the existing property, but also permits an improved definition using OperationalStatus.
ValueMap
Error
Degraded
Unknown
Pred Fail
Starting
Stopping
Service
Stressed
NonRecover
No Contact
Lost Comm
Stopped
MaxLen
StatusDescriptions
Description
Strings describing the various OperationalStatus array values. For example, if "Stopping" is the value assigned to OperationalStatus, then this property may contain an explanation as to why an object is being stopped. Note that entries in this array are correlated with those at the same array index in OperationalStatus.
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.OperationalStatus
OperationalStatus
Description
Indicates the current statuses of the element. Various operational statuses are defined. Many of the enumeration\'s values are self-explanatory. However, a few are not and are described here in more detail. \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, and so on. \n"Predictive Failure" indicates that an element is functioning nominally but predicting a failure in the near future. \n"In Service" describes an element being configured, maintained, cleaned, or otherwise administered. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is currently unreachable. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Supporting Entity in Error" indicates that this element might be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems. \n"Completed" indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \n"Power Mode" indicates that the element has additional power model information contained in the Associated PowerManagementService association. \nOperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent approach to enumerations, to address implementation needs for an array property, and to provide a migration path from today\'s environment to the future. This change was not made earlier because it required the deprecated qualifier. Due to the widespread use of the existing Status property in management applications, it is strongly recommended that providers or instrumentation provide both the Status and OperationalStatus properties. Further, the first value of OperationalStatus should contain the primary status for the element. When instrumented, Status (because it is single-valued) should also provide the primary status of the element.
ValueMap
0x8000..
Values
Unknown
Other
Degraded
Stressed
Predictive Failure
Error
Non-Recoverable Error
Starting
Stopping
Stopped
In Service
No Contact
Lost Communication
Aborted
Dormant
Supporting Entity in Error
Completed
Power Mode
DMTF Reserved
Vendor Reserved
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.StatusDescriptions
InstallDate
Description
A datetime value that indicates when the object was installed. Lack of a value does not indicate that the object is not installed.
MappingStrings
MIF.DMTF|ComponentID|001.5
InstanceID
Description
InstanceID is an optional property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace. Various subclasses of this class may override this property to make it required, or a key. Such subclasses may also modify the preferred algorithms for ensuring uniqueness that are defined below.\nTo ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be reused to identify different underlying (real-world) elements. If not null and the above "preferred" algorithm is not used, the defining entity must assure that the resulting InstanceID is not reused across any InstanceIDs produced by this or other providers for the NameSpace of this instance. \nIf not set to null for DMTF-defined instances, the "preferred" algorithm must be used with the <OrgID> set to CIM.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
Description
Description
The Description property provides a textual description of the object.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. \nNote that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
SystemCreationClassName
Description
The CreationClassName of the scoping System.
MaxLen
Propagated
CIM_System.CreationClassName
SystemName
Description
The Name of the scoping System.
MaxLen
Propagated
CIM_System.Name
CreationClassName
Description
CreationClassName indicates the name of the class or the subclass that is used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
Name
Override
Name
Description
The Name property uniquely identifies the Service and provides an indication of the functionality that is managed. This functionality is described in more detail in the Description property of the object.
MaxLen
PrimaryOwnerName
Write
Description
The name of the primary owner for the service, if one is defined. The primary owner is the initial support contact for the Service.
MaxLen
MappingStrings
MIF.DMTF|General Information|001.3
PrimaryOwnerContact
Write
Description
A string that provides information on how the primary owner of the Service can be reached (for example, phone number, e-mail address, and so on).
MaxLen
MappingStrings
MIF.DMTF|General Information|001.4
StartMode
Deprecated
CIM_Service.EnabledDefault
Description
Note: The use of this element is deprecated in lieu of the EnabledDefault property that is inherited from EnabledLogicalElement. The EnabledLogicalElement addresses the same semantics. The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property. To remain compatible with those implementations, StartMode was grandfathered into the schema. Use of the deprecated qualifier allows the maintenance of the existing property but also permits an improved, clarified definition using EnabledDefault. \nDeprecated description: StartMode is a string value that indicates whether the Service is automatically started by a System, an Operating System, and so on, or is started only upon request.
ValueMap
Automatic
Manual
MaxLen
Started
Description
Started is a Boolean that indicates whether the Service has been started (TRUE), or stopped (FALSE).
RequestStateChange
Description
Requests that the state of the element be changed to the value specified in the RequestedState parameter. When the requested state change takes place, the EnabledState and RequestedState of the element will be the same. Invoking the RequestStateChange method multiple times could result in earlier requests being overwritten or lost. \nA return code of 0 shall indicate the state change was successfully initiated. \nA return code of 3 shall indicate that the state transition cannot complete within the interval specified by the TimeoutPeriod parameter. \nA return code of 4096 (0x1000) shall indicate the state change was successfully initiated, a ConcreteJob has been created, and its reference returned in the output parameter Job. Any other return code indicates an error condition.
ValueMap
4096
4097
4098
4099
4100..32767
32768..65535
Values
Completed with No Error
Not Supported
Unknown or Unspecified Error
Cannot complete within Timeout Period
Failed
Invalid Parameter
In Use
DMTF Reserved
Method Parameters Checked - Job Started
Invalid State Transition
Use of Timeout Parameter Not Supported
Busy
Method Reserved
Vendor Specific
ModelCorrespondence
CIM_EnabledLogicalElement.RequestedState
RequestedState
Description
The state requested for the element. This information will be placed into the RequestedState property of the instance if the return code of the RequestStateChange method is 0 (\'Completed with No Error\'), or 4096 (0x1000) (\'Job Started\'). Refer to the description of the EnabledState and RequestedState properties for the detailed explanations of the RequestedState values.
ValueMap
32768..65535
Values
Enabled
Disabled
Shut Down
Offline
Test
Defer
Quiesce
Reboot
Reset
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.RequestedState
CIM_ConcreteJob
Description
May contain a reference to the ConcreteJob created to track the state transition initiated by the method invocation.
TimeoutPeriod
Description
A timeout period that specifies the maximum amount of time that the client expects the transition to the new state to take. The interval format must be used to specify the TimeoutPeriod. A value of 0 or a null parameter indicates that the client has no time requirements for the transition. \nIf this property does not contain 0 or null and the implementation does not support this parameter, a return code of \'Use Of Timeout Parameter Not Supported\' shall be returned.
StartService
Description
The StartService method places the Service in the started state. Note that the function of this method overlaps with the RequestedState property. RequestedState was added to the model to maintain a record (such as a persisted value) of the last state request. Invoking the StartService method should set the RequestedState property appropriately. The method returns an integer value of 0 if the Service was successfully started, 1 if the request is not supported, and any other number to indicate an error. In a subclass, the set of possible return codes could be specified using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated can also be specified in the subclass as a Values array qualifier. \n\nNote: The semantics of this method overlap with the RequestStateChange method that is inherited from EnabledLogicalElement. This method is maintained because it has been widely implemented, and its simple "start" semantics are convenient to use.
StopService
Description
The StopService method places the Service in the stopped state. Note that the function of this method overlaps with the RequestedState property. RequestedState was added to the model to maintain a record (such as a persisted value) of the last state request. Invoking the StopService method should set the RequestedState property appropriately. The method returns an integer value of 0 if the Service was successfully stopped, 1 if the request is not supported, and any other number to indicate an error. In a subclass, the set of possible return codes could be specified using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated can also be specified in the subclass as a Values array qualifier. \n\nNote: The semantics of this method overlap with the RequestStateChange method that is inherited from EnabledLogicalElement. This method is maintained because it has been widely implemented, and its simple "stop" semantics are convenient to use.
er"). This p
CIM_LogicalElement
CIM_ManagedSystemElement
Version
2.6.0
UMLPackagePath
CIM::Core::CoreElements
Description
CIM_LogicalElement is a base class for all the components of a System that represent abstract system components, such as Files, Processes, or LogicalDevices.
PrimaryStatus
Description
PrimaryStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents. \nPrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. "Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"OK" indicates the ManagedElement is functioning normally. \n"Degraded" indicates the ManagedElement is functioning below normal. \n"Error" indicates the ManagedElement is in an Error condition.
ValueMap
0x8000..
Values
Unknown
Degraded
Error
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_ManagedSystemElement.DetailedStatus
CIM_ManagedSystemElement.HealthState
OperatingStatus
Description
OperatingStatus provides a current status value for the operational condition of the element and can be used for providing more detail with respect to the value of EnabledState. It can also provide the transitional states when an element is transitioning from one state to another, such as when an element is transitioning between EnabledState and RequestedState, as well as other transitional conditions.\nOperatingStatus consists of one of the following values: Unknown, Not Available, In Service, Starting, Stopping, Stopped, Aborted, Dormant, Completed, Migrating, Emmigrating, Immigrating, Snapshotting. Shutting Down, In Test \nA Null return indicates the implementation (provider) does not implement this property. \n"Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"None" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"Servicing" describes an element being configured, maintained, cleaned, or otherwise administered. \n"Starting" describes an element being initialized. \n"Stopping" describes an element being brought to an orderly stop. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Completed" indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded in the PrimaryStatus so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \n"Migrating" element is being moved between host elements. \n"Immigrating" element is being moved to new host element. \n"Emigrating" element is being moved away from host element. \n"Shutting Down" describes an element being brought to an abrupt stop. \n"In Test" element is performing test functions. \n"Transitioning" describes an element that is between states, that is, it is not fully available in either its previous state or its next state. This value should be used if other values indicating a transition to a specific state are not applicable.\n"In Service" describes an element that is in service and operational.
ValueMap
0x8000..
Values
Unknown
Not Available
Servicing
Starting
Stopping
Stopped
Aborted
Dormant
Completed
Migrating
Emigrating
Immigrating
Snapshotting
Shutting Down
In Test
Transitioning
In Service
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
DetailedStatus
Description
DetailedStatus compliments PrimaryStatus with additional status detail. It consists of one of the following values: Not Available, No Additional Information, Stressed, Predictive Failure, Error, Non-Recoverable Error, SupportingEntityInError. Detailed status is used to expand upon the PrimaryStatus of the element. \nA Null return indicates the implementation (provider) does not implement this property. \n"Not Available" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"No Additional Information" indicates that the element is functioning normally as indicated by PrimaryStatus = "OK". \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, and so on. \n"Predictive Failure" indicates that an element is functioning normally but a failure is predicted in the near future. \n"Non-Recoverable Error " indicates that this element is in an error condition that requires human intervention. \n"Supporting Entity in Error" indicates that this element might be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems.
ValueMap
0x8000..
Values
Not Available
No Additional Information
Stressed
Predictive Failure
Non-Recoverable Error
Supporting Entity in Error
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.PrimaryStatus
CIM_ManagedSystemElement.HealthState
CommunicationStatus
Description
CommunicationStatus indicates the ability of the instrumentation to communicate with the underlying ManagedElement. CommunicationStatus consists of one of the following values: Unknown, None, Communication OK, Lost Communication, or No Contact. \nA Null return indicates the implementation (provider) does not implement this property. \n"Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"Not Available" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"Communication OK " indicates communication is established with the element, but does not convey any quality of service. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the Managed Element is known to exist and has been contacted successfully in the past, but is currently unreachable.
ValueMap
0x8000..
Values
Unknown
Not Available
Communication OK
Lost Communication
No Contact
DMTF Reserved
Vendor Reserved
HealthState
Description
Indicates the current health of the element. This attribute expresses the health of this element but not necessarily that of its subcomponents. The possible values are 0 to 30, where 5 means the element is entirely healthy and 30 means the element is completely non-functional. The following continuum is defined: \n"Non-recoverable Error" (30) - The element has completely failed, and recovery is not possible. All functionality provided by this element has been lost. \n"Critical Failure" (25) - The element is non-functional and recovery might not be possible. \n"Major Failure" (20) - The element is failing. It is possible that some or all of the functionality of this component is degraded or not working. \n"Minor Failure" (15) - All functionality is available but some might be degraded. \n"Degraded/Warning" (10) - The element is in working order and all functionality is provided. However, the element is not working to the best of its abilities. For example, the element might not be operating at optimal performance or it might be reporting recoverable errors. \n"OK" (5) - The element is fully functional and is operating within normal operational parameters and without error. \n"Unknown" (0) - The implementation cannot report on HealthState at this time. \nDMTF has reserved the unused portion of the continuum for additional HealthStates in the future.
ValueMap
Values
Unknown
Degraded/Warning
Minor failure
Major failure
Critical failure
Non-recoverable error
DMTF Reserved
Status
Deprecated
CIM_ManagedSystemElement.OperationalStatus
Description
A string indicating the current status of the object. Various operational and non-operational statuses are defined. This property is deprecated in lieu of OperationalStatus, which includes the same semantics in its enumeration. This change is made for 3 reasons: \n1) Status is more correctly defined as an array. This definition overcomes the limitation of describing status using a single value, when it is really a multi-valued property (for example, an element might be OK AND Stopped. \n2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values. \n3) The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, Status was grandfathered into the Schema. Use of the deprecated qualifier allows the maintenance of the existing property, but also permits an improved definition using OperationalStatus.
ValueMap
Error
Degraded
Unknown
Pred Fail
Starting
Stopping
Service
Stressed
NonRecover
No Contact
Lost Comm
Stopped
MaxLen
StatusDescriptions
Description
Strings describing the various OperationalStatus array values. For example, if "Stopping" is the value assigned to OperationalStatus, then this property may contain an explanation as to why an object is being stopped. Note that entries in this array are correlated with those at the same array index in OperationalStatus.
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.OperationalStatus
OperationalStatus
Description
Indicates the current statuses of the element. Various operational statuses are defined. Many of the enumeration\'s values are self-explanatory. However, a few are not and are described here in more detail. \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, and so on. \n"Predictive Failure" indicates that an element is functioning nominally but predicting a failure in the near future. \n"In Service" describes an element being configured, maintained, cleaned, or otherwise administered. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is currently unreachable. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Supporting Entity in Error" indicates that this element might be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems. \n"Completed" indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \n"Power Mode" indicates that the element has additional power model information contained in the Associated PowerManagementService association. \nOperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent approach to enumerations, to address implementation needs for an array property, and to provide a migration path from today\'s environment to the future. This change was not made earlier because it required the deprecated qualifier. Due to the widespread use of the existing Status property in management applications, it is strongly recommended that providers or instrumentation provide both the Status and OperationalStatus properties. Further, the first value of OperationalStatus should contain the primary status for the element. When instrumented, Status (because it is single-valued) should also provide the primary status of the element.
ValueMap
0x8000..
Values
Unknown
Other
Degraded
Stressed
Predictive Failure
Error
Non-Recoverable Error
Starting
Stopping
Stopped
In Service
No Contact
Lost Communication
Aborted
Dormant
Supporting Entity in Error
Completed
Power Mode
DMTF Reserved
Vendor Reserved
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.StatusDescriptions
Name
Description
The Name property defines the label by which the object is known. When subclassed, the Name property can be overridden to be a Key property.
MaxLen
InstallDate
Description
A datetime value that indicates when the object was installed. Lack of a value does not indicate that the object is not installed.
MappingStrings
MIF.DMTF|ComponentID|001.5
InstanceID
Description
InstanceID is an optional property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace. Various subclasses of this class may override this property to make it required, or a key. Such subclasses may also modify the preferred algorithms for ensuring uniqueness that are defined below.\nTo ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be reused to identify different underlying (real-world) elements. If not null and the above "preferred" algorithm is not used, the defining entity must assure that the resulting InstanceID is not reused across any InstanceIDs produced by this or other providers for the NameSpace of this instance. \nIf not set to null for DMTF-defined instances, the "preferred" algorithm must be used with the <OrgID> set to CIM.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
Description
Description
The Description property provides a textual description of the object.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. \nNote that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
ModelCorres
CIM_IndicationHandlerCIMXML
CIM_IndicationHandler
Deprecated
CIM_ListenerDestinationCIMXML
Version
2.8.0
UMLPackagePath
CIM::Event
Description
CIM_IndicationHandlerCIMXML describes the destination for Indications to be delivered via CIM-XML.
Owner
Deprecated
No value
Description
The name of the entity that created and/or maintains this Handler.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. \nNote that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
Description
Description
The Description property provides a textual description of the object.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
InstanceID
Description
InstanceID is an optional property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace. Various subclasses of this class may override this property to make it required, or a key. Such subclasses may also modify the preferred algorithms for ensuring uniqueness that are defined below.\nTo ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be reused to identify different underlying (real-world) elements. If not null and the above "preferred" algorithm is not used, the defining entity must assure that the resulting InstanceID is not reused across any InstanceIDs produced by this or other providers for the NameSpace of this instance. \nIf not set to null for DMTF-defined instances, the "preferred" algorithm must be used with the <OrgID> set to CIM.
SystemCreationClassName
Description
A System\'s CreationClassName. A CIM Listener destination is defined in context of a CIM_System (e.g., the sending system.
MaxLen
SystemName
Description
A System\'s Name. A CIM Listener destination is defined in context of a CIM_System (e.g., the sending system.
MaxLen
CreationClassName
Description
Indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, it allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
Name
Description
Indicates the name of the CIM Listener destination.
MaxLen
PersistenceType
Description
Describes the Persistence Type of the destination defined by this instance. If the value of PersistenceType is not specified, the value of PersistenceType MUST be treated as 2 ("Permanent"). A value of 2 ("Permanent") declares that the destination is always expected to be available (e.g., system log file). Inability to access this destination MUST be treated as an error condition. A value of 3 ("Transient") indicates that the destination is short-lived. Inability to access the destination MAY be treated as a normal termination condition. Subscriptions with "Transient" destinations MAY be deleted when the destination terminates or is no longer available.
ValueMap
Values
Other
Permanent
Transient
ModelCorrespondence
CIM_ListenerDestination.OtherPersistenceType
OtherPersistenceType
Description
A string describing ("Other") values for PersistenceType. This value MUST be set to a non NULL value when the PersistenceType is 1 ("Other"). For all other values of PersistenceType, the value of OtherPersistenceType MUST be NULL.
ModelCorrespondence
CIM_ListenerDestination.PersistenceType
OtherProtocol
Description
A free-form string providing a description of the supported protocols when 1, "Other", is specified for the Protocol.
ModelCorrespondence
CIM_ListenerDestination.Protocol
Protocol
Description
Protocol describes an encoding and protocol which will be used to deliver the indication. If Other is used, the value for OtherProtocol must not be null.\nIf a protocol is not specified, 2 "CIM-XML" must be assumed.
ValueMap
Values
Other
CIM-XML
SM CLP
WS-Management
WSDM
DMTF Reserved
ModelCorrespondence
CIM_ListenerDestination.OtherProtocol
Destination
Deprecated
CIM_ListenerDestinationCIMXML.Destination
Required
Override
Destination
Description
The destination URL to which CIM-XML Indication messages are to be delivered. The scheme prefix MUST be consistent with the DMTF CIM-XML Specifications. If a scheme prefix is not specified, the scheme "http:" MUST be assumed.
rt t
CIM_RegisteredSubProfile
CIM_RegisteredProfile
Version
2.8.0
UMLPackagePath
CIM::Interop
Description
A RegisteredSubProfile subclasses RegisteredProfile to indicate that a scoping profile is required to provide context. The latter is specified by the mandatory association, SubProfileRequiresProfile.
AdvertiseTypeDescriptions
Description
A free-form string providing additional information related to the AdvertiseType. A description MUST be provided when the AdvertiseType is 1, "Other". An entry in this array corresponds to the entry in the AdvertiseTypes array at the same index. It is not expected that additional descriptions are needed if the Type is set to "Not Advertised" or "SLP". However, as the SLP template expands, or as other advertisement mechanisms are defined, support for additional descriptions may be needed. This array is defined to support this.
ArrayType
Indexed
ModelCorrespondence
CIM_RegisteredProfile.AdvertiseTypes
AdvertiseTypes
Required
Description
This property signifies the advertisement for the profile information. It is used by the advertising services of the WBEM infrastructure to determine what should be advertised, via what mechanisms. The property is an array so that the profile MAY be advertised using several mechanisms. Note: If this property is null/uninitialized, this is equivalent to specifying the value 2, "Not Advertised".
ValueMap
Values
Other
Not Advertised
ArrayType
Indexed
ModelCorrespondence
CIM_RegisteredProfile.AdvertiseTypeDescriptions
RegisteredVersion
Required
Description
The version of this profile. The string representing the version MUST be in the form: \nM + "." + N + "." + U \nWhere: \nM - The major version (in numeric form) describing the profile\'s creation or last modification. \nN - The minor version (in numeric form) describing the profile\'s creation or last modification. \nU - The update (e.g. errata, patch, ..., in numeric form) describing the profile\'s creation or last modification.
RegisteredName
Required
Description
The name of this registered profile. Since multiple versions can exist for the same RegisteredName, the combination of RegisteredName, RegisteredOrganization, and RegisteredVersion MUST uniquely identify the registered profile within the scope of the organization.
MaxLen
OtherRegisteredOrganization
Description
A free-form string providing a description of the organization when 1, "Other", is specified for the RegisteredOrganization.
MaxLen
ModelCorrespondence
CIM_RegisteredProfile.RegisteredOrganization
RegisteredOrganization
Required
Description
The organization that defines this profile.
ValueMap
Values
Other
DMTF
CompTIA
Consortium for Service Innovation
FAST
INTAP
itSMF
Northwest Energy Efficiency Alliance
SNIA
TM Forum
The Open Group
ANSI
IEEE
IETF
INCITS
The Green Grid
DMTF Reserved
ModelCorrespondence
CIM_RegisteredProfile.OtherRegisteredOrganization
InstanceID
Override
InstanceID
Description
Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following \'preferred\' algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon \':\', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority. (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> MUST NOT contain a colon (\':\'). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the organizational entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above \'preferred\' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instance\'s NameSpace. \nFor DMTF defined instances, the \'preferred\' algorithm MUST be used with the <OrgID> set to \'CIM\'.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
Description
Description
The Description property provides a textual description of the object.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. \nNote that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
pplicable.\n
CIM_Dependency
Version
2.10.0
UMLPackagePath
CIM::Core::CoreElements
Description
CIM_Dependency is a generic association used to establish dependency relationships between ManagedElements.
Antecedent
CIM_ManagedElement
Description
Antecedent represents the independent object in this association.
Dependent
CIM_ManagedElement
Description
Dependent represents the object that is dependent on the Antecedent.
CIM_ReferencedProfile
CIM_Dependency
Version
2.8.0
UMLPackagePath
CIM::Interop
Description
A profile that is referenced by another RegisteredProfile.
Antecedent
CIM_RegisteredProfile
Override
Antecedent
Description
The RegisteredProfile that is referenced by the Dependent Profile.
Dependent
CIM_RegisteredProfile
Override
Dependent
Description
A RegisteredProfile that references other profiles.
CIM_Indication
Version
2.22.0
UMLPackagePath
CIM::Event
Description
CIM_Indication is the abstract root class for all notifications about changes in schema, objects and their data, and about events detected by providers and instrumentation. Subclasses represent specific types of notifications. \n\nTo receive an Indication, a consumer (or subscriber) must create an instance of CIM_IndicationFilter describing the criteria of the notification, an instance of CIM_ListenerDestination describing the delivery of the notification, and an instance of CIM_IndicationSubscription associating the Filter and Handler.
IndicationIdentifier
Description
An identifier for the Indication. This property is similar to a key value in that it can be used for identification, when correlating Indications (see the CorrelatedIndications array). Its value SHOULD be unique as long as correlations are reported, but MAY be reused or left NULL if no future Indications will reference it in their CorrelatedIndications array.To ensure uniqueness, the value of IndicationIdentifier should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the IndicationIdentifier or that is a recognized ID that is assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in IndicationIdentifier must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be re-used to identify different underlying (real-world) elements. \nIf the above "preferred" algorithm is not used, the defining entity should assure that the resulting IndicationIdentifier is not re-used across any IndicationIdentifiers that are produced by this or other providers for the NameSpace of this instance. \nFor DMTF-defined instances, the "preferred" algorithm should be used with the <OrgID> set to CIM.
MappingStrings
Recommendation.ITU|X733.Notification identifier
CorrelatedIndications
Description
A list of IndicationIdentifiers whose notifications are correlated with (related to) this one.
MappingStrings
Recommendation.ITU|X733.Correlated notifications
ModelCorrespondence
CIM_Indication.IndicationIdentifier
IndicationTime
Description
The time and date of creation of the Indication. The property may be set to NULL if the entity creating the Indication is not capable of determining this information. Note that IndicationTime may be the same for two Indications that are generated in rapid succession.
PerceivedSeverity
Description
An enumerated value that describes the severity of the Indication from the notifier\'s point of view: \n1 - Other, by CIM convention, is used to indicate that the Severity\'s value can be found in the OtherSeverity property. \n3 - Degraded/Warning should be used when its appropriate to let the user decide if action is needed. \n4 - Minor should be used to indicate action is needed, but the situation is not serious at this time. \n5 - Major should be used to indicate action is needed NOW. \n6 - Critical should be used to indicate action is needed NOW and the scope is broad (perhaps an imminent outage to a critical resource will result). \n7 - Fatal/NonRecoverable should be used to indicate an error occurred, but it\'s too late to take remedial action. \n2 and 0 - Information and Unknown (respectively) follow common usage. Literally, the Indication is purely informational or its severity is simply unknown.
ValueMap
Values
Unknown
Other
Information
Degraded/Warning
Minor
Major
Critical
Fatal/NonRecoverable
DMTF Reserved
MappingStrings
Recommendation.ITU|X733.Perceived severity
OtherSeverity
Description
Holds the value of the user defined severity value when \'PerceivedSeverity\' is 1 ("Other").
ModelCorrespondence
CIM_AlertIndication.PerceivedSeverity
IndicationFilterName
Description
An identifier for the indication filter that selects this indication and causes it to be sent. This property is to be filled out by the indication sending service. The value shall be correlatable with the Name property of the instance of CIM_IndicationFilter describing the criteria of the indication. The value of the IndicationFilterName should be formatted using the following algorithm: < OrgID > : < LocalID >, where < OrgID > and < LocalID > are separated by a colon (:) and < OrgID > shall include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the value or that is a registered ID assigned to the business entity by a recognized global authority. In addition, to ensure uniqueness, < OrgID > shall not contain a colon (:).When using this algorithm, the first colon to appear in the value shall appear between < OrgID > and < LocalID >. < LocalID > is chosen by the business entity and shall be used uniquely.
ModelCorrespondence
CIM_IndicationFilter.Name
should assur
SFCB_ElementCapabilities
CIM_ElementCapabilities
Description
ElementCapabilities represents the association between ManagedElements and their Capabilities. Note that the cardinality of the ManagedElement reference is Min(1), Max(1). This cardinality mandates the instantiation of the ElementCapabilities association for the referenced instance of Capabilities. ElementCapabilities describes the existence requirements and context for the referenced instance of ManagedElement. Specifically, the ManagedElement MUST exist and provides the context for the Capabilities.
UMLPackagePath
CIM::Core::Capabilities
Version
2.22.0
Characteristics
Description
Characteristics provides descriptive information about the Capabilities. when the value 2 "Default" is specified, the associated Capabilities shall represent the default capabilities of the associated Managed Element \nwhen the value 2 "Default" is not specified, the Capabilities instance may represent the default capabilities of the Managed Element\nWhen the value 3 "Current" is specified, the associated Capabilities shall represent the current capabilities of the associated Managed Element\nWhen the value 3 "Current" is not specified, the Capabilities instance may represent the current capabilities of the Managed Element.
ValueMap
32768..65535
Values
Default
Current
DMTF Reserved
Vendor Specific
Capabilities
CIM_Capabilities
Description
The Capabilities object associated with the element.
ManagedElement
CIM_ManagedElement
Description
The managed element.
r the refere
CIM_Namespace
CIM_ManagedElement
Version
2.8.0
UMLPackagePath
CIM::Interop
Description
Namespace provides a domain (in other words, a container), in which the instances [of a class] are guaranteed to be unique per the KEY qualifier definitions. It is named relative to the CIM_ObjectManager implementation that provides such a domain.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. \nNote that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
Description
Description
The Description property provides a textual description of the object.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
InstanceID
Description
InstanceID is an optional property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace. Various subclasses of this class may override this property to make it required, or a key. Such subclasses may also modify the preferred algorithms for ensuring uniqueness that are defined below.\nTo ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be reused to identify different underlying (real-world) elements. If not null and the above "preferred" algorithm is not used, the defining entity must assure that the resulting InstanceID is not reused across any InstanceIDs produced by this or other providers for the NameSpace of this instance. \nIf not set to null for DMTF-defined instances, the "preferred" algorithm must be used with the <OrgID> set to CIM.
SystemCreationClassName
Description
The scoping System\'s CreationClassName.
MaxLen
Propagated
CIM_ObjectManager.SystemCreationClassName
SystemName
Description
The scoping System\'s Name.
MaxLen
Propagated
CIM_ObjectManager.SystemName
ObjectManagerCreationClassName
Description
The scoping ObjectManager\'s CreationClassName.
MaxLen
Propagated
CIM_ObjectManager.CreationClassName
ObjectManagerName
Description
The scoping ObjectManager\'s Name.
MaxLen
Propagated
CIM_ObjectManager.Name
CreationClassName
Description
CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
Name
Description
A string to uniquely identify the Namespace within the ObjectManager.
MaxLen
ClassInfo
Deprecated
CIM_Namespace.ClassType
Required
Write
Description
Enumeration indicating the organization/schema of the Namespace\'s objects. For example, they may be instances of classes of a specific CIM version.
ValueMap
Values
Unknown
Other
CIM 1.0
CIM 2.0
CIM 2.1
CIM 2.2
CIM 2.3
CIM 2.4
CIM 2.5
CIM 2.6
CIM 2.7
CIM 2.8
DMI Recast
SNMP Recast
CMIP Recast
ModelCorrespondence
CIM_Namespace.DescriptionOfClassInfo
DescriptionOfClassInfo
Deprecated
CIM_Namespace.DescriptionOfClassType
Write
Description
A string providing more detail (beyond the general classification in ClassInfo) for the object hierarchy of the Namespace.
ModelCorrespondence
CIM_Namespace.ClassInfo
ClassType
Write
Description
Enumeration indicating the schema of the Namespace\'s objects. For example, they may be instances of classes of a specific CIM version or a mapping from another standard, such as SNMP. If \'Other\' is selected, the DescriptionOfClassType property MUST be populated.
ValueMap
Values
Unknown
Other
DMI Recast
SNMP Recast
CMIP Recast
ModelCorrespondence
CIM_Namespace.DescriptionOfClassType
CIM_Namespace.ClassTypeVersion
ClassTypeVersion
Write
Description
The version of the objects in this namespace. The string representing the version MUST be in the form: \nM + "." + N + "." + U \nWhere: \nM - The major version (in numeric form) \nN - The minor version (in numeric form) \nU - The update (e.g. errata, patch, ..., in numeric form)
ModelCorrespondence
CIM_Namespace.DescriptionOfClassType
CIM_Namespace.ClassType
DescriptionOfClassType
Write
Description
A string providing more detail (beyond the general classification in ClassInfo) for the object hierarchy of the Namespace.
ModelCorrespondence
CIM_Namespace.ClassType
CIM_Namespace.ClassTypeVersion
 the object.
CIM_IndicationHandler
CIM_ListenerDestination
Deprecated
CIM_ListenerDestination
Version
2.8.0
UMLPackagePath
CIM::Event
Description
CIM_IndicationHandler is an abstract superclass describing how an Indication is to be processd/delivered/\'handled\'. This may define a destination and protocol for delivering Indications, or it may define a process to invoke. This class is derived from CIM_ManagedElement to allow modeling the dependency of the Handler on a specific service.
Protocol
Description
Protocol describes an encoding and protocol which will be used to deliver the indication. If Other is used, the value for OtherProtocol must not be null.\nIf a protocol is not specified, 2 "CIM-XML" must be assumed.
ValueMap
Values
Other
CIM-XML
SM CLP
WS-Management
WSDM
DMTF Reserved
ModelCorrespondence
CIM_ListenerDestination.OtherProtocol
OtherProtocol
Description
A free-form string providing a description of the supported protocols when 1, "Other", is specified for the Protocol.
ModelCorrespondence
CIM_ListenerDestination.Protocol
Destination
Description
The destination IETF URI to which Export Messages are to be delivered. The scheme in the URI must be supported by theprotocol selected in the Protocol property.
OtherPersistenceType
Description
A string describing ("Other") values for PersistenceType. This value MUST be set to a non NULL value when the PersistenceType is 1 ("Other"). For all other values of PersistenceType, the value of OtherPersistenceType MUST be NULL.
ModelCorrespondence
CIM_ListenerDestination.PersistenceType
PersistenceType
Description
Describes the Persistence Type of the destination defined by this instance. If the value of PersistenceType is not specified, the value of PersistenceType MUST be treated as 2 ("Permanent"). A value of 2 ("Permanent") declares that the destination is always expected to be available (e.g., system log file). Inability to access this destination MUST be treated as an error condition. A value of 3 ("Transient") indicates that the destination is short-lived. Inability to access the destination MAY be treated as a normal termination condition. Subscriptions with "Transient" destinations MAY be deleted when the destination terminates or is no longer available.
ValueMap
Values
Other
Permanent
Transient
ModelCorrespondence
CIM_ListenerDestination.OtherPersistenceType
Name
Description
Indicates the name of the CIM Listener destination.
MaxLen
CreationClassName
Description
Indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, it allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
SystemName
Description
A System\'s Name. A CIM Listener destination is defined in context of a CIM_System (e.g., the sending system.
MaxLen
SystemCreationClassName
Description
A System\'s CreationClassName. A CIM Listener destination is defined in context of a CIM_System (e.g., the sending system.
MaxLen
InstanceID
Description
InstanceID is an optional property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace. Various subclasses of this class may override this property to make it required, or a key. Such subclasses may also modify the preferred algorithms for ensuring uniqueness that are defined below.\nTo ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be reused to identify different underlying (real-world) elements. If not null and the above "preferred" algorithm is not used, the defining entity must assure that the resulting InstanceID is not reused across any InstanceIDs produced by this or other providers for the NameSpace of this instance. \nIf not set to null for DMTF-defined instances, the "preferred" algorithm must be used with the <OrgID> set to CIM.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
Description
Description
The Description property provides a textual description of the object.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. \nNote that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
Owner
Deprecated
No value
Description
The name of the entity that created and/or maintains this Handler.
CIM_Listene
CIM_InstCreation
CIM_InstIndication
Version
2.6.0
UMLPackagePath
CIM::Event
Description
CIM_InstCreation notifies when a new instance is created.
SourceInstanceHost
Description
The host name or IP address of the SourceInstance.
ModelCorrespondence
CIM_InstIndication.SourceInstance
SourceInstanceModelPath
Description
The Model Path of the SourceInstance. The following format MUST be used to encode the Model Path: \n<NamespacePath>:<ClassName>.<Prop1>="<Value1>", \n<Prop2>="<Value2>", ...
ModelCorrespondence
CIM_InstIndication.SourceInstance
SourceInstance
Required
Description
A copy of the instance that changed to generate the Indication. SourceInstance contains the current values of the properties selected by the Indication Filter\'s Query. In the case of CIM_InstDeletion, the property values are copied before the instance is deleted.
IndicationIdentifier
Description
An identifier for the Indication. This property is similar to a key value in that it can be used for identification, when correlating Indications (see the CorrelatedIndications array). Its value SHOULD be unique as long as correlations are reported, but MAY be reused or left NULL if no future Indications will reference it in their CorrelatedIndications array.To ensure uniqueness, the value of IndicationIdentifier should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the IndicationIdentifier or that is a recognized ID that is assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in IndicationIdentifier must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be re-used to identify different underlying (real-world) elements. \nIf the above "preferred" algorithm is not used, the defining entity should assure that the resulting IndicationIdentifier is not re-used across any IndicationIdentifiers that are produced by this or other providers for the NameSpace of this instance. \nFor DMTF-defined instances, the "preferred" algorithm should be used with the <OrgID> set to CIM.
MappingStrings
Recommendation.ITU|X733.Notification identifier
CorrelatedIndications
Description
A list of IndicationIdentifiers whose notifications are correlated with (related to) this one.
MappingStrings
Recommendation.ITU|X733.Correlated notifications
ModelCorrespondence
CIM_Indication.IndicationIdentifier
IndicationTime
Description
The time and date of creation of the Indication. The property may be set to NULL if the entity creating the Indication is not capable of determining this information. Note that IndicationTime may be the same for two Indications that are generated in rapid succession.
PerceivedSeverity
Description
An enumerated value that describes the severity of the Indication from the notifier\'s point of view: \n1 - Other, by CIM convention, is used to indicate that the Severity\'s value can be found in the OtherSeverity property. \n3 - Degraded/Warning should be used when its appropriate to let the user decide if action is needed. \n4 - Minor should be used to indicate action is needed, but the situation is not serious at this time. \n5 - Major should be used to indicate action is needed NOW. \n6 - Critical should be used to indicate action is needed NOW and the scope is broad (perhaps an imminent outage to a critical resource will result). \n7 - Fatal/NonRecoverable should be used to indicate an error occurred, but it\'s too late to take remedial action. \n2 and 0 - Information and Unknown (respectively) follow common usage. Literally, the Indication is purely informational or its severity is simply unknown.
ValueMap
Values
Unknown
Other
Information
Degraded/Warning
Minor
Major
Critical
Fatal/NonRecoverable
DMTF Reserved
MappingStrings
Recommendation.ITU|X733.Perceived severity
OtherSeverity
Description
Holds the value of the user defined severity value when \'PerceivedSeverity\' is 1 ("Other").
ModelCorrespondence
CIM_AlertIndication.PerceivedSeverity
IndicationFilterName
Description
An identifier for the indication filter that selects this indication and causes it to be sent. This property is to be filled out by the indication sending service. The value shall be correlatable with the Name property of the instance of CIM_IndicationFilter describing the criteria of the indication. The value of the IndicationFilterName should be formatted using the following algorithm: < OrgID > : < LocalID >, where < OrgID > and < LocalID > are separated by a colon (:) and < OrgID > shall include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the value or that is a registered ID assigned to the business entity by a recognized global authority. In addition, to ensure uniqueness, < OrgID > shall not contain a colon (:).When using this algorithm, the first colon to appear in the value shall appear between < OrgID > and < LocalID >. < LocalID > is chosen by the business entity and shall be used uniquely.
ModelCorrespondence
CIM_IndicationFilter.Name
t changed to
CIM_ServiceAffectsElement
Version
2.14.0
UMLPackagePath
CIM::Core::Service
Description
ServiceAffectsElement represents an association between a Service and the ManagedElements that might be affected by its execution. Instantiating this association indicates that running the service may change, manage, provide functionality for,or pose some burden on the ManagedElement. This burden might affect performance, throughput, availability, and so on.
AffectedElement
CIM_ManagedElement
Description
The Managed Element that is affected by the Service.
AffectingElement
CIM_Service
Description
The Service that is affecting the ManagedElement.
ElementEffects
Description
An enumeration that describes the effect on the ManagedElement. This array corresponds to the OtherElementEffectsDescriptions array, where the latter provides details that are related to the high-level effects enumerated by this property. Additional detail is required if the ElementEffects array contains the value 1 (Other). The values are defined as follows: \n- Exclusive Use (2): No other Service may have this association to the element. \n- Performance Impact (3): Deprecated in favor of "Consumes", "Enhances Performance", or "Degrades Performance". Execution of the Service may enhance or degrade the performance of the element. This may be as a side-effect of execution or as an intended consequence of methods provided by the Service. \n- Element Integrity (4): Deprecated in favor of "Consumes", "Enhances Integrity", or "Degrades Integrity". Execution of the Service may enhance or degrade the integrity of the element. This may be as a side-effect of execution or as an intended consequence of methods provided by the Service. \n- Manages (5): The Service manages the element. \n- Consumes (6): Execution of the Service consumes some or all of the associated element as a consequence of running the Service. For example, the Service may consume CPU cycles, which may affect performance, or Storage which may affect both performance and integrity. (For instance, the lack of free storage can degrade integrity by reducing the ability to save state. ) "Consumes" may be used alone or in conjunction with other values, in particular, "Degrades Performance" and "Degrades Integrity". \n"Manages" and not "Consumes" should be used to reflect allocation services that may be provided by a Service. \n- Enhances Integrity (7): The Service may enhance integrity of the associated element. \n- Degrades Integrity (8): The Service may degrade integrity of the associated element. \n- Enhances Performance (9): The Service may enhance performance of the associated element. \n- Degrades Performance (10): The Service may degrade performance of the associated element.
ValueMap
0x8000..0xFFFF
Values
Unknown
Other
Exclusive Use
Performance Impact
Element Integrity
Manages
Consumes
Enhances Integrity
Degrades Integrity
Enhances Performance
Degrades Performance
DMTF Reserved
Vendor Reserved
ArrayType
Indexed
ModelCorrespondence
CIM_ServiceAffectsElement.OtherElementEffectsDescriptions
OtherElementEffectsDescriptions
Description
Provides details for the effect at the corresponding array position in ElementEffects. This information is required if ElementEffects contains the value 1 (Other).
ArrayType
Indexed
ModelCorrespondence
CIM_ServiceAffectsElement.ElementEffects
CIM_ManagedElement
Version
2.19.0
UMLPackagePath
CIM::Core::CoreElements
Description
ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema.
InstanceID
Description
InstanceID is an optional property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace. Various subclasses of this class may override this property to make it required, or a key. Such subclasses may also modify the preferred algorithms for ensuring uniqueness that are defined below.\nTo ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be reused to identify different underlying (real-world) elements. If not null and the above "preferred" algorithm is not used, the defining entity must assure that the resulting InstanceID is not reused across any InstanceIDs produced by this or other providers for the NameSpace of this instance. \nIf not set to null for DMTF-defined instances, the "preferred" algorithm must be used with the <OrgID> set to CIM.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
Description
Description
The Description property provides a textual description of the object.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. \nNote that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
CIM_EnabledLogicalElement
CIM_LogicalElement
Version
2.22.0
UMLPackagePath
CIM::Core::CoreElements
Description
This class extends LogicalElement to abstract the concept of an element that is enabled and disabled, such as a LogicalDevice or a ServiceAccessPoint.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. \nNote that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
Description
Description
The Description property provides a textual description of the object.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
InstanceID
Description
InstanceID is an optional property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace. Various subclasses of this class may override this property to make it required, or a key. Such subclasses may also modify the preferred algorithms for ensuring uniqueness that are defined below.\nTo ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be reused to identify different underlying (real-world) elements. If not null and the above "preferred" algorithm is not used, the defining entity must assure that the resulting InstanceID is not reused across any InstanceIDs produced by this or other providers for the NameSpace of this instance. \nIf not set to null for DMTF-defined instances, the "preferred" algorithm must be used with the <OrgID> set to CIM.
InstallDate
Description
A datetime value that indicates when the object was installed. Lack of a value does not indicate that the object is not installed.
MappingStrings
MIF.DMTF|ComponentID|001.5
Name
Description
The Name property defines the label by which the object is known. When subclassed, the Name property can be overridden to be a Key property.
MaxLen
OperationalStatus
Description
Indicates the current statuses of the element. Various operational statuses are defined. Many of the enumeration\'s values are self-explanatory. However, a few are not and are described here in more detail. \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, and so on. \n"Predictive Failure" indicates that an element is functioning nominally but predicting a failure in the near future. \n"In Service" describes an element being configured, maintained, cleaned, or otherwise administered. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is currently unreachable. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Supporting Entity in Error" indicates that this element might be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems. \n"Completed" indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \n"Power Mode" indicates that the element has additional power model information contained in the Associated PowerManagementService association. \nOperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent approach to enumerations, to address implementation needs for an array property, and to provide a migration path from today\'s environment to the future. This change was not made earlier because it required the deprecated qualifier. Due to the widespread use of the existing Status property in management applications, it is strongly recommended that providers or instrumentation provide both the Status and OperationalStatus properties. Further, the first value of OperationalStatus should contain the primary status for the element. When instrumented, Status (because it is single-valued) should also provide the primary status of the element.
ValueMap
0x8000..
Values
Unknown
Other
Degraded
Stressed
Predictive Failure
Error
Non-Recoverable Error
Starting
Stopping
Stopped
In Service
No Contact
Lost Communication
Aborted
Dormant
Supporting Entity in Error
Completed
Power Mode
DMTF Reserved
Vendor Reserved
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.StatusDescriptions
StatusDescriptions
Description
Strings describing the various OperationalStatus array values. For example, if "Stopping" is the value assigned to OperationalStatus, then this property may contain an explanation as to why an object is being stopped. Note that entries in this array are correlated with those at the same array index in OperationalStatus.
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.OperationalStatus
Status
Deprecated
CIM_ManagedSystemElement.OperationalStatus
Description
A string indicating the current status of the object. Various operational and non-operational statuses are defined. This property is deprecated in lieu of OperationalStatus, which includes the same semantics in its enumeration. This change is made for 3 reasons: \n1) Status is more correctly defined as an array. This definition overcomes the limitation of describing status using a single value, when it is really a multi-valued property (for example, an element might be OK AND Stopped. \n2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values. \n3) The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, Status was grandfathered into the Schema. Use of the deprecated qualifier allows the maintenance of the existing property, but also permits an improved definition using OperationalStatus.
ValueMap
Error
Degraded
Unknown
Pred Fail
Starting
Stopping
Service
Stressed
NonRecover
No Contact
Lost Comm
Stopped
MaxLen
HealthState
Description
Indicates the current health of the element. This attribute expresses the health of this element but not necessarily that of its subcomponents. The possible values are 0 to 30, where 5 means the element is entirely healthy and 30 means the element is completely non-functional. The following continuum is defined: \n"Non-recoverable Error" (30) - The element has completely failed, and recovery is not possible. All functionality provided by this element has been lost. \n"Critical Failure" (25) - The element is non-functional and recovery might not be possible. \n"Major Failure" (20) - The element is failing. It is possible that some or all of the functionality of this component is degraded or not working. \n"Minor Failure" (15) - All functionality is available but some might be degraded. \n"Degraded/Warning" (10) - The element is in working order and all functionality is provided. However, the element is not working to the best of its abilities. For example, the element might not be operating at optimal performance or it might be reporting recoverable errors. \n"OK" (5) - The element is fully functional and is operating within normal operational parameters and without error. \n"Unknown" (0) - The implementation cannot report on HealthState at this time. \nDMTF has reserved the unused portion of the continuum for additional HealthStates in the future.
ValueMap
Values
Unknown
Degraded/Warning
Minor failure
Major failure
Critical failure
Non-recoverable error
DMTF Reserved
CommunicationStatus
Description
CommunicationStatus indicates the ability of the instrumentation to communicate with the underlying ManagedElement. CommunicationStatus consists of one of the following values: Unknown, None, Communication OK, Lost Communication, or No Contact. \nA Null return indicates the implementation (provider) does not implement this property. \n"Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"Not Available" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"Communication OK " indicates communication is established with the element, but does not convey any quality of service. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the Managed Element is known to exist and has been contacted successfully in the past, but is currently unreachable.
ValueMap
0x8000..
Values
Unknown
Not Available
Communication OK
Lost Communication
No Contact
DMTF Reserved
Vendor Reserved
DetailedStatus
Description
DetailedStatus compliments PrimaryStatus with additional status detail. It consists of one of the following values: Not Available, No Additional Information, Stressed, Predictive Failure, Error, Non-Recoverable Error, SupportingEntityInError. Detailed status is used to expand upon the PrimaryStatus of the element. \nA Null return indicates the implementation (provider) does not implement this property. \n"Not Available" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"No Additional Information" indicates that the element is functioning normally as indicated by PrimaryStatus = "OK". \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, and so on. \n"Predictive Failure" indicates that an element is functioning normally but a failure is predicted in the near future. \n"Non-Recoverable Error " indicates that this element is in an error condition that requires human intervention. \n"Supporting Entity in Error" indicates that this element might be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems.
ValueMap
0x8000..
Values
Not Available
No Additional Information
Stressed
Predictive Failure
Non-Recoverable Error
Supporting Entity in Error
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.PrimaryStatus
CIM_ManagedSystemElement.HealthState
OperatingStatus
Description
OperatingStatus provides a current status value for the operational condition of the element and can be used for providing more detail with respect to the value of EnabledState. It can also provide the transitional states when an element is transitioning from one state to another, such as when an element is transitioning between EnabledState and RequestedState, as well as other transitional conditions.\nOperatingStatus consists of one of the following values: Unknown, Not Available, In Service, Starting, Stopping, Stopped, Aborted, Dormant, Completed, Migrating, Emmigrating, Immigrating, Snapshotting. Shutting Down, In Test \nA Null return indicates the implementation (provider) does not implement this property. \n"Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"None" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"Servicing" describes an element being configured, maintained, cleaned, or otherwise administered. \n"Starting" describes an element being initialized. \n"Stopping" describes an element being brought to an orderly stop. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Completed" indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded in the PrimaryStatus so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \n"Migrating" element is being moved between host elements. \n"Immigrating" element is being moved to new host element. \n"Emigrating" element is being moved away from host element. \n"Shutting Down" describes an element being brought to an abrupt stop. \n"In Test" element is performing test functions. \n"Transitioning" describes an element that is between states, that is, it is not fully available in either its previous state or its next state. This value should be used if other values indicating a transition to a specific state are not applicable.\n"In Service" describes an element that is in service and operational.
ValueMap
0x8000..
Values
Unknown
Not Available
Servicing
Starting
Stopping
Stopped
Aborted
Dormant
Completed
Migrating
Emigrating
Immigrating
Snapshotting
Shutting Down
In Test
Transitioning
In Service
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
PrimaryStatus
Description
PrimaryStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents. \nPrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. "Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"OK" indicates the ManagedElement is functioning normally. \n"Degraded" indicates the ManagedElement is functioning below normal. \n"Error" indicates the ManagedElement is in an Error condition.
ValueMap
0x8000..
Values
Unknown
Degraded
Error
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_ManagedSystemElement.DetailedStatus
CIM_ManagedSystemElement.HealthState
EnabledState
Description
EnabledState is an integer enumeration that indicates the enabled and disabled states of an element. It can also indicate the transitions between these requested states. For example, shutting down (value=4) and starting (value=10) are transient states between enabled and disabled. The following text briefly summarizes the various enabled and disabled states: \nEnabled (2) indicates that the element is or could be executing commands, will process any queued commands, and queues new requests. \nDisabled (3) indicates that the element will not execute commands and will drop any new requests. \nShutting Down (4) indicates that the element is in the process of going to a Disabled state. \nNot Applicable (5) indicates the element does not support being enabled or disabled. \nEnabled but Offline (6) indicates that the element might be completing commands, and will drop any new requests. \nTest (7) indicates that the element is in a test state. \nDeferred (8) indicates that the element might be completing commands, but will queue any new requests. \nQuiesce (9) indicates that the element is enabled but in a restricted mode.\nStarting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.
ValueMap
11..32767
32768..65535
Values
Unknown
Other
Enabled
Disabled
Shutting Down
Not Applicable
Enabled but Offline
In Test
Deferred
Quiesce
Starting
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.OtherEnabledState
OtherEnabledState
Description
A string that describes the enabled or disabled state of the element when the EnabledState property is set to 1 ("Other"). This property must be set to null when EnabledState is any value other than 1.
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
RequestedState
Description
RequestedState is an integer enumeration that indicates the last requested or desired state for the element, irrespective of the mechanism through which it was requested. The actual state of the element is represented by EnabledState. This property is provided to compare the last requested and current enabled or disabled states. Note that when EnabledState is set to 5 ("Not Applicable"), then this property has no meaning. Refer to the EnabledState property description for explanations of the values in the RequestedState enumeration. \n"Unknown" (0) indicates the last requested state for the element is unknown.\nNote that the value "No Change" (5) has been deprecated in lieu of indicating the last requested state is "Unknown" (0). If the last requested or desired state is unknown, RequestedState should have the value "Unknown" (0), but may have the value "No Change" (5).Offline (6) indicates that the element has been requested to transition to the Enabled but Offline EnabledState. \nIt should be noted that there are two new values in RequestedState that build on the statuses of EnabledState. These are "Reboot" (10) and "Reset" (11). Reboot refers to doing a "Shut Down" and then moving to an "Enabled" state. Reset indicates that the element is first "Disabled" and then "Enabled". The distinction between requesting "Shut Down" and "Disabled" should also be noted. Shut Down requests an orderly transition to the Disabled state, and might involve removing power, to completely erase any existing state. The Disabled state requests an immediate disabling of the element, such that it will not execute or accept any commands or processing requests. \n\nThis property is set as the result of a method invocation (such as Start or StopService on CIM_Service), or can be overridden and defined as WRITEable in a subclass. The method approach is considered superior to a WRITEable property, because it allows an explicit invocation of the operation and the return of a result code. \n\nIf knowledge of the last RequestedState is not supported for the EnabledLogicalElement, the property shall be NULL or have the value 12 "Not Applicable".
ValueMap
32768..65535
Values
Unknown
Enabled
Disabled
Shut Down
No Change
Offline
Test
Deferred
Quiesce
Reboot
Reset
Not Applicable
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
EnabledDefault
Write
Description
An enumerated value indicating an administrator\'s default or startup configuration for the Enabled State of an element. By default, the element is "Enabled" (value=2).
ValueMap
32768..65535
Values
Enabled
Disabled
Not Applicable
Enabled but Offline
No Default
Quiesce
DMTF Reserved
Vendor Reserved
TimeOfLastStateChange
Description
The date or time when the EnabledState of the element last changed. If the state of the element has not changed and this property is populated, then it must be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property must not be updated.
AvailableRequestedStates
Description
AvailableRequestedStates indicates the possible values for the RequestedState parameter of the method RequestStateChange, used to initiate a state change. The values listed shall be a subset of the values contained in the RequestedStatesSupported property of the associated instance of CIM_EnabledLogicalElementCapabilities where the values selected are a function of the current state of the CIM_EnabledLogicalElement. This property may be non-null if an implementation is able to advertise the set of possible values as a function of the current state. This property shall be null if an implementation is unable to determine the set of possible values as a function of the current state.
ValueMap
Values
Enabled
Disabled
Shut Down
Offline
Test
Defer
Quiesce
Reboot
Reset
DMTF Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.RequestStateChange
CIM_EnabledLogicalElementCapabilities.RequestedStatesSupported
TransitioningToState
Description
TransitioningToState indicates the target state to which the instance is transitioning. \nA value of 5 "No Change" shall indicate that no transition is in progress.A value of 12 "Not Applicable" shall indicate the implementation does not support representing ongoing transitions. \nA value other than 5 or 12 shall identify the state to which the element is in the process of transitioning.
ValueMap
Values
Unknown
Enabled
Disabled
Shut Down
No Change
Offline
Test
Defer
Quiesce
Reboot
Reset
Not Applicable
DMTF Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.RequestStateChange
CIM_EnabledLogicalElement.RequestedState
CIM_EnabledLogicalElement.EnabledState
RequestStateChange
Description
Requests that the state of the element be changed to the value specified in the RequestedState parameter. When the requested state change takes place, the EnabledState and RequestedState of the element will be the same. Invoking the RequestStateChange method multiple times could result in earlier requests being overwritten or lost. \nA return code of 0 shall indicate the state change was successfully initiated. \nA return code of 3 shall indicate that the state transition cannot complete within the interval specified by the TimeoutPeriod parameter. \nA return code of 4096 (0x1000) shall indicate the state change was successfully initiated, a ConcreteJob has been created, and its reference returned in the output parameter Job. Any other return code indicates an error condition.
ValueMap
4096
4097
4098
4099
4100..32767
32768..65535
Values
Completed with No Error
Not Supported
Unknown or Unspecified Error
Cannot complete within Timeout Period
Failed
Invalid Parameter
In Use
DMTF Reserved
Method Parameters Checked - Job Started
Invalid State Transition
Use of Timeout Parameter Not Supported
Busy
Method Reserved
Vendor Specific
ModelCorrespondence
CIM_EnabledLogicalElement.RequestedState
RequestedState
Description
The state requested for the element. This information will be placed into the RequestedState property of the instance if the return code of the RequestStateChange method is 0 (\'Completed with No Error\'), or 4096 (0x1000) (\'Job Started\'). Refer to the description of the EnabledState and RequestedState properties for the detailed explanations of the RequestedState values.
ValueMap
32768..65535
Values
Enabled
Disabled
Shut Down
Offline
Test
Defer
Quiesce
Reboot
Reset
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.RequestedState
CIM_ConcreteJob
Description
May contain a reference to the ConcreteJob created to track the state transition initiated by the method invocation.
TimeoutPeriod
Description
A timeout period that specifies the maximum amount of time that the client expects the transition to the new state to take. The interval format must be used to specify the TimeoutPeriod. A value of 0 or a null parameter indicates that the client has no time requirements for the transition. \nIf this property does not contain 0 or null and the implementation does not support this parameter, a return code of \'Use Of Timeout Parameter Not Supported\' shall be returned.
CIM_HostedDependency
CIM_Dependency
Version
2.8.0
UMLPackagePath
CIM::Core::CoreElements
Description
HostedDependency defines a ManagedElement in the context of another ManagedElement in which it resides.
Antecedent
CIM_ManagedElement
Override
Antecedent
Description
The scoping ManagedElement.
Dependent
CIM_ManagedElement
Override
Dependent
Description
The hosted ManagedElement.
scrith
SFCB_IndicationSubscription
CIM_IndicationSubscription
Description
CIM_IndicationSubscription describes a flow of Indications. The flow is specified by the referenced Filter, and directed to the referenced destination or process in the Handler. Property values of the referenced CIM_IndicationFilter instance and CIM_ListenerDestination instance MAY significantly effect the definition of the subscription. E.g., a subscription associated with a "Transient" destination MAY be deleted when the destination terminates or is no longer available.
UMLPackagePath
CIM::Event
Version
2.16.0
Handler
CIM_ListenerDestination
Override
Handler
Description
The Handler addressing delivery of the possible Indications of this subscription.
Filter
CIM_IndicationFilter
Override
Filter
Description
The Filter that defines the criteria and data of the possible Indications of this subscription.
OnFatalErrorPolicy
Description
Defines the desired behavior for a subscription when a fatal error occurs in one of the Indication processing subcomponents (e.g., Indication processor, Indication or instance provider, or Indication handler) and the Indication cannot be successfully sent. Specifically, a failure implies that some aspect of Indication generation, processing or dispatch is no longer functioning and Indications may be lost. If the value of OnFatalErrorPolicy is 2 ("Ignore") or not set (NULL), the subscription MUST continue to be processed in a \'best effort\' mode. This mode of operation can lead to unpredictable, and potentially misleading results, because Indications may be lost. If the value is 3 ("Disable"), the subscription MUST be disabled. With this policy, no new Indications will be generated or dispatched until the subscription is explicitly enabled. This is accomplished via the property, SubscriptionState. If the value is 4 ("Remove"), the subscription MUST be deleted. Selecting this policy has the same effect as issuing a DeleteInstance operation on this subscription instance.
ValueMap
Values
Other
Ignore
Disable
Remove
OtherOnFatalErrorPolicy
Description
A string defining "Other" values for OnFatalErrorPolicy. This value MUST be set to a non NULL value when OnFatalErrorPolicy is set to a value of 1 ("Other"). For all other values, the OtherOnFatalErrorPolicy MUST be NULL.
FailureTriggerTimeInterval
Description
The FailureTriggerTimeInterval is used by the client to specify a recommended minimum delay before the OnFatalErrorPolicy is implemented.
Units
Seconds
PUnit
second
SubscriptionState
Write
Description
Indicates the current processing state of the subscription.
ValueMap
Values
Unknown
Other
Enabled
Enabled Degraded
Disabled
OtherSubscriptionState
Description
A string defining "Other" values for SubscriptionState. This value MUST be set to a non NULL value when SubscriptionState is set to a value of 1 ("Other"). For all other values, the OtherSubscriptionState MUST be NULL.
TimeOfLastStateChange
Description
Date and time of the last state change. This value is based on the notion of local date and time of the Managed System Element running the Indication processing subcomponents.
SubscriptionDuration
Write
Description
SubscriptionDuration defines the desired length of the subscription. Indications generated after the duration of the subscription has exceeded SubscriptionDuration MUST NOT be sent. The duration of a subscription MAY be changed by modifying this property. An expired subscription MAY be deleted and MUST NOT be modified. If the value of SubscriptionDuration is not set, the subscription MUST be treated as having no expiration date.
Units
Seconds
PUnit
second
SubscriptionStartTime
Description
SubscriptionStartTime is the time the subscription was started. The value of this property is computed based on the notion of date and time of the ManagedSystemElement running the Indication processing subcomponents.
SubscriptionTimeRemaining
Description
SubscriptionTimeRemaining is a computed value that provides a snapshot of the time remaining in the Subscription.
Units
Seconds
PUnit
second
RepeatNotificationPolicy
Description
The RepeatNotificationPolicy property defines the desired behavior for handling Indications that report the occurrence of the same underlying event (e.g., the disk is still generating I/O errors and has not yet been repaired). The defined semantics for the RepeatNotificationCount, RepeatNotificationInterval, and RepeatNotificationGap properties depend on the value of RepeatNotificationPolicy, but values for these properties MUST be set if the property is defined for the selected policy. If the value of RepeatNotificationPolicy is 0 ("Unknown") or not set, no special processing for repeat Indications is defined by the subscription. The semantics associated with the handling of repeat Indications MAY be defined by the Indication processing subcomponents. If the value of RepeatNotificationPolicy is 2 ("None"), special processing of repeat Indications MUST NOT be performed. If the value is 3 ("Suppress") the first RepeatNotificationCount Indications, describing the same event, MUST be sent and all subsequent Indications for this event suppressed for the remainder of the time interval RepeatNotificationInterval. A new interval starts when the next Indication for this event is received. If the value of RepeatNotificationPolicy is 4 ("Delay") and an Indication is received, this Indication MUST be suppressed if, including this Indication, RepeatNoticationCount or fewer Indications for this event have been received during the prior time interval defined by RepeatNotificationInterval. If this Indication is the RepeatNotificationCount + 1 Indication, this Indication MUST be sent and all subsequent Indications for this event ignored until the RepeatNotificationGap has elapsed. A RepeatNotificationInterval MAY NOT overlap a RepeatNotificationGap time interval.
ValueMap
Values
Unknown
Other
None
Suppress
Delay
OtherRepeatNotificationPolicy
Description
A string defining "Other" values for RepeatNotificationPolicy. This value MUST be set to a non NULL value when RepeatNotificationPolicy is set to a value of 1 ("Other"). For all other values, the OtherRepeatNotificationPolicy MUST be NULL.
RepeatNotificationInterval
Description
Defines the time interval for the repeat notification policy calculation.
Units
Seconds
PUnit
second
RepeatNotificationGap
Description
Defines the gap interval for the repeat notification policy calculation.
Units
Seconds
PUnit
second
RepeatNotificationCount
Description
Defines the count property for the repeat notification policy calculation.
DeliveryFailureTime
CIM_InstIndication
CIM_Indication
Version
2.9.0
UMLPackagePath
CIM::Event
Description
CIM_InstIndication is an abstract superclass describing changes to instances. Subclasses represent specific types of change notifications, such as instance creation, deletion and modification.
IndicationFilterName
Description
An identifier for the indication filter that selects this indication and causes it to be sent. This property is to be filled out by the indication sending service. The value shall be correlatable with the Name property of the instance of CIM_IndicationFilter describing the criteria of the indication. The value of the IndicationFilterName should be formatted using the following algorithm: < OrgID > : < LocalID >, where < OrgID > and < LocalID > are separated by a colon (:) and < OrgID > shall include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the value or that is a registered ID assigned to the business entity by a recognized global authority. In addition, to ensure uniqueness, < OrgID > shall not contain a colon (:).When using this algorithm, the first colon to appear in the value shall appear between < OrgID > and < LocalID >. < LocalID > is chosen by the business entity and shall be used uniquely.
ModelCorrespondence
CIM_IndicationFilter.Name
OtherSeverity
Description
Holds the value of the user defined severity value when \'PerceivedSeverity\' is 1 ("Other").
ModelCorrespondence
CIM_AlertIndication.PerceivedSeverity
PerceivedSeverity
Description
An enumerated value that describes the severity of the Indication from the notifier\'s point of view: \n1 - Other, by CIM convention, is used to indicate that the Severity\'s value can be found in the OtherSeverity property. \n3 - Degraded/Warning should be used when its appropriate to let the user decide if action is needed. \n4 - Minor should be used to indicate action is needed, but the situation is not serious at this time. \n5 - Major should be used to indicate action is needed NOW. \n6 - Critical should be used to indicate action is needed NOW and the scope is broad (perhaps an imminent outage to a critical resource will result). \n7 - Fatal/NonRecoverable should be used to indicate an error occurred, but it\'s too late to take remedial action. \n2 and 0 - Information and Unknown (respectively) follow common usage. Literally, the Indication is purely informational or its severity is simply unknown.
ValueMap
Values
Unknown
Other
Information
Degraded/Warning
Minor
Major
Critical
Fatal/NonRecoverable
DMTF Reserved
MappingStrings
Recommendation.ITU|X733.Perceived severity
IndicationTime
Description
The time and date of creation of the Indication. The property may be set to NULL if the entity creating the Indication is not capable of determining this information. Note that IndicationTime may be the same for two Indications that are generated in rapid succession.
CorrelatedIndications
Description
A list of IndicationIdentifiers whose notifications are correlated with (related to) this one.
MappingStrings
Recommendation.ITU|X733.Correlated notifications
ModelCorrespondence
CIM_Indication.IndicationIdentifier
IndicationIdentifier
Description
An identifier for the Indication. This property is similar to a key value in that it can be used for identification, when correlating Indications (see the CorrelatedIndications array). Its value SHOULD be unique as long as correlations are reported, but MAY be reused or left NULL if no future Indications will reference it in their CorrelatedIndications array.To ensure uniqueness, the value of IndicationIdentifier should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the IndicationIdentifier or that is a recognized ID that is assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in IndicationIdentifier must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be re-used to identify different underlying (real-world) elements. \nIf the above "preferred" algorithm is not used, the defining entity should assure that the resulting IndicationIdentifier is not re-used across any IndicationIdentifiers that are produced by this or other providers for the NameSpace of this instance. \nFor DMTF-defined instances, the "preferred" algorithm should be used with the <OrgID> set to CIM.
MappingStrings
Recommendation.ITU|X733.Notification identifier
SourceInstance
Required
Description
A copy of the instance that changed to generate the Indication. SourceInstance contains the current values of the properties selected by the Indication Filter\'s Query. In the case of CIM_InstDeletion, the property values are copied before the instance is deleted.
SourceInstanceModelPath
Description
The Model Path of the SourceInstance. The following format MUST be used to encode the Model Path: \n<NamespacePath>:<ClassName>.<Prop1>="<Value1>", \n<Prop2>="<Value2>", ...
ModelCorrespondence
CIM_InstIndication.SourceInstance
SourceInstanceHost
Description
The host name or IP address of the SourceInstance.
ModelCorrespondence
CIM_InstIndication.SourceInstance
where < OrgI
CIM_SubProfileRequiresProfile
CIM_ReferencedProfile
Version
2.8.0
UMLPackagePath
CIM::Interop
Description
A subprofile requires another RegisteredProfile for context. This association mandates the scoping relationship between a subprofile and its scoping profile.
Antecedent
CIM_RegisteredProfile
Override
Antecedent
Description
The RegisteredProfile that is referenced/required by the subprofile.
Dependent
CIM_RegisteredSubProfile
Override
Dependent
Description
A RegisteredSubProfile that requires a scoping profile, for context.
sionaxL
CIM_ProcessIndication
CIM_Indication
Version
2.6.0
UMLPackagePath
CIM::Event
Description
An abstract superclass for specialized Indication classes, addressing specific changes and alerts published by providers and instrumentation. Subclasses include AlertIndication (with properties such as PerceivedSeverity and ProbableCause), and SNMPTrapIndication (which recasts Traps as CIM indications).
IndicationFilterName
Description
An identifier for the indication filter that selects this indication and causes it to be sent. This property is to be filled out by the indication sending service. The value shall be correlatable with the Name property of the instance of CIM_IndicationFilter describing the criteria of the indication. The value of the IndicationFilterName should be formatted using the following algorithm: < OrgID > : < LocalID >, where < OrgID > and < LocalID > are separated by a colon (:) and < OrgID > shall include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the value or that is a registered ID assigned to the business entity by a recognized global authority. In addition, to ensure uniqueness, < OrgID > shall not contain a colon (:).When using this algorithm, the first colon to appear in the value shall appear between < OrgID > and < LocalID >. < LocalID > is chosen by the business entity and shall be used uniquely.
ModelCorrespondence
CIM_IndicationFilter.Name
OtherSeverity
Description
Holds the value of the user defined severity value when \'PerceivedSeverity\' is 1 ("Other").
ModelCorrespondence
CIM_AlertIndication.PerceivedSeverity
PerceivedSeverity
Description
An enumerated value that describes the severity of the Indication from the notifier\'s point of view: \n1 - Other, by CIM convention, is used to indicate that the Severity\'s value can be found in the OtherSeverity property. \n3 - Degraded/Warning should be used when its appropriate to let the user decide if action is needed. \n4 - Minor should be used to indicate action is needed, but the situation is not serious at this time. \n5 - Major should be used to indicate action is needed NOW. \n6 - Critical should be used to indicate action is needed NOW and the scope is broad (perhaps an imminent outage to a critical resource will result). \n7 - Fatal/NonRecoverable should be used to indicate an error occurred, but it\'s too late to take remedial action. \n2 and 0 - Information and Unknown (respectively) follow common usage. Literally, the Indication is purely informational or its severity is simply unknown.
ValueMap
Values
Unknown
Other
Information
Degraded/Warning
Minor
Major
Critical
Fatal/NonRecoverable
DMTF Reserved
MappingStrings
Recommendation.ITU|X733.Perceived severity
IndicationTime
Description
The time and date of creation of the Indication. The property may be set to NULL if the entity creating the Indication is not capable of determining this information. Note that IndicationTime may be the same for two Indications that are generated in rapid succession.
CorrelatedIndications
Description
A list of IndicationIdentifiers whose notifications are correlated with (related to) this one.
MappingStrings
Recommendation.ITU|X733.Correlated notifications
ModelCorrespondence
CIM_Indication.IndicationIdentifier
IndicationIdentifier
Description
An identifier for the Indication. This property is similar to a key value in that it can be used for identification, when correlating Indications (see the CorrelatedIndications array). Its value SHOULD be unique as long as correlations are reported, but MAY be reused or left NULL if no future Indications will reference it in their CorrelatedIndications array.To ensure uniqueness, the value of IndicationIdentifier should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the IndicationIdentifier or that is a recognized ID that is assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in IndicationIdentifier must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be re-used to identify different underlying (real-world) elements. \nIf the above "preferred" algorithm is not used, the defining entity should assure that the resulting IndicationIdentifier is not re-used across any IndicationIdentifiers that are produced by this or other providers for the NameSpace of this instance. \nFor DMTF-defined instances, the "preferred" algorithm should be used with the <OrgID> set to CIM.
MappingStrings
Recommendation.ITU|X733.Notification identifier
ilter descri
CIM_RegisteredProfile
CIM_ManagedElement
Version
2.22.0
UMLPackagePath
CIM::Interop
Description
A RegisteredProfile describes a set of CIM Schema classes with required properties and/or methods, necessary to manage a real-world entity or to support a usage scenario, in an interoperable fashion. RegisteredProfiles can be defined by the DMTF or other standards organizations. Note that this class should not be confused with CIM_Profile, which collects SettingData instances, to be applied as a \'configuration profile\' for an element. \nA RegisteredProfile is a named \'standard\' for CIM-based management of a particular System, subsystem, Service or other entity, for a specified set of uses. It is a complete, standalone definition, as opposed to the subclass RegisteredSubProfile, which requires a scoping profile for context. \nThe uses for a RegisteredProfile or SubProfile MUST be specified in the document that defines the profile. Examples of Profiles are to manage various aspects of an Operating System, Storage Array, or Database. The name of the profile is defined and scoped by its authoring organization.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. \nNote that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
Description
Description
The Description property provides a textual description of the object.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
InstanceID
Override
InstanceID
Description
Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following \'preferred\' algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon \':\', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority. (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> MUST NOT contain a colon (\':\'). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the organizational entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above \'preferred\' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instance\'s NameSpace. \nFor DMTF defined instances, the \'preferred\' algorithm MUST be used with the <OrgID> set to \'CIM\'.
RegisteredOrganization
Required
Description
The organization that defines this profile.
ValueMap
Values
Other
DMTF
CompTIA
Consortium for Service Innovation
FAST
INTAP
itSMF
Northwest Energy Efficiency Alliance
SNIA
TM Forum
The Open Group
ANSI
IEEE
IETF
INCITS
The Green Grid
DMTF Reserved
ModelCorrespondence
CIM_RegisteredProfile.OtherRegisteredOrganization
OtherRegisteredOrganization
Description
A free-form string providing a description of the organization when 1, "Other", is specified for the RegisteredOrganization.
MaxLen
ModelCorrespondence
CIM_RegisteredProfile.RegisteredOrganization
RegisteredName
Required
Description
The name of this registered profile. Since multiple versions can exist for the same RegisteredName, the combination of RegisteredName, RegisteredOrganization, and RegisteredVersion MUST uniquely identify the registered profile within the scope of the organization.
MaxLen
RegisteredVersion
Required
Description
The version of this profile. The string representing the version MUST be in the form: \nM + "." + N + "." + U \nWhere: \nM - The major version (in numeric form) describing the profile\'s creation or last modification. \nN - The minor version (in numeric form) describing the profile\'s creation or last modification. \nU - The update (e.g. errata, patch, ..., in numeric form) describing the profile\'s creation or last modification.
AdvertiseTypes
Required
Description
This property signifies the advertisement for the profile information. It is used by the advertising services of the WBEM infrastructure to determine what should be advertised, via what mechanisms. The property is an array so that the profile MAY be advertised using several mechanisms. Note: If this property is null/uninitialized, this is equivalent to specifying the value 2, "Not Advertised".
ValueMap
Values
Other
Not Advertised
ArrayType
Indexed
ModelCorrespondence
CIM_RegisteredProfile.AdvertiseTypeDescriptions
AdvertiseTypeDescriptions
Description
A free-form string providing additional information related to the AdvertiseType. A description MUST be provided when the AdvertiseType is 1, "Other". An entry in this array corresponds to the entry in the AdvertiseTypes array at the same index. It is not expected that additional descriptions are needed if the Type is set to "Not Advertised" or "SLP". However, as the SLP template expands, or as other advertisement mechanisms are defined, support for additional descriptions may be needed. This array is defined to support this.
ArrayType
Indexed
ModelCorrespondence
CIM_RegisteredProfile.AdvertiseTypes
ingsged
CIM_AbstractIndicationSubscription
Version
2.16.0
UMLPackagePath
CIM::Event
Description
CIM_IndicationSubscription describes a flow of Indications. The flow is specified by the referenced Filter, and directed to the referenced destination or process in the Handler. Property values of the referenced CIM_IndicationFilter instance and CIM_ListenerDestination instance MAY significantly effect the definition of the subscription. E.g., a subscription associated with a "Transient" destination MAY be deleted when the destination terminates or is no longer available.
Filter
CIM_ManagedElement
Description
The Filter that defines the criteria and data of the possible Indications of this subscription.
Handler
CIM_ListenerDestination
Description
The Handler addressing delivery of the possible Indications of this subscription.
OnFatalErrorPolicy
Description
Defines the desired behavior for a subscription when a fatal error occurs in one of the Indication processing subcomponents (e.g., Indication processor, Indication or instance provider, or Indication handler) and the Indication cannot be successfully sent. Specifically, a failure implies that some aspect of Indication generation, processing or dispatch is no longer functioning and Indications may be lost. If the value of OnFatalErrorPolicy is 2 ("Ignore") or not set (NULL), the subscription MUST continue to be processed in a \'best effort\' mode. This mode of operation can lead to unpredictable, and potentially misleading results, because Indications may be lost. If the value is 3 ("Disable"), the subscription MUST be disabled. With this policy, no new Indications will be generated or dispatched until the subscription is explicitly enabled. This is accomplished via the property, SubscriptionState. If the value is 4 ("Remove"), the subscription MUST be deleted. Selecting this policy has the same effect as issuing a DeleteInstance operation on this subscription instance.
ValueMap
Values
Other
Ignore
Disable
Remove
OtherOnFatalErrorPolicy
Description
A string defining "Other" values for OnFatalErrorPolicy. This value MUST be set to a non NULL value when OnFatalErrorPolicy is set to a value of 1 ("Other"). For all other values, the OtherOnFatalErrorPolicy MUST be NULL.
FailureTriggerTimeInterval
Description
The FailureTriggerTimeInterval is used by the client to specify a recommended minimum delay before the OnFatalErrorPolicy is implemented.
Units
Seconds
PUnit
second
SubscriptionState
Write
Description
Indicates the current processing state of the subscription.
ValueMap
Values
Unknown
Other
Enabled
Enabled Degraded
Disabled
OtherSubscriptionState
Description
A string defining "Other" values for SubscriptionState. This value MUST be set to a non NULL value when SubscriptionState is set to a value of 1 ("Other"). For all other values, the OtherSubscriptionState MUST be NULL.
TimeOfLastStateChange
Description
Date and time of the last state change. This value is based on the notion of local date and time of the Managed System Element running the Indication processing subcomponents.
SubscriptionDuration
Write
Description
SubscriptionDuration defines the desired length of the subscription. Indications generated after the duration of the subscription has exceeded SubscriptionDuration MUST NOT be sent. The duration of a subscription MAY be changed by modifying this property. An expired subscription MAY be deleted and MUST NOT be modified. If the value of SubscriptionDuration is not set, the subscription MUST be treated as having no expiration date.
Units
Seconds
PUnit
second
SubscriptionStartTime
Description
SubscriptionStartTime is the time the subscription was started. The value of this property is computed based on the notion of date and time of the ManagedSystemElement running the Indication processing subcomponents.
SubscriptionTimeRemaining
Description
SubscriptionTimeRemaining is a computed value that provides a snapshot of the time remaining in the Subscription.
Units
Seconds
PUnit
second
RepeatNotificationPolicy
Description
The RepeatNotificationPolicy property defines the desired behavior for handling Indications that report the occurrence of the same underlying event (e.g., the disk is still generating I/O errors and has not yet been repaired). The defined semantics for the RepeatNotificationCount, RepeatNotificationInterval, and RepeatNotificationGap properties depend on the value of RepeatNotificationPolicy, but values for these properties MUST be set if the property is defined for the selected policy. If the value of RepeatNotificationPolicy is 0 ("Unknown") or not set, no special processing for repeat Indications is defined by the subscription. The semantics associated with the handling of repeat Indications MAY be defined by the Indication processing subcomponents. If the value of RepeatNotificationPolicy is 2 ("None"), special processing of repeat Indications MUST NOT be performed. If the value is 3 ("Suppress") the first RepeatNotificationCount Indications, describing the same event, MUST be sent and all subsequent Indications for this event suppressed for the remainder of the time interval RepeatNotificationInterval. A new interval starts when the next Indication for this event is received. If the value of RepeatNotificationPolicy is 4 ("Delay") and an Indication is received, this Indication MUST be suppressed if, including this Indication, RepeatNoticationCount or fewer Indications for this event have been received during the prior time interval defined by RepeatNotificationInterval. If this Indication is the RepeatNotificationCount + 1 Indication, this Indication MUST be sent and all subsequent Indications for this event ignored until the RepeatNotificationGap has elapsed. A RepeatNotificationInterval MAY NOT overlap a RepeatNotificationGap time interval.
ValueMap
Values
Unknown
Other
None
Suppress
Delay
OtherRepeatNotificationPolicy
Description
A string defining "Other" values for RepeatNotificationPolicy. This value MUST be set to a non NULL value when RepeatNotificationPolicy is set to a value of 1 ("Other"). For all other values, the OtherRepeatNotificationPolicy MUST be NULL.
RepeatNotificationInterval
Description
Defines the time interval for the repeat notification policy calculation.
Units
Seconds
PUnit
second
RepeatNotificationGap
Description
Defines the gap interval for the repeat notification policy calculation.
Units
Seconds
PUnit
second
RepeatNotificationCount
Description
Defines the count property for the repeat notification policy calculation.
no longer av
CIM_InstModification
CIM_InstIndication
Version
2.10.0
UMLPackagePath
CIM::Event
Description
CIM_InstModification notifies when an instance is modified.
SourceInstanceHost
Description
The host name or IP address of the SourceInstance.
ModelCorrespondence
CIM_InstIndication.SourceInstance
SourceInstanceModelPath
Description
The Model Path of the SourceInstance. The following format MUST be used to encode the Model Path: \n<NamespacePath>:<ClassName>.<Prop1>="<Value1>", \n<Prop2>="<Value2>", ...
ModelCorrespondence
CIM_InstIndication.SourceInstance
SourceInstance
Required
Description
A copy of the instance that changed to generate the Indication. SourceInstance contains the current values of the properties selected by the Indication Filter\'s Query. In the case of CIM_InstDeletion, the property values are copied before the instance is deleted.
IndicationIdentifier
Description
An identifier for the Indication. This property is similar to a key value in that it can be used for identification, when correlating Indications (see the CorrelatedIndications array). Its value SHOULD be unique as long as correlations are reported, but MAY be reused or left NULL if no future Indications will reference it in their CorrelatedIndications array.To ensure uniqueness, the value of IndicationIdentifier should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the IndicationIdentifier or that is a recognized ID that is assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in IndicationIdentifier must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be re-used to identify different underlying (real-world) elements. \nIf the above "preferred" algorithm is not used, the defining entity should assure that the resulting IndicationIdentifier is not re-used across any IndicationIdentifiers that are produced by this or other providers for the NameSpace of this instance. \nFor DMTF-defined instances, the "preferred" algorithm should be used with the <OrgID> set to CIM.
MappingStrings
Recommendation.ITU|X733.Notification identifier
CorrelatedIndications
Description
A list of IndicationIdentifiers whose notifications are correlated with (related to) this one.
MappingStrings
Recommendation.ITU|X733.Correlated notifications
ModelCorrespondence
CIM_Indication.IndicationIdentifier
IndicationTime
Description
The time and date of creation of the Indication. The property may be set to NULL if the entity creating the Indication is not capable of determining this information. Note that IndicationTime may be the same for two Indications that are generated in rapid succession.
PerceivedSeverity
Description
An enumerated value that describes the severity of the Indication from the notifier\'s point of view: \n1 - Other, by CIM convention, is used to indicate that the Severity\'s value can be found in the OtherSeverity property. \n3 - Degraded/Warning should be used when its appropriate to let the user decide if action is needed. \n4 - Minor should be used to indicate action is needed, but the situation is not serious at this time. \n5 - Major should be used to indicate action is needed NOW. \n6 - Critical should be used to indicate action is needed NOW and the scope is broad (perhaps an imminent outage to a critical resource will result). \n7 - Fatal/NonRecoverable should be used to indicate an error occurred, but it\'s too late to take remedial action. \n2 and 0 - Information and Unknown (respectively) follow common usage. Literally, the Indication is purely informational or its severity is simply unknown.
ValueMap
Values
Unknown
Other
Information
Degraded/Warning
Minor
Major
Critical
Fatal/NonRecoverable
DMTF Reserved
MappingStrings
Recommendation.ITU|X733.Perceived severity
OtherSeverity
Description
Holds the value of the user defined severity value when \'PerceivedSeverity\' is 1 ("Other").
ModelCorrespondence
CIM_AlertIndication.PerceivedSeverity
IndicationFilterName
Description
An identifier for the indication filter that selects this indication and causes it to be sent. This property is to be filled out by the indication sending service. The value shall be correlatable with the Name property of the instance of CIM_IndicationFilter describing the criteria of the indication. The value of the IndicationFilterName should be formatted using the following algorithm: < OrgID > : < LocalID >, where < OrgID > and < LocalID > are separated by a colon (:) and < OrgID > shall include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the value or that is a registered ID assigned to the business entity by a recognized global authority. In addition, to ensure uniqueness, < OrgID > shall not contain a colon (:).When using this algorithm, the first colon to appear in the value shall appear between < OrgID > and < LocalID >. < LocalID > is chosen by the business entity and shall be used uniquely.
ModelCorrespondence
CIM_IndicationFilter.Name
PreviousInstance
Description
A copy of the \'previous\' instance whose change generated the Indication. PreviousInstance contains \'older\' values of an instance\'s properties (as compared to SourceInstance), selected by the IndicationFilter\'s Query.
nce that cha
CIM_IndicationFilter
CIM_ManagedElement
Version
2.22.0
UMLPackagePath
CIM::Event
Description
CIM_IndicationFilter defines the criteria for generating an instance of CIM_Indication and what data should be returned in that instance. It is derived from CIM_ManagedElement to allow modeling the dependency of the filter on a specific service.\nIf used with the "DMTF:CQLT" language, the processing and CQLT tokens that must be supported are described in the description of the QueryLanguage property
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. \nNote that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
Description
Description
The Description property provides a textual description of the object.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
InstanceID
Description
InstanceID is an optional property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace. Various subclasses of this class may override this property to make it required, or a key. Such subclasses may also modify the preferred algorithms for ensuring uniqueness that are defined below.\nTo ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be reused to identify different underlying (real-world) elements. If not null and the above "preferred" algorithm is not used, the defining entity must assure that the resulting InstanceID is not reused across any InstanceIDs produced by this or other providers for the NameSpace of this instance. \nIf not set to null for DMTF-defined instances, the "preferred" algorithm must be used with the <OrgID> set to CIM.
SystemCreationClassName
Description
A System\'s CreationClassName. The Filter is defined in the context of a CIM_System, where it is hosted or to which it applies. In a future release, a weak relationship will be explicitly added to the model. This is not done now to allow further refinement of the Filter definition and its inheritance tree. Keys are defined now to allow the class to be instantiated.
MaxLen
SystemName
Description
A System\'s Name. The Filter is defined in the context of a CIM_System, where it is hosted or to which it applies. In a future release, a weak relationship will be explicitly added to the model. This is not done now to allow further refinement of the Filter definition and its inheritance tree. Keys are defined now to allow the class to be instantiated.
MaxLen
CreationClassName
Description
Indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, it allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
Name
Description
The name of the filter.
SourceNamespace
Deprecated
CIM_IndicationFilter.SourceNamespaces
Description
The path to a local namespace where the Indications originate. If NULL, the namespace of the Filter registration is assumed.
SourceNamespaces
Description
The names of the local namespaces where the Indications originate. If NULL, the namespace of the Filter registration is assumed. SourceNamespaces replaces the SourceNamespace property on IndicationFilter to provide a means of defining the multiple namespaces where indications may originate.
ArrayType
Indexed
ModelCorrespondence
CIM_Namespace.Name
IndividualSubscriptionSupported
Description
If IndividualSubscriptionSupported is true, the implementation shall support direct subscription to this IndicationFilter. If IndividualSubscriptionSupported is false, the implementation shall not support direct subscription to this IndicationFilter.
Query
Required
Description
A query expression that defines the condition(s) under which instances of CIM_Indication will be generated. For CIM_InstIndication subclasses of CIM_Indication classes, the query expression may also define the instance properties to be copied to the CIM_InstIndication\'s SourceInstance and PreviousInstance properties. Query language semantics include projection (e.g., Select), range (e.g., From) and predicate (e.g., Where). \nWhen used with QueryLanguage set to "DMTF:CQL" or "DMTF:CQLT", the FROM clause shall contain at least one subclass of CIM_Indication and may contain any number of other classes or subqueries. If only one subclass of CIM_Indication is named, it defines the CIM_Indication that this Instance of CIM_IndicationFilter will produce. If more than one subclass of CIM_Indication is named, then one of them must be named explicitly in the select-list. \nThe select-list must refer explicitly or implicitly to exactly one CIM_Indication subclass. In addition, it shall conform to one of several options: \n1) only a "*": This may only be used if the Indication subclass is the only entry on the FROM list. \n2) only a "<Indicationclass or alias>.*": This form may be used if the FROM clause contains more than one Indication subclass. \n3) a list of the form "<propertyname>*[","[<literal> AS ]<propertyname>]": This form may only be used if the CIM_Indication subclass is the only entry on the FROM list. In this form, the literal is assigned to the named property of the selected CIM_Indication subclass \n4) a list of the form "<Indicationname>.<propertyname> *["," [<Indicationname>.<propertyname> |"": <literal> AS <propertyname> | <fromname>.<propertyname> AS <propertyname> ] ]" : The first term selects the appropriate CIM_Indication subclass to produce. Subsequent terms allow other properties of that indication, or allow a literal or property of another class to be assigned to the output as one of the properties of the selected CIM_Indication subclass. \nNote that in all cases, only the property names of the selected CIM_Indication subclass may be referred to in the select-list.\nWhen used with "DMTF:CQLT", the additional string array property TemplateVariable should be used to provide additional filtering information to the query.
ModelCorrespondence
CIM_IndicationFilter.QueryLanguage
CIM_IndicationFilter.TemplateVariable
QueryLanguage
Required
Description
The language in which the query is expressed. . \n"DMTF:CQL" indicates a CIM Query Language string. \n"DMTF:CQLT" indicates a CIM Query Language Template string. When used, the identifiers recognized in the $identifier$ tokens are "SELF" and the property names of this class, or one of its subclasses. As seen by a CIM client, the value of the Query property is not changed as a result of template processing. Template processing conceptually produces a new query string, which defines the actual conditions that will trigger production of a CIM_Indication instance. When used in the Query string, $SELF$ will be replaced by a string corresponding to a WBEM URI referencing the instance of this class that contains the Query template string. Tokens of the form $<propertyname>$ will be replaced by a string representing the corresponding property value of the instance of this class that contains the Query string. The Query string must be evaluated when the CIM_IndicationFilter is created and at any time when one any modification of any property referenced by tokens in the Query string are modified.
ModelCorrespondence
CIM_IndicationFilter.Query
CIM_IndicationFilter.TemplateVariable
CIM_Capabilities
CIM_ManagedElement
Version
2.19.0
UMLPackagePath
CIM::Core::Capabilities
Description
Capabilities is an abstract class whose subclasses describe abilities and/or potential for use. For example, one may describe the maximum number of VLANs that can be supported on a system using a subclass of Capabilities. Capabilities are tied to the elements which they describe using the ElementCapabilities association. Note that the cardinality of the ManagedElement reference is Min(1), Max(1). This cardinality mandates the instantiation of the ElementCapabilities association for the referenced instance of Capabilities. ElementCapabilities describes the existence requirements and context for the referenced instance of ManagedElement. Specifically, the ManagedElement MUST exist and provides the context for the Capabilities. Note that Capabilities do not indicate what IS configured or operational, but what CAN or CANNOT exist, be defined or be used. Note that it is possible to describe both supported and excluded abilities and functions (both capabilities and limitations) using this class.
Description
Description
The Description property provides a textual description of the object.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
InstanceID
Override
InstanceID
Description
Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following \'preferred\' algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon \':\', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (\':\'). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above \'preferred\' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instance\'s NameSpace. \nFor DMTF defined instances, the \'preferred\' algorithm MUST be used with the <OrgID> set to \'CIM\'.
ElementName
Required
Override
ElementName
Description
The user friendly name for this instance of Capabilities. In addition, the user friendly name can be used as a index property for a search of query. (Note: Name does not have to be unique within a namespace.)
et t	
Test_Indication
CIM_ProcessIndication
Description
An abstract superclass for specialized Indication classes, addressing specific changes and alerts published by providers and instrumentation. Subclasses include AlertIndication (with properties such as PerceivedSeverity and ProbableCause), and SNMPTrapIndication (which recasts Traps as CIM indications).
UMLPackagePath
CIM::Event
Version
2.6.0
IndicationIdentifier
Description
An identifier for the Indication. This property is similar to a key value in that it can be used for identification, when correlating Indications (see the CorrelatedIndications array). Its value SHOULD be unique as long as correlations are reported, but MAY be reused or left NULL if no future Indications will reference it in their CorrelatedIndications array.To ensure uniqueness, the value of IndicationIdentifier should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the IndicationIdentifier or that is a recognized ID that is assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in IndicationIdentifier must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be re-used to identify different underlying (real-world) elements. \nIf the above "preferred" algorithm is not used, the defining entity should assure that the resulting IndicationIdentifier is not re-used across any IndicationIdentifiers that are produced by this or other providers for the NameSpace of this instance. \nFor DMTF-defined instances, the "preferred" algorithm should be used with the <OrgID> set to CIM.
MappingStrings
Recommendation.ITU|X733.Notification identifier
CorrelatedIndications
Description
A list of IndicationIdentifiers whose notifications are correlated with (related to) this one.
MappingStrings
Recommendation.ITU|X733.Correlated notifications
ModelCorrespondence
CIM_Indication.IndicationIdentifier
IndicationTime
Description
The time and date of creation of the Indication. The property may be set to NULL if the entity creating the Indication is not capable of determining this information. Note that IndicationTime may be the same for two Indications that are generated in rapid succession.
PerceivedSeverity
Description
An enumerated value that describes the severity of the Indication from the notifier\'s point of view: \n1 - Other, by CIM convention, is used to indicate that the Severity\'s value can be found in the OtherSeverity property. \n3 - Degraded/Warning should be used when its appropriate to let the user decide if action is needed. \n4 - Minor should be used to indicate action is needed, but the situation is not serious at this time. \n5 - Major should be used to indicate action is needed NOW. \n6 - Critical should be used to indicate action is needed NOW and the scope is broad (perhaps an imminent outage to a critical resource will result). \n7 - Fatal/NonRecoverable should be used to indicate an error occurred, but it\'s too late to take remedial action. \n2 and 0 - Information and Unknown (respectively) follow common usage. Literally, the Indication is purely informational or its severity is simply unknown.
ValueMap
Values
Unknown
Other
Information
Degraded/Warning
Minor
Major
Critical
Fatal/NonRecoverable
DMTF Reserved
MappingStrings
Recommendation.ITU|X733.Perceived severity
OtherSeverity
Description
Holds the value of the user defined severity value when \'PerceivedSeverity\' is 1 ("Other").
ModelCorrespondence
CIM_AlertIndication.PerceivedSeverity
IndicationFilterName
Description
An identifier for the indication filter that selects this indication and causes it to be sent. This property is to be filled out by the indication sending service. The value shall be correlatable with the Name property of the instance of CIM_IndicationFilter describing the criteria of the indication. The value of the IndicationFilterName should be formatted using the following algorithm: < OrgID > : < LocalID >, where < OrgID > and < LocalID > are separated by a colon (:) and < OrgID > shall include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the value or that is a registered ID assigned to the business entity by a recognized global authority. In addition, to ensure uniqueness, < OrgID > shall not contain a colon (:).When using this algorithm, the first colon to appear in the value shall appear between < OrgID > and < LocalID >. < LocalID > is chosen by the business entity and shall be used uniquely.
ModelCorrespondence
CIM_IndicationFilter.Name
MethodName
SendTestIndication
Static
lations are 
SFCB_RegisteredProfile
CIM_RegisteredProfile
Description
A RegisteredProfile describes a set of CIM Schema classes with required properties and/or methods, necessary to manage a real-world entity or to support a usage scenario, in an interoperable fashion. RegisteredProfiles can be defined by the DMTF or other standards organizations. Note that this class should not be confused with CIM_Profile, which collects SettingData instances, to be applied as a \'configuration profile\' for an element. \nA RegisteredProfile is a named \'standard\' for CIM-based management of a particular System, subsystem, Service or other entity, for a specified set of uses. It is a complete, standalone definition, as opposed to the subclass RegisteredSubProfile, which requires a scoping profile for context. \nThe uses for a RegisteredProfile or SubProfile MUST be specified in the document that defines the profile. Examples of Profiles are to manage various aspects of an Operating System, Storage Array, or Database. The name of the profile is defined and scoped by its authoring organization.
UMLPackagePath
CIM::Interop
Version
2.22.0
AdvertiseTypeDescriptions
Description
A free-form string providing additional information related to the AdvertiseType. A description MUST be provided when the AdvertiseType is 1, "Other". An entry in this array corresponds to the entry in the AdvertiseTypes array at the same index. It is not expected that additional descriptions are needed if the Type is set to "Not Advertised" or "SLP". However, as the SLP template expands, or as other advertisement mechanisms are defined, support for additional descriptions may be needed. This array is defined to support this.
ArrayType
Indexed
ModelCorrespondence
CIM_RegisteredProfile.AdvertiseTypes
AdvertiseTypes
Required
Description
This property signifies the advertisement for the profile information. It is used by the advertising services of the WBEM infrastructure to determine what should be advertised, via what mechanisms. The property is an array so that the profile MAY be advertised using several mechanisms. Note: If this property is null/uninitialized, this is equivalent to specifying the value 2, "Not Advertised".
ValueMap
Values
Other
Not Advertised
ArrayType
Indexed
ModelCorrespondence
CIM_RegisteredProfile.AdvertiseTypeDescriptions
RegisteredVersion
Required
Description
The version of this profile. The string representing the version MUST be in the form: \nM + "." + N + "." + U \nWhere: \nM - The major version (in numeric form) describing the profile\'s creation or last modification. \nN - The minor version (in numeric form) describing the profile\'s creation or last modification. \nU - The update (e.g. errata, patch, ..., in numeric form) describing the profile\'s creation or last modification.
RegisteredName
Required
Description
The name of this registered profile. Since multiple versions can exist for the same RegisteredName, the combination of RegisteredName, RegisteredOrganization, and RegisteredVersion MUST uniquely identify the registered profile within the scope of the organization.
MaxLen
OtherRegisteredOrganization
Description
A free-form string providing a description of the organization when 1, "Other", is specified for the RegisteredOrganization.
MaxLen
ModelCorrespondence
CIM_RegisteredProfile.RegisteredOrganization
RegisteredOrganization
Required
Description
The organization that defines this profile.
ValueMap
Values
Other
DMTF
CompTIA
Consortium for Service Innovation
FAST
INTAP
itSMF
Northwest Energy Efficiency Alliance
SNIA
TM Forum
The Open Group
ANSI
IEEE
IETF
INCITS
The Green Grid
DMTF Reserved
ModelCorrespondence
CIM_RegisteredProfile.OtherRegisteredOrganization
InstanceID
Override
InstanceID
Description
Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following \'preferred\' algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon \':\', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority. (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> MUST NOT contain a colon (\':\'). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the organizational entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above \'preferred\' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instance\'s NameSpace. \nFor DMTF defined instances, the \'preferred\' algorithm MUST be used with the <OrgID> set to \'CIM\'.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
Description
Description
The Description property provides a textual description of the object.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. \nNote that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
CIM_ServiceAccessPoint
CIM_EnabledLogicalElement
Version
2.10.0
UMLPackagePath
CIM::Core::Service
Description
CIM_ServiceAccessPoint represents the ability to utilize or invoke a Service. Access points represent that a Service is made available for other entities to use.
TransitioningToState
Description
TransitioningToState indicates the target state to which the instance is transitioning. \nA value of 5 "No Change" shall indicate that no transition is in progress.A value of 12 "Not Applicable" shall indicate the implementation does not support representing ongoing transitions. \nA value other than 5 or 12 shall identify the state to which the element is in the process of transitioning.
ValueMap
Values
Unknown
Enabled
Disabled
Shut Down
No Change
Offline
Test
Defer
Quiesce
Reboot
Reset
Not Applicable
DMTF Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.RequestStateChange
CIM_EnabledLogicalElement.RequestedState
CIM_EnabledLogicalElement.EnabledState
AvailableRequestedStates
Description
AvailableRequestedStates indicates the possible values for the RequestedState parameter of the method RequestStateChange, used to initiate a state change. The values listed shall be a subset of the values contained in the RequestedStatesSupported property of the associated instance of CIM_EnabledLogicalElementCapabilities where the values selected are a function of the current state of the CIM_EnabledLogicalElement. This property may be non-null if an implementation is able to advertise the set of possible values as a function of the current state. This property shall be null if an implementation is unable to determine the set of possible values as a function of the current state.
ValueMap
Values
Enabled
Disabled
Shut Down
Offline
Test
Defer
Quiesce
Reboot
Reset
DMTF Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.RequestStateChange
CIM_EnabledLogicalElementCapabilities.RequestedStatesSupported
TimeOfLastStateChange
Description
The date or time when the EnabledState of the element last changed. If the state of the element has not changed and this property is populated, then it must be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property must not be updated.
EnabledDefault
Write
Description
An enumerated value indicating an administrator\'s default or startup configuration for the Enabled State of an element. By default, the element is "Enabled" (value=2).
ValueMap
32768..65535
Values
Enabled
Disabled
Not Applicable
Enabled but Offline
No Default
Quiesce
DMTF Reserved
Vendor Reserved
RequestedState
Description
RequestedState is an integer enumeration that indicates the last requested or desired state for the element, irrespective of the mechanism through which it was requested. The actual state of the element is represented by EnabledState. This property is provided to compare the last requested and current enabled or disabled states. Note that when EnabledState is set to 5 ("Not Applicable"), then this property has no meaning. Refer to the EnabledState property description for explanations of the values in the RequestedState enumeration. \n"Unknown" (0) indicates the last requested state for the element is unknown.\nNote that the value "No Change" (5) has been deprecated in lieu of indicating the last requested state is "Unknown" (0). If the last requested or desired state is unknown, RequestedState should have the value "Unknown" (0), but may have the value "No Change" (5).Offline (6) indicates that the element has been requested to transition to the Enabled but Offline EnabledState. \nIt should be noted that there are two new values in RequestedState that build on the statuses of EnabledState. These are "Reboot" (10) and "Reset" (11). Reboot refers to doing a "Shut Down" and then moving to an "Enabled" state. Reset indicates that the element is first "Disabled" and then "Enabled". The distinction between requesting "Shut Down" and "Disabled" should also be noted. Shut Down requests an orderly transition to the Disabled state, and might involve removing power, to completely erase any existing state. The Disabled state requests an immediate disabling of the element, such that it will not execute or accept any commands or processing requests. \n\nThis property is set as the result of a method invocation (such as Start or StopService on CIM_Service), or can be overridden and defined as WRITEable in a subclass. The method approach is considered superior to a WRITEable property, because it allows an explicit invocation of the operation and the return of a result code. \n\nIf knowledge of the last RequestedState is not supported for the EnabledLogicalElement, the property shall be NULL or have the value 12 "Not Applicable".
ValueMap
32768..65535
Values
Unknown
Enabled
Disabled
Shut Down
No Change
Offline
Test
Deferred
Quiesce
Reboot
Reset
Not Applicable
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
OtherEnabledState
Description
A string that describes the enabled or disabled state of the element when the EnabledState property is set to 1 ("Other"). This property must be set to null when EnabledState is any value other than 1.
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
EnabledState
Description
EnabledState is an integer enumeration that indicates the enabled and disabled states of an element. It can also indicate the transitions between these requested states. For example, shutting down (value=4) and starting (value=10) are transient states between enabled and disabled. The following text briefly summarizes the various enabled and disabled states: \nEnabled (2) indicates that the element is or could be executing commands, will process any queued commands, and queues new requests. \nDisabled (3) indicates that the element will not execute commands and will drop any new requests. \nShutting Down (4) indicates that the element is in the process of going to a Disabled state. \nNot Applicable (5) indicates the element does not support being enabled or disabled. \nEnabled but Offline (6) indicates that the element might be completing commands, and will drop any new requests. \nTest (7) indicates that the element is in a test state. \nDeferred (8) indicates that the element might be completing commands, but will queue any new requests. \nQuiesce (9) indicates that the element is enabled but in a restricted mode.\nStarting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.
ValueMap
11..32767
32768..65535
Values
Unknown
Other
Enabled
Disabled
Shutting Down
Not Applicable
Enabled but Offline
In Test
Deferred
Quiesce
Starting
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.OtherEnabledState
PrimaryStatus
Description
PrimaryStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents. \nPrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. "Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"OK" indicates the ManagedElement is functioning normally. \n"Degraded" indicates the ManagedElement is functioning below normal. \n"Error" indicates the ManagedElement is in an Error condition.
ValueMap
0x8000..
Values
Unknown
Degraded
Error
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_ManagedSystemElement.DetailedStatus
CIM_ManagedSystemElement.HealthState
OperatingStatus
Description
OperatingStatus provides a current status value for the operational condition of the element and can be used for providing more detail with respect to the value of EnabledState. It can also provide the transitional states when an element is transitioning from one state to another, such as when an element is transitioning between EnabledState and RequestedState, as well as other transitional conditions.\nOperatingStatus consists of one of the following values: Unknown, Not Available, In Service, Starting, Stopping, Stopped, Aborted, Dormant, Completed, Migrating, Emmigrating, Immigrating, Snapshotting. Shutting Down, In Test \nA Null return indicates the implementation (provider) does not implement this property. \n"Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"None" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"Servicing" describes an element being configured, maintained, cleaned, or otherwise administered. \n"Starting" describes an element being initialized. \n"Stopping" describes an element being brought to an orderly stop. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Completed" indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded in the PrimaryStatus so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \n"Migrating" element is being moved between host elements. \n"Immigrating" element is being moved to new host element. \n"Emigrating" element is being moved away from host element. \n"Shutting Down" describes an element being brought to an abrupt stop. \n"In Test" element is performing test functions. \n"Transitioning" describes an element that is between states, that is, it is not fully available in either its previous state or its next state. This value should be used if other values indicating a transition to a specific state are not applicable.\n"In Service" describes an element that is in service and operational.
ValueMap
0x8000..
Values
Unknown
Not Available
Servicing
Starting
Stopping
Stopped
Aborted
Dormant
Completed
Migrating
Emigrating
Immigrating
Snapshotting
Shutting Down
In Test
Transitioning
In Service
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
DetailedStatus
Description
DetailedStatus compliments PrimaryStatus with additional status detail. It consists of one of the following values: Not Available, No Additional Information, Stressed, Predictive Failure, Error, Non-Recoverable Error, SupportingEntityInError. Detailed status is used to expand upon the PrimaryStatus of the element. \nA Null return indicates the implementation (provider) does not implement this property. \n"Not Available" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"No Additional Information" indicates that the element is functioning normally as indicated by PrimaryStatus = "OK". \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, and so on. \n"Predictive Failure" indicates that an element is functioning normally but a failure is predicted in the near future. \n"Non-Recoverable Error " indicates that this element is in an error condition that requires human intervention. \n"Supporting Entity in Error" indicates that this element might be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems.
ValueMap
0x8000..
Values
Not Available
No Additional Information
Stressed
Predictive Failure
Non-Recoverable Error
Supporting Entity in Error
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.PrimaryStatus
CIM_ManagedSystemElement.HealthState
CommunicationStatus
Description
CommunicationStatus indicates the ability of the instrumentation to communicate with the underlying ManagedElement. CommunicationStatus consists of one of the following values: Unknown, None, Communication OK, Lost Communication, or No Contact. \nA Null return indicates the implementation (provider) does not implement this property. \n"Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"Not Available" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"Communication OK " indicates communication is established with the element, but does not convey any quality of service. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the Managed Element is known to exist and has been contacted successfully in the past, but is currently unreachable.
ValueMap
0x8000..
Values
Unknown
Not Available
Communication OK
Lost Communication
No Contact
DMTF Reserved
Vendor Reserved
HealthState
Description
Indicates the current health of the element. This attribute expresses the health of this element but not necessarily that of its subcomponents. The possible values are 0 to 30, where 5 means the element is entirely healthy and 30 means the element is completely non-functional. The following continuum is defined: \n"Non-recoverable Error" (30) - The element has completely failed, and recovery is not possible. All functionality provided by this element has been lost. \n"Critical Failure" (25) - The element is non-functional and recovery might not be possible. \n"Major Failure" (20) - The element is failing. It is possible that some or all of the functionality of this component is degraded or not working. \n"Minor Failure" (15) - All functionality is available but some might be degraded. \n"Degraded/Warning" (10) - The element is in working order and all functionality is provided. However, the element is not working to the best of its abilities. For example, the element might not be operating at optimal performance or it might be reporting recoverable errors. \n"OK" (5) - The element is fully functional and is operating within normal operational parameters and without error. \n"Unknown" (0) - The implementation cannot report on HealthState at this time. \nDMTF has reserved the unused portion of the continuum for additional HealthStates in the future.
ValueMap
Values
Unknown
Degraded/Warning
Minor failure
Major failure
Critical failure
Non-recoverable error
DMTF Reserved
Status
Deprecated
CIM_ManagedSystemElement.OperationalStatus
Description
A string indicating the current status of the object. Various operational and non-operational statuses are defined. This property is deprecated in lieu of OperationalStatus, which includes the same semantics in its enumeration. This change is made for 3 reasons: \n1) Status is more correctly defined as an array. This definition overcomes the limitation of describing status using a single value, when it is really a multi-valued property (for example, an element might be OK AND Stopped. \n2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values. \n3) The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, Status was grandfathered into the Schema. Use of the deprecated qualifier allows the maintenance of the existing property, but also permits an improved definition using OperationalStatus.
ValueMap
Error
Degraded
Unknown
Pred Fail
Starting
Stopping
Service
Stressed
NonRecover
No Contact
Lost Comm
Stopped
MaxLen
StatusDescriptions
Description
Strings describing the various OperationalStatus array values. For example, if "Stopping" is the value assigned to OperationalStatus, then this property may contain an explanation as to why an object is being stopped. Note that entries in this array are correlated with those at the same array index in OperationalStatus.
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.OperationalStatus
OperationalStatus
Description
Indicates the current statuses of the element. Various operational statuses are defined. Many of the enumeration\'s values are self-explanatory. However, a few are not and are described here in more detail. \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, and so on. \n"Predictive Failure" indicates that an element is functioning nominally but predicting a failure in the near future. \n"In Service" describes an element being configured, maintained, cleaned, or otherwise administered. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is currently unreachable. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Supporting Entity in Error" indicates that this element might be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems. \n"Completed" indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \n"Power Mode" indicates that the element has additional power model information contained in the Associated PowerManagementService association. \nOperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent approach to enumerations, to address implementation needs for an array property, and to provide a migration path from today\'s environment to the future. This change was not made earlier because it required the deprecated qualifier. Due to the widespread use of the existing Status property in management applications, it is strongly recommended that providers or instrumentation provide both the Status and OperationalStatus properties. Further, the first value of OperationalStatus should contain the primary status for the element. When instrumented, Status (because it is single-valued) should also provide the primary status of the element.
ValueMap
0x8000..
Values
Unknown
Other
Degraded
Stressed
Predictive Failure
Error
Non-Recoverable Error
Starting
Stopping
Stopped
In Service
No Contact
Lost Communication
Aborted
Dormant
Supporting Entity in Error
Completed
Power Mode
DMTF Reserved
Vendor Reserved
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.StatusDescriptions
InstallDate
Description
A datetime value that indicates when the object was installed. Lack of a value does not indicate that the object is not installed.
MappingStrings
MIF.DMTF|ComponentID|001.5
InstanceID
Description
InstanceID is an optional property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace. Various subclasses of this class may override this property to make it required, or a key. Such subclasses may also modify the preferred algorithms for ensuring uniqueness that are defined below.\nTo ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be reused to identify different underlying (real-world) elements. If not null and the above "preferred" algorithm is not used, the defining entity must assure that the resulting InstanceID is not reused across any InstanceIDs produced by this or other providers for the NameSpace of this instance. \nIf not set to null for DMTF-defined instances, the "preferred" algorithm must be used with the <OrgID> set to CIM.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
Description
Description
The Description property provides a textual description of the object.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. \nNote that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
SystemCreationClassName
Description
The CreationClassName of the scoping System.
MaxLen
Propagated
CIM_System.CreationClassName
SystemName
Description
The Name of the scoping System.
MaxLen
Propagated
CIM_System.Name
CreationClassName
Description
CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
Name
Override
Name
Description
The Name property uniquely identifies the ServiceAccessPoint and provides an indication of the functionality that is managed. This functionality is described in more detail in the Description property of the object.
MaxLen
RequestStateChange
Description
Requests that the state of the element be changed to the value specified in the RequestedState parameter. When the requested state change takes place, the EnabledState and RequestedState of the element will be the same. Invoking the RequestStateChange method multiple times could result in earlier requests being overwritten or lost. \nA return code of 0 shall indicate the state change was successfully initiated. \nA return code of 3 shall indicate that the state transition cannot complete within the interval specified by the TimeoutPeriod parameter. \nA return code of 4096 (0x1000) shall indicate the state change was successfully initiated, a ConcreteJob has been created, and its reference returned in the output parameter Job. Any other return code indicates an error condition.
ValueMap
4096
4097
4098
4099
4100..32767
32768..65535
Values
Completed with No Error
Not Supported
Unknown or Unspecified Error
Cannot complete within Timeout Period
Failed
Invalid Parameter
In Use
DMTF Reserved
Method Parameters Checked - Job Started
Invalid State Transition
Use of Timeout Parameter Not Supported
Busy
Method Reserved
Vendor Specific
ModelCorrespondence
CIM_EnabledLogicalElement.RequestedState
RequestedState
Description
The state requested for the element. This information will be placed into the RequestedState property of the instance if the return code of the RequestStateChange method is 0 (\'Completed with No Error\'), or 4096 (0x1000) (\'Job Started\'). Refer to the description of the EnabledState and RequestedState properties for the detailed explanations of the RequestedState values.
ValueMap
32768..65535
Values
Enabled
Disabled
Shut Down
Offline
Test
Defer
Quiesce
Reboot
Reset
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.RequestedState
CIM_ConcreteJob
Description
May contain a reference to the ConcreteJob created to track the state transition initiated by the method invocation.
TimeoutPeriod
Description
A timeout period that specifies the maximum amount of time that the client expects the transition to the new state to take. The interval format must be used to specify the TimeoutPeriod. A value of 0 or a null parameter indicates that the client has no time requirements for the transition. \nIf this property does not contain 0 or null and the implementation does not support this parameter, a return code of \'Use Of Timeout Parameter Not Supported\' shall be returned.
CIM_ManagedSystemElement
CIM_ManagedElement
Version
2.22.0
UMLPackagePath
CIM::Core::CoreElements
Description
CIM_ManagedSystemElement is the base class for the System Element hierarchy. Any distinguishable component of a System is a candidate for inclusion in this class. Examples of system components include: \n- software components such as application servers, databases, and applications \n- operating system components such as files, processes, and threads \n- device components such as disk drives, controllers, processors, and printers \n- physical components such as chips and cards.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. \nNote that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
Description
Description
The Description property provides a textual description of the object.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
InstanceID
Description
InstanceID is an optional property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace. Various subclasses of this class may override this property to make it required, or a key. Such subclasses may also modify the preferred algorithms for ensuring uniqueness that are defined below.\nTo ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be reused to identify different underlying (real-world) elements. If not null and the above "preferred" algorithm is not used, the defining entity must assure that the resulting InstanceID is not reused across any InstanceIDs produced by this or other providers for the NameSpace of this instance. \nIf not set to null for DMTF-defined instances, the "preferred" algorithm must be used with the <OrgID> set to CIM.
InstallDate
Description
A datetime value that indicates when the object was installed. Lack of a value does not indicate that the object is not installed.
MappingStrings
MIF.DMTF|ComponentID|001.5
Name
Description
The Name property defines the label by which the object is known. When subclassed, the Name property can be overridden to be a Key property.
MaxLen
OperationalStatus
Description
Indicates the current statuses of the element. Various operational statuses are defined. Many of the enumeration\'s values are self-explanatory. However, a few are not and are described here in more detail. \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, and so on. \n"Predictive Failure" indicates that an element is functioning nominally but predicting a failure in the near future. \n"In Service" describes an element being configured, maintained, cleaned, or otherwise administered. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is currently unreachable. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Supporting Entity in Error" indicates that this element might be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems. \n"Completed" indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \n"Power Mode" indicates that the element has additional power model information contained in the Associated PowerManagementService association. \nOperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent approach to enumerations, to address implementation needs for an array property, and to provide a migration path from today\'s environment to the future. This change was not made earlier because it required the deprecated qualifier. Due to the widespread use of the existing Status property in management applications, it is strongly recommended that providers or instrumentation provide both the Status and OperationalStatus properties. Further, the first value of OperationalStatus should contain the primary status for the element. When instrumented, Status (because it is single-valued) should also provide the primary status of the element.
ValueMap
0x8000..
Values
Unknown
Other
Degraded
Stressed
Predictive Failure
Error
Non-Recoverable Error
Starting
Stopping
Stopped
In Service
No Contact
Lost Communication
Aborted
Dormant
Supporting Entity in Error
Completed
Power Mode
DMTF Reserved
Vendor Reserved
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.StatusDescriptions
StatusDescriptions
Description
Strings describing the various OperationalStatus array values. For example, if "Stopping" is the value assigned to OperationalStatus, then this property may contain an explanation as to why an object is being stopped. Note that entries in this array are correlated with those at the same array index in OperationalStatus.
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.OperationalStatus
Status
Deprecated
CIM_ManagedSystemElement.OperationalStatus
Description
A string indicating the current status of the object. Various operational and non-operational statuses are defined. This property is deprecated in lieu of OperationalStatus, which includes the same semantics in its enumeration. This change is made for 3 reasons: \n1) Status is more correctly defined as an array. This definition overcomes the limitation of describing status using a single value, when it is really a multi-valued property (for example, an element might be OK AND Stopped. \n2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values. \n3) The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, Status was grandfathered into the Schema. Use of the deprecated qualifier allows the maintenance of the existing property, but also permits an improved definition using OperationalStatus.
ValueMap
Error
Degraded
Unknown
Pred Fail
Starting
Stopping
Service
Stressed
NonRecover
No Contact
Lost Comm
Stopped
MaxLen
HealthState
Description
Indicates the current health of the element. This attribute expresses the health of this element but not necessarily that of its subcomponents. The possible values are 0 to 30, where 5 means the element is entirely healthy and 30 means the element is completely non-functional. The following continuum is defined: \n"Non-recoverable Error" (30) - The element has completely failed, and recovery is not possible. All functionality provided by this element has been lost. \n"Critical Failure" (25) - The element is non-functional and recovery might not be possible. \n"Major Failure" (20) - The element is failing. It is possible that some or all of the functionality of this component is degraded or not working. \n"Minor Failure" (15) - All functionality is available but some might be degraded. \n"Degraded/Warning" (10) - The element is in working order and all functionality is provided. However, the element is not working to the best of its abilities. For example, the element might not be operating at optimal performance or it might be reporting recoverable errors. \n"OK" (5) - The element is fully functional and is operating within normal operational parameters and without error. \n"Unknown" (0) - The implementation cannot report on HealthState at this time. \nDMTF has reserved the unused portion of the continuum for additional HealthStates in the future.
ValueMap
Values
Unknown
Degraded/Warning
Minor failure
Major failure
Critical failure
Non-recoverable error
DMTF Reserved
CommunicationStatus
Description
CommunicationStatus indicates the ability of the instrumentation to communicate with the underlying ManagedElement. CommunicationStatus consists of one of the following values: Unknown, None, Communication OK, Lost Communication, or No Contact. \nA Null return indicates the implementation (provider) does not implement this property. \n"Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"Not Available" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"Communication OK " indicates communication is established with the element, but does not convey any quality of service. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the Managed Element is known to exist and has been contacted successfully in the past, but is currently unreachable.
ValueMap
0x8000..
Values
Unknown
Not Available
Communication OK
Lost Communication
No Contact
DMTF Reserved
Vendor Reserved
DetailedStatus
Description
DetailedStatus compliments PrimaryStatus with additional status detail. It consists of one of the following values: Not Available, No Additional Information, Stressed, Predictive Failure, Error, Non-Recoverable Error, SupportingEntityInError. Detailed status is used to expand upon the PrimaryStatus of the element. \nA Null return indicates the implementation (provider) does not implement this property. \n"Not Available" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"No Additional Information" indicates that the element is functioning normally as indicated by PrimaryStatus = "OK". \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, and so on. \n"Predictive Failure" indicates that an element is functioning normally but a failure is predicted in the near future. \n"Non-Recoverable Error " indicates that this element is in an error condition that requires human intervention. \n"Supporting Entity in Error" indicates that this element might be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems.
ValueMap
0x8000..
Values
Not Available
No Additional Information
Stressed
Predictive Failure
Non-Recoverable Error
Supporting Entity in Error
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.PrimaryStatus
CIM_ManagedSystemElement.HealthState
OperatingStatus
Description
OperatingStatus provides a current status value for the operational condition of the element and can be used for providing more detail with respect to the value of EnabledState. It can also provide the transitional states when an element is transitioning from one state to another, such as when an element is transitioning between EnabledState and RequestedState, as well as other transitional conditions.\nOperatingStatus consists of one of the following values: Unknown, Not Available, In Service, Starting, Stopping, Stopped, Aborted, Dormant, Completed, Migrating, Emmigrating, Immigrating, Snapshotting. Shutting Down, In Test \nA Null return indicates the implementation (provider) does not implement this property. \n"Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"None" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"Servicing" describes an element being configured, maintained, cleaned, or otherwise administered. \n"Starting" describes an element being initialized. \n"Stopping" describes an element being brought to an orderly stop. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Completed" indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded in the PrimaryStatus so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \n"Migrating" element is being moved between host elements. \n"Immigrating" element is being moved to new host element. \n"Emigrating" element is being moved away from host element. \n"Shutting Down" describes an element being brought to an abrupt stop. \n"In Test" element is performing test functions. \n"Transitioning" describes an element that is between states, that is, it is not fully available in either its previous state or its next state. This value should be used if other values indicating a transition to a specific state are not applicable.\n"In Service" describes an element that is in service and operational.
ValueMap
0x8000..
Values
Unknown
Not Available
Servicing
Starting
Stopping
Stopped
Aborted
Dormant
Completed
Migrating
Emigrating
Immigrating
Snapshotting
Shutting Down
In Test
Transitioning
In Service
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
PrimaryStatus
Description
PrimaryStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents. \nPrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. "Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"OK" indicates the ManagedElement is functioning normally. \n"Degraded" indicates the ManagedElement is functioning below normal. \n"Error" indicates the ManagedElement is in an Error condition.
ValueMap
0x8000..
Values
Unknown
Degraded
Error
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_ManagedSystemElement.DetailedStatus
CIM_ManagedSystemElement.HealthState
CIM_IndicationServiceCapabilities
CIM_Capabilities
Version
2.20.0
UMLPackagePath
CIM::Core::Capabilities
Description
IndicationServiceCapabilities describes whether properties on the Indication Service can be modified by a client.
ElementName
Required
Override
ElementName
Description
The user friendly name for this instance of Capabilities. In addition, the user friendly name can be used as a index property for a search of query. (Note: Name does not have to be unique within a namespace.)
InstanceID
Override
InstanceID
Description
Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following \'preferred\' algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon \':\', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (\':\'). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above \'preferred\' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instance\'s NameSpace. \nFor DMTF defined instances, the \'preferred\' algorithm MUST be used with the <OrgID> set to \'CIM\'.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
Description
Description
The Description property provides a textual description of the object.
FilterCreationEnabledIsSettable
Description
Boolean indicating whether the FilterCreationEnabled property can be set by a client application.
ModelCorrespondence
CIM_IndicationService.FilterCreationEnabled
DeliveryRetryAttemptsIsSettable
Description
Boolean indicating whether the DeliveryRetryAttempts property can be set by a client application.
ModelCorrespondence
CIM_IndicationService.DeliveryRetryAttempts
DeliveryRetryIntervalIsSettable
Description
Boolean indicating whether the DeliveryRetryInterval property can be set by a client application.
ModelCorrespondence
CIM_IndicationService.DeliveryRetryInterval
SubscriptionRemovalActionIsSettable
Description
Boolean indicating whether the SubscriptionRemovalAction property can be set by a client application.
ModelCorrespondence
CIM_IndicationService.SubscriptionRemovalAction
SubscriptionRemovalTimeIntervalIsSettable
Description
Boolean indicating whether the SubscriptionRemovalTimeInterval property can be set by a client application.
ModelCorrespondence
CIM_IndicationService.SubscriptionRemovalTimeInterval
MaxListenerDestinations
Description
MaxListenerDestinations specifies the maximum number of instances of CIM_ListenerDestination allowed by the associated CIM_IndicationService.
MinValue
MaxActiveSubscriptions
Description
MaxActiveSubscriptions specifies the maximum total number of instances of CIM_IndicationSubcription and CIM_FilterCollectionSubscription instances supported by the CIM_IndicationService.
MinValue
SubscriptionsPersisted
Description
SubscriptionsPersisted indicates whether or not the IndicationService persists indication subscriptions across restarts of the service. If SubscriptionsPersisted has a value of true, the indication service shall persist indication subscriptions across restarts of service. If SubscriptionsPersisted has a value of false, the indication service shall not persist indication subscriptions across restarts of the service. A value of NULL indicates support for subscription persistence is unknown.
ty for a sea
CIM_HostedService
CIM_HostedDependency
Version
2.10.0
UMLPackagePath
CIM::Core::Service
Description
CIM_HostedService is an association between a Service and the System on which the functionality is located. The cardinality of this association is one-to-many. A System can host many Services. Services are weak with respect to their hosting System. Heuristic: A Service is hosted on the System where the LogicalDevices or SoftwareFeatures that implement the Service are located. The model does not represent Services hosted across multiple systems. The model is as an ApplicationSystem that acts as an aggregation point for Services that are each located on a single host.
Antecedent
CIM_System
Override
Antecedent
Description
The hosting System.
Dependent
CIM_Service
Override
Dependent
Weak
Description
The Service hosted on the System.
 Prom
CIM_IndicationSubscription
CIM_AbstractIndicationSubscription
Version
2.16.0
UMLPackagePath
CIM::Event
Description
CIM_IndicationSubscription describes a flow of Indications. The flow is specified by the referenced Filter, and directed to the referenced destination or process in the Handler. Property values of the referenced CIM_IndicationFilter instance and CIM_ListenerDestination instance MAY significantly effect the definition of the subscription. E.g., a subscription associated with a "Transient" destination MAY be deleted when the destination terminates or is no longer available.
RepeatNotificationCount
Description
Defines the count property for the repeat notification policy calculation.
RepeatNotificationGap
Description
Defines the gap interval for the repeat notification policy calculation.
Units
Seconds
PUnit
second
RepeatNotificationInterval
Description
Defines the time interval for the repeat notification policy calculation.
Units
Seconds
PUnit
second
OtherRepeatNotificationPolicy
Description
A string defining "Other" values for RepeatNotificationPolicy. This value MUST be set to a non NULL value when RepeatNotificationPolicy is set to a value of 1 ("Other"). For all other values, the OtherRepeatNotificationPolicy MUST be NULL.
RepeatNotificationPolicy
Description
The RepeatNotificationPolicy property defines the desired behavior for handling Indications that report the occurrence of the same underlying event (e.g., the disk is still generating I/O errors and has not yet been repaired). The defined semantics for the RepeatNotificationCount, RepeatNotificationInterval, and RepeatNotificationGap properties depend on the value of RepeatNotificationPolicy, but values for these properties MUST be set if the property is defined for the selected policy. If the value of RepeatNotificationPolicy is 0 ("Unknown") or not set, no special processing for repeat Indications is defined by the subscription. The semantics associated with the handling of repeat Indications MAY be defined by the Indication processing subcomponents. If the value of RepeatNotificationPolicy is 2 ("None"), special processing of repeat Indications MUST NOT be performed. If the value is 3 ("Suppress") the first RepeatNotificationCount Indications, describing the same event, MUST be sent and all subsequent Indications for this event suppressed for the remainder of the time interval RepeatNotificationInterval. A new interval starts when the next Indication for this event is received. If the value of RepeatNotificationPolicy is 4 ("Delay") and an Indication is received, this Indication MUST be suppressed if, including this Indication, RepeatNoticationCount or fewer Indications for this event have been received during the prior time interval defined by RepeatNotificationInterval. If this Indication is the RepeatNotificationCount + 1 Indication, this Indication MUST be sent and all subsequent Indications for this event ignored until the RepeatNotificationGap has elapsed. A RepeatNotificationInterval MAY NOT overlap a RepeatNotificationGap time interval.
ValueMap
Values
Unknown
Other
None
Suppress
Delay
SubscriptionTimeRemaining
Description
SubscriptionTimeRemaining is a computed value that provides a snapshot of the time remaining in the Subscription.
Units
Seconds
PUnit
second
SubscriptionStartTime
Description
SubscriptionStartTime is the time the subscription was started. The value of this property is computed based on the notion of date and time of the ManagedSystemElement running the Indication processing subcomponents.
SubscriptionDuration
Write
Description
SubscriptionDuration defines the desired length of the subscription. Indications generated after the duration of the subscription has exceeded SubscriptionDuration MUST NOT be sent. The duration of a subscription MAY be changed by modifying this property. An expired subscription MAY be deleted and MUST NOT be modified. If the value of SubscriptionDuration is not set, the subscription MUST be treated as having no expiration date.
Units
Seconds
PUnit
second
TimeOfLastStateChange
Description
Date and time of the last state change. This value is based on the notion of local date and time of the Managed System Element running the Indication processing subcomponents.
OtherSubscriptionState
Description
A string defining "Other" values for SubscriptionState. This value MUST be set to a non NULL value when SubscriptionState is set to a value of 1 ("Other"). For all other values, the OtherSubscriptionState MUST be NULL.
SubscriptionState
Write
Description
Indicates the current processing state of the subscription.
ValueMap
Values
Unknown
Other
Enabled
Enabled Degraded
Disabled
FailureTriggerTimeInterval
Description
The FailureTriggerTimeInterval is used by the client to specify a recommended minimum delay before the OnFatalErrorPolicy is implemented.
Units
Seconds
PUnit
second
OtherOnFatalErrorPolicy
Description
A string defining "Other" values for OnFatalErrorPolicy. This value MUST be set to a non NULL value when OnFatalErrorPolicy is set to a value of 1 ("Other"). For all other values, the OtherOnFatalErrorPolicy MUST be NULL.
OnFatalErrorPolicy
Description
Defines the desired behavior for a subscription when a fatal error occurs in one of the Indication processing subcomponents (e.g., Indication processor, Indication or instance provider, or Indication handler) and the Indication cannot be successfully sent. Specifically, a failure implies that some aspect of Indication generation, processing or dispatch is no longer functioning and Indications may be lost. If the value of OnFatalErrorPolicy is 2 ("Ignore") or not set (NULL), the subscription MUST continue to be processed in a \'best effort\' mode. This mode of operation can lead to unpredictable, and potentially misleading results, because Indications may be lost. If the value is 3 ("Disable"), the subscription MUST be disabled. With this policy, no new Indications will be generated or dispatched until the subscription is explicitly enabled. This is accomplished via the property, SubscriptionState. If the value is 4 ("Remove"), the subscription MUST be deleted. Selecting this policy has the same effect as issuing a DeleteInstance operation on this subscription instance.
ValueMap
Values
Other
Ignore
Disable
Remove
Filter
CIM_IndicationFilter
Override
Filter
Description
The Filter that defines the criteria and data of the possible Indications of this subscription.
Handler
CIM_ListenerDestination
Override
Handler
Description
The Handler addressing delivery of the possible Indications of this subscription.
SFCB_ServiceAffectsElement
CIM_ServiceAffectsElement
Description
ServiceAffectsElement represents an association between a Service and the ManagedElements that might be affected by its execution. Instantiating this association indicates that running the service may change, manage, provide functionality for,or pose some burden on the ManagedElement. This burden might affect performance, throughput, availability, and so on.
UMLPackagePath
CIM::Core::Service
Version
2.14.0
OtherElementEffectsDescriptions
Description
Provides details for the effect at the corresponding array position in ElementEffects. This information is required if ElementEffects contains the value 1 (Other).
ArrayType
Indexed
ModelCorrespondence
CIM_ServiceAffectsElement.ElementEffects
ElementEffects
Description
An enumeration that describes the effect on the ManagedElement. This array corresponds to the OtherElementEffectsDescriptions array, where the latter provides details that are related to the high-level effects enumerated by this property. Additional detail is required if the ElementEffects array contains the value 1 (Other). The values are defined as follows: \n- Exclusive Use (2): No other Service may have this association to the element. \n- Performance Impact (3): Deprecated in favor of "Consumes", "Enhances Performance", or "Degrades Performance". Execution of the Service may enhance or degrade the performance of the element. This may be as a side-effect of execution or as an intended consequence of methods provided by the Service. \n- Element Integrity (4): Deprecated in favor of "Consumes", "Enhances Integrity", or "Degrades Integrity". Execution of the Service may enhance or degrade the integrity of the element. This may be as a side-effect of execution or as an intended consequence of methods provided by the Service. \n- Manages (5): The Service manages the element. \n- Consumes (6): Execution of the Service consumes some or all of the associated element as a consequence of running the Service. For example, the Service may consume CPU cycles, which may affect performance, or Storage which may affect both performance and integrity. (For instance, the lack of free storage can degrade integrity by reducing the ability to save state. ) "Consumes" may be used alone or in conjunction with other values, in particular, "Degrades Performance" and "Degrades Integrity". \n"Manages" and not "Consumes" should be used to reflect allocation services that may be provided by a Service. \n- Enhances Integrity (7): The Service may enhance integrity of the associated element. \n- Degrades Integrity (8): The Service may degrade integrity of the associated element. \n- Enhances Performance (9): The Service may enhance performance of the associated element. \n- Degrades Performance (10): The Service may degrade performance of the associated element.
ValueMap
0x8000..0xFFFF
Values
Unknown
Other
Exclusive Use
Performance Impact
Element Integrity
Manages
Consumes
Enhances Integrity
Degrades Integrity
Enhances Performance
Degrades Performance
DMTF Reserved
Vendor Reserved
ArrayType
Indexed
ModelCorrespondence
CIM_ServiceAffectsElement.OtherElementEffectsDescriptions
AffectingElement
CIM_Service
Description
The Service that is affecting the ManagedElement.
AffectedElement
CIM_ManagedElement
Description
The Managed Element that is affected by the Service.
CIM_ObjectManagerCommunicationMechanism
CIM_ServiceAccessPoint
Version
2.13.0
UMLPackagePath
CIM::Interop
Description
The class, ObjectManagerCommunicationMechanism, describes access to an ObjectManager. It describes a protocol and data encoding that can be used for communication. When all instances of this class are enumerated for an ObjectManager (using the CommMechanismForManager association), all possible protocol and encoding schemes will be known. Also, specific capabilities (for example, basic read or query) that are supported in the protocol/encoding are described - using the ProfilesSupported property.
Name
Override
Name
Description
The Name property uniquely identifies the ServiceAccessPoint and provides an indication of the functionality that is managed. This functionality is described in more detail in the Description property of the object.
MaxLen
CreationClassName
Description
CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
SystemName
Description
The Name of the scoping System.
MaxLen
Propagated
CIM_System.Name
SystemCreationClassName
Description
The CreationClassName of the scoping System.
MaxLen
Propagated
CIM_System.CreationClassName
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. \nNote that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
Description
Description
The Description property provides a textual description of the object.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
InstanceID
Description
InstanceID is an optional property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace. Various subclasses of this class may override this property to make it required, or a key. Such subclasses may also modify the preferred algorithms for ensuring uniqueness that are defined below.\nTo ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be reused to identify different underlying (real-world) elements. If not null and the above "preferred" algorithm is not used, the defining entity must assure that the resulting InstanceID is not reused across any InstanceIDs produced by this or other providers for the NameSpace of this instance. \nIf not set to null for DMTF-defined instances, the "preferred" algorithm must be used with the <OrgID> set to CIM.
InstallDate
Description
A datetime value that indicates when the object was installed. Lack of a value does not indicate that the object is not installed.
MappingStrings
MIF.DMTF|ComponentID|001.5
OperationalStatus
Description
Indicates the current statuses of the element. Various operational statuses are defined. Many of the enumeration\'s values are self-explanatory. However, a few are not and are described here in more detail. \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, and so on. \n"Predictive Failure" indicates that an element is functioning nominally but predicting a failure in the near future. \n"In Service" describes an element being configured, maintained, cleaned, or otherwise administered. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is currently unreachable. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Supporting Entity in Error" indicates that this element might be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems. \n"Completed" indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \n"Power Mode" indicates that the element has additional power model information contained in the Associated PowerManagementService association. \nOperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent approach to enumerations, to address implementation needs for an array property, and to provide a migration path from today\'s environment to the future. This change was not made earlier because it required the deprecated qualifier. Due to the widespread use of the existing Status property in management applications, it is strongly recommended that providers or instrumentation provide both the Status and OperationalStatus properties. Further, the first value of OperationalStatus should contain the primary status for the element. When instrumented, Status (because it is single-valued) should also provide the primary status of the element.
ValueMap
0x8000..
Values
Unknown
Other
Degraded
Stressed
Predictive Failure
Error
Non-Recoverable Error
Starting
Stopping
Stopped
In Service
No Contact
Lost Communication
Aborted
Dormant
Supporting Entity in Error
Completed
Power Mode
DMTF Reserved
Vendor Reserved
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.StatusDescriptions
StatusDescriptions
Description
Strings describing the various OperationalStatus array values. For example, if "Stopping" is the value assigned to OperationalStatus, then this property may contain an explanation as to why an object is being stopped. Note that entries in this array are correlated with those at the same array index in OperationalStatus.
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.OperationalStatus
Status
Deprecated
CIM_ManagedSystemElement.OperationalStatus
Description
A string indicating the current status of the object. Various operational and non-operational statuses are defined. This property is deprecated in lieu of OperationalStatus, which includes the same semantics in its enumeration. This change is made for 3 reasons: \n1) Status is more correctly defined as an array. This definition overcomes the limitation of describing status using a single value, when it is really a multi-valued property (for example, an element might be OK AND Stopped. \n2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values. \n3) The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, Status was grandfathered into the Schema. Use of the deprecated qualifier allows the maintenance of the existing property, but also permits an improved definition using OperationalStatus.
ValueMap
Error
Degraded
Unknown
Pred Fail
Starting
Stopping
Service
Stressed
NonRecover
No Contact
Lost Comm
Stopped
MaxLen
HealthState
Description
Indicates the current health of the element. This attribute expresses the health of this element but not necessarily that of its subcomponents. The possible values are 0 to 30, where 5 means the element is entirely healthy and 30 means the element is completely non-functional. The following continuum is defined: \n"Non-recoverable Error" (30) - The element has completely failed, and recovery is not possible. All functionality provided by this element has been lost. \n"Critical Failure" (25) - The element is non-functional and recovery might not be possible. \n"Major Failure" (20) - The element is failing. It is possible that some or all of the functionality of this component is degraded or not working. \n"Minor Failure" (15) - All functionality is available but some might be degraded. \n"Degraded/Warning" (10) - The element is in working order and all functionality is provided. However, the element is not working to the best of its abilities. For example, the element might not be operating at optimal performance or it might be reporting recoverable errors. \n"OK" (5) - The element is fully functional and is operating within normal operational parameters and without error. \n"Unknown" (0) - The implementation cannot report on HealthState at this time. \nDMTF has reserved the unused portion of the continuum for additional HealthStates in the future.
ValueMap
Values
Unknown
Degraded/Warning
Minor failure
Major failure
Critical failure
Non-recoverable error
DMTF Reserved
CommunicationStatus
Description
CommunicationStatus indicates the ability of the instrumentation to communicate with the underlying ManagedElement. CommunicationStatus consists of one of the following values: Unknown, None, Communication OK, Lost Communication, or No Contact. \nA Null return indicates the implementation (provider) does not implement this property. \n"Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"Not Available" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"Communication OK " indicates communication is established with the element, but does not convey any quality of service. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the Managed Element is known to exist and has been contacted successfully in the past, but is currently unreachable.
ValueMap
0x8000..
Values
Unknown
Not Available
Communication OK
Lost Communication
No Contact
DMTF Reserved
Vendor Reserved
DetailedStatus
Description
DetailedStatus compliments PrimaryStatus with additional status detail. It consists of one of the following values: Not Available, No Additional Information, Stressed, Predictive Failure, Error, Non-Recoverable Error, SupportingEntityInError. Detailed status is used to expand upon the PrimaryStatus of the element. \nA Null return indicates the implementation (provider) does not implement this property. \n"Not Available" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"No Additional Information" indicates that the element is functioning normally as indicated by PrimaryStatus = "OK". \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, and so on. \n"Predictive Failure" indicates that an element is functioning normally but a failure is predicted in the near future. \n"Non-Recoverable Error " indicates that this element is in an error condition that requires human intervention. \n"Supporting Entity in Error" indicates that this element might be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems.
ValueMap
0x8000..
Values
Not Available
No Additional Information
Stressed
Predictive Failure
Non-Recoverable Error
Supporting Entity in Error
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.PrimaryStatus
CIM_ManagedSystemElement.HealthState
OperatingStatus
Description
OperatingStatus provides a current status value for the operational condition of the element and can be used for providing more detail with respect to the value of EnabledState. It can also provide the transitional states when an element is transitioning from one state to another, such as when an element is transitioning between EnabledState and RequestedState, as well as other transitional conditions.\nOperatingStatus consists of one of the following values: Unknown, Not Available, In Service, Starting, Stopping, Stopped, Aborted, Dormant, Completed, Migrating, Emmigrating, Immigrating, Snapshotting. Shutting Down, In Test \nA Null return indicates the implementation (provider) does not implement this property. \n"Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"None" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"Servicing" describes an element being configured, maintained, cleaned, or otherwise administered. \n"Starting" describes an element being initialized. \n"Stopping" describes an element being brought to an orderly stop. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Completed" indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded in the PrimaryStatus so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \n"Migrating" element is being moved between host elements. \n"Immigrating" element is being moved to new host element. \n"Emigrating" element is being moved away from host element. \n"Shutting Down" describes an element being brought to an abrupt stop. \n"In Test" element is performing test functions. \n"Transitioning" describes an element that is between states, that is, it is not fully available in either its previous state or its next state. This value should be used if other values indicating a transition to a specific state are not applicable.\n"In Service" describes an element that is in service and operational.
ValueMap
0x8000..
Values
Unknown
Not Available
Servicing
Starting
Stopping
Stopped
Aborted
Dormant
Completed
Migrating
Emigrating
Immigrating
Snapshotting
Shutting Down
In Test
Transitioning
In Service
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
PrimaryStatus
Description
PrimaryStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents. \nPrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. "Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"OK" indicates the ManagedElement is functioning normally. \n"Degraded" indicates the ManagedElement is functioning below normal. \n"Error" indicates the ManagedElement is in an Error condition.
ValueMap
0x8000..
Values
Unknown
Degraded
Error
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_ManagedSystemElement.DetailedStatus
CIM_ManagedSystemElement.HealthState
EnabledState
Description
EnabledState is an integer enumeration that indicates the enabled and disabled states of an element. It can also indicate the transitions between these requested states. For example, shutting down (value=4) and starting (value=10) are transient states between enabled and disabled. The following text briefly summarizes the various enabled and disabled states: \nEnabled (2) indicates that the element is or could be executing commands, will process any queued commands, and queues new requests. \nDisabled (3) indicates that the element will not execute commands and will drop any new requests. \nShutting Down (4) indicates that the element is in the process of going to a Disabled state. \nNot Applicable (5) indicates the element does not support being enabled or disabled. \nEnabled but Offline (6) indicates that the element might be completing commands, and will drop any new requests. \nTest (7) indicates that the element is in a test state. \nDeferred (8) indicates that the element might be completing commands, but will queue any new requests. \nQuiesce (9) indicates that the element is enabled but in a restricted mode.\nStarting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.
ValueMap
11..32767
32768..65535
Values
Unknown
Other
Enabled
Disabled
Shutting Down
Not Applicable
Enabled but Offline
In Test
Deferred
Quiesce
Starting
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.OtherEnabledState
OtherEnabledState
Description
A string that describes the enabled or disabled state of the element when the EnabledState property is set to 1 ("Other"). This property must be set to null when EnabledState is any value other than 1.
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
RequestedState
Description
RequestedState is an integer enumeration that indicates the last requested or desired state for the element, irrespective of the mechanism through which it was requested. The actual state of the element is represented by EnabledState. This property is provided to compare the last requested and current enabled or disabled states. Note that when EnabledState is set to 5 ("Not Applicable"), then this property has no meaning. Refer to the EnabledState property description for explanations of the values in the RequestedState enumeration. \n"Unknown" (0) indicates the last requested state for the element is unknown.\nNote that the value "No Change" (5) has been deprecated in lieu of indicating the last requested state is "Unknown" (0). If the last requested or desired state is unknown, RequestedState should have the value "Unknown" (0), but may have the value "No Change" (5).Offline (6) indicates that the element has been requested to transition to the Enabled but Offline EnabledState. \nIt should be noted that there are two new values in RequestedState that build on the statuses of EnabledState. These are "Reboot" (10) and "Reset" (11). Reboot refers to doing a "Shut Down" and then moving to an "Enabled" state. Reset indicates that the element is first "Disabled" and then "Enabled". The distinction between requesting "Shut Down" and "Disabled" should also be noted. Shut Down requests an orderly transition to the Disabled state, and might involve removing power, to completely erase any existing state. The Disabled state requests an immediate disabling of the element, such that it will not execute or accept any commands or processing requests. \n\nThis property is set as the result of a method invocation (such as Start or StopService on CIM_Service), or can be overridden and defined as WRITEable in a subclass. The method approach is considered superior to a WRITEable property, because it allows an explicit invocation of the operation and the return of a result code. \n\nIf knowledge of the last RequestedState is not supported for the EnabledLogicalElement, the property shall be NULL or have the value 12 "Not Applicable".
ValueMap
32768..65535
Values
Unknown
Enabled
Disabled
Shut Down
No Change
Offline
Test
Deferred
Quiesce
Reboot
Reset
Not Applicable
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
EnabledDefault
Write
Description
An enumerated value indicating an administrator\'s default or startup configuration for the Enabled State of an element. By default, the element is "Enabled" (value=2).
ValueMap
32768..65535
Values
Enabled
Disabled
Not Applicable
Enabled but Offline
No Default
Quiesce
DMTF Reserved
Vendor Reserved
TimeOfLastStateChange
Description
The date or time when the EnabledState of the element last changed. If the state of the element has not changed and this property is populated, then it must be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property must not be updated.
AvailableRequestedStates
Description
AvailableRequestedStates indicates the possible values for the RequestedState parameter of the method RequestStateChange, used to initiate a state change. The values listed shall be a subset of the values contained in the RequestedStatesSupported property of the associated instance of CIM_EnabledLogicalElementCapabilities where the values selected are a function of the current state of the CIM_EnabledLogicalElement. This property may be non-null if an implementation is able to advertise the set of possible values as a function of the current state. This property shall be null if an implementation is unable to determine the set of possible values as a function of the current state.
ValueMap
Values
Enabled
Disabled
Shut Down
Offline
Test
Defer
Quiesce
Reboot
Reset
DMTF Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.RequestStateChange
CIM_EnabledLogicalElementCapabilities.RequestedStatesSupported
TransitioningToState
Description
TransitioningToState indicates the target state to which the instance is transitioning. \nA value of 5 "No Change" shall indicate that no transition is in progress.A value of 12 "Not Applicable" shall indicate the implementation does not support representing ongoing transitions. \nA value other than 5 or 12 shall identify the state to which the element is in the process of transitioning.
ValueMap
Values
Unknown
Enabled
Disabled
Shut Down
No Change
Offline
Test
Defer
Quiesce
Reboot
Reset
Not Applicable
DMTF Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.RequestStateChange
CIM_EnabledLogicalElement.RequestedState
CIM_EnabledLogicalElement.EnabledState
CommunicationMechanism
Required
Description
CommunicationMechanism describes an encoding and protocol which can be used to communicate with the server. ObjectManager, the specified string should be indicated. If Other is used, the value forOtherCommunicationMechanismDescription must not be null.
ValueMap
Values
Unknown
Other
CIM-XML
SM-CLP
WS-Management
WSDM
ModelCorrespondence
CIM_ObjectManagerCommunicationMechanism.OtherCommunicationMechanismDescription
OtherCommunicationMechanismDescription
Description
A free-form string providing a description of the supported protocols when 1, "Other", is specified in the CommunicationMechanism.
ModelCorrespondence
CIM_ObjectManagerCommunicationMechanism.CommunicationMechanism
FunctionalProfilesSupported
Required
Description
Enumerated array describing the types of operations supported by the ObjectManager, using this encoding/protocol. The enumeration is based on the Functional Profiles defined for conformance in the DMTF document, Specification for CIM Operations over HTTP.
ValueMap
Values
Unknown
Other
Basic Read
Basic Write
Schema Manipulation
Instance Manipulation
Association Traversal
Query Execution
Qualifier Declaration
Indications
Pulled Read
Pulled Read Count
Pulled Query Execution
ArrayType
Indexed
ModelCorrespondence
CIM_ObjectManagerCommunicationMechanism.FunctionalProfileDescriptions
FunctionalProfileDescriptions
Description
Free-form strings providing descriptions of the supported operations of the object manager. Entries in the array are correlated with those in the ProfilesSupported array. An entry in this Descriptions array MUST be provided when 1, "Other", is specified in the FunctionalProfilesSupported array.
ArrayType
Indexed
ModelCorrespondence
CIM_ObjectManagerCommunicationMechanism.FunctionalProfilesSupported
MultipleOperationsSupported
Required
Description
Boolean indicating whether the ObjectManager supports multiple operation requests (TRUE) or only simple requests (FALSE).
AuthenticationMechanismsSupported
Required
Description
Enumerated array describing the types of authentication supported by the ObjectManager, using the encoding/protocol. specified in the property, CommunicationMechanism. The defined values represent the authentication defined in the DMTF document, Specification for CIM Operations over HTTP.
ValueMap
Values
Unknown
Other
None
Basic
Digest
ArrayType
Indexed
ModelCorrespondence
CIM_ObjectManagerCommunicationMechanism.AuthenticationMechanismDescriptions
AuthenticationMechanismDescriptions
Description
Free-form strings providing descriptions of the supported mechanisms. Entries in this array are correlated with those in the AuthenticationMechanismsSupported array. An entry in this Descriptions array MUST be provided when 1, "Other", is specified in AuthenticationMechanismsSupported.
ArrayType
Indexed
ModelCorrespondence
CIM_ObjectManagerCommunicationMechanism.AuthenticationMechanismsSupported
Version
Required
Description
Provides the protocol version for this service access point. Version information MUST be in the form of M.N, where M is a numeric that describes the Major version and N is a numeric that describes the minor version.
AdvertiseTypes
Required
Description
This property signifies the advertisement for this access point. . It is used by the advertising services of the WBEM infrastructure to determine what should be advertised, via what mechanisms. The property is an array so that the communicationMechansim MAY be advertised using several mechanisms. Note: If this property is null/uninitialized, this is equivalent to specifying the value 2, "Not Advertised".
ValueMap
Values
Other
Not Advertised
ArrayType
Indexed
ModelCorrespondence
CIM_ObjectManagerCommunicationMechanism.AdvertiseTypeDescriptions
AdvertiseTypeDescriptions
Description
A free-form string providing additional information related to the AdvertiseType. A description MUST be provided when the AdvertiseType is 1, "Other". An entry in this array corresponds to the entry in the AdvertiseTypes array at the same index. It is not expected that additional descriptions are needed if the Type is set to "Not Advertised" or "SLP". However, as the SLP template expands, or as other advertisement mechanisms are defined, support for additional descriptions may be needed. This array is defined to support this.
ArrayType
Indexed
ModelCorrespondence
CIM_ObjectManagerCommunicationMechanism.AdvertiseTypes
RequestStateChange
Description
Requests that the state of the element be changed to the value specified in the RequestedState parameter. When the requested state change takes place, the EnabledState and RequestedState of the element will be the same. Invoking the RequestStateChange method multiple times could result in earlier requests being overwritten or lost. \nA return code of 0 shall indicate the state change was successfully initiated. \nA return code of 3 shall indicate that the state transition cannot complete within the interval specified by the TimeoutPeriod parameter. \nA return code of 4096 (0x1000) shall indicate the state change was successfully initiated, a ConcreteJob has been created, and its reference returned in the output parameter Job. Any other return code indicates an error condition.
ValueMap
4096
4097
4098
4099
4100..32767
32768..65535
Values
Completed with No Error
Not Supported
Unknown or Unspecified Error
Cannot complete within Timeout Period
Failed
Invalid Parameter
In Use
DMTF Reserved
Method Parameters Checked - Job Started
Invalid State Transition
Use of Timeout Parameter Not Supported
Busy
Method Reserved
Vendor Specific
ModelCorrespondence
CIM_EnabledLogicalElement.RequestedState
RequestedState
Description
The state requested for the element. This information will be placed into the RequestedState property of the instance if the return code of the RequestStateChange method is 0 (\'Completed with No Error\'), or 4096 (0x1000) (\'Job Started\'). Refer to the description of the EnabledState and RequestedState properties for the detailed explanations of the RequestedState values.
ValueMap
32768..65535
Values
Enabled
Disabled
Shut Down
Offline
Test
Defer
Quiesce
Reboot
Reset
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.RequestedState
CIM_ConcreteJob
Description
May contain a reference to the ConcreteJob created to track the state transition initiated by the method invocation.
TimeoutPeriod
Description
A timeout period that specifies the maximum amount of time that the client expects the transition to the new state to take. The interval format must be used to specify the TimeoutPeriod. A value of 0 or a null parameter indicates that the client has no time requirements for the transition. \nIf this property does not contain 0 or null and the implementation does not support this parameter, a return code of \'Use Of Timeout Parameter Not Supported\' shall be returned.
SFCB_IndicationServiceCapabilities
CIM_IndicationServiceCapabilities
Description
IndicationServiceCapabilities describes whether properties on the Indication Service can be modified by a client.
UMLPackagePath
CIM::Core::Capabilities
Version
2.20.0
SubscriptionsPersisted
Description
SubscriptionsPersisted indicates whether or not the IndicationService persists indication subscriptions across restarts of the service. If SubscriptionsPersisted has a value of true, the indication service shall persist indication subscriptions across restarts of service. If SubscriptionsPersisted has a value of false, the indication service shall not persist indication subscriptions across restarts of the service. A value of NULL indicates support for subscription persistence is unknown.
MaxActiveSubscriptions
Description
MaxActiveSubscriptions specifies the maximum total number of instances of CIM_IndicationSubcription and CIM_FilterCollectionSubscription instances supported by the CIM_IndicationService.
MinValue
MaxListenerDestinations
Description
MaxListenerDestinations specifies the maximum number of instances of CIM_ListenerDestination allowed by the associated CIM_IndicationService.
MinValue
SubscriptionRemovalTimeIntervalIsSettable
Description
Boolean indicating whether the SubscriptionRemovalTimeInterval property can be set by a client application.
ModelCorrespondence
CIM_IndicationService.SubscriptionRemovalTimeInterval
SubscriptionRemovalActionIsSettable
Description
Boolean indicating whether the SubscriptionRemovalAction property can be set by a client application.
ModelCorrespondence
CIM_IndicationService.SubscriptionRemovalAction
DeliveryRetryIntervalIsSettable
Description
Boolean indicating whether the DeliveryRetryInterval property can be set by a client application.
ModelCorrespondence
CIM_IndicationService.DeliveryRetryInterval
DeliveryRetryAttemptsIsSettable
Description
Boolean indicating whether the DeliveryRetryAttempts property can be set by a client application.
ModelCorrespondence
CIM_IndicationService.DeliveryRetryAttempts
FilterCreationEnabledIsSettable
Description
Boolean indicating whether the FilterCreationEnabled property can be set by a client application.
ModelCorrespondence
CIM_IndicationService.FilterCreationEnabled
Description
Description
The Description property provides a textual description of the object.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
InstanceID
Override
InstanceID
Description
Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following \'preferred\' algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon \':\', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness <OrgID> MUST NOT contain a colon (\':\'). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above \'preferred\' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instance\'s NameSpace. \nFor DMTF defined instances, the \'preferred\' algorithm MUST be used with the <OrgID> set to \'CIM\'.
ElementName
Required
Override
ElementName
Description
The user friendly name for this instance of Capabilities. In addition, the user friendly name can be used as a index property for a search of query. (Note: Name does not have to be unique within a namespace.)
indication s
CIM_ListenerDestinationCIMXML
CIM_ListenerDestination
Version
2.22.0
UMLPackagePath
CIM::Event
Description
CIM_ListenerDestinationCIMXML describes the destination for CIM Export Messages to be delivered via CIM-XML.
Protocol
Description
Protocol describes an encoding and protocol which will be used to deliver the indication. If Other is used, the value for OtherProtocol must not be null.\nIf a protocol is not specified, 2 "CIM-XML" must be assumed.
ValueMap
Values
Other
CIM-XML
SM CLP
WS-Management
WSDM
DMTF Reserved
ModelCorrespondence
CIM_ListenerDestination.OtherProtocol
OtherProtocol
Description
A free-form string providing a description of the supported protocols when 1, "Other", is specified for the Protocol.
ModelCorrespondence
CIM_ListenerDestination.Protocol
OtherPersistenceType
Description
A string describing ("Other") values for PersistenceType. This value MUST be set to a non NULL value when the PersistenceType is 1 ("Other"). For all other values of PersistenceType, the value of OtherPersistenceType MUST be NULL.
ModelCorrespondence
CIM_ListenerDestination.PersistenceType
PersistenceType
Description
Describes the Persistence Type of the destination defined by this instance. If the value of PersistenceType is not specified, the value of PersistenceType MUST be treated as 2 ("Permanent"). A value of 2 ("Permanent") declares that the destination is always expected to be available (e.g., system log file). Inability to access this destination MUST be treated as an error condition. A value of 3 ("Transient") indicates that the destination is short-lived. Inability to access the destination MAY be treated as a normal termination condition. Subscriptions with "Transient" destinations MAY be deleted when the destination terminates or is no longer available.
ValueMap
Values
Other
Permanent
Transient
ModelCorrespondence
CIM_ListenerDestination.OtherPersistenceType
Name
Description
Indicates the name of the CIM Listener destination.
MaxLen
CreationClassName
Description
Indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, it allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
SystemName
Description
A System\'s Name. A CIM Listener destination is defined in context of a CIM_System (e.g., the sending system.
MaxLen
SystemCreationClassName
Description
A System\'s CreationClassName. A CIM Listener destination is defined in context of a CIM_System (e.g., the sending system.
MaxLen
InstanceID
Description
InstanceID is an optional property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace. Various subclasses of this class may override this property to make it required, or a key. Such subclasses may also modify the preferred algorithms for ensuring uniqueness that are defined below.\nTo ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be reused to identify different underlying (real-world) elements. If not null and the above "preferred" algorithm is not used, the defining entity must assure that the resulting InstanceID is not reused across any InstanceIDs produced by this or other providers for the NameSpace of this instance. \nIf not set to null for DMTF-defined instances, the "preferred" algorithm must be used with the <OrgID> set to CIM.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
Description
Description
The Description property provides a textual description of the object.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. \nNote that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
Destination
Required
Override
Destination
Description
The destination URL to which CIM-XML Export Messages are to be delivered.The scheme prefix MUST be consistent with the DMTF CIM-XML specifications.If a scheme prefix is not specified, the scheme "http:" MUST be assumed.
D is not reu
CIM_WBEMService
CIM_Service
Version
2.6.0
UMLPackagePath
CIM::Interop
Description
An abstract class for WBEM services such as the ObjectManager (CIM Server), Providers, protocol adapters, or other pluggable components. A type of CIM_Service that provides associated capabilities and details about the communication capabilities, namespaces, etc. for a specific WBEMService.
Started
Description
Started is a Boolean that indicates whether the Service has been started (TRUE), or stopped (FALSE).
StartMode
Deprecated
CIM_Service.EnabledDefault
Description
Note: The use of this element is deprecated in lieu of the EnabledDefault property that is inherited from EnabledLogicalElement. The EnabledLogicalElement addresses the same semantics. The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property. To remain compatible with those implementations, StartMode was grandfathered into the schema. Use of the deprecated qualifier allows the maintenance of the existing property but also permits an improved, clarified definition using EnabledDefault. \nDeprecated description: StartMode is a string value that indicates whether the Service is automatically started by a System, an Operating System, and so on, or is started only upon request.
ValueMap
Automatic
Manual
MaxLen
PrimaryOwnerContact
Write
Description
A string that provides information on how the primary owner of the Service can be reached (for example, phone number, e-mail address, and so on).
MaxLen
MappingStrings
MIF.DMTF|General Information|001.4
PrimaryOwnerName
Write
Description
The name of the primary owner for the service, if one is defined. The primary owner is the initial support contact for the Service.
MaxLen
MappingStrings
MIF.DMTF|General Information|001.3
Name
Override
Name
Description
The Name property uniquely identifies the Service and provides an indication of the functionality that is managed. This functionality is described in more detail in the Description property of the object.
MaxLen
CreationClassName
Description
CreationClassName indicates the name of the class or the subclass that is used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
SystemName
Description
The Name of the scoping System.
MaxLen
Propagated
CIM_System.Name
SystemCreationClassName
Description
The CreationClassName of the scoping System.
MaxLen
Propagated
CIM_System.CreationClassName
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. \nNote that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
Description
Description
The Description property provides a textual description of the object.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
InstanceID
Description
InstanceID is an optional property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace. Various subclasses of this class may override this property to make it required, or a key. Such subclasses may also modify the preferred algorithms for ensuring uniqueness that are defined below.\nTo ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be reused to identify different underlying (real-world) elements. If not null and the above "preferred" algorithm is not used, the defining entity must assure that the resulting InstanceID is not reused across any InstanceIDs produced by this or other providers for the NameSpace of this instance. \nIf not set to null for DMTF-defined instances, the "preferred" algorithm must be used with the <OrgID> set to CIM.
InstallDate
Description
A datetime value that indicates when the object was installed. Lack of a value does not indicate that the object is not installed.
MappingStrings
MIF.DMTF|ComponentID|001.5
OperationalStatus
Description
Indicates the current statuses of the element. Various operational statuses are defined. Many of the enumeration\'s values are self-explanatory. However, a few are not and are described here in more detail. \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, and so on. \n"Predictive Failure" indicates that an element is functioning nominally but predicting a failure in the near future. \n"In Service" describes an element being configured, maintained, cleaned, or otherwise administered. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is currently unreachable. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Supporting Entity in Error" indicates that this element might be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems. \n"Completed" indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \n"Power Mode" indicates that the element has additional power model information contained in the Associated PowerManagementService association. \nOperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent approach to enumerations, to address implementation needs for an array property, and to provide a migration path from today\'s environment to the future. This change was not made earlier because it required the deprecated qualifier. Due to the widespread use of the existing Status property in management applications, it is strongly recommended that providers or instrumentation provide both the Status and OperationalStatus properties. Further, the first value of OperationalStatus should contain the primary status for the element. When instrumented, Status (because it is single-valued) should also provide the primary status of the element.
ValueMap
0x8000..
Values
Unknown
Other
Degraded
Stressed
Predictive Failure
Error
Non-Recoverable Error
Starting
Stopping
Stopped
In Service
No Contact
Lost Communication
Aborted
Dormant
Supporting Entity in Error
Completed
Power Mode
DMTF Reserved
Vendor Reserved
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.StatusDescriptions
StatusDescriptions
Description
Strings describing the various OperationalStatus array values. For example, if "Stopping" is the value assigned to OperationalStatus, then this property may contain an explanation as to why an object is being stopped. Note that entries in this array are correlated with those at the same array index in OperationalStatus.
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.OperationalStatus
Status
Deprecated
CIM_ManagedSystemElement.OperationalStatus
Description
A string indicating the current status of the object. Various operational and non-operational statuses are defined. This property is deprecated in lieu of OperationalStatus, which includes the same semantics in its enumeration. This change is made for 3 reasons: \n1) Status is more correctly defined as an array. This definition overcomes the limitation of describing status using a single value, when it is really a multi-valued property (for example, an element might be OK AND Stopped. \n2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values. \n3) The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, Status was grandfathered into the Schema. Use of the deprecated qualifier allows the maintenance of the existing property, but also permits an improved definition using OperationalStatus.
ValueMap
Error
Degraded
Unknown
Pred Fail
Starting
Stopping
Service
Stressed
NonRecover
No Contact
Lost Comm
Stopped
MaxLen
HealthState
Description
Indicates the current health of the element. This attribute expresses the health of this element but not necessarily that of its subcomponents. The possible values are 0 to 30, where 5 means the element is entirely healthy and 30 means the element is completely non-functional. The following continuum is defined: \n"Non-recoverable Error" (30) - The element has completely failed, and recovery is not possible. All functionality provided by this element has been lost. \n"Critical Failure" (25) - The element is non-functional and recovery might not be possible. \n"Major Failure" (20) - The element is failing. It is possible that some or all of the functionality of this component is degraded or not working. \n"Minor Failure" (15) - All functionality is available but some might be degraded. \n"Degraded/Warning" (10) - The element is in working order and all functionality is provided. However, the element is not working to the best of its abilities. For example, the element might not be operating at optimal performance or it might be reporting recoverable errors. \n"OK" (5) - The element is fully functional and is operating within normal operational parameters and without error. \n"Unknown" (0) - The implementation cannot report on HealthState at this time. \nDMTF has reserved the unused portion of the continuum for additional HealthStates in the future.
ValueMap
Values
Unknown
Degraded/Warning
Minor failure
Major failure
Critical failure
Non-recoverable error
DMTF Reserved
CommunicationStatus
Description
CommunicationStatus indicates the ability of the instrumentation to communicate with the underlying ManagedElement. CommunicationStatus consists of one of the following values: Unknown, None, Communication OK, Lost Communication, or No Contact. \nA Null return indicates the implementation (provider) does not implement this property. \n"Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"Not Available" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"Communication OK " indicates communication is established with the element, but does not convey any quality of service. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the Managed Element is known to exist and has been contacted successfully in the past, but is currently unreachable.
ValueMap
0x8000..
Values
Unknown
Not Available
Communication OK
Lost Communication
No Contact
DMTF Reserved
Vendor Reserved
DetailedStatus
Description
DetailedStatus compliments PrimaryStatus with additional status detail. It consists of one of the following values: Not Available, No Additional Information, Stressed, Predictive Failure, Error, Non-Recoverable Error, SupportingEntityInError. Detailed status is used to expand upon the PrimaryStatus of the element. \nA Null return indicates the implementation (provider) does not implement this property. \n"Not Available" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"No Additional Information" indicates that the element is functioning normally as indicated by PrimaryStatus = "OK". \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, and so on. \n"Predictive Failure" indicates that an element is functioning normally but a failure is predicted in the near future. \n"Non-Recoverable Error " indicates that this element is in an error condition that requires human intervention. \n"Supporting Entity in Error" indicates that this element might be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems.
ValueMap
0x8000..
Values
Not Available
No Additional Information
Stressed
Predictive Failure
Non-Recoverable Error
Supporting Entity in Error
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.PrimaryStatus
CIM_ManagedSystemElement.HealthState
OperatingStatus
Description
OperatingStatus provides a current status value for the operational condition of the element and can be used for providing more detail with respect to the value of EnabledState. It can also provide the transitional states when an element is transitioning from one state to another, such as when an element is transitioning between EnabledState and RequestedState, as well as other transitional conditions.\nOperatingStatus consists of one of the following values: Unknown, Not Available, In Service, Starting, Stopping, Stopped, Aborted, Dormant, Completed, Migrating, Emmigrating, Immigrating, Snapshotting. Shutting Down, In Test \nA Null return indicates the implementation (provider) does not implement this property. \n"Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"None" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"Servicing" describes an element being configured, maintained, cleaned, or otherwise administered. \n"Starting" describes an element being initialized. \n"Stopping" describes an element being brought to an orderly stop. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Completed" indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded in the PrimaryStatus so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \n"Migrating" element is being moved between host elements. \n"Immigrating" element is being moved to new host element. \n"Emigrating" element is being moved away from host element. \n"Shutting Down" describes an element being brought to an abrupt stop. \n"In Test" element is performing test functions. \n"Transitioning" describes an element that is between states, that is, it is not fully available in either its previous state or its next state. This value should be used if other values indicating a transition to a specific state are not applicable.\n"In Service" describes an element that is in service and operational.
ValueMap
0x8000..
Values
Unknown
Not Available
Servicing
Starting
Stopping
Stopped
Aborted
Dormant
Completed
Migrating
Emigrating
Immigrating
Snapshotting
Shutting Down
In Test
Transitioning
In Service
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
PrimaryStatus
Description
PrimaryStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents. \nPrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. "Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"OK" indicates the ManagedElement is functioning normally. \n"Degraded" indicates the ManagedElement is functioning below normal. \n"Error" indicates the ManagedElement is in an Error condition.
ValueMap
0x8000..
Values
Unknown
Degraded
Error
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_ManagedSystemElement.DetailedStatus
CIM_ManagedSystemElement.HealthState
EnabledState
Description
EnabledState is an integer enumeration that indicates the enabled and disabled states of an element. It can also indicate the transitions between these requested states. For example, shutting down (value=4) and starting (value=10) are transient states between enabled and disabled. The following text briefly summarizes the various enabled and disabled states: \nEnabled (2) indicates that the element is or could be executing commands, will process any queued commands, and queues new requests. \nDisabled (3) indicates that the element will not execute commands and will drop any new requests. \nShutting Down (4) indicates that the element is in the process of going to a Disabled state. \nNot Applicable (5) indicates the element does not support being enabled or disabled. \nEnabled but Offline (6) indicates that the element might be completing commands, and will drop any new requests. \nTest (7) indicates that the element is in a test state. \nDeferred (8) indicates that the element might be completing commands, but will queue any new requests. \nQuiesce (9) indicates that the element is enabled but in a restricted mode.\nStarting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.
ValueMap
11..32767
32768..65535
Values
Unknown
Other
Enabled
Disabled
Shutting Down
Not Applicable
Enabled but Offline
In Test
Deferred
Quiesce
Starting
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.OtherEnabledState
OtherEnabledState
Description
A string that describes the enabled or disabled state of the element when the EnabledState property is set to 1 ("Other"). This property must be set to null when EnabledState is any value other than 1.
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
RequestedState
Description
RequestedState is an integer enumeration that indicates the last requested or desired state for the element, irrespective of the mechanism through which it was requested. The actual state of the element is represented by EnabledState. This property is provided to compare the last requested and current enabled or disabled states. Note that when EnabledState is set to 5 ("Not Applicable"), then this property has no meaning. Refer to the EnabledState property description for explanations of the values in the RequestedState enumeration. \n"Unknown" (0) indicates the last requested state for the element is unknown.\nNote that the value "No Change" (5) has been deprecated in lieu of indicating the last requested state is "Unknown" (0). If the last requested or desired state is unknown, RequestedState should have the value "Unknown" (0), but may have the value "No Change" (5).Offline (6) indicates that the element has been requested to transition to the Enabled but Offline EnabledState. \nIt should be noted that there are two new values in RequestedState that build on the statuses of EnabledState. These are "Reboot" (10) and "Reset" (11). Reboot refers to doing a "Shut Down" and then moving to an "Enabled" state. Reset indicates that the element is first "Disabled" and then "Enabled". The distinction between requesting "Shut Down" and "Disabled" should also be noted. Shut Down requests an orderly transition to the Disabled state, and might involve removing power, to completely erase any existing state. The Disabled state requests an immediate disabling of the element, such that it will not execute or accept any commands or processing requests. \n\nThis property is set as the result of a method invocation (such as Start or StopService on CIM_Service), or can be overridden and defined as WRITEable in a subclass. The method approach is considered superior to a WRITEable property, because it allows an explicit invocation of the operation and the return of a result code. \n\nIf knowledge of the last RequestedState is not supported for the EnabledLogicalElement, the property shall be NULL or have the value 12 "Not Applicable".
ValueMap
32768..65535
Values
Unknown
Enabled
Disabled
Shut Down
No Change
Offline
Test
Deferred
Quiesce
Reboot
Reset
Not Applicable
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
EnabledDefault
Write
Description
An enumerated value indicating an administrator\'s default or startup configuration for the Enabled State of an element. By default, the element is "Enabled" (value=2).
ValueMap
32768..65535
Values
Enabled
Disabled
Not Applicable
Enabled but Offline
No Default
Quiesce
DMTF Reserved
Vendor Reserved
TimeOfLastStateChange
Description
The date or time when the EnabledState of the element last changed. If the state of the element has not changed and this property is populated, then it must be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property must not be updated.
AvailableRequestedStates
Description
AvailableRequestedStates indicates the possible values for the RequestedState parameter of the method RequestStateChange, used to initiate a state change. The values listed shall be a subset of the values contained in the RequestedStatesSupported property of the associated instance of CIM_EnabledLogicalElementCapabilities where the values selected are a function of the current state of the CIM_EnabledLogicalElement. This property may be non-null if an implementation is able to advertise the set of possible values as a function of the current state. This property shall be null if an implementation is unable to determine the set of possible values as a function of the current state.
ValueMap
Values
Enabled
Disabled
Shut Down
Offline
Test
Defer
Quiesce
Reboot
Reset
DMTF Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.RequestStateChange
CIM_EnabledLogicalElementCapabilities.RequestedStatesSupported
TransitioningToState
Description
TransitioningToState indicates the target state to which the instance is transitioning. \nA value of 5 "No Change" shall indicate that no transition is in progress.A value of 12 "Not Applicable" shall indicate the implementation does not support representing ongoing transitions. \nA value other than 5 or 12 shall identify the state to which the element is in the process of transitioning.
ValueMap
Values
Unknown
Enabled
Disabled
Shut Down
No Change
Offline
Test
Defer
Quiesce
Reboot
Reset
Not Applicable
DMTF Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.RequestStateChange
CIM_EnabledLogicalElement.RequestedState
CIM_EnabledLogicalElement.EnabledState
StopService
Description
The StopService method places the Service in the stopped state. Note that the function of this method overlaps with the RequestedState property. RequestedState was added to the model to maintain a record (such as a persisted value) of the last state request. Invoking the StopService method should set the RequestedState property appropriately. The method returns an integer value of 0 if the Service was successfully stopped, 1 if the request is not supported, and any other number to indicate an error. In a subclass, the set of possible return codes could be specified using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated can also be specified in the subclass as a Values array qualifier. \n\nNote: The semantics of this method overlap with the RequestStateChange method that is inherited from EnabledLogicalElement. This method is maintained because it has been widely implemented, and its simple "stop" semantics are convenient to use.
StartService
Description
The StartService method places the Service in the started state. Note that the function of this method overlaps with the RequestedState property. RequestedState was added to the model to maintain a record (such as a persisted value) of the last state request. Invoking the StartService method should set the RequestedState property appropriately. The method returns an integer value of 0 if the Service was successfully started, 1 if the request is not supported, and any other number to indicate an error. In a subclass, the set of possible return codes could be specified using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated can also be specified in the subclass as a Values array qualifier. \n\nNote: The semantics of this method overlap with the RequestStateChange method that is inherited from EnabledLogicalElement. This method is maintained because it has been widely implemented, and its simple "start" semantics are convenient to use.
RequestStateChange
Description
Requests that the state of the element be changed to the value specified in the RequestedState parameter. When the requested state change takes place, the EnabledState and RequestedState of the element will be the same. Invoking the RequestStateChange method multiple times could result in earlier requests being overwritten or lost. \nA return code of 0 shall indicate the state change was successfully initiated. \nA return code of 3 shall indicate that the state transition cannot complete within the interval specified by the TimeoutPeriod parameter. \nA return code of 4096 (0x1000) shall indicate the state change was successfully initiated, a ConcreteJob has been created, and its reference returned in the output parameter Job. Any other return code indicates an error condition.
ValueMap
4096
4097
4098
4099
4100..32767
32768..65535
Values
Completed with No Error
Not Supported
Unknown or Unspecified Error
Cannot complete within Timeout Period
Failed
Invalid Parameter
In Use
DMTF Reserved
Method Parameters Checked - Job Started
Invalid State Transition
Use of Timeout Parameter Not Supported
Busy
Method Reserved
Vendor Specific
ModelCorrespondence
CIM_EnabledLogicalElement.RequestedState
RequestedState
Description
The state requested for the element. This information will be placed into the RequestedState property of the instance if the return code of the RequestStateChange method is 0 (\'Completed with No Error\'), or 4096 (0x1000) (\'Job Started\'). Refer to the description of the EnabledState and RequestedState properties for the detailed explanations of the RequestedState values.
ValueMap
32768..65535
Values
Enabled
Disabled
Shut Down
Offline
Test
Defer
Quiesce
Reboot
Reset
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.RequestedState
CIM_ConcreteJob
Description
May contain a reference to the ConcreteJob created to track the state transition initiated by the method invocation.
TimeoutPeriod
Description
A timeout period that specifies the maximum amount of time that the client expects the transition to the new state to take. The interval format must be used to specify the TimeoutPeriod. A value of 0 or a null parameter indicates that the client has no time requirements for the transition. \nIf this property does not contain 0 or null and the implementation does not support this parameter, a return code of \'Use Of Timeout Parameter Not Supported\' shall be returned.
CIM_ObjectManager
CIM_WBEMService
Version
2.8.0
UMLPackagePath
CIM::Interop
Description
A type of CIM_Service that defines the capabilities of the CIM Server in which this ObjectManager class resides. Details related to communicating with the ObjectManager, and the Manager\'s basic capabilities, are stored in instances of the associated CommunicationMechanism class available through the CommMechanismForManager association. It is assumed that Basic Read operations must be supported by all ObjectManager\'s in order to retrieve any additional detail.
TransitioningToState
Description
TransitioningToState indicates the target state to which the instance is transitioning. \nA value of 5 "No Change" shall indicate that no transition is in progress.A value of 12 "Not Applicable" shall indicate the implementation does not support representing ongoing transitions. \nA value other than 5 or 12 shall identify the state to which the element is in the process of transitioning.
ValueMap
Values
Unknown
Enabled
Disabled
Shut Down
No Change
Offline
Test
Defer
Quiesce
Reboot
Reset
Not Applicable
DMTF Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.RequestStateChange
CIM_EnabledLogicalElement.RequestedState
CIM_EnabledLogicalElement.EnabledState
AvailableRequestedStates
Description
AvailableRequestedStates indicates the possible values for the RequestedState parameter of the method RequestStateChange, used to initiate a state change. The values listed shall be a subset of the values contained in the RequestedStatesSupported property of the associated instance of CIM_EnabledLogicalElementCapabilities where the values selected are a function of the current state of the CIM_EnabledLogicalElement. This property may be non-null if an implementation is able to advertise the set of possible values as a function of the current state. This property shall be null if an implementation is unable to determine the set of possible values as a function of the current state.
ValueMap
Values
Enabled
Disabled
Shut Down
Offline
Test
Defer
Quiesce
Reboot
Reset
DMTF Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.RequestStateChange
CIM_EnabledLogicalElementCapabilities.RequestedStatesSupported
TimeOfLastStateChange
Description
The date or time when the EnabledState of the element last changed. If the state of the element has not changed and this property is populated, then it must be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property must not be updated.
EnabledDefault
Write
Description
An enumerated value indicating an administrator\'s default or startup configuration for the Enabled State of an element. By default, the element is "Enabled" (value=2).
ValueMap
32768..65535
Values
Enabled
Disabled
Not Applicable
Enabled but Offline
No Default
Quiesce
DMTF Reserved
Vendor Reserved
RequestedState
Description
RequestedState is an integer enumeration that indicates the last requested or desired state for the element, irrespective of the mechanism through which it was requested. The actual state of the element is represented by EnabledState. This property is provided to compare the last requested and current enabled or disabled states. Note that when EnabledState is set to 5 ("Not Applicable"), then this property has no meaning. Refer to the EnabledState property description for explanations of the values in the RequestedState enumeration. \n"Unknown" (0) indicates the last requested state for the element is unknown.\nNote that the value "No Change" (5) has been deprecated in lieu of indicating the last requested state is "Unknown" (0). If the last requested or desired state is unknown, RequestedState should have the value "Unknown" (0), but may have the value "No Change" (5).Offline (6) indicates that the element has been requested to transition to the Enabled but Offline EnabledState. \nIt should be noted that there are two new values in RequestedState that build on the statuses of EnabledState. These are "Reboot" (10) and "Reset" (11). Reboot refers to doing a "Shut Down" and then moving to an "Enabled" state. Reset indicates that the element is first "Disabled" and then "Enabled". The distinction between requesting "Shut Down" and "Disabled" should also be noted. Shut Down requests an orderly transition to the Disabled state, and might involve removing power, to completely erase any existing state. The Disabled state requests an immediate disabling of the element, such that it will not execute or accept any commands or processing requests. \n\nThis property is set as the result of a method invocation (such as Start or StopService on CIM_Service), or can be overridden and defined as WRITEable in a subclass. The method approach is considered superior to a WRITEable property, because it allows an explicit invocation of the operation and the return of a result code. \n\nIf knowledge of the last RequestedState is not supported for the EnabledLogicalElement, the property shall be NULL or have the value 12 "Not Applicable".
ValueMap
32768..65535
Values
Unknown
Enabled
Disabled
Shut Down
No Change
Offline
Test
Deferred
Quiesce
Reboot
Reset
Not Applicable
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
OtherEnabledState
Description
A string that describes the enabled or disabled state of the element when the EnabledState property is set to 1 ("Other"). This property must be set to null when EnabledState is any value other than 1.
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
EnabledState
Description
EnabledState is an integer enumeration that indicates the enabled and disabled states of an element. It can also indicate the transitions between these requested states. For example, shutting down (value=4) and starting (value=10) are transient states between enabled and disabled. The following text briefly summarizes the various enabled and disabled states: \nEnabled (2) indicates that the element is or could be executing commands, will process any queued commands, and queues new requests. \nDisabled (3) indicates that the element will not execute commands and will drop any new requests. \nShutting Down (4) indicates that the element is in the process of going to a Disabled state. \nNot Applicable (5) indicates the element does not support being enabled or disabled. \nEnabled but Offline (6) indicates that the element might be completing commands, and will drop any new requests. \nTest (7) indicates that the element is in a test state. \nDeferred (8) indicates that the element might be completing commands, but will queue any new requests. \nQuiesce (9) indicates that the element is enabled but in a restricted mode.\nStarting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.
ValueMap
11..32767
32768..65535
Values
Unknown
Other
Enabled
Disabled
Shutting Down
Not Applicable
Enabled but Offline
In Test
Deferred
Quiesce
Starting
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.OtherEnabledState
PrimaryStatus
Description
PrimaryStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents. \nPrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. "Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"OK" indicates the ManagedElement is functioning normally. \n"Degraded" indicates the ManagedElement is functioning below normal. \n"Error" indicates the ManagedElement is in an Error condition.
ValueMap
0x8000..
Values
Unknown
Degraded
Error
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_ManagedSystemElement.DetailedStatus
CIM_ManagedSystemElement.HealthState
OperatingStatus
Description
OperatingStatus provides a current status value for the operational condition of the element and can be used for providing more detail with respect to the value of EnabledState. It can also provide the transitional states when an element is transitioning from one state to another, such as when an element is transitioning between EnabledState and RequestedState, as well as other transitional conditions.\nOperatingStatus consists of one of the following values: Unknown, Not Available, In Service, Starting, Stopping, Stopped, Aborted, Dormant, Completed, Migrating, Emmigrating, Immigrating, Snapshotting. Shutting Down, In Test \nA Null return indicates the implementation (provider) does not implement this property. \n"Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"None" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"Servicing" describes an element being configured, maintained, cleaned, or otherwise administered. \n"Starting" describes an element being initialized. \n"Stopping" describes an element being brought to an orderly stop. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Completed" indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded in the PrimaryStatus so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \n"Migrating" element is being moved between host elements. \n"Immigrating" element is being moved to new host element. \n"Emigrating" element is being moved away from host element. \n"Shutting Down" describes an element being brought to an abrupt stop. \n"In Test" element is performing test functions. \n"Transitioning" describes an element that is between states, that is, it is not fully available in either its previous state or its next state. This value should be used if other values indicating a transition to a specific state are not applicable.\n"In Service" describes an element that is in service and operational.
ValueMap
0x8000..
Values
Unknown
Not Available
Servicing
Starting
Stopping
Stopped
Aborted
Dormant
Completed
Migrating
Emigrating
Immigrating
Snapshotting
Shutting Down
In Test
Transitioning
In Service
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
DetailedStatus
Description
DetailedStatus compliments PrimaryStatus with additional status detail. It consists of one of the following values: Not Available, No Additional Information, Stressed, Predictive Failure, Error, Non-Recoverable Error, SupportingEntityInError. Detailed status is used to expand upon the PrimaryStatus of the element. \nA Null return indicates the implementation (provider) does not implement this property. \n"Not Available" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"No Additional Information" indicates that the element is functioning normally as indicated by PrimaryStatus = "OK". \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, and so on. \n"Predictive Failure" indicates that an element is functioning normally but a failure is predicted in the near future. \n"Non-Recoverable Error " indicates that this element is in an error condition that requires human intervention. \n"Supporting Entity in Error" indicates that this element might be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems.
ValueMap
0x8000..
Values
Not Available
No Additional Information
Stressed
Predictive Failure
Non-Recoverable Error
Supporting Entity in Error
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.PrimaryStatus
CIM_ManagedSystemElement.HealthState
CommunicationStatus
Description
CommunicationStatus indicates the ability of the instrumentation to communicate with the underlying ManagedElement. CommunicationStatus consists of one of the following values: Unknown, None, Communication OK, Lost Communication, or No Contact. \nA Null return indicates the implementation (provider) does not implement this property. \n"Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"Not Available" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"Communication OK " indicates communication is established with the element, but does not convey any quality of service. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the Managed Element is known to exist and has been contacted successfully in the past, but is currently unreachable.
ValueMap
0x8000..
Values
Unknown
Not Available
Communication OK
Lost Communication
No Contact
DMTF Reserved
Vendor Reserved
HealthState
Description
Indicates the current health of the element. This attribute expresses the health of this element but not necessarily that of its subcomponents. The possible values are 0 to 30, where 5 means the element is entirely healthy and 30 means the element is completely non-functional. The following continuum is defined: \n"Non-recoverable Error" (30) - The element has completely failed, and recovery is not possible. All functionality provided by this element has been lost. \n"Critical Failure" (25) - The element is non-functional and recovery might not be possible. \n"Major Failure" (20) - The element is failing. It is possible that some or all of the functionality of this component is degraded or not working. \n"Minor Failure" (15) - All functionality is available but some might be degraded. \n"Degraded/Warning" (10) - The element is in working order and all functionality is provided. However, the element is not working to the best of its abilities. For example, the element might not be operating at optimal performance or it might be reporting recoverable errors. \n"OK" (5) - The element is fully functional and is operating within normal operational parameters and without error. \n"Unknown" (0) - The implementation cannot report on HealthState at this time. \nDMTF has reserved the unused portion of the continuum for additional HealthStates in the future.
ValueMap
Values
Unknown
Degraded/Warning
Minor failure
Major failure
Critical failure
Non-recoverable error
DMTF Reserved
Status
Deprecated
CIM_ManagedSystemElement.OperationalStatus
Description
A string indicating the current status of the object. Various operational and non-operational statuses are defined. This property is deprecated in lieu of OperationalStatus, which includes the same semantics in its enumeration. This change is made for 3 reasons: \n1) Status is more correctly defined as an array. This definition overcomes the limitation of describing status using a single value, when it is really a multi-valued property (for example, an element might be OK AND Stopped. \n2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values. \n3) The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, Status was grandfathered into the Schema. Use of the deprecated qualifier allows the maintenance of the existing property, but also permits an improved definition using OperationalStatus.
ValueMap
Error
Degraded
Unknown
Pred Fail
Starting
Stopping
Service
Stressed
NonRecover
No Contact
Lost Comm
Stopped
MaxLen
StatusDescriptions
Description
Strings describing the various OperationalStatus array values. For example, if "Stopping" is the value assigned to OperationalStatus, then this property may contain an explanation as to why an object is being stopped. Note that entries in this array are correlated with those at the same array index in OperationalStatus.
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.OperationalStatus
OperationalStatus
Description
Indicates the current statuses of the element. Various operational statuses are defined. Many of the enumeration\'s values are self-explanatory. However, a few are not and are described here in more detail. \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, and so on. \n"Predictive Failure" indicates that an element is functioning nominally but predicting a failure in the near future. \n"In Service" describes an element being configured, maintained, cleaned, or otherwise administered. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is currently unreachable. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Supporting Entity in Error" indicates that this element might be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems. \n"Completed" indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \n"Power Mode" indicates that the element has additional power model information contained in the Associated PowerManagementService association. \nOperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent approach to enumerations, to address implementation needs for an array property, and to provide a migration path from today\'s environment to the future. This change was not made earlier because it required the deprecated qualifier. Due to the widespread use of the existing Status property in management applications, it is strongly recommended that providers or instrumentation provide both the Status and OperationalStatus properties. Further, the first value of OperationalStatus should contain the primary status for the element. When instrumented, Status (because it is single-valued) should also provide the primary status of the element.
ValueMap
0x8000..
Values
Unknown
Other
Degraded
Stressed
Predictive Failure
Error
Non-Recoverable Error
Starting
Stopping
Stopped
In Service
No Contact
Lost Communication
Aborted
Dormant
Supporting Entity in Error
Completed
Power Mode
DMTF Reserved
Vendor Reserved
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.StatusDescriptions
InstallDate
Description
A datetime value that indicates when the object was installed. Lack of a value does not indicate that the object is not installed.
MappingStrings
MIF.DMTF|ComponentID|001.5
InstanceID
Description
InstanceID is an optional property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace. Various subclasses of this class may override this property to make it required, or a key. Such subclasses may also modify the preferred algorithms for ensuring uniqueness that are defined below.\nTo ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be reused to identify different underlying (real-world) elements. If not null and the above "preferred" algorithm is not used, the defining entity must assure that the resulting InstanceID is not reused across any InstanceIDs produced by this or other providers for the NameSpace of this instance. \nIf not set to null for DMTF-defined instances, the "preferred" algorithm must be used with the <OrgID> set to CIM.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
SystemCreationClassName
Description
The CreationClassName of the scoping System.
MaxLen
Propagated
CIM_System.CreationClassName
SystemName
Description
The Name of the scoping System.
MaxLen
Propagated
CIM_System.Name
CreationClassName
Description
CreationClassName indicates the name of the class or the subclass that is used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
PrimaryOwnerName
Write
Description
The name of the primary owner for the service, if one is defined. The primary owner is the initial support contact for the Service.
MaxLen
MappingStrings
MIF.DMTF|General Information|001.3
PrimaryOwnerContact
Write
Description
A string that provides information on how the primary owner of the Service can be reached (for example, phone number, e-mail address, and so on).
MaxLen
MappingStrings
MIF.DMTF|General Information|001.4
StartMode
Deprecated
CIM_Service.EnabledDefault
Description
Note: The use of this element is deprecated in lieu of the EnabledDefault property that is inherited from EnabledLogicalElement. The EnabledLogicalElement addresses the same semantics. The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property. To remain compatible with those implementations, StartMode was grandfathered into the schema. Use of the deprecated qualifier allows the maintenance of the existing property but also permits an improved, clarified definition using EnabledDefault. \nDeprecated description: StartMode is a string value that indicates whether the Service is automatically started by a System, an Operating System, and so on, or is started only upon request.
ValueMap
Automatic
Manual
MaxLen
Started
Description
Started is a Boolean that indicates whether the Service has been started (TRUE), or stopped (FALSE).
GatherStatisticalData
Write
Description
The GatherStatisticalData property is used to control the gathering of statistical data made accessible through the CIM_CIMOMStatisticalData objects. If set to true, the data is gathered and can be accessed. If false, the CIM_CIMOMStatisticalData instance MAY exist but MUST show zero values for the counter properties.
Name
MaxLen
Override
Name
Description
The Name property is used to uniquely identify a CIM Server. The CIM Server MUST ensure that this value is globally unique. In order to ensure uniqueness, this value SHOULD be constructed in the following manner. <Vendor ID>:<Unique ID> \n<Vendor ID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity or a registered ID that is assigned to the business entity that is defining the Name. (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) The purpose of <Vendor ID> is to ensure that <ID> is truly unique across multiple vendor implementations. If such a name is not used, the defining entity MUST assure that the <ID> portion of the Instance ID is unique when compared with other instance providers. For DMTF defined instances, the <Vendor ID> is \'CIM\'. \n<Unique ID> MUST include a vendor specified unique identifier. \nNote: Name is semantically the same as InstanceID. In the next major version of the CIM Schema, Name will be renamed to InstanceID and become the only key of this class.
ElementName
Override
ElementName
Description
The ElmentName property is used as a name of the CIM Server for human interfaces. For example, "ACME CIM Server"). This property is required to support the SLP discovery mechanism. In the next major release this property MAY include the required qualifier.
Description
Override
Description
Description
The description property is used as a description of the CIM Server for human interfaces. For example, " ACME CIM Server version 2.2"). This property is required to support the SLP discovery mechanism. In the next major release this property MAY include the required qualifier.
RequestStateChange
Description
Requests that the state of the element be changed to the value specified in the RequestedState parameter. When the requested state change takes place, the EnabledState and RequestedState of the element will be the same. Invoking the RequestStateChange method multiple times could result in earlier requests being overwritten or lost. \nA return code of 0 shall indicate the state change was successfully initiated. \nA return code of 3 shall indicate that the state transition cannot complete within the interval specified by the TimeoutPeriod parameter. \nA return code of 4096 (0x1000) shall indicate the state change was successfully initiated, a ConcreteJob has been created, and its reference returned in the output parameter Job. Any other return code indicates an error condition.
ValueMap
4096
4097
4098
4099
4100..32767
32768..65535
Values
Completed with No Error
Not Supported
Unknown or Unspecified Error
Cannot complete within Timeout Period
Failed
Invalid Parameter
In Use
DMTF Reserved
Method Parameters Checked - Job Started
Invalid State Transition
Use of Timeout Parameter Not Supported
Busy
Method Reserved
Vendor Specific
ModelCorrespondence
CIM_EnabledLogicalElement.RequestedState
RequestedState
Description
The state requested for the element. This information will be placed into the RequestedState property of the instance if the return code of the RequestStateChange method is 0 (\'Completed with No Error\'), or 4096 (0x1000) (\'Job Started\'). Refer to the description of the EnabledState and RequestedState properties for the detailed explanations of the RequestedState values.
ValueMap
32768..65535
Values
Enabled
Disabled
Shut Down
Offline
Test
Defer
Quiesce
Reboot
Reset
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.RequestedState
CIM_ConcreteJob
Description
May contain a reference to the ConcreteJob created to track the state transition initiated by the method invocation.
TimeoutPeriod
Description
A timeout period that specifies the maximum amount of time that the client expects the transition to the new state to take. The interval format must be used to specify the TimeoutPeriod. A value of 0 or a null parameter indicates that the client has no time requirements for the transition. \nIf this property does not contain 0 or null and the implementation does not support this parameter, a return code of \'Use Of Timeout Parameter Not Supported\' shall be returned.
StartService
Description
The StartService method places the Service in the started state. Note that the function of this method overlaps with the RequestedState property. RequestedState was added to the model to maintain a record (such as a persisted value) of the last state request. Invoking the StartService method should set the RequestedState property appropriately. The method returns an integer value of 0 if the Service was successfully started, 1 if the request is not supported, and any other number to indicate an error. In a subclass, the set of possible return codes could be specified using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated can also be specified in the subclass as a Values array qualifier. \n\nNote: The semantics of this method overlap with the RequestStateChange method that is inherited from EnabledLogicalElement. This method is maintained because it has been widely implemented, and its simple "start" semantics are convenient to use.
StopService
Description
The StopService method places the Service in the stopped state. Note that the function of this method overlaps with the RequestedState property. RequestedState was added to the model to maintain a record (such as a persisted value) of the last state request. Invoking the StopService method should set the RequestedState property appropriately. The method returns an integer value of 0 if the Service was successfully stopped, 1 if the request is not supported, and any other number to indicate an error. In a subclass, the set of possible return codes could be specified using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated can also be specified in the subclass as a Values array qualifier. \n\nNote: The semantics of this method overlap with the RequestStateChange method that is inherited from EnabledLogicalElement. This method is maintained because it has been widely implemented, and its simple "stop" semantics are convenient to use.
ies where th
CIM_IndicationService
CIM_Service
Version
2.20.0
UMLPackagePath
CIM::Event
Description
An IndicationService is a Service of the CIM Object Manager that is responsible for delivering indications to Indication Handlers.
Started
Description
Started is a Boolean that indicates whether the Service has been started (TRUE), or stopped (FALSE).
StartMode
Deprecated
CIM_Service.EnabledDefault
Description
Note: The use of this element is deprecated in lieu of the EnabledDefault property that is inherited from EnabledLogicalElement. The EnabledLogicalElement addresses the same semantics. The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property. To remain compatible with those implementations, StartMode was grandfathered into the schema. Use of the deprecated qualifier allows the maintenance of the existing property but also permits an improved, clarified definition using EnabledDefault. \nDeprecated description: StartMode is a string value that indicates whether the Service is automatically started by a System, an Operating System, and so on, or is started only upon request.
ValueMap
Automatic
Manual
MaxLen
PrimaryOwnerContact
Write
Description
A string that provides information on how the primary owner of the Service can be reached (for example, phone number, e-mail address, and so on).
MaxLen
MappingStrings
MIF.DMTF|General Information|001.4
PrimaryOwnerName
Write
Description
The name of the primary owner for the service, if one is defined. The primary owner is the initial support contact for the Service.
MaxLen
MappingStrings
MIF.DMTF|General Information|001.3
Name
Override
Name
Description
The Name property uniquely identifies the Service and provides an indication of the functionality that is managed. This functionality is described in more detail in the Description property of the object.
MaxLen
CreationClassName
Description
CreationClassName indicates the name of the class or the subclass that is used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
SystemName
Description
The Name of the scoping System.
MaxLen
Propagated
CIM_System.Name
SystemCreationClassName
Description
The CreationClassName of the scoping System.
MaxLen
Propagated
CIM_System.CreationClassName
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. \nNote that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
Description
Description
The Description property provides a textual description of the object.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
InstanceID
Description
InstanceID is an optional property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace. Various subclasses of this class may override this property to make it required, or a key. Such subclasses may also modify the preferred algorithms for ensuring uniqueness that are defined below.\nTo ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be reused to identify different underlying (real-world) elements. If not null and the above "preferred" algorithm is not used, the defining entity must assure that the resulting InstanceID is not reused across any InstanceIDs produced by this or other providers for the NameSpace of this instance. \nIf not set to null for DMTF-defined instances, the "preferred" algorithm must be used with the <OrgID> set to CIM.
InstallDate
Description
A datetime value that indicates when the object was installed. Lack of a value does not indicate that the object is not installed.
MappingStrings
MIF.DMTF|ComponentID|001.5
OperationalStatus
Description
Indicates the current statuses of the element. Various operational statuses are defined. Many of the enumeration\'s values are self-explanatory. However, a few are not and are described here in more detail. \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, and so on. \n"Predictive Failure" indicates that an element is functioning nominally but predicting a failure in the near future. \n"In Service" describes an element being configured, maintained, cleaned, or otherwise administered. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is currently unreachable. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Supporting Entity in Error" indicates that this element might be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems. \n"Completed" indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \n"Power Mode" indicates that the element has additional power model information contained in the Associated PowerManagementService association. \nOperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent approach to enumerations, to address implementation needs for an array property, and to provide a migration path from today\'s environment to the future. This change was not made earlier because it required the deprecated qualifier. Due to the widespread use of the existing Status property in management applications, it is strongly recommended that providers or instrumentation provide both the Status and OperationalStatus properties. Further, the first value of OperationalStatus should contain the primary status for the element. When instrumented, Status (because it is single-valued) should also provide the primary status of the element.
ValueMap
0x8000..
Values
Unknown
Other
Degraded
Stressed
Predictive Failure
Error
Non-Recoverable Error
Starting
Stopping
Stopped
In Service
No Contact
Lost Communication
Aborted
Dormant
Supporting Entity in Error
Completed
Power Mode
DMTF Reserved
Vendor Reserved
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.StatusDescriptions
StatusDescriptions
Description
Strings describing the various OperationalStatus array values. For example, if "Stopping" is the value assigned to OperationalStatus, then this property may contain an explanation as to why an object is being stopped. Note that entries in this array are correlated with those at the same array index in OperationalStatus.
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.OperationalStatus
Status
Deprecated
CIM_ManagedSystemElement.OperationalStatus
Description
A string indicating the current status of the object. Various operational and non-operational statuses are defined. This property is deprecated in lieu of OperationalStatus, which includes the same semantics in its enumeration. This change is made for 3 reasons: \n1) Status is more correctly defined as an array. This definition overcomes the limitation of describing status using a single value, when it is really a multi-valued property (for example, an element might be OK AND Stopped. \n2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values. \n3) The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, Status was grandfathered into the Schema. Use of the deprecated qualifier allows the maintenance of the existing property, but also permits an improved definition using OperationalStatus.
ValueMap
Error
Degraded
Unknown
Pred Fail
Starting
Stopping
Service
Stressed
NonRecover
No Contact
Lost Comm
Stopped
MaxLen
HealthState
Description
Indicates the current health of the element. This attribute expresses the health of this element but not necessarily that of its subcomponents. The possible values are 0 to 30, where 5 means the element is entirely healthy and 30 means the element is completely non-functional. The following continuum is defined: \n"Non-recoverable Error" (30) - The element has completely failed, and recovery is not possible. All functionality provided by this element has been lost. \n"Critical Failure" (25) - The element is non-functional and recovery might not be possible. \n"Major Failure" (20) - The element is failing. It is possible that some or all of the functionality of this component is degraded or not working. \n"Minor Failure" (15) - All functionality is available but some might be degraded. \n"Degraded/Warning" (10) - The element is in working order and all functionality is provided. However, the element is not working to the best of its abilities. For example, the element might not be operating at optimal performance or it might be reporting recoverable errors. \n"OK" (5) - The element is fully functional and is operating within normal operational parameters and without error. \n"Unknown" (0) - The implementation cannot report on HealthState at this time. \nDMTF has reserved the unused portion of the continuum for additional HealthStates in the future.
ValueMap
Values
Unknown
Degraded/Warning
Minor failure
Major failure
Critical failure
Non-recoverable error
DMTF Reserved
CommunicationStatus
Description
CommunicationStatus indicates the ability of the instrumentation to communicate with the underlying ManagedElement. CommunicationStatus consists of one of the following values: Unknown, None, Communication OK, Lost Communication, or No Contact. \nA Null return indicates the implementation (provider) does not implement this property. \n"Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"Not Available" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"Communication OK " indicates communication is established with the element, but does not convey any quality of service. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the Managed Element is known to exist and has been contacted successfully in the past, but is currently unreachable.
ValueMap
0x8000..
Values
Unknown
Not Available
Communication OK
Lost Communication
No Contact
DMTF Reserved
Vendor Reserved
DetailedStatus
Description
DetailedStatus compliments PrimaryStatus with additional status detail. It consists of one of the following values: Not Available, No Additional Information, Stressed, Predictive Failure, Error, Non-Recoverable Error, SupportingEntityInError. Detailed status is used to expand upon the PrimaryStatus of the element. \nA Null return indicates the implementation (provider) does not implement this property. \n"Not Available" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"No Additional Information" indicates that the element is functioning normally as indicated by PrimaryStatus = "OK". \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, and so on. \n"Predictive Failure" indicates that an element is functioning normally but a failure is predicted in the near future. \n"Non-Recoverable Error " indicates that this element is in an error condition that requires human intervention. \n"Supporting Entity in Error" indicates that this element might be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower-layer networking problems.
ValueMap
0x8000..
Values
Not Available
No Additional Information
Stressed
Predictive Failure
Non-Recoverable Error
Supporting Entity in Error
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.PrimaryStatus
CIM_ManagedSystemElement.HealthState
OperatingStatus
Description
OperatingStatus provides a current status value for the operational condition of the element and can be used for providing more detail with respect to the value of EnabledState. It can also provide the transitional states when an element is transitioning from one state to another, such as when an element is transitioning between EnabledState and RequestedState, as well as other transitional conditions.\nOperatingStatus consists of one of the following values: Unknown, Not Available, In Service, Starting, Stopping, Stopped, Aborted, Dormant, Completed, Migrating, Emmigrating, Immigrating, Snapshotting. Shutting Down, In Test \nA Null return indicates the implementation (provider) does not implement this property. \n"Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"None" indicates that the implementation (provider) is capable of returning a value for this property, but not ever for this particular piece of hardware/software or the property is intentionally not used because it adds no meaningful information (as in the case of a property that is intended to add additional info to another property). \n"Servicing" describes an element being configured, maintained, cleaned, or otherwise administered. \n"Starting" describes an element being initialized. \n"Stopping" describes an element being brought to an orderly stop. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the state and configuration of the element might need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Completed" indicates that the element has completed its operation. This value should be combined with either OK, Error, or Degraded in the PrimaryStatus so that a client can tell if the complete operation Completed with OK (passed), Completed with Error (failed), or Completed with Degraded (the operation finished, but it did not complete OK or did not report an error). \n"Migrating" element is being moved between host elements. \n"Immigrating" element is being moved to new host element. \n"Emigrating" element is being moved away from host element. \n"Shutting Down" describes an element being brought to an abrupt stop. \n"In Test" element is performing test functions. \n"Transitioning" describes an element that is between states, that is, it is not fully available in either its previous state or its next state. This value should be used if other values indicating a transition to a specific state are not applicable.\n"In Service" describes an element that is in service and operational.
ValueMap
0x8000..
Values
Unknown
Not Available
Servicing
Starting
Stopping
Stopped
Aborted
Dormant
Completed
Migrating
Emigrating
Immigrating
Snapshotting
Shutting Down
In Test
Transitioning
In Service
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
PrimaryStatus
Description
PrimaryStatus provides a high level status value, intended to align with Red-Yellow-Green type representation of status. It should be used in conjunction with DetailedStatus to provide high level and detailed health status of the ManagedElement and its subcomponents. \nPrimaryStatus consists of one of the following values: Unknown, OK, Degraded or Error. "Unknown" indicates the implementation is in general capable of returning this property, but is unable to do so at this time. \n"OK" indicates the ManagedElement is functioning normally. \n"Degraded" indicates the ManagedElement is functioning below normal. \n"Error" indicates the ManagedElement is in an Error condition.
ValueMap
0x8000..
Values
Unknown
Degraded
Error
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_ManagedSystemElement.DetailedStatus
CIM_ManagedSystemElement.HealthState
EnabledState
Description
EnabledState is an integer enumeration that indicates the enabled and disabled states of an element. It can also indicate the transitions between these requested states. For example, shutting down (value=4) and starting (value=10) are transient states between enabled and disabled. The following text briefly summarizes the various enabled and disabled states: \nEnabled (2) indicates that the element is or could be executing commands, will process any queued commands, and queues new requests. \nDisabled (3) indicates that the element will not execute commands and will drop any new requests. \nShutting Down (4) indicates that the element is in the process of going to a Disabled state. \nNot Applicable (5) indicates the element does not support being enabled or disabled. \nEnabled but Offline (6) indicates that the element might be completing commands, and will drop any new requests. \nTest (7) indicates that the element is in a test state. \nDeferred (8) indicates that the element might be completing commands, but will queue any new requests. \nQuiesce (9) indicates that the element is enabled but in a restricted mode.\nStarting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.
ValueMap
11..32767
32768..65535
Values
Unknown
Other
Enabled
Disabled
Shutting Down
Not Applicable
Enabled but Offline
In Test
Deferred
Quiesce
Starting
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.OtherEnabledState
OtherEnabledState
Description
A string that describes the enabled or disabled state of the element when the EnabledState property is set to 1 ("Other"). This property must be set to null when EnabledState is any value other than 1.
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
RequestedState
Description
RequestedState is an integer enumeration that indicates the last requested or desired state for the element, irrespective of the mechanism through which it was requested. The actual state of the element is represented by EnabledState. This property is provided to compare the last requested and current enabled or disabled states. Note that when EnabledState is set to 5 ("Not Applicable"), then this property has no meaning. Refer to the EnabledState property description for explanations of the values in the RequestedState enumeration. \n"Unknown" (0) indicates the last requested state for the element is unknown.\nNote that the value "No Change" (5) has been deprecated in lieu of indicating the last requested state is "Unknown" (0). If the last requested or desired state is unknown, RequestedState should have the value "Unknown" (0), but may have the value "No Change" (5).Offline (6) indicates that the element has been requested to transition to the Enabled but Offline EnabledState. \nIt should be noted that there are two new values in RequestedState that build on the statuses of EnabledState. These are "Reboot" (10) and "Reset" (11). Reboot refers to doing a "Shut Down" and then moving to an "Enabled" state. Reset indicates that the element is first "Disabled" and then "Enabled". The distinction between requesting "Shut Down" and "Disabled" should also be noted. Shut Down requests an orderly transition to the Disabled state, and might involve removing power, to completely erase any existing state. The Disabled state requests an immediate disabling of the element, such that it will not execute or accept any commands or processing requests. \n\nThis property is set as the result of a method invocation (such as Start or StopService on CIM_Service), or can be overridden and defined as WRITEable in a subclass. The method approach is considered superior to a WRITEable property, because it allows an explicit invocation of the operation and the return of a result code. \n\nIf knowledge of the last RequestedState is not supported for the EnabledLogicalElement, the property shall be NULL or have the value 12 "Not Applicable".
ValueMap
32768..65535
Values
Unknown
Enabled
Disabled
Shut Down
No Change
Offline
Test
Deferred
Quiesce
Reboot
Reset
Not Applicable
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
EnabledDefault
Write
Description
An enumerated value indicating an administrator\'s default or startup configuration for the Enabled State of an element. By default, the element is "Enabled" (value=2).
ValueMap
32768..65535
Values
Enabled
Disabled
Not Applicable
Enabled but Offline
No Default
Quiesce
DMTF Reserved
Vendor Reserved
TimeOfLastStateChange
Description
The date or time when the EnabledState of the element last changed. If the state of the element has not changed and this property is populated, then it must be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property must not be updated.
AvailableRequestedStates
Description
AvailableRequestedStates indicates the possible values for the RequestedState parameter of the method RequestStateChange, used to initiate a state change. The values listed shall be a subset of the values contained in the RequestedStatesSupported property of the associated instance of CIM_EnabledLogicalElementCapabilities where the values selected are a function of the current state of the CIM_EnabledLogicalElement. This property may be non-null if an implementation is able to advertise the set of possible values as a function of the current state. This property shall be null if an implementation is unable to determine the set of possible values as a function of the current state.
ValueMap
Values
Enabled
Disabled
Shut Down
Offline
Test
Defer
Quiesce
Reboot
Reset
DMTF Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.RequestStateChange
CIM_EnabledLogicalElementCapabilities.RequestedStatesSupported
TransitioningToState
Description
TransitioningToState indicates the target state to which the instance is transitioning. \nA value of 5 "No Change" shall indicate that no transition is in progress.A value of 12 "Not Applicable" shall indicate the implementation does not support representing ongoing transitions. \nA value other than 5 or 12 shall identify the state to which the element is in the process of transitioning.
ValueMap
Values
Unknown
Enabled
Disabled
Shut Down
No Change
Offline
Test
Defer
Quiesce
Reboot
Reset
Not Applicable
DMTF Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.RequestStateChange
CIM_EnabledLogicalElement.RequestedState
CIM_EnabledLogicalElement.EnabledState
FilterCreationEnabled
Description
The FilterCreationEnabled property controls whether or not clients can create indication filters. If this value is set to false, only the indication filters that exist can be subscribed to. If this value is true clients may attempt to create filters. Note that implementations may preset this setting and not allow this value to be modified.
DeliveryRetryAttempts
Description
Defines the number of retries that the indication service will try to deliver an indication to a particular listener destination. This does not effect the original delivery attempt, thus if set to 0, it will only try to deliver the indication once. Note that implementations may preset this setting and not allow this value to be modified.
MinValue
ModelCorrespondence
CIM_IndicationService.DeliveryRetryInterval
DeliveryRetryInterval
Description
Defines the minimal time interval in seconds for the indication service to use before delivering an indication to a particular listener destination that previously failed. The implementation may take longer due to QoS or other processing. Note that implementations may preset this setting and not allow this value to be modified.
ModelCorrespondence
CIM_IndicationService.DeliveryRetryAttempts
PUnit
Seconds
SubscriptionRemovalAction
Description
Defines the removal action for subscriptions that have two failed indication deliveries without any successful indication deliveries in between and the time between the failed deliveries exceeded the timeout defined in the SubscriptionRemovalTimeInterval property. "Remove" defines the subscription is to be removed.\n"Disable" indicates that subscription removal process isnot being enforced. \n"Ignore" indicates that the removal action is temporarily not enforced. implementations may preset this setting and not allow this value to be modified.
ValueMap
Values
Remove
Disable
Ignore
DMTF Reserved
ModelCorrespondence
CIM_IndicationService.SubscriptionRemovalTimeInterval
SubscriptionRemovalTimeInterval
Description
Minimum time between two failed indication deliveries without any successful indication deliveries in between before the SubscriptionRemovalPolicy goes into effect.
ModelCorrespondence
CIM_IndicationService.SubscriptionRemovalAction
PUnit
Seconds
StopService
Description
The StopService method places the Service in the stopped state. Note that the function of this method overlaps with the RequestedState property. RequestedState was added to the model to maintain a record (such as a persisted value) of the last state request. Invoking the StopService method should set the RequestedState property appropriately. The method returns an integer value of 0 if the Service was successfully stopped, 1 if the request is not supported, and any other number to indicate an error. In a subclass, the set of possible return codes could be specified using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated can also be specified in the subclass as a Values array qualifier. \n\nNote: The semantics of this method overlap with the RequestStateChange method that is inherited from EnabledLogicalElement. This method is maintained because it has been widely implemented, and its simple "stop" semantics are convenient to use.
StartService
Description
The StartService method places the Service in the started state. Note that the function of this method overlaps with the RequestedState property. RequestedState was added to the model to maintain a record (such as a persisted value) of the last state request. Invoking the StartService method should set the RequestedState property appropriately. The method returns an integer value of 0 if the Service was successfully started, 1 if the request is not supported, and any other number to indicate an error. In a subclass, the set of possible return codes could be specified using a ValueMap qualifier on the method. The strings to which the ValueMap contents are translated can also be specified in the subclass as a Values array qualifier. \n\nNote: The semantics of this method overlap with the RequestStateChange method that is inherited from EnabledLogicalElement. This method is maintained because it has been widely implemented, and its simple "start" semantics are convenient to use.
RequestStateChange
Description
Requests that the state of the element be changed to the value specified in the RequestedState parameter. When the requested state change takes place, the EnabledState and RequestedState of the element will be the same. Invoking the RequestStateChange method multiple times could result in earlier requests being overwritten or lost. \nA return code of 0 shall indicate the state change was successfully initiated. \nA return code of 3 shall indicate that the state transition cannot complete within the interval specified by the TimeoutPeriod parameter. \nA return code of 4096 (0x1000) shall indicate the state change was successfully initiated, a ConcreteJob has been created, and its reference returned in the output parameter Job. Any other return code indicates an error condition.
ValueMap
4096
4097
4098
4099
4100..32767
32768..65535
Values
Completed with No Error
Not Supported
Unknown or Unspecified Error
Cannot complete within Timeout Period
Failed
Invalid Parameter
In Use
DMTF Reserved
Method Parameters Checked - Job Started
Invalid State Transition
Use of Timeout Parameter Not Supported
Busy
Method Reserved
Vendor Specific
ModelCorrespondence
CIM_EnabledLogicalElement.RequestedState
RequestedState
Description
The state requested for the element. This information will be placed into the RequestedState property of the instance if the return code of the RequestStateChange method is 0 (\'Completed with No Error\'), or 4096 (0x1000) (\'Job Started\'). Refer to the description of the EnabledState and RequestedState properties for the detailed explanations of the RequestedState values.
ValueMap
32768..65535
Values
Enabled
Disabled
Shut Down
Offline
Test
Defer
Quiesce
Reboot
Reset
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.RequestedState
CIM_ConcreteJob
Description
May contain a reference to the ConcreteJob created to track the state transition initiated by the method invocation.
TimeoutPeriod
Description
A timeout period that specifies the maximum amount of time that the client expects the transition to the new state to take. The interval format must be used to specify the TimeoutPeriod. A value of 0 or a null parameter indicates that the client has no time requirements for the transition. \nIf this property does not contain 0 or null and the implementation does not support this parameter, a return code of \'Use Of Timeout Parameter Not Supported\' shall be returned.
__Namespace
Name
or cont
CIM_ListenerDestination
CIM_ManagedElement
Version
2.22.0
UMLPackagePath
CIM::Event
Description
The description of a CIM Listener destination. A CIM_Listener is an entity capable of receiving CIM Export Messages (e.g., Indications or responses to an asynchronous CIM Operation).
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name in addition to its key properties, identity data, and description information. \nNote that the Name property of ManagedSystemElement is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user-friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information can be present in both the Name and ElementName properties. Note that if there is an associated instance of CIM_EnabledLogicalElementCapabilities, restrictions on this properties may exist as defined in ElementNameMask and MaxElementNameLen properties defined in that class.
Description
Description
The Description property provides a textual description of the object.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
InstanceID
Description
InstanceID is an optional property that may be used to opaquely and uniquely identify an instance of this class within the scope of the instantiating Namespace. Various subclasses of this class may override this property to make it required, or a key. Such subclasses may also modify the preferred algorithms for ensuring uniqueness that are defined below.\nTo ensure uniqueness within the NameSpace, the value of InstanceID should be constructed using the following "preferred" algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon (:), and where <OrgID> must include a copyrighted, trademarked, or otherwise unique name that is owned by the business entity that is creating or defining the InstanceID or that is a registered ID assigned to the business entity by a recognized global authority. (This requirement is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> must not contain a colon (:). When using this algorithm, the first colon to appear in InstanceID must appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the business entity and should not be reused to identify different underlying (real-world) elements. If not null and the above "preferred" algorithm is not used, the defining entity must assure that the resulting InstanceID is not reused across any InstanceIDs produced by this or other providers for the NameSpace of this instance. \nIf not set to null for DMTF-defined instances, the "preferred" algorithm must be used with the <OrgID> set to CIM.
SystemCreationClassName
Description
A System\'s CreationClassName. A CIM Listener destination is defined in context of a CIM_System (e.g., the sending system.
MaxLen
SystemName
Description
A System\'s Name. A CIM Listener destination is defined in context of a CIM_System (e.g., the sending system.
MaxLen
CreationClassName
Description
Indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, it allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
Name
Description
Indicates the name of the CIM Listener destination.
MaxLen
PersistenceType
Description
Describes the Persistence Type of the destination defined by this instance. If the value of PersistenceType is not specified, the value of PersistenceType MUST be treated as 2 ("Permanent"). A value of 2 ("Permanent") declares that the destination is always expected to be available (e.g., system log file). Inability to access this destination MUST be treated as an error condition. A value of 3 ("Transient") indicates that the destination is short-lived. Inability to access the destination MAY be treated as a normal termination condition. Subscriptions with "Transient" destinations MAY be deleted when the destination terminates or is no longer available.
ValueMap
Values
Other
Permanent
Transient
ModelCorrespondence
CIM_ListenerDestination.OtherPersistenceType
OtherPersistenceType
Description
A string describing ("Other") values for PersistenceType. This value MUST be set to a non NULL value when the PersistenceType is 1 ("Other"). For all other values of PersistenceType, the value of OtherPersistenceType MUST be NULL.
ModelCorrespondence
CIM_ListenerDestination.PersistenceType
Destination
Description
The destination IETF URI to which Export Messages are to be delivered. The scheme in the URI must be supported by theprotocol selected in the Protocol property.
OtherProtocol
Description
A free-form string providing a description of the supported protocols when 1, "Other", is specified for the Protocol.
ModelCorrespondence
CIM_ListenerDestination.Protocol
Protocol
Description
Protocol describes an encoding and protocol which will be used to deliver the indication. If Other is used, the value for OtherProtocol must not be null.\nIf a protocol is not specified, 2 "CIM-XML" must be assumed.
ValueMap
Values
Other
CIM-XML
SM CLP
WS-Management
WSDM
DMTF Reserved
ModelCorrespondence
CIM_ListenerDestination.OtherProtocol
 Listener de
CIM_ElementConformsToProfile
Version
2.8.0
UMLPackagePath
CIM::Interop
Description
The CIM_ElementConformsToProfile association defines the RegisteredProfiles to which the referenced ManagedElement is conformant. Note: This association may apply to any Managed Element. Typical usage will apply it to a higher level instance, such as a System, NameSpace, or Service. When applied to a higher level instance, all constituent parts MUST behave appropriately in support of the ManagedElement\'s conformance to the named RegisteredProfile.
ConformantStandard
CIM_RegisteredProfile
Description
The RegisteredProfile to which the ManagedElement conforms.
ManagedElement
CIM_ManagedElement
Description
The ManagedElement that conforms to the RegisteredProfile.
otic
sfcb-rep
Wed Dec 30 17:28:06 2009
%%%%
libsfcClassProviderMem.so.0.0.0.debug
7zXZ
3c\0
",#<
p"V{
/?YY
>(h;
)lXDy
.iQ9
_30`
L`v{!
YpNu
C (aZ
pkbq
{{BF
6AyB
Cf^muB
Z<ZI
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.init
.plt
.plt.got
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.data
.bss
.gnu_debuglink
.gnu_debugdata
