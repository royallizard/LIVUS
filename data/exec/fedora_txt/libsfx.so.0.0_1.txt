2k2N
=`rN)Z
|2`&FYV
__gmon_start__
_init
_fini
__cxa_finalize
_Jv_RegisterClasses
sox_biquad_flow
sox_biquad_start
__printf_chk
sox_biquad_getopts
sox_usage
sscanf
strchr
sox_highp_effect_fn
sox_lowp_effect_fn
sox_highpass_effect_fn
sox_lowpass_effect_fn
sox_bandpass_effect_fn
sox_bandreject_effect_fn
sox_allpass_effect_fn
sox_bass_effect_fn
sox_treble_effect_fn
sox_equalizer_effect_fn
sox_band_effect_fn
sox_deemph_effect_fn
sinh
sqrt
sincos
sox_globals
sox_fail
sox_chorus_effect_fn
free
sox_generate_wave_table
xrealloc
sox_warn
sox_compand_effect_fn
sox_compandt_kill
sox_debug
sox_compandt_show
xcalloc
strtok
sox_compandt_parse
atan2
log10
puts
sox_dcshift_effect_fn
sox_dither_effect_fn
sox_mask_effect_fn
rand
sox_earwax_effect_fn
sox_echo_effect_fn
sox_echos_effect_fn
sox_effects_clips
sox_stop_effect
sox_find_effect
sox_effect_fns
strcasecmp
sox_delete_effects
sox_create_effects_chain
sox_effects_globals
sox_effect_set_imin
sox_flow_effects
memmove
sox_add_effect
sox_report
sox_create_effect
__assert_fail
memcpy
sox_avg_effect_fn
sox_fade_effect_fn
sox_filter_effect_fn
sox_flanger_effect_fn
sox_key_effect_fn
sox_mcompand_effect_fn
sox_mixer_effect_fn
sox_noiseprof_effect_fn
sox_noisered_effect_fn
sox_oops_effect_fn
sox_pad_effect_fn
sox_pan_effect_fn
sox_phaser_effect_fn
sox_pick_effect_fn
sox_pitch_effect_fn
sox_polyphase_effect_fn
sox_rate_effect_fn
sox_repeat_effect_fn
sox_resample_effect_fn
sox_reverb_effect_fn
sox_reverse_effect_fn
sox_silence_effect_fn
sox_speed_effect_fn
sox_stat_effect_fn
sox_stretch_effect_fn
sox_swap_effect_fn
sox_synth_effect_fn
sox_tempo_effect_fn
sox_tremolo_effect_fn
sox_trim_effect_fn
sox_vibro_effect_fn
sox_vol_effect_fn
sox_parsesamples
strlen
strcpy
WindowFunc
gFFTBitTable
exit
PowerSpectrum
sinf
RealFFT
MaxFastBits
makeFilter
strtol
modf
sox_wave_enum
strtod
find_enum_text
__sprintf_chk
memset
__ctype_b_loc
__fprintf_chk
fputc
stdout
fclose
logf
fopen64
__errno_location
strerror
stdin
fscanf
xstrdup
sox_lcm
__memcpy_chk
fseeko64
fread
ftello64
perror
fwrite
tmpfile64
sox_debug_more
ceil
sox_gcd
fflush
sox_skel_effect_fn
stderr
fmod
combine_type
find_enum_value
synth_type
sox_trim_get_start
sox_trim_clear_start
libsox.so.0
libm.so.6
libc.so.6
__stack_chk_fail
_edata
__bss_start
_end
libsfx.so.0
GLIBC_2.1.3
GLIBC_2.4
GLIBC_2.3
GLIBC_2.3.4
GLIBC_2.1
GLIBC_2.0
[^_]
R@t1
z6u4
8btg
8-tU
8-tT
0[^]
8-tU
8-ti
0[^]
0[^]
[^_]
W ~&1
[^_]
[^_]
<[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
gfff
[^_]
[^_]
[^_]
9p(w
9J(v}
[^_]
[^_]
\[^_]
[^_]
[^_]
u`z^
[^_]
[^_]
[^_]
|[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
9Nh}
 [^]
[^_]
[^_]
N$~*
[^_]
[^_]
[^_]
[^_]
[^_]
9wPvA
[^_]
9xPw
GXta
ut9M
NP9M
9wPw
[^_]
[^_]
[^_]
[^_]
[^_]
t	;O
[^_]
[^_]
[^_]
<[^_]
,[^_]
,[^_]
,[^_]
,[^_]
|[^_]
L[^_]
<[^_]
+V$9
V$ui
[^_]
<[^_]
[^_]
L[^_]
[^_]
,[^_]
,[^_]
Qxt"
[^_]
WHQ1
L[^_]
G4ub
8-tm1
[^_]
[^_]
,[^_]
[^_]
[^_]
9z$v}
z(u&
[^_]
L[^_]
[^_]
;p$sd
[^_]
[^_]
u z"
[^_]
[^_]
[^_]
?-t~
[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
|[^_]
L[^_]
[^_]
[^_]
[^_]
[^_]
<[^_]
[^_]
[^_]
[^_]
[^_]
9:vg9
[^_]
@[^]
[^_]
$^_]
VD;V@s
9V@w
FD;F0
FD+F09
FD;F0
[^_]
[^_]
9Q@w
L[^_]
9J(w
9p(w
~9<ct?<l
C<1w
[^_]
9w s
[^_]
,[^_]
[^_]
[^_]
33s?
<hu)
[^_]
[^_]
[^_]
[^_]
[^_]
HP+PH)
[^_]
[^_]
B<)B@
<[^_]
:-uG
9u }}
+E 9
[^_]
[^_]
[^_]
[^_]
9F4w
B4;E
+B01
9H8w
[^_]
+B01
9J4v
[^_]
,[^_]
,[^_]
[^_]
FhRP
V(;V
FhRP
VT;V<
FX|A
0[^]
8-u%
<dtd
,[^_]
,[^_]
,[^_]
BH<%t2<d
8-td1
@[^]
F`RP
[^_]
[^_]
zous
,[^_]
^X~^
[^_]
^XtE
,[^_]
[^_]
$^_]
V,;V(s!
9V(w
F8;F,
F8;F,s]
F8;F,
[^_]
V@;U
9F(w
,[^_]
V(+E
F,;F(
F,t	
N4;N(s*
;F(r
[^_]
A(R1
F@RP
P(9P4
F(RP
FHtB
9F(w
[^_]
A(R1
F4RP
<Lt%<lt!
[^_]
[^_]
[^_]
8%tM
|[^_]
[^_]
[^_]
[^_]
@0+B,1
B0+B,1
q(9A
[^_]
AH+AD
91w%
<[^_]
FLRP
L[^_]
 [^]
[^_]
%% GNU Octave file (may also work with MATLAB(R) )
title('SoX effect: %s gain=%g frequency=%g %s=%g (rate=%g)')
xlabel('Frequency (Hz)')
ylabel('Amplitude Response (dB)')
Fs=%g;minF=10;maxF=Fs/2;
axis([minF maxF -35 25])
sweepF=logspace(log10(minF),log10(maxF),200);
grid on
[h,w]=freqz([%g %g %g],[1 %g %g],sweepF,Fs);
semilogx(w,20*log10(h))
disp('Hit return to continue')
pause
# gnuplot file
set title 'SoX effect: %s gain=%g frequency=%g %s=%g (rate=%g)'
set xlabel 'Frequency (Hz)'
set ylabel 'Amplitude Response (dB)'
Fs=%g
b0=%g; b1=%g; b2=%g; a1=%g; a2=%g
o=2*pi/Fs
H(f)=sqrt((b0*b0+b1*b1+b2*b2+2.*(b0*b1+b1*b2)*cos(f*o)+2.*(b0*b2)*cos(2.*f*o))/(1.+a1*a1+a2*a2+2.*(a1+a1*a2)*cos(f*o)+2.*a2*cos(2.*f*o)))
set logscale x
set grid xtics ytics
set key off
plot [f=10:Fs/2] [-35:25] 20*log10(H(f))
pause -1 'Hit return to continue'
%lf %c
%lf%c %c
band-width(Hz)
band-width(Hz, no warp)
band-width(octaves)
slope
hboqs
?frequency must be less than half the sample-rate (Nyquist rate)
Sample rate must be 44100 (audio-CD)
gain [frequency [width[s|h|q|o]]]
[-1|-2] frequency [width[q|o|h]]
shqo
hqob
deemph
band
[-n] center [width[h|q|o]]
equalizer
frequency width[q|o|h] gain
treble
bass
allpass
bandreject
bandpass
[-c] frequency width[h|q|o]
lowpass
highpass
lowp
cutoff-frequency
highp
Bchorus.c
chorus
chorus: gain-in must be positive!
chorus: gain-in must be less than 1.0!
chorus: gain-out must be positive!
chorus: delay must be more than 20.0 msec!
chorus: delay must be less than 100.0 msec!
chorus: speed must be more than 0.1 Hz!
chorus: speed must be less than 5.0 Hz!
chorus: delay must be more positive!
chorus: delay must be less than 10.0 msec!
chorus: decay must be positive!
chorus: decay must be less that 1.0!
chorus: warning >>> gain-out can cause saturation or clipping of output <<<
chorus: to many delays, use less than %i delays
gain-in gain-out delay decay speed depth [ -s | -t ]
%i input channel(s) expected: actually %i
Channel %i: attack = %g decay = %g
there must be an even number of attack/decay parameters
syntax error trying to read attack/decay time
attack & decay times can't be less than 0 seconds
syntax error trying to read initial volume
initial volume is relative to maximum volume so can't exceed 0dB
syntax error trying to read delay value
delay can't be less than 0 seconds
attack1,decay1{,attack2,decay2} [soft-knee-dB:]in-dB1[,out-dB1]{,in-dB2,out-dB2} [gain [initial-volume-dB [delay]]]
	where {} means optional and repeatable and [] means optional.
	dB values are floating point or -inf'; times are in seconds.
A-inf
compandt.c
TF: %g %g %g %g
%g %g
syntax error trying to read transfer function value
transfer function values are relative to maximum volume so can't exceed 0dB
transfer function input values must be strictly increasing
syntax error trying to read post-processing gain value
%% GNU Octave file (may also work with MATLAB(R) )
title('SoX effect: compand')
xlabel('Input level (dB)')
ylabel('Output level (dB)')
in=linspace(-99.5,0,200);
grid on
out=[
%%plot(in,out) %% hmm.. doesn't work :(
semilogx(exp(in),out)
pause
# gnuplot file
set title 'SoX effect: compand'
set xlabel 'Input level (dB)'
set ylabel 'Output level (dB)'
set grid xtics ytics
set key off
plot '-' with lines
pause -1 'Hit return to continue'
coTg
@@dcshift.c
dcshift
DCSHIFT limited %d values (%d percent).
DCSHIFT clipped %d values, dcshift=%f too high...
DCSHIFT clipped %d values, dcshift=%f too low...
shift [ limitergain ]
       The peak limiter has a gain much less than 1.0 (ie 0.05 or 0.02) which is only
       used on peaks to prevent clipping. (default is no limiter)
mask
dither
[amount]
?earwax.c
earwax
The earwax effect works only with 44.1 kHz, stereo audio.
echo.c
echo: delay must be positive!
echo: decay must be positive!
echo
echo: gain-in must be positive!
echo: gain-in must be less than 1.0!
echo: delay must be less than %g seconds!
echo: decay must be less than 1.0!
echo: warning >>> gain-out can cause saturation of output <<<
echo: to many delays, use less than %i delays
gain-in gain-out delay decay [ delay decay ... ]
Jechos.c
echos
echos: gain-in must be positive!
echos: gain-in must be less than 1.0!
echos: delay must be positive!
echos: delay must be less than %g seconds!
echos: decay must be positive!
echos: decay must be less than 1.0!
echos: warning >>> gain-out can cause saturation of output <<<
echos: to many delays, use less than %i delays
effects.c
sox_bufsiz not big enough
usage: %s
drained asymmetrically!
flowed asymmetrically!
Too many effects!
%s clipped %u samples; decrease volume?
this effect takes no parameters
has no effect (is a proxy effect)
has no effect in this configuration
sox_create_effect
fade.c
%1[qhltp]
fade
Fade: warning: End time passed end-of-file. Padding with silence
Fade: End of fade-in should not happen before beginning of fade-out
fade: in_start = %d in_stop = %d out_start = %d out_stop = %d
[ type ] fade-in-length [ stop-time [ fade-out-length ] ]
       Time is in hh:mm:ss.frac format.
       Fade type one of q, h, t, l or p.
FFT.c
%d is not a power of two
filter.c
flow Nproc %ld
Xh %ld, Xt %ld  <--- DRAIN
drain overran obuf by %ld
freq: %d-%d
filter: low(%d),high(%d) parameters must satisfy 0 <= low <= high <= %g
filter: Unable to make low filter
filter: Unable to make high filter
filter: adjusted freq %d-%d is identity
filter: window length (%ld) <4 is too short
filter opts: %d-%d, window-len %ld, beta %f
low-high [ windowlength [ beta ] ]
Gflanger.c
delay_min
delay_depth
feedback_gain
delay_gain
speed
channel_phase
flanger
LINEAR
QUADRATIC
Can not operate with more than %i channels
in_gain=%g feedback_gain=%g delay_gain=%g
delay_buf_length=%u lfo_length=%u
parameter `%s' must be between %g and %g
parameters:
delay = %gms
depth = %gms
regen = %g%%
width = %g%%
speed = %gHz
shape = %s
phase = %g%%
interp= %s
[delay depth regen width speed shape phase interp]
Bkey
[-q] shift-in-cents [segment-ms [search-ms [overlap-ms]]]
Dmcompand.c
mcompand
mcompand accepts only an odd number of arguments:
  mcompand quoted_compand_args [xover_freq quoted_compand_args [...]
Wrong number of parameters for the compander effect within mcompand; usage:
	attack1,decay1{,attack2,decay2} [soft-knee-dB:]in-dB1[,out-dB1]{,in-dB2,out-dB2} [gain [initial-volume-dB [delay]]]
	where {} means optional and repeatable and [] means optional.
	dB values are floating point or -inf'; times are in seconds.
compander: Odd number of attack & decay rate parameters
bad frequency in args to mcompand
mcompand crossover frequencies must be in ascending order.
quoted_compand_args [crossover_frequency quoted_compand_args [...]]
quoted_compand_args are as for the compand effect:
  attack1,decay1[,attack2,decay2...]
                 in-dB1,out-dB1[,in-dB2,out-dB2...]
                [ gain [ initial-volume [ delay ] ] ]
pick
oops
1,1,-1,-1
mixer.c
Can't mix %d -> %d channels
Unknown mix option
mixer
Output must have known number of channels
Can't mix -%c %d -> %d channels
You must specify at least one mix level when using mixer with an unusual number of channels.
Invalid options while not mixing
Invalid options for this channel combination
mixer can only take up to 16 pan values
[ -l | -r | -f | -b | -1 | -2 | -3 | -4 | n,n,n...,n ]
Channel %d: 
%s%f
noiseprof.c
data->bufdata <= 2048
stdout already in use by '%s'
noiseprof
[profile-file]
effp->ininfo.channels == effp->outinfo.channels
Couldn't open profile file %s: %s
sox_noiseprof_flow
>noisered.c
stdin already in use by '%s'
 Channel %u: %f
, %f
threshold
noisered
[profile-file [amount]]
smoothing[i] >= 0 && smoothing[i] <= 1
chan->window[j] >= -1 && chan->window[j] <= 1
noisered: Got channel %d, expected channel %d.
noisered: Not enough datums for channel %d (expected %d, got %d)
noisered: channel mismatch: %d in input, %d in profile.
process_window
reduce_noise
sox_noisered_flow
?pad.c
{length[@position]}
Input audio too short; pads not applied: %u
HGpan.c
PAN onto a mono channel...
direction (in [-1.0 .. 1.0])
unexpected number of channels (in=%d, out=%d)
phaser.c
phaser
phaser: delay must be positive!
phaser: delay must be less than 5.0 msec!
phaser: speed must be more than 0.1 Hz!
phaser: speed must be less than 2.0 Hz!
phaser: decay must be positive!
phaser: decay must be less that 1.0!
phaser: warning >>> gain-in can cause saturation or clipping of output <<<
phaser: warning >>> gain-out can cause saturation or clipping of output <<<
gain-in gain-out delay decay speed [ -s | -t ]
pitch.c
pitch
unexpected PITCH_FADE parameter %d
shift width interpole fade
       (in cents, in ms, cub/lin, cos/ham/lin/trap)       (defaults: 0 20 c c)
OUUUUUU
Mb@?q=
?polyphas.c
factors(%d) =
c_min %d, [%d-%d]:
 (%d,%d)
-width
-cutoff
polyphase
Number %d too large of a prime.
Poly:  input rate %g, output rate %g.  %d stages.
Poly:  window: %s  size: %d  cutoff: %f.
Poly:  stage %d:  Up by %d, down by %d,  i_samps %d, hsize %d
Poly:         :  filt_len %d, cutoff freq %.1f
Illegal buffer %p, length %d, or cutoff %f.
Illegal buffer %p or length %d to nuttall.
Illegal buffer %p or length %d to hamming.
Poly:  output samples %d, oskip %d
Polyphase: unknown argument (%s %s)!
-w {nut|ham}   window type
       -width n       window width in samples [default 1024]
       -cutoff float  frequency cutoff for base bandwidth [default 0.95]
5rate
repeat.c
corrupted temporary file
read error on temporary file
write error on temporary file
repeat
count
repeat2: read error on temporary file
repeat3: read error on temporary file
could not create temporary file
could not parse repeat parameter
repeat parameter must be positive
resample.c
Xp %li, Xread %li, isamp %d, 
Nx %li
Nproc %li --> %li
Nproc %ld, creep %ld
Factor %f, dt %f, 
Time %f, 
ct=%.2f %li
Time %f
k %li, last %li
Xoff %li  <--- DRAIN
DRAIN osamp %d
drain overran obuf by %li
DCgain err=%.12f
Unable to make filter
resample
Can not handle this sample rate change. Nx not positive: %li
ct=%ld, T=%.6f, dhb=%6f, dt=%.6f
DRAIN isamp,osamp  (%li,%li) -> (%d,%d)
rolloff factor (%f) no good, should be 0.01<x<1.0
opts: Nuttall window, cutoff %f
opts: Kaiser window, cutoff %f, beta %f
Nmult: %ld, Nwing: %ld, Nq: %ld
rate ratio %ld:%ld, coeff interpolation not needed
Factor is too small or large for BUFFSIZE
Xsize %li, Ysize %li, Xoff %li
[ -qs | -q | -ql ] [ rolloff [ beta ] ]
@reverb.c
--wet-only
reverberance
hf_damping
room_scale
stereo_depth
pre_delay_ms
wet_gain_dB
reverb
stereo-depth not applicable with >2 channels
[-w|--wet-only] [reverberance (50%) [HF-damping (50%) [room-scale (100%) [stereo-depth (100%) [pre-delay (0ms) [wet-gain (0dB)]]]]]]
333333
reverse.c
reverse
Reverse effect finds odd temporary file
Reverse effect read error from temporary file
Internal error: reverse_flow called in wrong phase
Reverse effect write error on temporary file
Reverse effect can't create temporary file
silence.c
Periods must not be negative
%lf%c
Invalid unit specified
silence
silence threshold should be between 0.0 and 100.0 %%
silence threshold should be less than 0.0 dB
[ -l ] above_periods [ duration thershold[d|%%] ] [ below_periods duration threshold[d|%%]]
Jskeleff.c
Can't run on mono data.
skel
[OPTION]
factor[c]
%.3f
Samples read:      %12u
Length (seconds):  %12.6f
Scaled by rms:     %12.6f
Scaled by:         %12.1f
Maximum amplitude: %12.6f
Minimum amplitude: %12.6f
Midline amplitude: %12.6f
Mean    norm:      %12.6f
Mean    amplitude: %12.6f
RMS     amplitude: %12.6f
Maximum delta:     %12.6f
Minimum delta:     %12.6f
Mean    delta:     %12.6f
RMS     delta:     %12.6f
Rough   frequency: %12d
Volume adjustment: %12.3f
Probably text, not sound
Try: -t raw -b -s 
Try: -t raw -b -u 
Try: -t raw -b -U 
Can't guess the type
%f  %f
%08lx 
stat.c
-s option: invalid argument
-rms
-freq
stat
Summary effect: unknown option
[ -s N ] [ -rms ] [-freq] [ -v ] [ -d ]
UUUUUU
?stretch.c
error while parsing factor
error while parsing fade type
error with shift ratio value
error with fading ratio value
stretch
stretch->ishift <= stretch->size
stretch->oshift <= stretch->size
start: (f=%.2f w=%.2f r=%.2f f=%.2f) st=%d s=%d ii=%d is=%d oi=%d os=%d fs=%d
error while parsing window size
error while parsing shift ratio
error while parsing fading ratio
factor [window fade shift fading]
       (expansion, frame in ms, lin/..., unit<1.0, unit<0.5)
       (defaults: 1.0 20 lin ...)
sox_stretch_start
MbP?swap.c
swap
[1 2 | 1 2 3 4]
Can't swap channels on mono data.
invalid swap channel options used
synth.c
no type given
invalid freq
invalid freq2
parameter error
sine
square
sawtooth
triangle
trapezium
trapetz
whitenoise
pinknoise
brownnoise
create
amod
fmod
synth
type=%s, combine=%s, samples_to_do=%u, f1=%g, f2=%g, offset=%g, phase=%g, p1=%g, p2=%g, p3=%g
duration must be given when using freq2
[len] {type [combine] [freq[-freq2] [off [ph [p1 [p2 [p3]]]]]]}
333333
?tempo.c
segment_ms
search_ms
overlap_ms
tempo
[-q] factor [segment-ms [search-ms [overlap-ms]]]
Atremolo
speed_Hz [depth_percent]
trim
start [length]
vibro
speed [depth]
vol.c
%lf %10s %c
mult=%g limit=%g
amplitude
power
GAIN [TYPE [LIMITERGAIN]]
	(default TYPE=amplitude: 1 is constant, < 0 change phase;
	TYPE=power 1 is constant; TYPE=dB: 0 is constant, +6 doubles ampl.)
	The peak limiter has a gain much less than 1 (e.g. 0.05 or 0.02) and
	is only used on peaks (to prevent clipping); default is no limiter.
libsfx.so.0.0.0.debug
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.ctors
.dtors
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.data
.bss
.gnu_debuglink
