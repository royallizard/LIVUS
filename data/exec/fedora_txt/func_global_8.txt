__gmon_start__
_init
_fini
__cxa_finalize
_Jv_RegisterClasses
ast_module_unregister
ast_custom_function_unregister
ast_var_delete
pbx_builtin_setvar_helper
pbx_builtin_getvar_helper
__ast_custom_function_register
ast_module_register
ast_unregister_file_version
ast_register_file_version
ast_app_separate_args
pthread_mutex_lock
ast_channel_datastore_find
ast_var_name
strcmp
ast_var_value
pthread_mutex_unlock
strlen
__sprintf_chk
ast_get_channel_by_name_locked
ast_get_channel_by_name_prefix_locked
ast_log
__stack_chk_fail
ast_var_assign
__manager_event
ast_datastore_alloc
calloc
ast_channel_datastore_add
ast_datastore_free
libpthread.so.0
libc.so.6
_edata
__bss_start
_end
GLIBC_2.2.5
GLIBC_2.3.4
GLIBC_2.4
ATSubH
fffff.
ffff.
AWAVAUI
[A\A]A^A_
fff.
AWAVAUI
[A\A]A^A_
\$/H
func_global.c
$Revision: 135680 $
VarSet
none
func_global
Variable dialplan functions
GLOBAL
GLOBAL(<varname>)
SHARED
SHARED(<varname>[,<channel>])
SHARED_VARIABLES
SHARED() requires an argument: SHARED(<var>[,<chan>])
Channel '%s' not found!  Variable '%s' will be blank.
Channel '%s' not found!  Variable '%s' not set to '%s'.
Unable to allocate new datastore.  Shared variable not set.
Memory Allocation Failure in function %s at line %d of %s
/builddir/build/BUILD/asterisk-1.6.1-rc1/include/asterisk/utils.h
Unable to allocate variable structure.  Shared variable not set.
Channel: %s
Variable: SHARED(%s)
Value: %s
Uniqueid: %s
This paragraph is copyright (c) 2006 by Digium, Inc. In order for your module to load, it must return this key via a function called "key".  Any code which includes this paragraph must be licensed under the GNU General Public License version 2 or later (at your option).  In addition to Digium's general reservations of rights, Digium expressly reserves the right to allow other parties to license this paragraph under different terms. Any use of Digium, Inc. trademarks or logos (including "Asterisk" or "Digium") without express written permission of Digium, Inc. is prohibited.
Gets or sets the global variable specified
Gets or sets the shared variable specified
Implements a shared variable area, in which you may share variables between
channels.  If channel is unspecified, defaults to the current channel.  Note
that the channel name may be the complete name (i.e. SIP/12-abcd1234) or the
prefix only (i.e. SIP/12).
The variables used in this space are separate from the general namespace of
the channel and thus ${SHARED(foo)} and ${foo} represent two completely
different variables, despite sharing the same name.
Finally, realize that there is an inherent race between channels operating
at the same time, fiddling with each others' internal variables, which is why
this special variable namespace exists; it is to remind you that variables in
the SHARED namespace may change at any time, without warning.  You should
therefore take special care to ensure that when using the SHARED namespace,
you retrieve the variable and store it in a regular channel variable before
using it in a set of calculations (or you might be surprised by the result).
shared_write
_ast_calloc
shared_read
a9c98e5d177805051735cb5b0b16b0a0
func_global.so.debug
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.ctors
.dtors
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.data
.bss
.gnu_debuglink
