/lib/ld-linux.so.2
aWpw
#t2CE
libsvn_client-1.so.0
apr_hash_get
svn_error_find_cause
svn_hash_from_cstring_keys
svn_hash_keys
svn_prop_needs_translation
svn_string_create
svn_opt_parse_path
svn_diff_output2
svn_diff_file_options_parse
__gmon_start__
_Jv_RegisterClasses
svn_wc_get_actual_target2
svn_io_check_path
svn_error_createf
svn_io_remove_file2
svn_sort_compare_items_lexically
svn_stringbuf_create_empty
svn_stream_close
svn_path_url_add_component2
apr_is_empty_array
svn_dirent_is_child
svn_string_create_from_buf
svn_config_get
svn_io_set_file_executable
apr_hash_next
apr_array_push
svn_io_file_open
svn_cstring_split
svn_wc_canonicalize_svn_prop
apr_array_pop
svn_error__malfunction
svn_dirent_join
_ITM_deregisterTMCloneTable
svn_mime_type_is_binary
svn_dirent_local_style
_ITM_registerTMCloneTable
svn_dirent_get_absolute
svn_stringbuf_appendbyte
apr_pool_destroy
svn_stringbuf_create
svn_error_quick_wrap
apr_hash_this_val
svn_error_create
apr_hash_count
svn_wc_create_conflict_result
svn_uri_basename
svn_error_clear
svn_stringbuf_dup
svn_diff_file_output_unified4
svn_stringbuf_strip_whitespace
svn_dirent_internal_style
svn_io_copy_file
svn_sort__hash
apr_hash_set
apr_pool_clear
svn_diff_file_diff_2
svn_ctype_table
svn_checksum_to_cstring
apr_psprintf
svn_time_from_cstring
apr_palloc
svn_node_kind_to_word
svn_dirent_basename
apr_array_cat
svn_diff_file_options_create
svn_dirent_condense_targets
svn_uri_skip_ancestor
svn_stringbuf_appendcstr
apr_fnmatch
svn_error_compose_create
svn_wc_conflicted_p3
svn_path_is_url
svn_depth_from_word
apr_hash_first
svn_stringbuf_setempty
svn_io_open_unique_file3
apr_pstrdup
svn_io_file_close
svn_dirent_is_absolute
svn_subst_translate_cstring2
svn_prop_is_boolean
svn_opt__split_arg_at_peg_revision
svn_io_file_seek
apr_hash_make
svn_sort_compare_items_as_paths
svn_error_compose
svn_string_compare
svn_prop_name_is_valid
svn_io_file_write_full
apr_pstrcat
svn_dirent_skip_ancestor
svn_config_get_bool
svn_string_create_empty
svn_dirent_dirname
svn_stream_from_aprfile2
svn_stringbuf_appendbytes
svn_io_detect_mimetype2
svn_pool_create_ex
apr_array_make
svn_prop_get_value
apr_hash_this_key
svn_io_is_file_executable
svn_subst_translate_string2
svn_dirent_get_longest_ancestor
svn_utf_cstring_to_utf8
svn_wc_read_kind2
svn_client_get_wc_root
svn_client_delete4
svn_client_relocate2
svn_client_add_to_changelist
svn_client_merge5
svn_client_revprop_set2
svn_client_proplist4
svn_client_move7
svn_client_cleanup2
svn_client_url_from_path2
svn_client_diff_summarize_peg2
svn_client_mergeinfo_log2
svn_client_diff_summarize2
svn_client_export5
svn_client_mkdir4
svn_client_lock
svn_client__assert_homogeneous_target_type
svn_client_version
svn_client_merge_reintegrate
svn_client_diff6
svn_client_revprop_list
svn_client_propset_local
svn_client_merge_peg5
svn_client_unlock
svn_client_status6
svn_client_checkout3
svn_client_patch
svn_client_cat3
svn_client_switch3
svn_client_propget5
svn_client_list3
svn_client_revert3
svn_client_revprop_get
svn_client_log5
svn_client_add5
_fini
svn_client_info4
svn_client_get_merging_summary
svn_client_remove_from_changelists
svn_client_create_context2
svn_client_copy7
svn_client_status_dup
svn_client_upgrade
svn_client_vacuum
svn_client_propset_remote
svn_client_diff_peg6
svn_client_update4
svn_client_get_changelists
svn_client_args_to_target_array2
svn_client_blame5
svn_client_resolve
svn_client_import5
svn_client_commit6
libsvn_wc-1.so.0
svn_diff_file_output_merge3
svn_stringbuf_from_file2
apr_ltoa
svn_io_temp_dir
svn_token__to_word
svn_checksum_to_cstring_display
svn_stream_puts
svn_relpath_canonicalize
svn_depth_to_word
svn_diff_file_diff3_2
svn_path_uri_encode
svn_stringbuf_create_from_string
svn_error_wrap_apr
svn_stream_write
svn_error_quick_wrapf
svn_wc__get_tree_conflict
svn_wc__node_get_pre_ng_status_data
svn_wc_version
libsvn_ra-1.so.0
svn_stream_printf
svn_ver_equal
svn_ra_version
svn_ra_print_modules
svn_ra_initialize
libsvn_diff-1.so.0
svn_cstring_atoi
svn_utf__last_valid
apr_time_exp_lt
apr_strftime
svn_io_file_readline
apr_getopt_long
svn_diff_version
libsvn_ra_local-1.so.0
svn_ver_check_list2
svn_delta_version
svn_subr_version
libsvn_repos-1.so.0
svn_membuf__create
svn_time_to_cstring
svn_err_best_message
svn_config_set
libsvn_fs-1.so.0
svn_handle_error2
libsvn_fs_fs-1.so.0
apr_time_now
libsvn_fs_x-1.so.0
svn_io_file_flush
libsvn_fs_base-1.so.0
libsvn_fs_util-1.so.0
libsvn_ra_svn-1.so.0
svn_base64_decode_string
libsasl2.so.3
libsvn_ra_serf-1.so.0
svn_cstring_atoui
svn_xml_make_open_tag
svn_cstring_casecmp
svn_xml_escape_cdata_cstring
svn_stringbuf_chop
svn_xml_make_close_tag
libserf-1.so.0
apr_stat
libsvn_delta-1.so.0
libsvn_subr-1.so.0
apr_env_get
apr_allocator_owner_get
apr_filepath_get
svn_config_set_bool
svn_cmdline_printf
svn_subst_detranslate_string
svn_compat_log_revprops_out
svn_opt_get_canonical_subcommand2
svn_xml_make_header2
svn_cmdline__parse_config_option
svn_pool_create_allocator
svn_x509_certinfo_get_hostnames
svn_cstring_count_newlines
svn_opt_print_help4
svn_config_get_user_config_path
svn_x509_parse_cert
svn_tristate__to_word
svn_cmdline_create_auth_baton2
svn_opt_get_option_from_code2
svn_opt_format_option
svn_string__similarity
svn_cmdline_fprintf
svn_config_get_config
svn_utf_stringbuf_to_utf8
svn_x509_certinfo_get_valid_to
svn_opt_subcommand_takes_option3
svn_config_get_yes_no_ask
svn_error_root_cause
svn_opt_parse_revprop
svn_opt__revision_to_string
svn_opt_parse_revision_to_range
svn_config_ensure
svn_cmdline_fflush
svn_cmdline__apply_config_options
svn_config_walk_auth_data
svn_utf_cstring_utf8_width
svn_stream_for_stderr
svn_cmdline_init
svn_config__get_default_config
svn_x509_certinfo_get_digest
svn_cmdline_fputs
svn_xml_fuzzy_escape
svn_compat_log_revprops_clear
svn_opt_push_implicit_dot_target
svn_stream_for_stdout
svn_cmdline_cstring_from_utf8
svn_opt__revision_range_from_revnums
svn_x509_certinfo_get_subject
svn_cmdline__parse_trust_options
svn_cmdline__print_prop_hash
svn_cmdline__print_xml_prop
svn_cmdline__edit_file_externally
svn_cmdline__be_interactive
svn_cmdline_handle_exit_error
svn_xml_make_open_tag_hash
svn_cmdline__getopt_init
svn_cmdline__print_xml_prop_hash
svn_cmdline_prompt_user2
svn_x509_certinfo_get_issuer
svn_x509_certinfo_get_valid_from
svn_cmdline_output_encoding
svn_handle_warning2
svn_opt_parse_num_args
svn_cmdline__edit_string_externally
svn_time_to_human_cstring
svn_io_parse_mimetypes_file
svn_io_run_cmd
libz.so.1
libsqlite3.so.0
libmagic.so.1
libaprutil-1.so.0
libcrypt.so.1
libexpat.so.1
libdb-5.3.so
libapr-1.so.0
apr_signal
libpthread.so.0
__errno_location
libdl.so.2
libc.so.6
_IO_stdin_used
dcngettext
dcgettext
abort
strtol
strlen
strstr
getenv
ioctl
qsort
__ctype_tolower_loc
__cxa_finalize
strcmp
__libc_start_main
__stack_chk_fail
_edata
__bss_start
_end
svn_cl__diff
svn_cl__move
svn_cl__propedit
svn_cl__mkdir
svn_cl__import
svn_cl__mergeinfo
svn_cl__add
svn_cl__propset
svn_cl__status
svn_cl__merge
svn_cl__delete
svn_cl__revert
svn_cl__commit
svn_cl__lock
svn_cl__blame
svn_cl__copy
GLIBC_2.4
GLIBC_2.2
GLIBC_2.0
GLIBC_2.3
GLIBC_2.1.3
UWVS
D$81
uBPP
D$@Pj
DD$(
D|$(
Dt$(
D$DP
t$$j
L$<Q
T$<RPVW
t$,e35
d$<[^_]
QVRP
u/;t$
UWVS
t$\e
QWPV
|$$W
d$,[^_]
[^_]
[^_]
UWVS
T$`e
L$<1
T$ t 
L$<e3
d$L[^_]
D$81
t$ 1
L$,1
|$,e3=
d$<[^_]
UWVS
D$8e
|$\1
D$ ;B
|$ 1
|$(1
t$(1
\$\e3
d$l[^_]
D$(1
D$$;B
D$<1
T$<e3
d$L[^_]
|$01
|$`e
D$<1
T$,u8
L$<e3
d$L[^_]
UWVS
D$,uQ
9D$T
gfff
D$d9D$l},
d$<[^_]
d$<[^_]
d$<[^_]
UWVS
T$L1
L$Le3
d$\[^_]
UWVS
[^_]
UWVS
L$l1
L$le3
d$|[^_]
t$81
t#=E
UWVS
D$de
L$<1
T$<e3
d$L[^_]
t$ 1
UWVS
T$|1
T$|e3
[^_]
T$`1
d$<1
[^_]
UWVS
d$<[^_]
d$<[1
UWVS
d$<[^_]
d$<[1
UWVS
D$`e
L$<1
T$<e3
d$L[^_]
UWVS
l$@e
T$L1
L$Le3
d$\[^_]
UWVS
T$|1
L$|e3
[^_]
D$Lt4
d$<[^_]
|$L1
t$Le35
d$\[^_]
[^_]
D$Xe
[^_]
D$lty
DT$X
ED$X
DD$X
UWVS
[^_]
d$,[^_]
UWVS
[^_]
L$`1
T$lt
UWVS
|$he
L$<1
T$<e3
d$L[^_]
d$([
UWVS
d$,[^_]
d$,[^_]
UWVS
D$L1
L$Le3
d$\[^_]
UWVS
D$|1
T$xt&
[^_]
D$ 1
D$ 1
UWVS
L$l1
L$le3
d$|[^_]
UWVS
L$0e
D$l1
D$`1
D$Df
L$d9H
;T$<
T$le3
d$|[^_]
;|$H
;T$8|
;|$Dr
UWVS
[^_]
[^_]
UWVS
[^_]
[^_]
UWVS
[^_]
[^_]
D$\1
;T$4|
;T$@
T$\e3
d$l[^_]
;t$D
;L$H
9t$D
d$,[
d$ [^_
,$vN
,$;|$
d$,[^_]
[^_]
D$l1
T$le3
d$|[^_]
D$`9F
UWVS
L$|1
T$|e3
[^_]
D$x9E
D$81
D$09p
9t$@
D$(9p
<1uZ
UWVS
[^_]
D$8tc
UWVS
D$8e
[^_]
UWVS
T$\1
L$\e3
d$l[^_]
[^_]
[^_]
UWVS
l$pe
D$L1
@(9h
L$Le3
d$\[^_]
UWVS
T$$e
D$L1
T$$t
|$Le3=
d$\[^_]
L$ ;J
UWVS
[^_]
L$@9H
L$T1
UWVS
D$@e
[^_]
l$4)
	Fw'+D$0
UWVS
T$\1
T$Ou8
|$\e3=
d$l[^_]
|$XtX
T$8uF
UWVS
[^_]
D$L;
T$<9P
T$luI
D$D1
t$P1
UWVS
l$4e
T$<1
L$<e3
d$L[^_]
T$$;A
D$$;
[^_]
UWVS
D$`e
[^_]
UWVS
[^_]
D$l1
G$;p
UWVS
[^_]
>/t"
UWVS
[^_]
D|$X
DD$p
DD$L
d$\[^_]
d$\[^_]
[^_]
L$`u!
;t$X~
;t$X
;t$Xu
UWVS
T$,e
L$<1
L$<e3
d$L[^_]
UWVS
|$xe
T$L1
L$Le3
d$\[^_]
d$ [^_
d$ [^_
UWVS
D$\1
D$W    
D$\e3
d$l[^_]
T$09
|$W u
|$X 
T$09
T$09
|$W 
D$WE
D$XG
D$YB
|$X 
|$Y 
D$WU
D$XU
D$XG
D$WU
D$XU
D$WC
D$XC
D$WC
D$XC
D$XC
D$WC
D$WG
D$WG
UWVS
L$/u)
d$<[^_]
UWVS
[^_]
UWVS
l$@e
T$L1
L$Le3
d$\[^_]
UWVS
L$\1
L$\e3
d$l[^_]
UWVS
[^_]
[^_]
UWVS
[^_]
|$Du
L$H;H
UWVS
[^_]
T$@;P
L$<!
D$<t
T$\;z
l$Tt
L$\;H
ykD$L
L$L;H
D$D;G
UWVS
T$0e
L$\1
D$Dt
L$\e3
d$l[^_]
UWVS
d$<[^_]
d$<[^_]
UWVS
T$|1
T$|e3
[^_]
T$d1
d$([
d$ [^_
d$ [^_
UWVS
D$$e
D$l1
D$\9
;D$L
T$P)T$T
;l$,
T$le3
d$|[^_]
9t$(u
UWVS
L$\1
L$\e3
d$l[^_]
UWVS
l$he
D$<1
T$<e3
d$L[^_]
D$4uC
T$(u
UWVS
L$pe
T$L1
|$Le3=
d$\[^_]
UWVS
l$He
T$L1
L$Le3
d$\[^_]
D$H1
t$,f
UWVS
T$<1
L$(t
T$<e3
d$L[^_]
UWVS
tt9V
d$,[^_]
wK+T$
w#+T$
UWVS
L$,1
\$,e3
d$<[^_]
t$Pue
d$D[^
d$D[^
UWVS
d$<[
d$<[^_]
UWVS
[^_]
T$X9P
D$T~;
d$,[^_]
d$,[^_]
UWVS
D$\1
T$\e3
d$l[^_]
UWVS
D$h 
D$\tr
D$Tt?
D$tS
D$p?
D$X?
[^_]
D$hC
D$h 
D$`S
D$p?
D$T!
D$T?
D$tS
D$p?
D$X?
D$X!
D$X!
D$h 
L$De
D$@t$
[^_]
D$`;x
8-t~9
;D$H
L$T;P
9suB
D$D;
T$D	
D$D;
DL$D
;D$H
UWVS
T$|1
L$|e3
[^_]
L$<tz
UWVS
l$8e
T$<1
L$<e3
d$L[^_]
UWVS
|$`e
T$|1
L$|e3
[^_]
D$@;h
D$D;h
UWVS
l$8e
L$<1
T$<e3
d$L[^_]
D$81
[^_]
UWVS
d$,[^_]
d$,[^_]
UWVS
D$|1
|$|e3=
[^_]
UWVS
d$,[^_]
d$,[1
UWVS
[^_]
[^_]
UWVS
|$He
[^_]
D$<9G
D$@R
D$@A
D$@D
|$|1
D$p1
d$,[^_]
d$,[^_]
UWVS
|$DtH
d$,[^_]
UWVS
d$,[^_]
UWVS
T$,t.
d$<[^_]
UWVS
|$(e
D$,1
T$,e3
d$<[^_]
d$ [^_
d$8[
UWVS
T$L1
L$Le3
d$\[^_]
d$ [^_
UWVS
d$,[^_]
UWVS
D$<1
D$81
T$49w
L$<e3
d$L[^_]
D$4e
D$l1
T$le3
d$|[^_]
UWVS
t$,U
[^_]
Could not add all targets because some targets don't exist
Could not add all targets because some targets are already versioned
subversion
svn: 
*%s*
password
passphrase
ascii_cert
Credential kind: %s
Authentication realm: %s
Password: %s
Password: [not shown]
Passphrase: %s
Passphrase: [not shown]
passtype
Password cache: %s
username
Username: %s
Subject: %s
Valid from: %s
Valid until: %s
Issuer: %s
Fingerprint: %s
Hostnames: %s
------------------------------------------------------------------------
Automatic certificate validity check failed because:
  The certificate is not yet valid.
  The certificate has expired.
  The certificate's Common Name (hostname) does not match the remote hostname.
  The certificate issuer is unknown.
  Unknown verification failure.
Deleting %s credential for realm '%s'
Credentials cache in '%s' is empty
Credentials cache in '%s' contains no matching credentials
Credentials cache in '%s' contains %d credentials
Credentials cache in '%s' contains %d matching credentials
Deleted %d matching credentials from '%s'
                                           -
'verbose' option invalid in XML mode
'incremental' option only valid in XML mode
Skipping binary file (use --force to treat as text): '%s'
Could not perform blame on all targets because some targets don't exist
         -
%*ld
%s %10s %s 
%-14s 
%s %10.10s 
%s%s
svn:date
svn:author
%lld
line-number
merged
blame
Could not cat all targets because some targets don't exist
Could not cat all targets because some targets are not versioned
Could not cat all targets because some targets are directories
Could not set changelists on all targets because some targets don't exist
Could not set changelists on all targets because some targets are not versioned
'%s' does not appear to be a URL
Failure occurred processing one or more externals definitions
incoming file edit
incoming file add
incoming file delete or move
incoming replace with file
incoming dir edit
incoming dir add
incoming dir delete or move
incoming replace with dir
incoming edit
incoming add
incoming delete or move
incoming replace
side
repos-url
path-in-repos
kind
upon update
upon switch
upon merge
upon none
subversion/svn/cl-conflicts.c
local edit
local add
local delete
local obstruction
local %s
incoming delete
incoming %s
%s, %s %s
reason_str && action_str
local file edit
local file obstruction
local file delete
local file missing
local file unversioned
local file add
local file replace
local file moved away
local file moved here
local dir edit
local dir obstruction
local dir delete
local dir missing
local dir unversioned
local dir add
local dir replace
local dir moved away
local dir moved here
local missing
local unversioned
local replace
local moved away
local moved here
operation
operation_s
victim
action
reason
tree-conflict
source-left
source-right
prev-base-file
prev-wc-file
cur-base-file
prop-file
text
tree
moved-away
moved-here
local file missing or deleted or moved away
local dir missing or deleted or moved away
local missing or deleted or moved away
local: %s %s incoming: %s %s %s
Working copy locked; if no other Subversion client is currently using the working copy, try running 'svn cleanup' without the --remove-unversioned and --remove-ignored options first.
Cannot remove unversioned or ignored items from something that is not a working copy
Working copy locked; try running 'svn cleanup' on the root of the working copy ('%s') instead.
svn: The depth of this commit is '%s', but copies are always performed recursively in the repository.
Commit targets must be local paths
config
no-unlock
miscellany
  (%s)
%s%-6s - %s
Select:
 (%s) %s
Unrecognized option.
>>>>>>> THEIRS
<<<<<<< MINE
||||||| ORIGINAL
=======
MERGED
%s	- %s
Invalid option.
postpone
base
working
mine-conflict
theirs-conflict
mine-full
theirs-full
launch
quit resolution
help
show this help (also '?')
mark resolved
my version
their version
display conflict
edit property
show all options
edit file
show diff
my side of conflict
their side of conflict
launch tool
internal merge tool
Words in square brackets are the corresponding --accept option arguments.
Invalid option; there's no merged version to edit.
desc->kind == svn_wc_conflict_kind_text
subversion/svn/conflict-callbacks.c
Conflict discovered in binary file '%s'.
Conflict discovered in file '%s'.
Invalid option; cannot display conflicts for a binary file.
Invalid option; original files not available.
>>>>>>> THEIRS (select with 'tc')
<<<<<<< MINE (select with 'mc')
Invalid option; there's no merged version to diff.
Invalid option; there's no base path to merge.
Invalid option; cannot choose based on conflicts in a binary file.
Invalid option; use diff/edit/merge/launch before choosing 'mark resolved'.
Invalid option; please edit the property first.
Tree conflict on '%s'
   > %s
Conflict for property '%s' discovered on '%s'.
prepare for updating moved-away children, if any (recommended)
allow updating moved-away children with 'svn resolve' [mine-conflict]
resolve the conflict later  [postpone]
postpone all remaining conflicts
apply update to move destination (recommended)
apply incoming update to move destination  [mine-conflict]
accept current working copy state
accept my version of entire property (even non-conflicts)  [mine-full]
accept their version of entire property (same)  [theirs-full]
show conflicts in this property
change merged property value in an editor  [edit]
accept edited version of property
mark the conflict to be resolved later  [postpone]
accept the working copy version of file  [working]
accept the incoming version of file  [theirs-full]
show this list (also 'h', '?')
change merged file in an editor  [edit]
show all changes made to merged file
accept merged version of file  [working]
show all conflicts (ignoring merged version)
accept my version for all conflicts (same)  [mine-conflict]
accept their version for all conflicts (same)  [theirs-conflict]
accept my version of entire file (even non-conflicts)  [mine-full]
accept their version of entire file (same)  [theirs-full]
use merge tool to resolve conflict
launch external merge tool to resolve conflict  [launch]
use built-in merge tool to resolve conflict
'%s': a peg revision is not allowed here
Local, non-commit operations do not take a log message or revision properties
%c%c      %s
modified
diff-ignore-content-type
'--xml' option only valid with '--summarize' option
'--new' option only valid with '--old' option
'svn diff [-r N[:M]] [TARGET[@REV]...]' does not support mixed target types. Try using the --old and --new options or one of the shorthand invocations listed in 'svn help diff'.
Path '%s' not relative to base URLs
Destination directory exists; please remove the directory or use --force to overwrite
Could not write data to merged file
Could not write data to temporary file
(2) your version (at line %lu)
(1) their version (at line %lu)
Conflicting section found during merge:
Select: (1) use their version, (2) use your version,
        (12) their version first, then yours,
        (21) your version first, then theirs,
        (e1) edit their version and use the result,
        (e2) edit your version and use the result,
        (eb) edit both versions and use the result,
        (p) postpone this conflicting section leaving conflict markers,
        (a) abort file merge and return to main menu: 
Could not write merged result to '%s', saved instead at '%s'.
'%s' remains in conflict.
Merge of '%s' completed (remains in conflict).
<<<<<<<
=======
>>>>>>>
/dev/tty
COLUMNS
width == line_width
subversion/svn/file-merge.c
No editor found.
Error running editor.
%s|%s
%s|%s
Merging '%s'.
Merge of '%s' aborted.
Merge of '%s' completed.
The following repository access (RA) modules are available:
WARNING: Plaintext password storage is enabled!
The following authentication credential caches are available:
usage: svn <subcommand> [options] [args]
Subversion command-line client.
Type 'svn help <subcommand>' for help on a specific subcommand.
Type 'svn --version' to see the program version and RA modules
  or 'svn --version --quiet' to see just the version number.
Most subcommands take file and/or directory arguments, recursing
on the directories.  If no arguments are supplied to such a
command, it recurses on the current directory (inclusive) by default.
Available subcommands:
Subversion is a tool for version control.
For additional information, see http://subversion.apache.org/
servers
store-auth-creds
auth
store-passwords
store-plaintext-passwords
global
TRUE
%s* Plaintext cache in %s
* Gnome Keyring
* GPG-Agent
* KWallet (KDE)
Invalid URL '%s'
Repository URL required when importing
Too many arguments to import command
%-10ld %s
%-10ld
%-10s %s
subversion/svn/info-cmd.c
normal
repository
relative-url
wc-info
wcroot-abspath
schedule
copy-from-url
copy-from-rev
text-updated
checksum
changelist
moved-from
moved-to
Name: %s
Working Copy Root Path: %s
Relative URL: %s
Repository Root: %s
Repository UUID: %s
Revision: %ld
Node Kind: file
Node Kind: directory
Node Kind: none
Node Kind: unknown
Schedule: normal
Schedule: add
Schedule: delete
Schedule: replace
Depth: empty
Depth: files
Depth: immediates
Depth: exclude
Depth: INVALID
Copied From URL: %s
Copied From Rev: %ld
Moved From: %s
Moved To: %s
Last Changed Author: %s
Last Changed Rev: %ld
Last Changed Date
Text Last Updated
Checksum: %s
Conflict Properties File: %s
Tree conflict
Conflict Details
Source  left
  %s: %s
Source right
Lock Token: %s
Lock Owner: %s
Lock Created
Lock Expires
Lock Comment (%i lines):
Lock Comment (%i line):
Changelist: %s
repos-root-url
repos-uuid
last-changed-revision
last-changed-date
last-changed-author
wc-root
Resource is not under version control.
Conflict Previous Base File: %s
Conflict Previous Working File: %s
Conflict Current Base File: %s
--show-item is not valid in --xml mode
--no-newline is not valid in --xml mode
--incremental is only valid in --xml mode
--no-newline is only available for single-target, non-recursive info operations
'%s' is not a valid value for --show-item
'%s' is not a valid value for --show-item; did you mean '%s'?
'%s' is not a valid value for --show-item; did you mean '%s' or '%s'?
'%s' is not a valid value for --show-item; did you mean '%s', '%s' or '%s'?
--no-newline' is only valid with --show-item
Could not display info for all targets because some targets don't exist
subversion/svn/list-cmd.c
%b %d %H:%M
%b %d  %Y
parent_url
size
token
comment
created
expires
(external_parent_url == NULL && external_target == NULL) || (external_parent_url && external_target)
Listing external '%s' defined on '%s':
%7ld %-8.8s %c %10s %12s %s%s
Could not list all targets because some targets don't exist
Lock comment contains a zero byte
true
false
logentry
reverse-merge
prop-mods
text-mods
copyfrom-rev
copyfrom-path
(no author)
(no date)
 | %d lines
 | %d line
Changed paths:
 (from %s:%ld)
   %c %s%s
Reverse merged via:
Merged via:
 r%ld%c
svn:log
------------------------------------------------------------------------
r%ld | %s | %s
'with-all-revprops' option only valid in XML mode
'with-no-revprops' option only valid in XML mode
'with-revprop' option only valid in XML mode
'diff' option is not supported in XML mode
'quiet' and 'diff' options are mutually exclusive
'diff-cmd' option requires 'diff' option
'internal-diff' option requires 'diff' option
'extensions' option requires 'diff' option
'depth' option requires 'diff' option
-c and -r are mutually exclusive
Only relative paths can be specified after a URL for 'svn log', but '%s' is not a relative path
cannot assign with 'with-revprop' option (drop the '=')
Invalid merge source '%s'; a working copy path can only be used with a repository revision (a number, a date, or head)
-r and -c can't be used with --reintegrate
Cannot specify a revision range with two URLs
--reintegrate cannot be used with --ignore-ancestry
--reintegrate cannot be used with --record-only
--depth cannot be used with --reintegrate
--force cannot be used with --reintegrate
--reintegrate can only be used with a single merge source
--allow-mixed-revisions cannot be used with --reintegrate
Merge sources must both be either paths or URLs
Merge tracking not possible, use --ignore-ancestry or
fix invalid mergeinfo in target with 'svn propset'
Merge source required
Second revision required
Too many arguments given
--- Merging
r%ld*
r%ld
WC      
Not enough arguments given
  %-8ld  
  |         
-------| |--
   \        
    \       
     --| |--
    /       
   /        
... /       
---------
  /      
|        
%-8ld 
  \      
%-8ld
|       
-       
repository path
tip of branch
last full merge
youngest common ancestor
--quiet (-q) option valid only with --log option
--verbose (-v) option valid only with --log option
--incremental option valid only with --log option
--revision (-r) option valid only with --show-revs option
Depth specification options valid only with --show-revs option
--log option valid only with --show-revs option
    %s
    |         %s
    |         |        %s
    |         |        |         %s
Try 'svn add' or 'svn add --non-recursive' instead?
Try 'svn mkdir --parents' instead?
Cannot specify revisions (except HEAD) with move operations
and %d already resolved
%d remaining
Skipped missing target: '%s'
Skipped '%s'
D    %s
B    %s
Removed external '%s': %s
Removed external '%s'
R    %s
C    %s
A    %s
%s %s
Restored '%s'
Reverted '%s'
A  (bin)  %s
A         %s
D         %s
%s      %s
%llu and fuzz %lu (%s)
%llu and fuzz %lu
%llu (%s)
%llu
Updating '%s':
Exported revision %ld.
Checked out revision %ld.
Updated to revision %ld.
External at revision %ld.
At revision %ld.
External export complete.
Export complete.
External checkout complete.
Checkout complete.
External update complete.
Update complete.
Sending copy of       %s
Sending        %s
Adding copy of (bin)  %s
Adding  (bin)  %s
Adding copy of        %s
Adding         %s
Deleting copy of      %s
Deleting       %s
Replacing copy of     %s
Replacing      %s
Transmitting file data 
'%s' locked by user '%s'.
'%s' unlocked.
A [%s] %s
D [%s] %s
--- Merging r%ld into '%s':
   C %s
   A %s
   U %s
   D %s
property '%s' set on '%s'
Upgraded '%s'
Redirecting to URL '%s':
Committing transaction...
done
Summary of conflicts:
  Text conflicts: %d
  Property conflicts: %d
  Tree conflicts: %d
  Text conflicts: %s (%s)
  Tree conflicts: %s (%s)
  Skipped paths: %d
Skipped target: '%s' -- copy-source is missing
Skipped '%s' -- An obstructing working copy was found
Skipped '%s' -- Has no versioned parent
Skipped '%s' -- Access denied
Skipped '%s' -- Node remains in conflict
Left local modifications as '%s'
Failed to revert '%s' -- try updating instead.
Resolved conflicted state of '%s'
>         applied hunk ## -%lu,%lu +%lu,%lu ## with offset %s
>         applied hunk @@ -%lu,%lu +%lu,%lu @@ with offset %s
>         applied hunk ## -%lu,%lu +%lu,%lu ## with fuzz %lu (%s)
>         applied hunk @@ -%lu,%lu +%lu,%lu @@ with fuzz %lu
>         rejected hunk ## -%lu,%lu +%lu,%lu ## (%s)
>         rejected hunk @@ -%lu,%lu +%lu,%lu @@
>         hunk ## -%lu,%lu +%lu,%lu ## already applied (%s)
>         hunk @@ -%lu,%lu +%lu,%lu @@ already applied
Fetching external item into '%s':
Error handling externals definition for '%s':
Exported external at revision %ld.
Checked out external at revision %ld.
Updated external to revision %ld.
Performing status on external item at '%s':
Performing info on external item at '%s':
Status against revision: %6ld
--- Merging differences between repository URLs into '%s':
--- Reverse-merging r%ld into '%s':
--- Merging r%ld through r%ld into '%s':
--- Reverse-merging r%ld through r%ld into '%s':
--- Recording mergeinfo for merge between repository URLs into '%s':
--- Recording mergeinfo for merge of r%ld into '%s':
--- Recording mergeinfo for reverse merge of r%ld into '%s':
--- Recording mergeinfo for merge of r%ld through r%ld into '%s':
--- Recording mergeinfo for reverse merge of r%ld through r%ld into '%s':
--- Eliding mergeinfo from '%s':
--- Merging differences between foreign repository URLs into '%s':
--- Merging (from foreign repository) r%ld into '%s':
--- Reverse-merging (from foreign repository) r%ld into '%s':
--- Merging (from foreign repository) r%ld through r%ld into '%s':
--- Reverse-merging (from foreign repository) r%ld through r%ld into '%s':
property '%s' deleted from '%s'.
Attempting to delete nonexistent property '%s' on '%s'
property '%s' set on repository revision %ld
property '%s' deleted from repository revision %ld
'%s' is not under version control
--- Copying from foreign repository URL '%s':
Breaking move with source path '%s'
Performing cleanup on external item at '%s'.
  Property conflicts: %s (%s)
Cannot specify revision for deleting versioned property '%s'
Set new value for property '%s' on '%s'
'%s' is not a valid Subversion property name
--encoding option applies only to textual Subversion-controlled properties
Set new value for property '%s' on revision %ld
No changes to property '%s' on revision %ld
Cannot specify revision for editing versioned property '%s'
Explicit target argument required
'%s' does not appear to be a working copy path
No changes to property '%s' on '%s'
svn-prop
Error writing to stream
%s - 
Properties on '%s':
Inherited properties on '%s',
from '%s':
--verbose cannot be used with --revprop or --no-newline or --xml
--show-inherited-props can't be used with --revprop
Property '%s' not found on revision %s
--no-newline is only available for single-target, non-recursive propget operations
Property '%s' not found on '%s'
Unversioned properties on revision %ld:
Could not display properties of all targets because some targets don't exist
Could not display properties of all targets because some targets are not versioned
Use '--force' to set the '%s' property.
Use '--force' to edit the '%s' property.
Use '--force' to use the '%s' property'.
Must specify the revision as a number, a date or 'HEAD' when operating on a revision property
Wrong number of targets specified
Either a URL or versioned item is required
To turn off the %s property, use 'svn propdel';
setting the property to '%s' will not turn it off.
'%s' is not a valid %s property name; did you mean '%s'?
'%s' is not a valid %s property name; use '--force' to set it
'%s' is not a valid %s property name; use '--force' to edit it
'%s' is not a valid %s property name; use '--force' to use it
'%s' is not a valid %s property name; did you mean '%s' or '%s'?
'%s' is not a valid %s property name; did you mean '%s', '%s' or '%s'?
svn:
svn:mime-type
svn:ignore
svn:eol-style
svn:keywords
svn:executable
svn:needs-lock
svn:special
svn:externals
svn:mergeinfo
svn:auto-props
svn:global-ignores
svn:text-time
svn:owner
svn:group
svn:unix-mode
svn:autoversioned
svn:original-date
svn:sync-lock
svn:sync-from-url
svn:sync-from-uuid
svn:sync-last-merged-rev
svn:sync-currently-copying
Cannot specify revision for setting versioned property '%s'
Explicit target required ('%s' interpreted as prop value)
missing --accept option
invalid 'accept' ARG
Failure occurred resolving one or more conflicts
Try 'svn revert --depth infinity' instead?
--revision (-r) option valid only with --show-updates (-u) option
against
--- Changelist '%s':
  Text conflicts: %u
  Property conflicts: %u
  Tree conflicts: %u
incomplete
replaced
obstructed
subversion/svn/status.c
wc-locked
copied
switched
file-external
tree-conflicted
wc-status
repos-status
tree_conflict != NULL
      >   %s
swapped places with %s
        > 
moved from %s
moved to %s
%c%c%c%c%c%c%c %s%s%s%s
 ? A!DRM?CI~X!
%c%c%c%c%c%c%c %c %8s %8s %-12s %s%s%s%s
%c%c%c%c%c%c%c %c %8s   %s%s%s%s
baton == NULL
subversion/svn/svn.c
Caught signal
Can't specify -c with --old
There is no change 0
CRLF
Invalid strip count '%s'
Subcommand argument required
Unknown subcommand: '%s'
undo
--config-option
exclusive-locking-clients
working-copy
exclusive-locking
diff-cmd
helpers
diff3-cmd
mime-types-file
enable-auto-props
interactive-conflicts
svn_subr
svn_client
svn_wc
svn_ra
svn_delta
svn_diff
--version
add intermediate parents
praise
annotate
checkout
cleanup
remove
export
import
specify lock comment ARG
also print all affected paths
do not print the log message
mkdir
rename
patch
propdel
propedit
propget
proplist
don't print the path
propset
relocate
resolve
revert
stat
don't print unversioned items
upgrade
force
force operation to run
force-log
show help on a subcommand
specify log message ARG
quiet
non-recursive
change
incremental
verbose
print extra information
show-updates
display update information
specify a username ARG
extensions
set-depth
output in XML
strict
DEPRECATED
stop-on-copy
no-ignore
no-auth-cache
trust-server-cert
trust-server-cert-failures
non-interactive
force-interactive
dry-run
ignore-ancestry
ignore-externals
ignore externals definitions
use ARG as merge command
editor-cmd
use ARG as external editor
record-only
use ARG as the older target
use ARG as the newer target
relocate via URL-rewriting
config-dir
enable automatic properties
no-auto-props
disable automatic properties
native-eol
limit
maximum number of log entries
don't unlock the targets
remove changelist association
keep-changelists
keep-local
keep path in working copy
with-all-revprops
with-no-revprops
with-revprop
make intermediate directories
use-merge-history
accept
show-revs
reintegrate
deprecated
strip
ignore-keywords
don't expand keywords
reverse-diff
apply the unidiff in reverse
ignore-whitespace
produce diff output
use ARG as diff command
internal-diff
no-diff-added
no-diff-deleted
show-copies-as-adds
notice-ancestry
summarize
show a summary of the results
ignore-properties
properties-only
patch-compatible
allow-mixed-revisions
include-externals
show-inherited-props
search
search-and
remove-unversioned
remove unversioned items
remove-ignored
remove ignored items
no-newline
show-passwords
show cached passwords
pin-externals
show-item
Non-numeric limit argument given
Argument to --limit must be positive
Negative number in range (%s) not supported with -c
Non-numeric change argument (%s) given to -c
Syntax error in revision argument '%s'
Error converting depth from locale to UTF-8
'%s' is not a valid depth; try 'empty', 'files', 'immediates', or 'infinity'
'%s' is not a valid depth; try 'exclude', 'empty', 'files', 'immediates', or 'infinity'
Syntax error in native-eol argument '%s'
Changelist names must not be empty
'%s' is not a valid --accept value
'%s' is not a valid --show-revs value
Argument to --strip must be positive
--non-interactive and --force-interactive are mutually exclusive
Undo is done using either the 'svn revert' or the 'svn merge' command.
Subcommand '%s' doesn't accept option '%s'
Type 'svn help %s' for usage.
Multiple revision arguments encountered; can't specify -c twice, or both -c and -r
--depth and --set-depth are mutually exclusive
--with-all-revprops and --with-no-revprops are mutually exclusive
--with-revprop and --with-no-revprops are mutually exclusive
--message (-m) and --file (-F) are mutually exclusive
--trust-server-cert-failures requires --non-interactive
--diff-cmd and --internal-diff are mutually exclusive
--relocate and --depth are mutually exclusive
--relocate and --non-recursive (-N) are mutually exclusive
Log message file is a versioned file; use '--force-log' to override
Lock comment file is a versioned file; use '--force-log' to override
The log message is a pathname (was -F intended?); use '--force-log' to override
The lock comment is a pathname (was -F intended?); use '--force-log' to override
--auto-props and --no-auto-props are mutually exclusive
--accept=%s incompatible with --non-interactive
Try 'svn help %s' for more information
Please see the 'svn upgrade' command
Authentication failed and interactive prompting is disabled; see the --force-interactive option
Reading file from standard input because of -F option; this can interfere with interactive prompting
Run 'svn cleanup' to remove locks (type 'svn help cleanup' for details)
Another process is blocking the working copy database, or the underlying filesystem does not support file locking; if the working copy is on a network filesystem, make sure file locking has been enabled on the file server
When using svn+ssh:// URLs, keep in mind that the --username and --password options are ignored because authentication is performed by SSH, not Subversion
Put files and directories under version control, scheduling
them for addition to repository.  They will be added in next commit.
usage: add PATH...
Manage cached authentication credentials.
usage: 1. svn auth [PATTERN ...]
usage: 2. svn auth --remove PATTERN [PATTERN ...]
  With no arguments, list all cached authentication credentials.
  Authentication credentials include usernames, passwords,
  SSL certificates, and SSL client-certificate passphrases.
  If PATTERN is specified, only list credentials with attributes matching one
  or more patterns. With the --remove option, remove cached authentication
  credentials matching one or more patterns.
  If more than one pattern is specified credentials are considered only they
  match all specified patterns. Patterns are matched case-sensitively and may
  contain glob wildcards:
    ?      matches any single character
    *      matches a sequence of arbitrary characters
    [abc]  matches any of the characters listed inside the brackets
  Note that wildcards will usually need to be quoted or escaped on the
  command line because many command shells will interfere by trying to
  expand them.
remove matching authentication credentials
Show when each line of a file was last (or
next) changed.
usage: blame [-rM:N] TARGET[@REV]...
  Annotate each line of a file with the revision number and author of the
  last change (or optionally the next change) to that line.
  With no revision range (same as -r0:REV), or with '-r M:N' where M < N,
  annotate each line that is present in revision N of the file, with
  the last revision at or before rN that changed or added the line,
  looking back no further than rM.
  With a reverse revision range '-r M:N' where M > N,
  annotate each line that is present in revision N of the file, with
  the next revision after rN that changed or deleted the line,
  looking forward no further than rM.
  If specified, REV determines in which revision the target is first
  looked up.
  Write the annotated result to standard output.
Output the content of specified files or URLs.
usage: cat TARGET[@REV]...
  If specified, REV determines in which revision the target is first
  looked up.
Associate (or dissociate) changelist CLNAME with the named files.
usage: 1. changelist CLNAME PATH...
       2. changelist --remove PATH...
Check out a working copy from a repository.
usage: checkout URL[@REV]... [PATH]
  If specified, REV determines in which revision the URL is first
  looked up.
  If PATH is omitted, the basename of the URL will be used as
  the destination. If multiple URLs are given each will be checked
  out into a sub-directory of PATH, with the name of the sub-directory
  being the basename of the URL.
  If --force is used, unversioned obstructing paths in the working
  copy destination do not automatically cause the check out to fail.
  If the obstructing path is the same type (file or directory) as the
  corresponding path in the repository it becomes versioned but its
  contents are left 'as-is' in the working copy.  This means that an
  obstructing directory's unversioned children may also obstruct and
  become versioned.  For files, any content differences between the
  obstruction and the repository are treated like a local modification
  to the working copy.  All properties from the repository are applied
  to the obstructing path.
  See also 'svn help update' for a list of possible characters
  reporting the action taken.
Recursively clean up the working copy, removing write locks, resuming
unfinished operations, etc.
usage: cleanup [WCPATH...]
  By default, finish any unfinished business in the working copy at WCPATH,
  and remove write locks (shown as 'L' by the 'svn status' command) from
  the working copy. Usually, this is only necessary if a Subversion client
  has crashed while using the working copy, leaving it in an unusable state.
  WARNING: There is no mechanism that will protect write locks still
           being used by other Subversion clients. Running this command
           while another client is using the working copy can corrupt
           the working copy beyond repair!
  If the --remove-unversioned option or the --remove-ignored option
  is given, remove any unversioned or ignored items within WCPATH.
  To prevent accidental working copy corruption, unversioned or ignored
  items can only be removed if the working copy is not already locked
  for writing by another Subversion client.
  Note that the 'svn status' command shows unversioned items as '?',
  and ignored items as 'I' if the --no-ignore option is given to it.
Send changes from your working copy to the repository.
usage: commit [PATH...]
  A log message must be provided, but it can be empty.  If it is not
  given by a --message or --file option, an editor will be started.
  If any targets are (or contain) locked items, those will be
  unlocked after a successful commit.
  If --include-externals is given, also commit file and directory
  externals reached by recursion. Do not commit externals with a
  fixed revision.
Copy files and directories in a working copy or repository.
usage: copy SRC[@REV]... DST
  SRC and DST can each be either a working copy (WC) path or URL:
    WC  -> WC:   copy and schedule for addition (with history)
    WC  -> URL:  immediately commit a copy of WC to URL
    URL -> WC:   check out URL into WC, schedule for addition
    URL -> URL:  complete server-side copy;  used to branch and tag
  All the SRCs must be of the same type. When copying multiple sources,
  they will be added as children of DST, which must be a directory.
  WARNING: For compatibility with previous versions of Subversion,
  copies performed using two working copy paths (WC -> WC) will not
  contact the repository.  As such, they may not, by default, be able
  to propagate merge tracking information from the source of the copy
  to the destination.
Remove files and directories from version control.
usage: 1. delete PATH...
       2. delete URL...
  1. Each item specified by a PATH is scheduled for deletion upon
    the next commit.  Files, and directories that have not been
    committed, are immediately removed from the working copy
    unless the --keep-local option is given.
    PATHs that are, or contain, unversioned or modified items will
    not be removed unless the --force or --keep-local option is given.
  2. Each item specified by a URL is deleted from the repository
    via an immediate commit.
Display local changes or differences between two revisions or paths.
usage: 1. diff
       2. diff [-c M | -r N[:M]] [TARGET[@REV]...]
       3. diff [-r N[:M]] --old=OLD-TGT[@OLDREV] [--new=NEW-TGT[@NEWREV]] \
               [PATH...]
       4. diff OLD-URL[@OLDREV] NEW-URL[@NEWREV]
       5. diff OLD-URL[@OLDREV] NEW-PATH[@NEWREV]
       6. diff OLD-PATH[@OLDREV] NEW-URL[@NEWREV]
  1. Use just 'svn diff' to display local modifications in a working copy.
  2. Display the changes made to TARGETs as they are seen in REV between
     two revisions.  TARGETs may be all working copy paths or all URLs.
     If TARGETs are working copy paths, N defaults to BASE and M to the
     working copy; if URLs, N must be specified and M defaults to HEAD.
     The '-c M' option is equivalent to '-r N:M' where N = M-1.
     Using '-c -M' does the reverse: '-r M:N' where N = M-1.
  3. Display the differences between OLD-TGT as it was seen in OLDREV and
     NEW-TGT as it was seen in NEWREV.  PATHs, if given, are relative to
     OLD-TGT and NEW-TGT and restrict the output to differences for those
     paths.  OLD-TGT and NEW-TGT may be working copy paths or URL[@REV].
     NEW-TGT defaults to OLD-TGT if not specified.  -r N makes OLDREV default
     to N, -r N:M makes OLDREV default to N and NEWREV default to M.
     If OLDREV or NEWREV are not specified, they default to WORKING for
     working copy targets and to HEAD for URL targets.
     Either or both OLD-TGT and NEW-TGT may also be paths to unversioned
     targets. Revisions cannot be specified for unversioned targets.
     Both targets must be of the same node kind (file or directory).
     Diffing unversioned targets against URL targets is not supported.
  4. Shorthand for 'svn diff --old=OLD-URL[@OLDREV] --new=NEW-URL[@NEWREV]'
  5. Shorthand for 'svn diff --old=OLD-URL[@OLDREV] --new=NEW-PATH[@NEWREV]'
  6. Shorthand for 'svn diff --old=OLD-PATH[@OLDREV] --new=NEW-URL[@NEWREV]'
Create an unversioned copy of a tree.
usage: 1. export [-r REV] URL[@PEGREV] [PATH]
       2. export [-r REV] PATH1[@PEGREV] [PATH2]
  1. Exports a clean directory tree from the repository specified by
     URL, at revision REV if it is given, otherwise at HEAD, into
     PATH. If PATH is omitted, the last component of the URL is used
     for the local directory name.
  2. Exports a clean directory tree from the working copy specified by
     PATH1, at revision REV if it is given, otherwise at WORKING, into
     PATH2.  If PATH2 is omitted, the last component of the PATH1 is used
     for the local directory name. If REV is not specified, all local
     changes will be preserved.  Files not under version control will
     not be copied.
  If specified, PEGREV determines in which revision the target is first
  looked up.
Describe the usage of this program or its subcommands.
usage: help [SUBCOMMAND...]
Commit an unversioned file or tree into the repository.
usage: import [PATH] URL
  Recursively commit a copy of PATH to URL.
  If PATH is omitted '.' is assumed.
  Parent directories are created as necessary in the repository.
  If PATH is a directory, the contents of the directory are added
  directly under URL.
  Unversionable items such as device files and pipes are ignored
  if --force is specified.
Display information about a local or remote item.
usage: info [TARGET[@REV]...]
  Print information about each TARGET (default: '.').
  TARGET may be either a working-copy path or URL.  If specified, REV
  determines in which revision the target is first looked up.
  With --show-item, print only the value of one item of information
  about TARGET. One of the following items can be selected:
     kind                  the kind of TARGET
     url                   the URL of TARGET in the repository
     relative-url          the repository-relative URL
     repos-root-url        the repository root URL
     repos-uuid            the repository UUID
     revision              the revision of TARGET (defaults to BASE
                           for working copy paths and HEAD for URLs)
     last-changed-revision the most recent revision in which TARGET
                           was changed
     last-changed-date     the date of the last-changed revision
     last-changed-author   the author of the last-changed revision
     wc-root               the root of TARGET's working copy
List directory entries in the repository.
usage: list [TARGET[@REV]...]
  List each TARGET file and the contents of each TARGET directory as
  they exist in the repository.  If TARGET is a working copy path, the
  corresponding repository URL will be used. If specified, REV determines
  in which revision the target is first looked up.
  The default TARGET is '.', meaning the repository URL of the current
  working directory.
  With --verbose, the following fields will be shown for each item:
    Revision number of the last commit
    Author of the last commit
    If locked, the letter 'O'.  (Use 'svn info URL' to see details)
    Size (in bytes)
    Date and time of the last commit
Lock working copy paths or URLs in the repository, so that
no other user can commit changes to them.
usage: lock TARGET...
  Use --force to steal the lock from another user or working copy.
read lock comment from file ARG
force validity of lock comment source
Show the log messages for a set of revision(s) and/or path(s).
usage: 1. log [PATH][@REV]
       2. log URL[@REV] [PATH...]
  1. Print the log messages for the URL corresponding to PATH
     (default: '.'). If specified, REV is the revision in which the
     URL is first looked up, and the default revision range is REV:1.
     If REV is not specified, the default revision range is BASE:1,
     since the URL might not exist in the HEAD revision.
  2. Print the log messages for the PATHs (default: '.') under URL.
     If specified, REV is the revision in which the URL is first
     looked up, and the default revision range is REV:1; otherwise,
     the URL is looked up in HEAD, and the default revision range is
     HEAD:1.
  Multiple '-c' or '-r' options may be specified (but not a
  combination of '-c' and '-r' options), and mixing of forward and
  reverse ranges is allowed.
  With -v, also print all affected paths with each log message.
  With -q, don't print the log message body itself (note that this is
  compatible with -v).
  Each log message is printed just once, even if more than one of the
  affected paths for that revision were explicitly requested.  Logs
  follow copy history by default.  Use --stop-on-copy to disable this
  behavior, which can be useful for determining branchpoints.
  The --depth option is only valid in combination with the --diff option
  and limits the scope of the displayed diff to the specified depth.
  If the --search option is used, log messages are displayed only if the
  provided search pattern matches any of the author, date, log message
  text (unless --quiet is used), or, if the --verbose option is also
  provided, a changed path.
  The search pattern may include "glob syntax" wildcards:
      ?      matches any single character
      *      matches a sequence of arbitrary characters
      [abc]  matches any of the characters listed inside the brackets
  If multiple --search options are provided, a log message is shown if
  it matches any of the provided search patterns. If the --search-and
  option is used, that option's argument is combined with the pattern
  from the previous --search or --search-and option, and a log message
  is shown only if it matches the combined search pattern.
  If --limit is used in combination with --search, --limit restricts the
  number of log messages searched, rather than restricting the output
  to a particular number of matching log messages.
  Examples:
    Show the latest 5 log messages for the current working copy
    directory and display paths changed in each commit:
      svn log -l 5 -v
    Show the log for bar.c as of revision 42:
      svn log bar.c@42
    Show log messages and diffs for each commit to foo.c:
      svn log --diff http://www.example.com/repo/project/foo.c
    (Because the above command uses a full URL it does not require
     a working copy.)
    Show log messages for the children foo.c and bar.c of the directory
    '/trunk' as it appeared in revision 50, using the ^/ URL shortcut:
      svn log ^/trunk@50 foo.c bar.c
    Show the log messages for any incoming changes to foo.c during the
    next 'svn update':
      svn log -r BASE:HEAD foo.c
    Show the log message for the revision in which /branches/foo
    was created:
      svn log --stop-on-copy --limit 1 -r0:HEAD ^/branches/foo
retrieve revision property ARG
the change made in revision ARG
Merge changes into a working copy.
usage: 1. merge SOURCE[@REV] [TARGET_WCPATH]
          (the 'complete' merge)
       2. merge [-c M[,N...] | -r N:M ...] SOURCE[@REV] [TARGET_WCPATH]
          (the 'cherry-pick' merge)
       3. merge SOURCE1[@REV1] SOURCE2[@REV2] [TARGET_WCPATH]
          (the '2-URL' merge)
  1. This form, with one source path and no revision range, is called
     a 'complete' merge:
       svn merge SOURCE[@REV] [TARGET_WCPATH]
     The complete merge is used for the 'sync' and 'reintegrate' merges
     in the 'feature branch' pattern described below. It finds all the
     changes on the source branch that have not already been merged to the
     target branch, and merges them into the working copy. Merge tracking
     is used to know which changes have already been merged.
     SOURCE specifies the branch from where the changes will be pulled, and
     TARGET_WCPATH specifies a working copy of the target branch to which
     the changes will be applied. Normally SOURCE and TARGET_WCPATH should
     each correspond to the root of a branch. (If you want to merge only a
     subtree, then the subtree path must be included in both SOURCE and
     TARGET_WCPATH; this is discouraged, to avoid subtree mergeinfo.)
     SOURCE is usually a URL. The optional '@REV' specifies both the peg
     revision of the URL and the latest revision that will be considered
     for merging; if REV is not specified, the HEAD revision is assumed. If
     SOURCE is a working copy path, the corresponding URL of the path is
     used, and the default value of 'REV' is the base revision (usually the
     revision last updated to).
     TARGET_WCPATH is a working copy path; if omitted, '.' is generally
     assumed. There are some special cases:
       - If SOURCE is a URL:
           - If the basename of the URL and the basename of '.' are the
             same, then the differences are applied to '.'. Otherwise,
             if a file with the same basename as that of the URL is found
             within '.', then the differences are applied to that file.
             In all other cases, the target defaults to '.'.
       - If SOURCE is a working copy path:
           - If the source is a file, then differences are applied to that
             file (useful for reverse-merging earlier changes). Otherwise,
             if the source is a directory, then the target defaults to '.'.
     In normal usage the working copy should be up to date, at a single
     revision, with no local modifications and no switched subtrees.
       - The 'Feature Branch' Merging Pattern -
     In this commonly used work flow, known also as the 'development
     branch' pattern, a developer creates a branch and commits a series of
     changes that implement a new feature. The developer periodically
     merges all the latest changes from the parent branch so as to keep the
     development branch up to date with those changes. When the feature is
     complete, the developer performs a merge from the feature branch to
     the parent branch to re-integrate the changes.
         parent --+----------o------o-o-------------o--
                   \            \           \      /
                    \          merge      merge  merge
                     \            \           \  /
         feature      +--o-o-------o----o-o----o-------
     A merge from the parent branch to the feature branch is called a
     'sync' or 'catch-up' merge, and a merge from the feature branch to the
     parent branch is called a 'reintegrate' merge.
       - Sync Merge Example -
                                 ............
                                .            .
         trunk  --+------------L--------------R------
                   \                           \
                    \                          |
                     \                         v
         feature      +------------------------o-----
                             r100            r200
     Subversion will locate all the changes on 'trunk' that have not yet
     been merged into the 'feature' branch. In this case that is a single
     range, r100:200. In the diagram above, L marks the left side (trunk@100)
     and R marks the right side (trunk@200) of the merge source. The
     difference between L and R will be applied to the target working copy
     path. In this case, the working copy is a clean checkout of the entire
     'feature' branch.
     To perform this sync merge, have a clean working copy of the feature
     branch and run the following command in its top-level directory:
         svn merge ^/trunk
     Note that the merge is now only in your local working copy and still
     needs to be committed to the repository so that it can be seen by
     others. You can review the changes and you may have to resolve
     conflicts before you commit the merge.
       - Reintegrate Merge Example -
     The feature branch was last synced with trunk up to revision X. So the
     difference between trunk@X and feature@HEAD contains the complete set
     of changes that implement the feature, and no other changes. These
     changes are applied to trunk.
                    rW                   rX
         trunk ------+--------------------L------------------o
                      \                    .                 ^
                       \                    .............   /
                        \                                . /
         feature         +--------------------------------R
     In the diagram above, L marks the left side (trunk@X) and R marks the
     right side (feature@HEAD) of the merge. The difference between the
     left and right side is merged into trunk, the target.
     To perform the merge, have a clean working copy of trunk and run the
     following command in its top-level directory:
         svn merge ^/feature
     To prevent unnecessary merge conflicts, a reintegrate merge requires
     that TARGET_WCPATH is not a mixed-revision working copy, has no local
     modifications, and has no switched subtrees.
     A reintegrate merge also requires that the source branch is coherently
     synced with the target -- in the above example, this means that all
     revisions between the branch point W and the last merged revision X
     are merged to the feature branch, so that there are no unmerged
     revisions in-between.
  2. This form is called a 'cherry-pick' merge:
       svn merge [-c M[,N...] | -r N:M ...] SOURCE[@REV] [TARGET_WCPATH]
     A cherry-pick merge is used to merge specific revisions (or revision
     ranges) from one branch to another. By default, this uses merge
     tracking to automatically skip any revisions that have already been
     merged to the target; you can use the --ignore-ancestry option to
     disable such skipping.
     SOURCE is usually a URL. The optional '@REV' specifies only the peg
     revision of the URL and does not affect the merge range; if REV is not
     specified, the HEAD revision is assumed. If SOURCE is a working copy
     path, the corresponding URL of the path is used, and the default value
     of 'REV' is the base revision (usually the revision last updated to).
     TARGET_WCPATH is a working copy path; if omitted, '.' is generally
     assumed. The special cases noted above in the 'complete' merge form
     also apply here.
     The revision ranges to be merged are specified by the '-r' and/or '-c'
     options. '-r N:M' refers to the difference in the history of the
     source branch between revisions N and M. You can use '-c M' to merge
     single revisions: '-c M' is equivalent to '-r <M-1>:M'. Each such
     difference is applied to TARGET_WCPATH.
     If the mergeinfo in TARGET_WCPATH indicates that revisions within the
     range were already merged, changes made in those revisions are not
     merged again. If needed, the range is broken into multiple sub-ranges,
     and each sub-range is merged separately.
     A 'reverse range' can be used to undo changes. For example, when
     source and target refer to the same branch, a previously committed
     revision can be 'undone'. In a reverse range, N is greater than M in
     '-r N:M', or the '-c' option is used with a negative number: '-c -M'
     is equivalent to '-r M:<M-1>'. Undoing changes like this is also known
     as performing a 'reverse merge'.
     Multiple '-c' and/or '-r' options may be specified and mixing of
     forward and reverse ranges is allowed.
       - Cherry-pick Merge Example -
     A bug has been fixed on trunk in revision 50. This fix needs to
     be merged from trunk onto the release branch.
            1.x-release  +-----------------------o-----
                        /                        ^
                       /                         |
                      /                          |
         trunk ------+--------------------------LR-----
                                                r50
     In the above diagram, L marks the left side (trunk@49) and R marks the
     right side (trunk@50) of the merge. The difference between the left
     and right side is applied to the target working copy path.
     Note that the difference between revision 49 and 50 is exactly those
     changes that were committed in revision 50, not including changes
     committed in revision 49.
     To perform the merge, have a clean working copy of the release branch
     and run the following command in its top-level directory; remember
     that the default target is '.':
         svn merge -c50 ^/trunk
     You can also cherry-pick several revisions and/or revision ranges:
         svn merge -c50,54,60 -r65:68 ^/trunk
  3. This form is called a '2-URL merge':
       svn merge SOURCE1[@REV1] SOURCE2[@REV2] [TARGET_WCPATH]
     You should use this merge variant only if the other variants do not
     apply to your situation, as this variant can be quite complex to
     master.
     Two source URLs are specified, identifying two trees on the same
     branch or on different branches. The trees are compared and the
     difference from SOURCE1@REV1 to SOURCE2@REV2 is applied to the
     working copy of the target branch at TARGET_WCPATH. The target
     branch may be the same as one or both sources, or different again.
     The three branches involved can be completely unrelated.
     TARGET_WCPATH is a working copy path; if omitted, '.' is generally
     assumed. The special cases noted above in the 'complete' merge form
     also apply here.
     SOURCE1 and/or SOURCE2 can also be specified as a working copy path,
     in which case the merge source URL is derived from the working copy.
       - 2-URL Merge Example -
     Two features have been developed on separate branches called 'foo' and
     'bar'. It has since become clear that 'bar' should be combined with
     the 'foo' branch for further development before reintegration.
     Although both feature branches originate from trunk, they are not
     directly related -- one is not a direct copy of the other. A 2-URL
     merge is necessary.
     The 'bar' branch has been synced with trunk up to revision 500.
     (If this revision number is not known, it can be located using the
     'svn log' and/or 'svn mergeinfo' commands.)
     The difference between trunk@500 and bar@HEAD contains the complete
     set of changes related to feature 'bar', and no other changes. These
     changes are applied to the 'foo' branch.
                           foo  +-----------------------------------o
                               /                                    ^
                              /                                    /
                             /              r500                  /
         trunk ------+------+-----------------L--------->        /
                      \                        .                /
                       \                        ............   /
                        \                                   . /
                    bar  +-----------------------------------R
     In the diagram above, L marks the left side (trunk@500) and R marks
     the right side (bar@HEAD) of the merge. The difference between the
     left and right side is applied to the target working copy path, in
     this case a working copy of the 'foo' branch.
     To perform the merge, have a clean working copy of the 'foo' branch
     and run the following command in its top-level directory:
         svn merge ^/trunk@500 ^/bar
     The exact changes applied by a 2-URL merge can be previewed with svn's
     diff command, which is a good idea to verify if you do not have the
     luxury of a clean working copy to merge to. In this case:
         svn diff ^/trunk@500 ^/bar@HEAD
  The following applies to all types of merges:
  To prevent unnecessary merge conflicts, svn merge requires that
  TARGET_WCPATH is not a mixed-revision working copy. Running 'svn update'
  before starting a merge ensures that all items in the working copy are
  based on the same revision.
  If possible, you should have no local modifications in the merge's target
  working copy prior to the merge, to keep things simpler. It will be
  easier to revert the merge and to understand the branch's history.
  Switched sub-paths should also be avoided during merging, as they may
  cause incomplete merges and create subtree mergeinfo.
  For each merged item a line will be printed with characters reporting the
  action taken. These characters have the following meaning:
    A  Added
    D  Deleted
    U  Updated
    C  Conflict
    G  Merged
    E  Existed
    R  Replaced
  Characters in the first column report about the item itself.
  Characters in the second column report about properties of the item.
  A 'C' in the third column indicates a tree conflict, while a 'C' in
  the first and second columns indicate textual conflicts in files
  and in property values, respectively.
    - Merge Tracking -
  Subversion uses the svn:mergeinfo property to track merge history. This
  property is considered at the start of a merge to determine what to merge
  and it is updated at the conclusion of the merge to describe the merge
  that took place. Mergeinfo is used only if the two sources are on the
  same line of history -- if the first source is an ancestor of the second,
  or vice-versa (i.e. if one has originally been created by copying the
  other). This is verified and enforced when using sync merges and
  reintegrate merges.
  The --ignore-ancestry option prevents merge tracking and thus ignores
  mergeinfo, neither considering it nor recording it.
    - Merging from foreign repositories -
  Subversion does support merging from foreign repositories.
  While all merge source URLs must point to the same repository, the merge
  target working copy may come from a different repository than the source.
  However, there are some caveats. Most notably, copies made in the
  merge source will be transformed into plain additions in the merge
  target. Also, merge-tracking is not supported for merges from foreign
  repositories.
force deletions even if deleted contents don't match
Display merge-related information.
usage: 1. mergeinfo SOURCE[@REV] [TARGET[@REV]]
       2. mergeinfo --show-revs=WHICH SOURCE[@REV] [TARGET[@REV]]
  1. Summarize the history of merging between SOURCE and TARGET. The graph
     shows, from left to right:
       the youngest common ancestor of the branches;
       the latest full merge in either direction, and thus the common base
         that will be used for the next complete merge;
       the repository path and revision number of the tip of each branch.
  2. Print the revision numbers on SOURCE that have been merged to TARGET
     (with --show-revs=merged), or that have not been merged to TARGET
     (with --show-revs=eligible). Print only revisions in which there was
     at least one change in SOURCE.
     If --revision (-r) is provided, filter the displayed information to
     show only that which is associated with the revisions within the
     specified range.  Revision numbers, dates, and the 'HEAD' keyword are
     valid range values.
  SOURCE and TARGET are the source and target branch URLs, respectively.
  (If a WC path is given, the corresponding base URL is used.) The default
  TARGET is the current working directory ('.'). REV specifies the revision
  to be considered the tip of the branch; the default for SOURCE is HEAD,
  and the default for TARGET is HEAD for a URL or BASE for a WC path.
  The depth can be 'empty' or 'infinity'; the default is 'empty'.
Create a new directory under version control.
usage: 1. mkdir PATH...
       2. mkdir URL...
  Create version controlled directories.
  1. Each directory specified by a working copy PATH is created locally
    and scheduled for addition upon the next commit.
  2. Each directory specified by a URL is created in the repository via
    an immediate commit.
  In both cases, all the intermediate directories must already exist,
  unless the --parents option is given.
Move (rename) an item in a working copy or repository.
usage: move SRC... DST
  SRC and DST can both be working copy (WC) paths or URLs:
    WC  -> WC:  move an item in a working copy, as a local change to
                be committed later (with or without further changes)
    URL -> URL: move an item in the repository directly, immediately
                creating a new revision in the repository
  All the SRCs must be of the same type. When moving multiple sources,
  they will be added as children of DST, which must be a directory.
  SRC and DST of WC -> WC moves must be committed in the same revision.
  Furthermore, WC -> WC moves will refuse to move a mixed-revision subtree.
  To avoid unnecessary conflicts, it is recommended to run 'svn update'
  to update the subtree to a single revision before moving it.
  The --allow-mixed-revisions option is provided for backward compatibility.
  The --revision option has no use and is deprecated.
Apply a patch to a working copy.
usage: patch PATCHFILE [WCPATH]
  Apply a unidiff patch in PATCHFILE to the working copy WCPATH.
  If WCPATH is omitted, '.' is assumed.
  A unidiff patch suitable for application to a working copy can be
  produced with the 'svn diff' command or third-party diffing tools.
  Any non-unidiff content of PATCHFILE is ignored, except for Subversion
  property diffs as produced by 'svn diff'.
  Changes listed in the patch will either be applied or rejected.
  If a change does not match at its exact line offset, it may be applied
  earlier or later in the file if a match is found elsewhere for the
  surrounding lines of context provided by the patch.
  A change may also be applied with fuzz, which means that one
  or more lines of context are ignored when matching the change.
  If no matching context can be found for a change, the change conflicts
  and will be written to a reject file with the extension .svnpatch.rej.
  For each patched file a line will be printed with characters reporting
  the action taken. These characters have the following meaning:
    A  Added
    D  Deleted
    U  Updated
    C  Conflict
    G  Merged (with local uncommitted changes)
  Changes applied with an offset or fuzz are reported on lines starting
  with the '>' symbol. You should review such changes carefully.
  If the patch removes all content from a file, that file is scheduled
  for deletion. If the patch creates a new file, that file is scheduled
  for addition. Use 'svn revert' to undo deletions and additions you
  do not agree with.
  Hint: If the patch file was created with Subversion, it will contain
        the number of a revision N the patch will cleanly apply to
        (look for lines like '--- foo/bar.txt        (revision N)').
        To avoid rejects, first update to the revision N using
        'svn update -r N', apply the patch, and then update back to the
        HEAD revision. This way, conflicts can be resolved interactively.
Remove a property from files, dirs, or revisions.
usage: 1. propdel PROPNAME [PATH...]
       2. propdel PROPNAME --revprop -r REV [TARGET]
  1. Removes versioned props in working copy.
  2. Removes unversioned remote prop on repos revision.
     TARGET only determines which repository to access.
  See 'svn help propset' for descriptions of the svn:* special properties.
Edit a property with an external editor.
usage: 1. propedit PROPNAME TARGET...
       2. propedit PROPNAME --revprop -r REV [TARGET]
  1. Edits versioned prop in working copy or repository.
  2. Edits unversioned remote prop on repos revision.
     TARGET only determines which repository to access.
  See 'svn help propset' for descriptions of the svn:* special properties.
Print the value of a property on files, dirs, or revisions.
usage: 1. propget PROPNAME [TARGET[@REV]...]
       2. propget PROPNAME --revprop -r REV [TARGET]
  1. Prints versioned props. If specified, REV determines in which
     revision the target is first looked up.
  2. Prints unversioned remote prop on repos revision.
     TARGET only determines which repository to access.
  With --verbose, the target path and the property name are printed on
  separate lines before each value, like 'svn proplist --verbose'.
  Otherwise, if there is more than one TARGET or a depth other than
  'empty', the target path is printed on the same line before each value.
  By default, an extra newline is printed after the property value so that
  the output looks pretty.  With a single TARGET, depth 'empty' and without
  --show-inherited-props, you can use the --no-newline option to disable this
  (useful when redirecting a binary property value to a file, for example).
  See 'svn help propset' for descriptions of the svn:* special properties.
print path, name and value on separate lines
(deprecated; use --no-newline)
List all properties on files, dirs, or revisions.
usage: 1. proplist [TARGET[@REV]...]
       2. proplist --revprop -r REV [TARGET]
  1. Lists versioned props. If specified, REV determines in which
     revision the target is first looked up.
  2. Lists unversioned remote props on repos revision.
     TARGET only determines which repository to access.
  With --verbose, the property values are printed as well, like 'svn propget
  --verbose'.  With --quiet, the paths are not printed.
  See 'svn help propset' for descriptions of the svn:* special properties.
Set the value of a property on files, dirs, or revisions.
usage: 1. propset PROPNAME PROPVAL PATH...
       2. propset PROPNAME --revprop -r REV PROPVAL [TARGET]
  1. Changes a versioned file or directory property in a working copy.
  2. Changes an unversioned property on a repository revision.
     (TARGET only determines which repository to access.)
  The value may be provided with the --file option instead of PROPVAL.
  Property names starting with 'svn:' are reserved.  Subversion recognizes
  the following special versioned properties on a file:
    svn:keywords   - Keywords to be expanded.  Valid keywords are:
      URL, HeadURL             - The URL for the head version of the file.
      Author, LastChangedBy    - The last person to modify the file.
      Date, LastChangedDate    - The date/time the file was last modified.
      Rev, Revision,           - The last revision the file changed.
        LastChangedRevision
      Id                       - A compressed summary of the previous four.
      Header                   - Similar to Id but includes the full URL.
      Custom keywords can be defined with a format string separated from
      the keyword name with '='. Valid format substitutions are:
        %a   - The author of the revision given by %r.
        %b   - The basename of the URL of the file.
        %d   - Short format of the date of the revision given by %r.
        %D   - Long format of the date of the revision given by %r.
        %P   - The file's path, relative to the repository root.
        %r   - The number of the revision which last changed the file.
        %R   - The URL to the root of the repository.
        %u   - The URL of the file.
        %_   - A space (keyword definitions cannot contain a literal space).
        %%   - A literal '%'.
        %H   - Equivalent to %P%_%r%_%d%_%a.
        %I   - Equivalent to %b%_%r%_%d%_%a.
      Example custom keyword definition: MyKeyword=%r%_%a%_%P
      Once a custom keyword has been defined for a file, it can be used
      within the file like any other keyword: $MyKeyword$
    svn:executable - If present, make the file executable.  Use
      'svn propdel svn:executable PATH...' to clear.
    svn:eol-style  - One of 'native', 'LF', 'CR', 'CRLF'.
    svn:mime-type  - The mimetype of the file.  Used to determine
      whether to merge the file, and how to serve it from Apache.
      A mimetype beginning with 'text/' (or an absent mimetype) is
      treated as text.  Anything else is treated as binary.
    svn:needs-lock - If present, indicates that the file should be locked
      before it is modified.  Makes the working copy file read-only
      when it is not locked.  Use 'svn propdel svn:needs-lock PATH...'
      to clear.
  Subversion recognizes the following special versioned properties on a
  directory:
    svn:ignore         - A list of file glob patterns to ignore, one per line.
    svn:global-ignores - Like svn:ignore, but inheritable.
    svn:auto-props     - Automatically set properties on files when they are
      added or imported. Contains key-value pairs, one per line, in the format:
        PATTERN = PROPNAME=VALUE[;PROPNAME=VALUE ...]
      Example (where a literal ';' is escaped by adding another ';'):
        *.html = svn:eol-style=native;svn:mime-type=text/html;; charset=UTF8
      Applies recursively to all files added or imported under the directory
      it is set on.  See also [auto-props] in the client configuration file.
    svn:externals      - A list of module specifiers, one per line, in the
      following format similar to the syntax of 'svn checkout':
        [-r REV] URL[@PEG] LOCALPATH
      Example:
        http://example.com/repos/zig foo/bar
      The LOCALPATH is relative to the directory having this property.
      To pin the external to a known revision, specify the optional REV:
        -r25 http://example.com/repos/zig foo/bar
      To unambiguously identify an element at a path which may have been
      subsequently deleted or renamed, specify the optional PEG revision:
        -r25 http://example.com/repos/zig@42 foo/bar
      The URL may be a full URL or a relative URL starting with one of:
        ../  to the parent directory of the extracted external
        ^/   to the repository root
        /    to the server root
        //   to the URL scheme
      ^/../  to a sibling repository beneath the same SVNParentPath location
      Use of the following format is discouraged but is supported for
      interoperability with Subversion 1.4 and earlier clients:
        LOCALPATH [-r PEG] URL
      The ambiguous format 'relative_path relative_path' is taken as
      'relative_url relative_path' with peg revision support.
      Lines starting with a '#' character are ignored.
read property value from file ARG
Relocate the working copy to point to a different repository root URL.
usage: 1. relocate FROM-PREFIX TO-PREFIX [PATH...]
       2. relocate TO-URL [PATH]
  Rewrite working copy URL metadata to reflect a syntactic change only.
  This is used when a repository's root URL changes (such as a scheme
  or hostname change) but your working copy still reflects the same
  directory within the same repository.
  1. FROM-PREFIX and TO-PREFIX are initial substrings of the working
     copy's current and new URLs, respectively.  (You may specify the
     complete old and new URLs if you wish.)  Use 'svn info' to determine
     the current working copy URL.
  2. TO-URL is the (complete) new repository URL to use for PATH.
  Examples:
    svn relocate http:// svn:// project1 project2
    svn relocate http://www.example.com/repo/project \
                 svn://svn.example.com/repo/project
Resolve conflicts on working copy files or directories.
usage: resolve [PATH...]
  By default, perform interactive conflict resolution on PATH.
  In this mode, the command is recursive by default (depth 'infinity').
  The --accept=ARG option prevents interactive prompting and forces
  conflicts on PATH to be resolved in the manner specified by ARG.
  In this mode, the command is not recursive by default (depth 'empty').
specify automatic conflict resolution source
                             ('base', 'working', 'mine-conflict',
                             'theirs-conflict', 'mine-full', 'theirs-full')
Remove 'conflicted' state on working copy files or directories.
usage: resolved PATH...
  Note:  this subcommand does not semantically resolve conflicts or
  remove conflict markers; it merely removes the conflict-related
  artifact files and allows PATH to be committed again.  It has been
  deprecated in favor of running 'svn resolve --accept working'.
Restore pristine working copy state (undo local changes).
usage: revert PATH...
  Revert changes in the working copy at or within PATH, and remove
  conflict markers as well, if any.
  This subcommand does not revert already committed changes.
  For information about undoing already committed changes, search
  the output of 'svn help merge' for 'undo'.
Print the status of working copy files and directories.
usage: status [PATH...]
  With no args, print only locally modified items (no network access).
  With -q, print only summary information about locally modified items.
  With -u, add working revision and server out-of-date information.
  With -v, print full revision information on every item.
  The first seven columns in the output are each one character wide:
    First column: Says if item was added, deleted, or otherwise changed
      ' ' no modifications
      'A' Added
      'C' Conflicted
      'D' Deleted
      'I' Ignored
      'M' Modified
      'R' Replaced
      'X' an unversioned directory created by an externals definition
      '?' item is not under version control
      '!' item is missing (removed by non-svn command) or incomplete
      '~' versioned item obstructed by some item of a different kind
    Second column: Modifications of a file's or directory's properties
      ' ' no modifications
      'C' Conflicted
      'M' Modified
    Third column: Whether the working copy is locked for writing by
                  another Subversion client modifying the working copy
      ' ' not locked for writing
      'L' locked for writing
    Fourth column: Scheduled commit will create a copy (addition-with-history)
      ' ' no history scheduled with commit (item was newly added)
      '+' history scheduled with commit (item was copied)
    Fifth column: Whether the item is switched or a file external
      ' ' normal
      'S' the item has a Switched URL relative to the parent
      'X' a versioned file created by an eXternals definition
    Sixth column: Whether the item is locked in repository for exclusive commit
      (without -u)
      ' ' not locked by this working copy
      'K' locked by this working copy, but lock might be stolen or broken
      (with -u)
      ' ' not locked in repository, not locked by this working copy
      'K' locked in repository, lock owned by this working copy
      'O' locked in repository, lock owned by another working copy
      'T' locked in repository, lock owned by this working copy was stolen
      'B' not locked in repository, lock owned by this working copy is broken
    Seventh column: Whether the item is the victim of a tree conflict
      ' ' normal
      'C' tree-Conflicted
    If the item is a tree conflict victim, an additional line is printed
    after the item's status line, explaining the nature of the conflict.
  The out-of-date information appears in the ninth column (with -u):
      '*' a newer revision exists on the server
      ' ' the working copy is up to date
  Remaining fields are variable width and delimited by spaces:
    The working revision (with -u or -v; '-' if the item is copied)
    The last committed revision and last committed author (with -v)
    The working copy path is always the final field, so it can
      include spaces.
  The presence of a question mark ('?') where a working revision, last
  committed revision, or last committed author was expected indicates
  that the information is unknown or irrelevant given the state of the
  item (for example, when the item is the result of a copy operation).
  The question mark serves as a visual placeholder to facilitate parsing.
  Example output:
    svn status wc
     M      wc/bar.c
    A  +    wc/qax.c
    svn status -u wc
     M             965   wc/bar.c
            *      965   wc/foo.c
    A  +             -   wc/qax.c
    Status against revision:   981
    svn status --show-updates --verbose wc
     M             965      938 kfogel       wc/bar.c
            *      965      922 sussman      wc/foo.c
    A  +             -      687 joe          wc/qax.c
                   965      687 joe          wc/zig.c
    Status against revision:   981
    svn status
     M      wc/bar.c
    !     C wc/qaz.c
          >   local missing, incoming edit upon update
    D       wc/qax.c
Update the working copy to a different URL within the same repository.
usage: 1. switch URL[@PEGREV] [PATH]
       2. switch --relocate FROM-PREFIX TO-PREFIX [PATH...]
  1. Update the working copy to mirror a new URL within the repository.
     This behavior is similar to 'svn update', and is the way to
     move a working copy to a branch or tag within the same repository.
     If specified, PEGREV determines in which revision the target is first
     looked up.
     If --force is used, unversioned obstructing paths in the working
     copy do not automatically cause a failure if the switch attempts to
     add the same path.  If the obstructing path is the same type (file
     or directory) as the corresponding path in the repository it becomes
     versioned but its contents are left 'as-is' in the working copy.
     This means that an obstructing directory's unversioned children may
     also obstruct and become versioned.  For files, any content differences
     between the obstruction and the repository are treated like a local
     modification to the working copy.  All properties from the repository
     are applied to the obstructing path.
     Use the --set-depth option to set a new working copy depth on the
     targets of this operation.
     By default, Subversion will refuse to switch a working copy path to
     a new URL with which it shares no common version control ancestry.
     Use the '--ignore-ancestry' option to override this sanity check.
  2. The '--relocate' option is deprecated. This syntax is equivalent to
     'svn relocate FROM-PREFIX TO-PREFIX [PATH]'.
  See also 'svn help update' for a list of possible characters
  reporting the action taken.
  Examples:
    svn switch ^/branches/1.x-release
    svn switch --relocate http:// svn://
    svn switch --relocate http://www.example.com/repo/project \
                          svn://svn.example.com/repo/project
allow switching to a node with no common ancestor
handle unversioned obstructions as changes
Unlock working copy paths or URLs.
usage: unlock TARGET...
  Use --force to break the lock.
Bring changes from the repository into the working copy.
usage: update [PATH...]
  If no revision is given, bring working copy up-to-date with HEAD rev.
  Else synchronize working copy to revision given by -r.
  For each updated item a line will be printed with characters reporting
  the action taken. These characters have the following meaning:
    A  Added
    D  Deleted
    U  Updated
    C  Conflict
    G  Merged
    E  Existed
    R  Replaced
  Characters in the first column report about the item itself.
  Characters in the second column report about properties of the item.
  A 'B' in the third column signifies that the lock for the file has
  been broken or stolen.
  A 'C' in the fourth column indicates a tree conflict, while a 'C' in
  the first and second columns indicate textual conflicts in files
  and in property values, respectively.
  If --force is used, unversioned obstructing paths in the working
  copy do not automatically cause a failure if the update attempts to
  add the same path.  If the obstructing path is the same type (file
  or directory) as the corresponding path in the repository it becomes
  versioned but its contents are left 'as-is' in the working copy.
  This means that an obstructing directory's unversioned children may
  also obstruct and become versioned.  For files, any content differences
  between the obstruction and the repository are treated like a local
  modification to the working copy.  All properties from the repository
  are applied to the obstructing path.  Obstructing paths are reported
  in the first column with code 'E'.
  If the specified update target is missing from the working copy but its
  immediate parent directory is present, checkout the target into its
  parent directory at the specified depth.  If --parents is specified,
  create any missing parent directories of the target by checking them
  out, too, at depth=empty.
  Use the --set-depth option to set a new working copy depth on the
  targets of this operation.
Upgrade the metadata storage format for a working copy.
usage: upgrade [WCPATH...]
  Local modifications are preserved.
force validity of log message source
print nothing, or only summary information
descend recursively, same as --depth=infinity
obsolete; try --depth=files or --depth=immediates
the change made by revision ARG (like -r ARG-1:ARG)
                             If ARG is negative this is like -r ARG:ARG-1
                             If ARG is of the form ARG1-ARG2 then this is like
                             ARG1:ARG2, where ARG1 is inclusive
ARG (some commands also take ARG1:ARG2 range)
                             A revision argument can be one of:
                                NUMBER       revision number
                                '{' DATE '}' revision at start of the date
                                'HEAD'       latest in repository
                                'BASE'       base rev of item's working copy
                                'COMMITTED'  last commit at or before BASE
                                'PREV'       revision just before COMMITTED
read log message from file ARG
give output suitable for concatenation
treat value as being in charset encoding ARG
show program version information
specify a password ARG (caution: on many operating
                             systems, other users will be able to see this)
Specify differencing options for external diff or
                             internal diff or blame. Default: '-u'. Options are
                             separated by spaces. Internal diff and blame take:
                               -u, --unified: Show 3 lines of unified context
                               -b, --ignore-space-change: Ignore changes in
                                 amount of white space
                               -w, --ignore-all-space: Ignore all white space
                               --ignore-eol-style: Ignore changes in EOL style
                               -U ARG, --context ARG: Show ARG lines of context
                               -p, --show-c-function: Show C function name
pass contents of file ARG as additional args
limit operation by depth ARG ('empty', 'files',
                             'immediates', or 'infinity')
set new working copy depth to ARG ('exclude',
                             'empty', 'files', 'immediates', or 'infinity')
do not cross copies while traversing history
disregard default and svn:ignore and
                             svn:global-ignores property ignores
do not cache authentication tokens
deprecated; same as
                             --trust-server-cert-failures=unknown-ca
with --non-interactive, accept SSL server
                             certificates with failures; ARG is comma-separated
                             list of 'unknown-ca' (Unknown Authority),
                             'cn-mismatch' (Hostname mismatch), 'expired'
                             (Expired certificate), 'not-yet-valid' (Not yet
                             valid certificate) and 'other' (all other not
                             separately classified certificate errors).
do no interactive prompting (default is to prompt
                             only if standard input is a terminal device)
do interactive prompting even if standard input
                             is not a terminal device
try operation but make no changes
disable merge tracking; diff nodes as if related
merge only mergeinfo differences
operate on a revision property (use with -r)
read user configuration files from directory ARG
set user configuration option in the format:
                                 FILE:SECTION:OPTION=[VALUE]
                             For example:
                                 servers:global:http-library=serf
use a different EOL marker than the standard
                             system marker for files with the svn:eol-style
                             property set to 'native'.
                             ARG may be one of 'LF', 'CR', 'CRLF'
operate only on members of changelist ARG
don't delete changelists after commit
retrieve all revision properties
retrieve no revision properties
set revision property ARG in new revision
                             using the name[=value] format
use/display additional information from merge
                             history
specify automatic conflict resolution action
                             ('postpone', 'working', 'base', 'mine-conflict',
                             'theirs-conflict', 'mine-full', 'theirs-full',
                             'edit', 'launch')
                             (shorthand: 'p', 'mc', 'tc', 'mf', 'tf', 'e', 'l')
specify which collection of revisions to display
                             ('merged', 'eligible')
number of leading path components to strip from
                             paths parsed from the patch file. --strip 0
                             is the default and leaves paths unmodified.
                             --strip 1 would change the path
                             'doc/fudge/crunchy.html' to 'fudge/crunchy.html'.
                             --strip 2 would leave just 'crunchy.html'
                             The expected component separator is '/' on all
                             platforms. A leading '/' counts as one component.
ignore whitespace during pattern matching
override diff-cmd specified in config file
do not print differences for added files
do not print differences for deleted files
don't diff copied or moved files with their source
diff unrelated nodes as delete and add
use git's extended diff format
ignore properties during the operation
show only properties during the operation
generate diff suitable for generic third-party
                             patch tools; currently the same as
                             --show-copies-as-adds --ignore-properties
Allow operation on mixed-revision working copy.
                             Use of this option is not recommended!
                             Please run 'svn update' instead.
also operate on externals defined by
                             svn:externals properties
retrieve properties set on parents of the target
use ARG as search pattern (glob syntax)
combine ARG with the previous search pattern
show revision log message, author and date
do not output the trailing newline
pin externals with no explicit revision to their
                             current revision (recommended when tagging)
print only the item identified by ARG ('kind',
                             'url', 'relative-url', 'repos-root-url',
                             'repos-uuid', 'revision', 'last-changed-revision',
                             'last-changed-date', 'last-changed-author',
                             'wc-root')
'%s' to '%s' is not a valid relocation
Path '%s' does not share common version control ancestry with the requested switch location.  Use --ignore-ancestry to disable this check.
'svn switch' does not support switching a working copy to a different repository
! svn_path_is_url(path)
subversion/svn/update-cmd.c
Summary of updates:
  Updated '%s' to r%ld.
Committed revision %ld%s.
Warning: %s
SVN_MERGE
merge-tool-cmd
log-encoding
   '%s'
svn-commit
Write error
UTF-8
svn: Skipping argument: 
eligible
(invalid date)
(%s) %s@%ld
true_targets_p
subversion/svn/util.c
'%s' is not a local path
SVN_I_LOVE_PANGALACTIC_GARGLE_BLASTERS
 (the answer to life, the universe, and everything)
The environment variable SVN_MERGE and the merge-tool-cmd run-time configuration option were not set.
The external merge tool '%s' exited with exit code %d.
The SVN_MERGE environment variable is empty or consists solely of whitespace. Expected a shell command.
Log message contains a zero byte
Your commit message was left in a temporary file:
--This line, and those below, will be ignored--
Error normalizing log message to internal format
Cannot invoke editor to get log message when non-interactive
Could not use external editor to fetch log message; consider setting the $SVN_EDITOR environment variable or using the --message (-m) or --file (-F) options
Log message unchanged or not specified
(a)bort, (c)ontinue, (e)dit:
Use --force to override this restriction (local modifications may be lost)
svn: warning: '%s' is a binary mime-type but file '%s' looks like text; diff, merge, blame, and other operations will stop working on this file
;*2$"<
svn.debug
7zXZ
f _R"f
k>HJ
?Dr>W
8{+ 
Rh`f
l6~pi
s,3N
\5IvO
[#NJ
5[GZ
{9.&
z FR%
}wL`
sO\.3
^mch
qCz3ET
!_Z=
 Lg[
`(Z.
)"CR1
x<ZE
3v4;
ThGc
~)s-
!PV0
)P6XA
UOZ7N
['zI
A]nb
;R`B
/ y<,
eNw_
.e[t}
NY:J
BP,]&
,fzZ1
6U(k
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.data
.bss
.gnu_debuglink
.gnu_debugdata
