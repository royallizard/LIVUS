gf0Z
[tOM
{A*IB#
t	rh
Kt+K
~g5p2c
z8h%
__gmon_start__
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
gg_vsaprintf
__vsnprintf_chk
malloc
gg_saprintf
gg_get_line
strchr
strlen
gg_read_line
__errno_location
strerror
gg_debug
gg_connect
inet_ntoa
socket
gg_local_ip
bind
ioctl
close
__stack_chk_fail
gg_chomp
gg_urlencode
gg_http_hash
__snprintf_chk
gg_base64_encode
gg_base64_decode
calloc
gg_proxy_auth
gg_proxy_enabled
gg_proxy_username
gg_proxy_password
gg_crc32
gg_dcc_free
gg_dcc_request
gg_send_message_ctcp
gg_dcc_fill_file_info2
__xstat
open
gg_fix32
strrchr
__ctype_toupper_loc
strncpy
gg_dcc_fill_file_info
gg_dcc_get_file
gg_dcc_send_file
gg_dcc_voice_chat
gg_dcc_set_type
gg_dcc_socket_create
listen
gg_dcc_voice_send
gg_dcc_watch_fd
getsockopt
lseek
__read_chk
strncmp
gg_debug_session
memcmp
rand
gg_send_packet
getsockname
gg_dcc7_send_file
gg_file_hash_sha1
gg_dcc7_send_file_fd
gg_dcc7_accept
gg_dcc7_reject
gg_dcc7_handle_id
gg_dcc7_handle_accept
gg_dcc7_handle_info
strstr
inet_addr
strtol
gg_dcc7_handle_reject
gg_dcc7_watch_fd
gg_fix16
gg_dcc7_free
gg_dcc7_handle_new
gg_debug_common
gg_debug_handler_session
gg_debug_handler
gg_debug_level
gg_debug_file
__vfprintf_chk
stderr
__sprintf_chk
deflateInit_
deflateBound
realloc
deflate
deflateEnd
inflateInit_
inflate
inflateEnd
__strdup
gg_event_free
gg_pubdir50_free
gg_image_queue_remove
gg_watch_fd
gnutls_handshake
gnutls_record_get_direction
gg_recv_packet
strcpy
memmove
__ctype_b_loc
gg_proxy_http_only
gnutls_compression_get
gnutls_compression_get_name
gnutls_mac_get
gnutls_mac_get_name
gnutls_kx_get
gnutls_kx_get_name
gnutls_cipher_get
gnutls_cipher_get_name
gnutls_protocol_get_version
gnutls_protocol_get_name
gnutls_certificate_type_get
strcat
gnutls_transport_set_ptr
gnutls_x509_crt_init
gnutls_certificate_get_peers
gnutls_x509_crt_import
gnutls_x509_crt_deinit
gnutls_x509_crt_get_dn
gnutls_x509_crt_get_issuer_dn
memcpy
memchr
gg_dcc_ip
gg_dcc_port
gg_login_hash
gg_login_hash_sha1
gg_http_watch_fd
strncasecmp
gg_http_stop
gg_http_free_fields
gg_http_free
gg_http_connect
gg_http_set_resolver
gg_proxy_host
gg_proxy_port
gg_free_session
gnutls_deinit
gnutls_certificate_free_credentials
gnutls_global_deinit
gnutls_record_send
gnutls_error_is_fatal
gg_libgadu_version
gg_read
gnutls_record_recv
gg_write
__memcpy_chk
gg_login
gg_session_set_resolver
gnutls_global_init
gnutls_certificate_allocate_credentials
gnutls_init
gnutls_set_default_priority
gnutls_credentials_set
gg_ping
gg_logoff
gnutls_bye
shutdown
gg_change_status
gg_change_status_descr
gg_change_status_descr_time
gg_change_status_flags
gg_send_message_confer_richtext
gg_send_message_confer
gg_send_message_richtext
gg_send_message
gg_image_request
gg_image_reply
__strcpy_chk
gg_notify_ex
gg_notify
gg_add_notify_ex
gg_add_notify
gg_remove_notify_ex
gg_remove_notify
gg_userlist_request
gg_userlist100_request
gg_typing_notification
gg_multilogon_disconnect
gg_libgadu_check_feature
gg_userlist_get
gg_userlist_get_watch_fd
gg_userlist_get_free
gg_userlist_put
gg_userlist_put_watch_fd
gg_userlist_put_free
gg_userlist_remove
gg_userlist_remove_watch_fd
gg_userlist_remove_free
gg_search
gg_search_watch_fd
gg_free_search
gg_search_request_mode_0
gg_search_request_mode_1
gg_search_request_mode_2
gg_search_request_mode_3
gg_search_request_free
gg_register
gg_register2
gg_unregister
gg_unregister2
gg_change_passwd
gg_change_passwd2
gg_change_passwd3
gg_remind_passwd
gg_remind_passwd2
gg_change_info
gg_change_info_request_new
gg_change_info_request_free
gg_resolve
gg_resolve_pthread_cleanup
gg_resolve_pthread
gg_pubdir50_handle_reply
gg_token_free
gg_pubdir_free
gg_token_watch_fd
__isoc99_sscanf
gg_pubdir_watch_fd
gg_register3
gg_unregister3
random
gg_change_passwd4
gg_remind_passwd3
gg_token
strcmp
gg_pubdir50_new
gg_pubdir50_add
gg_pubdir50_seq_set
gg_pubdir50
stpcpy
strcasecmp
gg_pubdir50_get
gg_pubdir50_count
gg_pubdir50_type
gg_pubdir50_next
gg_pubdir50_seq
pthread_cancel
pthread_join
pipe
pthread_create
waitpid
kill
gethostbyname_r
pthread_setcancelstate
_Unwind_Resume
__gcc_personality_v0
pthread_self
pthread_detach
pthread_exit
fork
gg_gethostbyname
gg_session_get_resolver
gg_session_set_custom_resolver
gg_http_get_resolver
gg_http_set_custom_resolver
gg_global_set_resolver
gg_global_get_resolver
gg_global_set_custom_resolver
libz.so.1
libgnutls.so.26
libgcc_s.so.1
libpthread.so.0
libc.so.6
libgadu.so.3
GCC_3.0
GCC_3.3.1
ZLIB_1.2.0
GLIBC_2.2.5
GNUTLS_1_4
GLIBC_2.7
GLIBC_2.14
GLIBC_2.4
GLIBC_2.3.4
GLIBC_2.3
a_&	
fffff.
l$(H
\$ L
d$0H
t$(H
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
D$ H
fff.
ATUSH
[]A\A]
[]A\A]
[]A\A]
[]A\A]
D$81
T$8dH3
\$@H
l$HL
d$PL
l$XL
t$`H
89abcdefSH
01234567H
	v)< t
AVAUL
D$81
T$PH
D$@H
t$HH
L$XL
D$`L
T$8dH3
p[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
l$ H
d$(L
l$0H
fffff.
l$@H
\$8L
d$HL
l$PL
t$XL
|$`H
T$HH
|$0H
T$dH
T$XH
T$lH
T$hH
D$\H
[]A\A]
[]A\A]
l$ A
ffff.
l$ A
ffff.
l$ A
ffff.
AUATU
 []A\A]A^
l$ L
d$(L
l$0H
D$PUDAG
$v.H
T$,H
|$TD
d$RfA
T$(1
D$Rf
D$(H
|$,u
t$,I
T$PH
T$ H
T$ H
sx+sL
CT;CP
Cx+CL
T$@H
cTD;cPD
|$@H
Kx9KL
t$`=
t$`Ic
cTD;cPD
cTD;cPD
cTr*H
T$ H
T$ H
T$@H
T$ H
T$ H
D$`H
T$`H
T$,H
T$`H
t$PH
T$@H
T$0H
D$lH
ffffff.
AVAUATUSH
t$$D
D$"f
D$0H
|$0L
[]A\A]A^
l$0H
\$(L
d$8L
l$@L
t$HL
|$PH
D$)@
L$@L
\$(H
l$0L
d$8L
l$@L
t$HL
|$PH
ATUH
[]A\A]
'tEH
l$ L
d$(L
l$0H
l$ L
d$(L
l$0L
t$8L
|$@H
'tDH
d$ H
.v-H
D$,H
|$(u
L$(H
CL;CP
CLsK
SP9SL
T$,H
|$tD
l$rfA
T$(1
D$rD
D$(n
t$@H
D$,H
D$`H
t$`H
t$`H
{HHc
kLD;kPD
fff.
d$ L
l$(L
t$0H
fff.
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
D$ 1
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
D$ H
AWAVE1
AUATUSH
D$x1
l$VL
|$ L
L$ H
D$xdH3
[]A\A]A^A_
/w)H
*w)H
AUATI
\$ H
D$ H
l$(H
[]A\A]
[]A\A]
L$0H
ATUSH
\$ H
D$ H
l$(L
[]A\A]
x[]A\A]
L$0H
AUATUSH
~bA9
[]A\A]A^
[]A\A]A^
4?Hc
A\A]A^
[]A\A]A^
 []A\A]A^
AUATUSH
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
A(H9
H(H9
AVAUATUSH
/vMH
[]A\A]A^A_
L$8I
D$<H
|$8u
D$8H
t$	H
D$P<
D$0fE
L$8I
D$<H
d$8E
Hc3H
$< t
$< t
|$0D
L$8H
t$<H
|$@1
|$@H
T$HH
|$@H
T$HH
ffffff.
ffffff.
ffffff.
AVAUI
ATUL
D$H1
T$HdH3
X[]A\A]A^A_
,4L9l$
(L9d$
D$ I
T$8A
D$(I
AUATL
[]A\A]A^A_
L$ H
D$(E
D$ H
<6M9
4>M9
L;l$
D$(H9D$ M
[]A\A]1
[]A\A]A^
l$ H
l$ L
t$(L
|$0H
C taI
AUATI
([]A\A]A^A_
[]A\A]A^A_
fffff.
AUATI
D$ 1
|$,+
[]A\A]A^A_
|$ H
[]A\A]A^A_
|$ H
[]A\A]A^A_
AUATI
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
l$ L
d$(L
l$0L
t$8L
|$@H
ffffff.
AWAVAUATM
[]A\A]A^A_
s	M9
C	I9
M8I9
L;|$
l$ H
\$(H
l$0L
d$8L
l$@L
t$HL
|$PH
tiE)
l$ L
t$(L
|$0H
l$ H
l$ H
l$ H
l$ H
l$ H
l$ H
ffffff.
l$ H
l$ H
l$ H
ffffff.
AWAVM
AUATUH
[]A\A]A^A_
T$dH
D$hM
T$lH
L$PL
D$hH
T$ H
L$8H
d$0H
ffff.
tLA9
[]A\A]A^A_
[]A\A]A^A_
{@Hc
{XHc
Hc{PH
HcCPH
fffff.
fffff.
\$8H
l$@L
d$HL
l$PL
t$XL
|$`H
T$$H
t$(1
|$(1
fffff.
t$ H
ffff.
ffff.
l$ H
AVAUI
[]A\A]A^
tSIc
[]A\A]A^
fffff.
AUATUSH
xtA)
[]A\A]A^
[]A\A]A^
AVAUATUSH
T$PH
L$XL
D$`H
D$0H
D$@M
D$(E
T$(I
L$0I
D$0I
T$0M
[]A\A]A^A_
[]A\A]A^A_
T$09
T$<E
|$8H
T$81
L$<I
T$@M
D$0t
\$hH
l$pL
d$xL
D$LD
L$<H
D$XM
fff.
d$ L
l$(L
t$0H
ffffff.
l$ H
d$(L
l$0H
AUATUS
D$pH
T$hIc
D$pI
D$xL
|$p1
T$(H
T$ H
T$hH
T$pA
D$xL
|$p1
H9T$xt
[]A\A]A^A_
T$p%
T$8H
T$0H
T$(H
T$hH
T$ H
T$xH
D$XI
D$XL
D$xtTH
d$ L
l$(L
t$0H
T$,D
L$,D
\$0H
l$8L
d$@L
l$HL
t$PH
\$ H
l$(L
d$0H
fff.
	ujD
\$ H
l$(L
d$0L
l$8L
t$@H
fff.
D$5H
D$0L
D$/H
T$@H
\$XH
l$`L
d$hL
l$pL
t$xL
AUATI
~QHc
[]A\A]A^A_
t$0H
AVAUATA
T$(H
D$8H
|$0I
L$8H
T$ E1
t$DH
|$H1
D$0H
T$(A)
|$ H
X[]A\A]A^A_
[]A\A]A^A_
X[]A\A]A^A_
|$HH
[]A\A]A^A_
[]A\A]A^A_
AVAUATU
|$(H
t$$1
8[]A\A]A^A_
[]A\A]A^A_
8[]A\A]A^A_
|$(H
[]A\A]A^A_
[]A\A]A^A_
	uED
d$ H
	uED
d$ H
AUATUSH
([]A\A]
([]A\A]
D$!D
t$(H
L$(H
T$ I
\$0H
l$8L
d$@H
T$ E1
fffff.
%02x%02xI
; font-fH
yle="colI
amily:'MAVI
S Shell I
e="%02x%AUI
<img namATI
e:9pt; "UH
font-sizSH
Dlg 2'; H
<span st
|$PH
02x%02x%H
or:#%02xH
02x%02x%H
t$XH
02x%02x%H
L$`H
02x"f
|$PH
D$xH
D$x1
L9t$`Mc
HcT$hA
l$XA
<>vbH
T$xH
L9t$`Lc
l$XA
|$PH
|$PH
|$PH
|$PH
|$PH
|$PH
D$XL
|$PH
|$xH
T$@D
\$8LcT$@H
D$xKA
|$PH
T$@D
\$8LcT$@A
|$PH
T$@D
\$8LcT$@A
|$PH
T$@D
\$8LcT$@E
\$oE
H9D$`
|$PH
D$(C
D$ C
\$8H
\$oE
H9t$`
T$ht]H
|$PH
T$@D
\$8LcT$@H
D$xKD
T$hA
\$oE
D$xt	H
[]A\A]A^A_
|$PH
|$PH
|$PH
|$PH
|$PH
D$HD
T$@D
\$8LcT$@H
|$PH
D$HD
T$@D
\$8LcT$@H
|$PH
D$HD
T$@D
D$HD
\$8LcT$@
|$PH
D$HD
T$@D
\$8LcT$@H
AWAVAUATI
#t#@
[]A\A]A^A_
fffff.
fffff.
fffff.
fffff.
ffff.
ffff.
ffff.
ffff.
fffff.
ffff.
fffff.
fffff.
fffff.
fffff.
\$(H
l$0L
d$8L
l$@L
t$HL
|$PH
C(tOH
l$ H
d$(L
l$0L
t$8L
|$@H
C(tmH
l$0H
\$(L
d$8L
l$@L
t$HL
|$PH
T$`L
T$`H
C(tRH
l$0H
\$(L
d$8L
l$@L
t$HL
|$PH
C(t*H
l$ L
t$(L
|$0H
AVAUI
D9#u
[]A\A]A^A_
[]A\A]A^A_
[]A\
AVAUATUH
Hc<$
[]A\A]A^A_
AVAUATUH
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
ffff.
t'9+u
[]A\A]
[]A\A]
tdSH
d$ L
l$(L
t$0H
t<SH
ffff.
AVAUATUSH
t$ H
[]A\A]A^A_
ffffff.
[]A\
ffff.
fffff.
d$ L
l$(L
t$0H
ffffff.
AWAVAUATUSH
D3d$
D1L$
D3|$
D3d$
D3l$
D3l$
D3t$
D3t$
D3T$
D3L$
D3L$
D3L$
D3L$
D3|$
D3|$
D1L$
D1|$
D1l$
D1L$
D3\$
D3T$
D3T$
D3T$
D3d$
D3d$
D3t$
D3t$
D3l$
D3l$
D3|$
D3\$
D3D$
D1l$
D3d$
D1|$
D1T$
D1L$
D3d$
D3d$
D3\$
D3T$
D3L$
D3D$
[]A\A]A^A_
?w9J
l$ )
d$(L
l$0L
t$8L
|$@H
C@A9
#EgdH
D$x1
D$xdH3
AVAUATU
[]A\A]A^A_
t$pH
// gg_read_line() error on read (errno=%d, %s)
// gg_read_line() eof reached
// gg_connect() socket() failed (errno=%d, %s)
// gg_connect() bind() failed (errno=%d, %s)
// gg_connect() ioctl() failed (errno=%d, %s)
// gg_connect() connect() failed (errno=%d, %s)
// gg_connect() connect() in progress
Proxy-Authorization: Basic %s
** gg_connect(%s, %d, %d);
%s:%s
 n;^
Qkkbal
i]Wb
9a&g
MGiI
wn>Jj
#.zf
+o*7
-++ gg_dcc %s (fd=%d,len=%d)
 %.2x
** gg_dcc_free(%p);
SEND
write
** gg_dcc_watch_fd(%p);
read
// gg_dcc_watch_fd() dialin
** gg_dcc_transfer(%s, %d, %ld, %ld, %s);
// gg_dcc_transfer() invalid arguments
// gg_dcc_transfer() not enough memory
// gg_dcc_transfer() connection failed
** gg_dcc_fill_file_info2(%p, "%s", "%s");
// gg_dcc_fill_file_info2() invalid arguments
// gg_dcc_fill_file_info2() stat() failed (%s)
// gg_dcc_fill_file_info2() that's a directory
// gg_dcc_fill_file_info2() open() failed (%s)
// gg_dcc_fill_file_info2() short name "%s", dos name "%s"
// gg_dcc_get_file() handing over to gg_dcc_transfer()
// gg_dcc_send_file() handing over to gg_dcc_transfer()
// gg_dcc_voice_chat() handing over to gg_dcc_transfer()
** gg_create_dcc_socket(%d, %d);
// gg_create_dcc_socket() invalid arguments
// gg_create_dcc_socket() can't create socket (%s)
// gg_create_dcc_socket() trying port %d
// gg_create_dcc_socket() no free port found
// gg_create_dcc_socket() unable to listen (%s)
// gg_create_dcc_socket() bound to port %d
// gg_create_dcc_socket() not enough memory for struct
++ gg_dcc_voice_send(%p, %p, %d);
// gg_dcc_voice_send() invalid argument
// gg_dcc_voice_send() write() failed
// gg_dcc_watch_fd() invalid argument
// gg_dcc_watch_fd() not enough memory
// gg_dcc_watch_fd() can't accept() new connection (errno=%d, %s)
// gg_dcc_watch_fd() new direct connection from %s:%d
// gg_dcc_watch_fd() can't set nonblocking (errno=%d, %s)
// gg_dcc_watch_fd() not enough memory for client data
// gg_dcc_watch_fd() GG_READING_UIN_%d
// gg_dcc_watch_fd() read() failed (errno=%d, %s)
// gg_dcc_watch_fd() read() failed, connection broken
// gg_dcc_watch_fd() read() failed (%d bytes, %d needed)
// gg_dcc_watch_fd() GG_SENDING_ACK
// gg_dcc_watch_fd() write() failed (errno=%d, %s)
// gg_dcc_watch_fd() write() failed (%d needed, %d done)
// gg_dcc_watch_fd() GG_STATE_READING_TYPE
// gg_dcc_watch_fd() callback
// gg_dcc_watch_fd() unknown dcc type (%.4x) from %ld
// gg_dcc_watch_fd() GG_STATE_READING_REQUEST
// gg_dcc_watch_fd() file transfer request
// gg_dcc_watch_fd() voice chat request
// gg_dcc_watch_fd() unknown dcc request (%.4x) from %ld
// gg_dcc_watch_fd() GG_STATE_READING_FILE_INFO
// gg_dcc_watch_fd() GG_STATE_SENDING_FILE_ACK
// gg_dcc_watch_fd() out of memory
// gg_dcc_watch_fd() GG_STATE_SENDING_VOICE_ACK
// gg_dcc_watch_fd() GG_STATE_READING_FILE_HEADER
// gg_watch_fd() read() failed (errno=%d, %s)
// gg_dcc_watch_fd() transfer refused
// gg_dcc_watch_fd() empty chunk, EOF
// gg_dcc_watch_fd() GG_STATE_READING_VOICE_HEADER
// gg_dcc_watch_fd() peer breaking connection
// gg_dcc_watch_fd() unknown request (%.2x)
// gg_dcc_watch_fd() GG_STATE_READING_VOICE_SIZE
// gg_dcc_watch_fd() invalid voice frame size (%d)
// gg_dcc_watch_fd() out of memory for voice frame
// gg_dcc_watch_fd() GG_STATE_READING_VOICE_DATA
// gg_dcc_watch_fd() GG_STATE_CONNECTING
// gg_dcc_watch_fd() connection failed (fd=%d,errno=%d(%s),foo=%d,res=%d(%s))
// gg_dcc_watch_fd() connected, sending uins
// gg_dcc_watch_fd() GG_STATE_READING_ACK
// gg_dcc_watch_fd() did't get ack
// gg_dcc_watch_fd() GG_STATE_SENDING_VOICE_REQUEST
// gg_dcc_watch_fd() GG_STATE_SENDING_REQUEST
// gg_dcc_watch_fd() GG_STATE_SENDING_FILE_INFO
// gg_dcc_watch_fd() GG_STATE_READING_FILE_ACK
// gg_dcc_watch_fd() GG_STATE_READING_VOICE_ACK
// invalid reply (%.2x), connection refused
// gg_dcc_watch_fd() GG_STATE_SENDING_FILE_HEADER
// gg_dcc_watch_fd() GG_STATE_SENDING_FILE
// gg_dcc_watch_fd() offset=%d, size=%d
// gg_dcc_watch_fd() read() reached eof on empty file
// gg_dcc_watch_fd() offset >= size, finished
// gg_dcc_watch_fd() read() failed. (errno=%d, %s)
// gg_dcc_watch_fd() read() reached eof
// gg_dcc_watch_fd() read() too much (read=%d, ofs=%d, size=%d)
// gg_dcc_watch_fd() reached EOF after cutting
// gg_dcc_watch_fd() write() failed (%s)
// gg_dcc_watch_fd() write() failed (connection reset)
// gg_dcc_watch_fd() chunk finished
// gg_dcc_watch_fd() GG_STATE_GETTING_FILE
// gg_dcc_watch_fd() ofs=%d, size=%d, read()=%d
// gg_dcc_watch_fd() write() failed (%d:fd=%d:res=%d:%s)
// gg_dcc_watch_fd() GG_STATE_???
** gg_dcc7_session_find(%p, ..., %d)
** gg_dcc7_postauth_fixup(%p)
// gg_dcc7_postauth_fixup() invalid parameters
** gg_dcc7_session_add(%p, %p)
// gg_dcc7_session_add() invalid parameters
// gg_dcc7_connect() connection failed
// gg_dcc7_connect() invalid parameters
** gg_dcc7_listen_and_send_info(%p)
// gg_dcc7_listen() can't create socket (%s)
// gg_dcc7_listen() unable to bind to %s:%d
// gg_dcc7_listen() unable to bind to port %d
// gg_dcc7_listen() unable to listen (%s)
// dcc7_listen_and_send_info() sending IP address %s and port %d
// gg_dcc7_reverse_connect() already reverse connection
// gg_dcc7_reverse_connect() timeout, trying reverse connection
** gg_dcc7_reverse_connect(%p)
// gg_dcc7_send_file_common() invalid parameters
// gg_dcc7_send_file_common() not enough memory
** gg_dcc7_request_id(%p, %d)
// gg_dcc7_request_id() not connected
** gg_dcc7_send_file(%p, %d, "%s", %p)
// gg_dcc7_send_file() invalid parameters
// gg_dcc7_send_file() stat() failed (%s)
// gg_dcc7_send_file() that's a directory
// gg_dcc7_send_file() open() failed (%s)
** gg_dcc7_send_file_fd(%p, %d, %d, %u, "%s", %p)
// gg_dcc7_accept() invalid parameters
// gg_dcc7_reject() invalid parameters
** gg_dcc7_handle_id(%p, %p, %p, %d)
// checking dcc %p, state %d, type %d
** gg_dcc7_handle_accept(%p, %p, %p, %d)
// gg_dcc7_handle_accept() unknown dcc session
// gg_dcc7_handle_accept() invalid state
** gg_dcc7_handle_info(%p, %p, %p, %d)
// gg_dcc7_handle_info() received address: %s, hash: %s
// gg_dcc7_handle_info() unknown dcc session
// gg_dcc7_handle_info() state is already connected
// gg_dcc7_handle_info() invalid IP address
// gg_dcc7_handle_info() invalid IP port
// gg_dcc7_handle_info() waiting for info so send one
// gg_dcc7_handle_info() unknown info packet
** gg_dcc7_get_relay_addr(%p)
// gg_dcc7_get_relay_addr() invalid parameters
// gg_dcc7_get_relay_addr() resolving failed (errno=%d, %s)
// gg_dcc7_handle_info() unhandled transfer type (%d)
// gg_dcc7_handle_info() unable to retrieve relay address
** gg_dcc7_handle_reject(%p, %p, %p, %d)
// gg_dcc7_handle_reject() unknown dcc session
// gg_dcc7_handle_reject() invalid state
// gg_dcc7_watch_fd() invalid parameters
// gg_dcc7_watch_fd() not enough memory
// gg_dcc7_watch_fd() GG_STATE_LISTENING
// gg_dcc7_watch_fd() accept() failed (%s)
// gg_dcc7_watch_fd() connection from %s:%d
// gg_dcc7_watch_fd() can't set nonblocking (%s)
// gg_dcc7_watch_fd() GG_STATE_CONNECTING
// gg_dcc7_watch_fd() connection failed (%s)
// gg_dcc7_watch_fd() no relay available
// gg_dcc7_watch_fd() connected, sending id
// gg_dcc7_watch_fd() GG_STATE_READING_ID
// gg_dcc7_watch_fd() read() failed (%d, %s)
// gg_dcc7_watch_fd() invalid id
// gg_dcc7_watch_fd() GG_SENDING_ID
// gg_dcc7_watch_fd() write() failed (%d, %s)
// gg_dcc7_watch_fd() GG_STATE_SENDING_FILE (offset=%d, size=%d)
// gg_dcc7_watch_fd() offset >= size, finished
// gg_dcc7_watch_fd() lseek() failed (%s)
// gg_dcc7_watch_fd() read() failed (res=%d, %s)
// gg_dcc7_watch_fd() write() failed (%s)
// gg_dcc7_watch_fd() finished
// gg_dcc7_watch_fd() GG_STATE_GETTING_FILE (offset=%d, size=%d)
// gg_dcc7_watch_fd() read() failed (fd=%d, res=%d, %s)
// gg_dcc7_watch_fd() write() failed (fd=%d, res=%d, %s)
// gg_dcc7_watch_fd() GG_STATE_RESOLVING_RELAY
// gg_dcc7_watch_fd() resolving failed
// gg_dcc7_watch_fd() resolved, connecting to %s:%d
// gg_dcc7_watch_fd() connection failed (errno=%d, %s), critical
// gg_dcc7_watch_fd() GG_STATE_CONNECTING_RELAY
// gg_dcc7_watch_fd() connection failed (errno=%d, %s)
// gg_dcc7_watch_fd() send pkt(0x%.2x)
// gg_dcc7_watch_fd() sending failed
// gg_dcc7_watch_fd() GG_STATE_READING_RELAY
// gg_dcc7_wathc_fd() invalid reply
// gg_dcc7_get_relay() read pkt(0x%.2x)
// gg_dcc7_watch_fd() not enough memory
// gg_dcc7_watch_fd() GG_STATE_???
** gg_dcc7_session_remove(%p, %p)
** gg_dcc7_handle_new(%p, %p, %p, %d)
// gg_dcc7_handle_new() not enough memory
// gg_dcc7_handle_new() unable to add to session
// gg_dcc7_handle_packet() not enough memory
// gg_dcc7_handle_new() unknown dcc type (%d) from %ld
** gg_dcc7_connect(%p)
** gg_dcc7_listen(%p, %d)
%s %d
** gg_dcc7_accept(%p, %d)
** gg_dcc7_reject(%p, %d)
relay.gadu-gadu.pl
** gg_dcc7_watch_fd(%p)
//    %s %d %d
** gg_dcc7_free(%p)
%.4x: 
 %02x
GG_STATE_IDLE
GG_STATE_RESOLVING
GG_STATE_CONNECTING
GG_STATE_READING_DATA
GG_STATE_ERROR
GG_STATE_CONNECTING_HUB
GG_STATE_CONNECTING_GG
GG_STATE_READING_KEY
GG_STATE_READING_REPLY
GG_STATE_CONNECTED
GG_STATE_SENDING_QUERY
GG_STATE_READING_HEADER
GG_STATE_PARSING
GG_STATE_DONE
GG_STATE_LISTENING
GG_STATE_READING_UIN_1
GG_STATE_READING_UIN_2
GG_STATE_SENDING_ACK
GG_STATE_READING_ACK
GG_STATE_READING_REQUEST
GG_STATE_SENDING_REQUEST
GG_STATE_SENDING_FILE_INFO
GG_STATE_READING_FILE_INFO
GG_STATE_SENDING_FILE_ACK
GG_STATE_READING_FILE_ACK
GG_STATE_SENDING_FILE_HEADER
GG_STATE_READING_FILE_HEADER
GG_STATE_GETTING_FILE
GG_STATE_SENDING_FILE
GG_STATE_READING_VOICE_ACK
GG_STATE_READING_VOICE_HEADER
GG_STATE_READING_VOICE_SIZE
GG_STATE_READING_VOICE_DATA
GG_STATE_SENDING_VOICE_ACK
GG_STATE_READING_TYPE
GG_STATE_TLS_NEGOTIATION
GG_STATE_REQUESTING_ID
GG_STATE_WAITING_FOR_ACCEPT
GG_STATE_WAITING_FOR_INFO
GG_STATE_READING_ID
GG_STATE_SENDING_ID
GG_STATE_RESOLVING_GG
GG_STATE_RESOLVING_RELAY
GG_STATE_CONNECTING_RELAY
GG_STATE_READING_RELAY
GG_STATE_DISCONNECTING
GG_EVENT_NONE
GG_EVENT_MSG
GG_EVENT_NOTIFY
GG_EVENT_NOTIFY_DESCR
GG_EVENT_STATUS
GG_EVENT_ACK
GG_EVENT_PONG
GG_EVENT_CONN_FAILED
GG_EVENT_CONN_SUCCESS
GG_EVENT_DISCONNECT
GG_EVENT_DCC_NEW
GG_EVENT_DCC_ERROR
GG_EVENT_DCC_DONE
GG_EVENT_DCC_CLIENT_ACCEPT
GG_EVENT_DCC_CALLBACK
GG_EVENT_DCC_NEED_FILE_INFO
GG_EVENT_DCC_NEED_FILE_ACK
GG_EVENT_DCC_NEED_VOICE_ACK
GG_EVENT_DCC_VOICE_DATA
GG_EVENT_PUBDIR50_READ
GG_EVENT_PUBDIR50_WRITE
GG_EVENT_STATUS60
GG_EVENT_NOTIFY60
GG_EVENT_USERLIST
GG_EVENT_IMAGE_REQUEST
GG_EVENT_IMAGE_REPLY
GG_EVENT_DCC_ACK
GG_EVENT_DCC7_NEW
GG_EVENT_DCC7_ACCEPT
GG_EVENT_DCC7_REJECT
GG_EVENT_DCC7_CONNECTED
GG_EVENT_DCC7_ERROR
GG_EVENT_DCC7_DONE
GG_EVENT_DCC7_PENDING
GG_EVENT_XML_EVENT
GG_EVENT_DISCONNECT_ACK
GG_EVENT_TYPING_NOTIFICATION
GG_EVENT_USER_DATA
GG_EVENT_MULTILOGON_MSG
GG_EVENT_MULTILOGON_INFO
GG_EVENT_USERLIST100_VERSION
GG_EVENT_USERLIST100_REPLY
GG_STATE_READING_PRE_FILE_INFO
GG_STATE_SENDING_VOICE_REQUEST
GG_EVENT_PUBDIR50_SEARCH_REPLY
no error message provided
1.2.5
// gg_deflate() deflateInit() failed (%d)
// gg_deflate() not enough memory for output data (%d)
// gg_deflate() deflate() failed (ret=%d, msg=%s)
// gg_inflate() inflateInit() failed (%d)
// gg_inflate() not enough memory for output data (%d)
// gg_inflate() inflate() failed (ret=%d, msg=%s)
 &   ! ?
** gg_event_free(%p);
proxy
http://appmsg.gadu-gadu.pl
** gg_watch_fd(%p);
10.1.0.11070
HTTP/1.
// gg_watch_fd() read error
notoperating
// gg_watch_fd() connected
CONNECT %s:%d HTTP/1.0
//   %s
//   cert subject: %s
//   cert issuer: %s
//   %s
// gg_watch_fd() not enough memory for event data
// gg_watch_fd() sending %d bytes of queued data
// gg_watch_fd() write() failed (errno=%d, %s)
// gg_watch_fd() sent all queued data
// gg_watch_fd() sent %d bytes of queued data, %d bytes left
// gg_watch_fd() GG_STATE_RESOLVING
// gg_watch_fd() resolving failed
// gg_watch_fd() resolved, connecting to %s:%d
// gg_watch_fd() connection failed (errno=%d, %s), critical
// gg_watch_fd() GG_STATE_CONNECTING_HUB
// gg_watch_fd() connection to %s failed (errno=%d, %s)
// gg_watch_fd() connected to hub, sending query
// gg_watch_fd() out of memory for client version
GET %s/appsvc/appmsg_ver10.asp?fmnumber=%u&fmt=2&lastmsg=%d&version=%s&age=2&gender=1 HTTP/1.0
Connection: close
Host: appmsg.gadu-gadu.pl
GET %s/appsvc/appmsg_ver8.asp?fmnumber=%u&fmt=2&lastmsg=%d&version=%s HTTP/1.0
Host: appmsg.gadu-gadu.pl
=> -----BEGIN-HTTP-QUERY-----
=> -----END-HTTP-QUERY-----
// gg_watch_fd() sending query failed
// gg_watch_fd() GG_STATE_READING_DATA
// gg_watch_fd() received http header (%s)
// gg_watch_fd() invalid http reply, connection failed
// gg_watch_fd() out of memory for system message, ignoring
// gg_watch_fd() received http data (%s)
// gg_watch_fd() invalid response
// gg_watch_fd() service unavailable
// gg_watch_fd() connection to proxy failed (errno=%d, %s)
// gg_login() resolving failed (errno=%d, %s)
// gg_watch_fd() connection failed (errno=%d, %s), trying https
// gg_watch_fd() connection failed (errno=%d, %s)
// gg_watch_fd() GG_STATE_RESOLVING_GG
// gg_watch_fd() GG_STATE_CONNECTING_GG
// gg_watch_fd() proxy request:
//   %s
// gg_watch_fd() can't send proxy request
// gg_watch_fd() GG_STATE_TLS_NEGOTIATION
// gg_watch_fd() TLS handshake GNUTLS_E_AGAIN
// gg_watch_fd() TLS handshake GNUTLS_E_INTERRUPTED
// gg_watch_fd() TLS handshake error %d
// gg_watch_fd() TLS negotiation succeded:
//   cipher: VERS-%s:%s:%s:%s:COMP-%s
// gg_watch_fd() GG_STATE_READING_KEY
// gg_watch_fd() GG_STATE_READING_REPLY
// gg_watch_fd() GG_STATE_CONNECTED
// gg_watch_fd() GG_STATE_DISCONNECTING
// gg_watch_fd() proxy response:
//   %s
// gg_watch_fd_connected() gg_recv_packet failed (errno=%d, %s)
// gg_watch_fd_connected() received logoff acknowledge
// gg_watch_fd_connected() received disconnection warning
// gg_watch_fd_connected() received a pong
// gg_watch_fd_connected() received userlist 100 version
// gg_watch_fd_connected() received a message ack
// gg_watch_fd() login succeded
// gg_watch_fd_connected() received multilogon info
// gg_handle_multilogon_info() malformed packet (1)
// gg_handle_multilogon_info() out of memory (%d*%d)
// gg_handle_multilogon_info() malformed packet (2)
// gg_handle_multilogon_info() malformed packet (3)
// gg_handle_multilogon_info() out of memory (%d)
// gg_watch_fd_connected() received user data
// gg_session_handle_user_data() malformed packet (1)
// gg_session_handle_user_data() out of memory (%d*%d)
// gg_session_handle_user_data() malformed packet (2)
// gg_session_handle_user_data() malformed packet (3)
// gg_session_handle_user_data() out of memory (%d)
// gg_session_handle_user_data() malformed packet (4)
// gg_session_handle_user_data() malformed packet (5)
        key="%s", type=%d, value="%s"
// gg_watch_fd_connected() received a notify reply
// gg_watch_fd_connected() out of memory
// gg_watch_fd_connected() received a status change
// gg_watch_fd_connected() received userlist reply
// gg_handle_recv_msg_options() packet out of bounds (1)
// gg_handle_recv_msg_options() packet out of bounds (1.5)
// gg_handle_recv_msg_options() e->event.msg.recipients already exist
// gg_handle_recv_msg_options() not enough memory for recipients data
// gg_handle_recv_msg_options() packet out of bounds (2)
// gg_handle_recv_msg_options() e->event.msg.formats already exist
// gg_handle_recv_msg_options() not enough memory for richtext data
// gg_handle_recv_msg_options() packet out of bounds (3)
// gg_handle_recv_msg() packet out of bounds (3)
// gg_handle_recv_msg_options() mixed options (1)
// gg_handle_recv_msg_options() mixed options (2)
// gg_handle_recv_msg() packet out of bounds (4)
// gg_image_queue_parse() malformed packet from %d, unlimited filename
// gg_image_queue_parse() out of memory
// gg_handle_recv_msg() unknown payload 0x%.2x
// gg_image_queue_parse() unknown image from %d, size=%d, crc32=%.8x
** gg_session_send_msg_ack(%p);
** gg_handle_recv_msg80(%p, %d, %p);
// gg_handle_recv_msg80() oops, silently ignoring the bait
// gg_handle_recv_msg80() malformed packet, message out of bounds (0)
// gg_handle_recv_msg80() malformed packet, attr out of bounds (1)
// gg_handle_recv_msg80() malformed packet, message out of bounds (2)
// gg_handle_recv_msg80() malformed packet, message out of bounds (3)
** gg_handle_recv_msg(%p, %d, %p);
// gg_handle_recv_msg() oops, silently ignoring the bait
// gg_handle_recv_msg() received ctcp packet
// gg_handle_recv_msg() malformed packet, message out of bounds (0)
// gg_watch_fd_connected() received dcc7 info
// gg_watch_fd_connected() received dcc7 reject
// gg_watch_fd_connected() received dcc7 request
// gg_watch_fd_connected() received dcc7 accept
// gg_watch_fd_connected() received dcc7 id packet
// gg_watch_fd_connected() received pubdir/search reply
// gg_watch_fd() login failed
// gg_watch_fd() too many incorrect password attempts
// gg_watch_fd_connected() received userlist 100 reply
// gg_handle_userlist_100_reply() gg_inflate() failed
// gg_watch_fd_connected() received XML event
// gg_watch_fd_connected() received typing notification
// gg_watch_fd() challenge %.4x --> GG32 hash %.8x
// gg_watch_fd() challenge %.4x --> SHA1 hash: %s
// gg_watch_fd() detected address to %s
// gg_watch_fd() unable to detect address
// gg_watch_fd() sending GG_LOGIN80 packet
// gg_watch_fd() sending GG_LOGIN70 packet
// gg_watch_fd() sending packet failed. (errno=%d, %s)
// gg_session_handle_packet(%d, %p, %d)
// gg_session_handle_packet() packet 0x%02x unexpected in state %d
// gg_session_handle_packet() packet 0x%02x too short (%d bytes)
// gg_session_handle_packet() unhandled packet 0x%02x, len %d, state %d
type=%d, count=%d
    uin=%d, count=%d
userlist_reply=%p, len=%d
Gadu-Gadu Client Build 
255.255.255.255
** gg_http_watch_fd(%p);
=> http, resolving done
=> http, connecting to %s:%d
Content-length: 
=> http, body_size=%d
%s %s HTTP/1.0
// gg_http_watch_fd() invalid arguments
=> http, resolver thread failed
=> http, connection failed (errno=%d, %s)
=> http, async connection failed (errno=%d, %s)
=> http, connected, sending request
=> http, write() failed (len=%d, res=%d, errno=%d)
=> http, partial header sent (led=%d, sent=%d)
=> http, request sent (len=%d)
=> http, reading header failed (errno=%d)
=> http, connection reset by peer
=> http, read %d bytes of header
=> http, not enough memory for header
=> http, header_buf=%p, header_size=%d
=> http, got all header (%d bytes, %d left)
=> -----BEGIN-HTTP-HEADER-----
=> -----END-HTTP-HEADER-----
=> http, didn't get 200 OK -- no results
=> http, content-length not found
=> http, oversized reply (%d bytes needed, %d bytes left)
=> http, not enough memory (%d bytes for body_buf)
=> http, reading body failed (errno=%d)
=> http, we're done, closing socket
=> http, connection closed while reading (have %d, need %d)
=> http, read %d bytes of body
=> http, too much data (%d bytes, %d needed), enlarging buffer
=> http, not enough memory for data (%d needed)
=> body_done=%d, body_size=%d
// gg_http_connect() invalid arguments
%s http://%s:%d%s HTTP/1.0
%s%s
// gg_http_connect() not enough memory for query
// gg_http_connect() resolver failed
// gg_http_connect() resolver = %p
// gg_http_connect() host not found
// gg_http_connect() connection failed (errno=%d, %s)
// gg_http_connect() some strange error
1.11.0
** gg_recv_packet(%p);
** gg_login(%p);
** gg_ping(%p);
** gg_logoff(%p);
** gg_change_status(%p, %d);
** gg_notify(%p, %p, %d);
// gg_recv_packet() header recv: resuming last read (%d bytes left)
// gg_recv_packet() header recv(%d,%p,%d) = %d
// gg_recv_packet() header recv() failed: connection broken
// gg_recv_packet() header recv() incomplete header received
// gg_recv_packet() header recv() not enough memory
// gg_recv_packet() header recv() failed: errno=%d, %s
// gg_recv_packet() invalid packet length (%d)
// gg_recv_packet() resuming last gg_recv_packet()
// gg_recv_packet(type=0x%.2x, length=%d)
// gg_recv_packet() not enough memory for packet data
// gg_recv_packet() body recv(%d,%p,%d) = %d
// gg_recv_packet() body recv() failed: connection broken
// gg_recv_packet() body recv() failed (errno=%d, %s)
// gg_recv_packet() %d bytes received, %d left
** gg_send_packet(%p, 0x%.2x, ...);
// gg_send_packet() not enough memory for packet header
// gg_send_packet() not enough memory for payload
// gg_send_packet(type=0x%.2x, length=%d)
// gg_send_packet() write() failed. res = %d, errno = %d (%s)
// gg_send_packet() partial write(), %d sent, %d left, %d total left
** gg_login(%p: [uin=%u, async=%d, ...]);
// gg_login() not enough memory for session data
// gg_login() invalid arguments. uin and password needed
// gg_login() not enough memory for password
// gg_login() invalid arguments. unknown hash type (%d)
// gg_login() invalid arguments. unsupported resolver type (%d)
// gg_login() not enough memory for status
// gg_login() out of memory for GnuTLS session
// gg_login() host "%s" not found
// gg_login() connection failed (errno=%d, %s)
// gg_login() critical error in gg_watch_fd()
// gg_login() could not login
// gg_login() direct connection failed (errno=%d, %s)
** gg_change_status_descr(%p, %d, "%s");
** gg_change_status_descr_time(%p, %d, "%s", %d);
** gg_change_status_flags(%p, 0x%08x);
** gg_send_message_confer_richtext(%p, %d, %d, %p, %p, %p, %d);
** gg_send_message_confer(%p, %d, %d, %p, %p);
** gg_send_message_richtext(%p, %d, %u, %p, %p, %d);
** gg_send_message(%p, %d, %u, %p)
** gg_send_message_ctcp(%p, %d, %u, ...);
** gg_image_request(%p, %d, %u, 0x%.4x);
// gg_image_request() not enough memory for image queue
// gg_image_request() not enough memory for image
** gg_image_reply(%p, %d, "%s", %p, %d);
** gg_notify_ex(%p, %p, %p, %d);
** gg_add_notify_ex(%p, %u, %d);
** gg_remove_notify_ex(%p, %u, %d);
// gg_userlist100_request() gg_deflate() failed
</u>
</i>
</b>
</span>
&amp;
&lt;
&gt;
&apos;
&quot;
<br>
&nbsp;
// gg_userlist_get() is obsolete. use gg_userlist_request() instead!
// gg_userlist_put() is obsolete. use gg_userlist_request() instead!
// gg_userlist_remove() is obsolete. use gg_userlist_request() instead!
// gg_search() is obsolete. use gg_search50() instead!
// gg_register() is obsolete. use gg_register3() instead!
// gg_register2() is obsolete. use gg_register3() instead!
// gg_unregister() is obsolete. use gg_unregister3() instead!
// gg_unregister2() is obsolete. use gg_unregister3() instead!
// gg_change_passwd() is obsolete. use gg_change_passwd4() instead!
// gg_change_passwd2() is obsolete. use gg_change_passwd4() instead!
// gg_change_passwd3() is obsolete. use gg_change_passwd4() instead!
// gg_remind_passwd() is obsolete. use gg_remind_passwd3() instead!
// gg_remind_passwd2() is obsolete. use gg_remind_passwd3() instead!
// gg_change_info() is obsolete. use gg_pubdir50() instead
register.gadu-gadu.pl
=> token, http failure
=> token body "%s"
=> token, parsing failed
http://
%s?tokenid=%s
=> token, url parsing failed
%d %d %d
=> pubdir, http failure
=> pubdir, let's parse "%s"
success
results
=> pubdir, success (uin=%d)
=> pubdir, error.
=> register, NULL parameter
=> register, %s
/appsvc/fmregister3.asp
POST
deletedaccount@gadu-gadu.pl
=> unregister, %s
=> change, NULL parameter
=> change, %s
=> remind, NULL parameter
=> remind, %s
/appsvc/fmsendpwd3.asp
retr.gadu-gadu.pl
/appsvc/regtoken.asp
=> token, watch_fd issued on failed session
=> token, not enough memory for results
=> token, not enough memory for token url
Host: %s
User-Agent: Mozilla/4.7 [en] (Win98; I)
=> token, gg_http_connect() failed mysteriously
=> token, not enough memory for token data
=> pubdir, watch_fd issued on failed session
=> pubdir, not enough memory for results
Tokens okregisterreply_packet.reg.dwUserId=
=> pubdir, success (okregisterreply, uin=%d)
=> register, not enough memory for form fields
pwd=%s&email=%s&tokenid=%s&tokenval=%s&code=%u
=> register, not enough memory for form query
Host: register.gadu-gadu.pl
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/4.7 [en] (Win98; I)
Content-Length: %d
Pragma: no-cache
=> register, not enough memory for query
=> register, gg_http_connect() failed mysteriously
=> unregister, NULL parameter
=> unregister, not enough memory for form fields
fmnumber=%d&fmpwd=%s&delete=1&pwd=%s&email=deletedaccount@gadu-gadu.pl&tokenid=%s&tokenval=%s&code=%u
=> unregister, not enough memory for form query
=> unregister, not enough memory for query
=> unregister, gg_http_connect() failed mysteriously
=> change, not enough memory for form fields
fmnumber=%d&fmpwd=%s&pwd=%s&email=%s&tokenid=%s&tokenval=%s&code=%u
=> change, not enough memory for query
=> change, gg_http_connect() failed mysteriously
=> remind, not enough memory for form fields
userid=%d&code=%u&tokenid=%s&tokenval=%s&email=%s
Host: retr.gadu-gadu.pl
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/4.7 [en] (Win98; I)
Content-Length: %d
Pragma: no-cache
=> remind, not enough memory for query
=> remind, gg_http_connect() failed mysteriously
Host: register.gadu-gadu.pl
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/4.7 [en] (Win98; I)
Content-Length: 0
Pragma: no-cache
** gg_pubdir50_add_n(%p, %d, "%s", "%s");
// gg_pubdir50_add_n() out of memory
// gg_pubdir50_new() out of memory
** gg_pubdir50_seq_set(%p, %d);
// gg_pubdir50_seq_set() invalid arguments
// gg_pubdir50() invalid arguments
// gg_pubdir50() not connected
// gg_pubdir50() out of memory (%d bytes)
** gg_pubdir50_handle_reply_sess(%p, %p, %p, %d);
// gg_pubdir50_handle_reply() invalid arguments
// gg_pubdir50_handle_reply() packet too short
// gg_pubdir50_handle_reply() unable to allocate reply
// gg_pubdir50_handle_reply() premature end of packet
** gg_pubdir50_get(%p, %d, "%s");
// gg_pubdir50_get() invalid arguments
** gg_pubdir50_new(%d);
** gg_pubdir50(%p, %p);
nextstart
** gg_resolver_pthread_start(%p, %p, "%s");
// gg_resolver_pthread_start() invalid arguments
// gg_resolver_pthread_start() out of memory for resolver data
// gg_resolver_pthread_start() unable to create pipes (errno=%d, %s)
// gg_resolver_pthread_start() out of memory
// gg_resolver_pthread_start() unable to create thread
// gg_resolver_pthread_start() %p
// gg_resolver_run() count = %d
** gg_resolver_fork_start(%p, %p, "%s");
// gg_resolver_fork_start() invalid arguments
// gg_resolver_fork_start() out of memory for resolver data
// gg_resolver_fork_start() unable to create pipes (errno=%d, %s)
// gg_resolver_fork_start() %p
// gg_resolver_run(%d, %s)
;*3$"
zPLR
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
libgadu.so.3.13.0.debug
.data
.rodata
.shstrtab
.dynamic
.note.gnu.build-id
.gcc_except_table
.eh_frame
.gnu.hash
.fini
.gnu_debuglink
.dynsym
.gnu.version
.rela.dyn
.data.rel.ro
.gnu.version_r
.jcr
.eh_frame_hdr
.dynstr
.bss
.init
.rela.plt
.got.plt
.got
.text
.fini_array
.init_array
