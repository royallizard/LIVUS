__gmon_start__
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
pcre_free
buffer_free
calloc
buffer_init
config_insert_values_global
array_get_element_klen
buffer_is_equal_string
buffer_copy_string_len
array_is_vlist
pcre_compile
buffer_copy_buffer
malloc
realloc
log_error_write
buffer_string_set_length
__stack_chk_fail
strcmp
open64
read
buffer_append_string_encoded
buffer_append_string_len
close
buffer_append_string
pathconf
memcpy
opendir
readdir64
strlen
pcre_exec
__xstat64
closedir
buffer_append_string_buffer
localtime_r
strftime
li_itostrn
attr_get
stat_cache_mimetype_by_ext
response_header_overwrite
chunkqueue_append_buffer
strchr
log_failed_assert
__errno_location
strerror
config_check_cond
stat_cache_get_entry
buffer_reset
mod_dirlisting_plugin_init
buffer_init_string
libpcre.so.1
libc.so.6
_edata
__bss_start
_end
mod_dirlisting.so
GLIBC_2.14
GLIBC_2.4
GLIBC_2.2.5
u+UH
AUATUSH
[]A\A]A^A_
AVAUATUSH
|$0H
|$`H
t$8H
L$8H
D$TH
D$XH
|$(H
T$hH
D$8H
T$@H
L$0H
D$(H
D$ L
\$HH
[]A\A]A^A_
|$0L
|$0L
AUATUSH
D$#+D$
~eHcl$
8[]A\A]A^A_
AUATUSH
[]A\A]
AWAVAUATUSH
|$0H
D$HH
|$HI
D$ H
D$(H
D$8f.
tNE1
M9|$
H;D$
|$XH
T$ H
D$(%
ED$8M
T$hL
D$`L
L$@H
L$PL
D$`H
L$@L
T$hI
[]A\A]A^A_
D$hM
L$pH
>/t\H
D$hH
l$ L
H;l$
l$ H
D$pH
l$xI
D$8H
D$@H
D$`H
D$@E1
L$(L
D$ D
L9t$8
|$XH
D$0H
L$`E1
T$PH
 KMGTPE
|$0A
l$xH
>/t]H
t"<Cu
<Atv<D
L$PI
D$@L
L$PH
AWAVAUATUSH
([]A\A]A^A_
@@L;h
dir-listing.exclude
mod_dirlisting.c
unexpected type for key: 
sssbs
](string)
pcre-compile failed for
enable
README.txt
disable
HEADER.txt
dir-listing.activate
dir-listing.hide-dotfiles
dir-listing.external-css
dir-listing.encoding
dir-listing.show-readme
dir-listing.hide-readme-file
dir-listing.show-header
dir-listing.hide-header-file
server.dir-listing
dir-listing.set-footer
dir-listing.encode-readme
dir-listing.encode-header
dir-listing.auto-layout
dir-listing.external-js
<pre class="
</pre>
application/octet-stream
opendir failed:
assertion failed: dirs.ent
assertion failed: files.ent
assertion failed: list->ent
<meta charset="
<title>Index of 
</title>
</head>
<body>
<h2>Index of 
%Y-%b-%d %H:%M:%S
</a>/</td><td class="m">
<tr><td class="n"><a href="
</a></td><td class="m">
</td><td class="s">
</td><td class="t">
</td></tr>
</tbody>
</table>
</div>
<div class="foot">
"></script>
init_sort(
// -->
</script>
</body>
</html>
text/html; charset=
text/html
Content-Type
URI          :
stat_cache_get_entry failed: 
aborted
dirlisting
unexpected type for dir-listing.exclude; expected list of "regex"
assertion failed: NULL != path
execution error while matching:
<!DOCTYPE html>
<html>
<head>
<meta name="viewport" content="initial-scale=1">
<link rel="stylesheet" type="text/css" href="
<style type="text/css">
a, a:active {text-decoration: none; color: blue;}
a:visited {color: #48468F;}
a:hover, a:focus {text-decoration: underline; color: red;}
body {background-color: #F5F5F5;}
h2 {margin-bottom: 12px;}
table {margin-left: 12px;}
th, td { font: 90% monospace; text-align: left;}
th { font-weight: bold; padding-right: 14px; padding-bottom: 3px;}
td {padding-right: 14px;}
td.s, th.s {text-align: right;}
div.list { background-color: white; border-top: 1px solid #646464; border-bottom: 1px solid #646464; padding-top: 10px; padding-bottom: 14px;}
div.foot { font: 90% monospace; color: #787878; padding-top: 4px;}
</style>
</h2>
<div class="list">
<table summary="Directory Listing" cellpadding="0" cellspacing="0">
<thead><tr><th class="n">Name</th><th class="m">Last Modified</th><th class="s">Size</th><th class="t">Type</th></tr></thead>
<tbody>
<tr class="d"><td class="n"><a href="../">..</a>/</td><td class="m">&nbsp;</td><td class="s">- &nbsp;</td><td class="t">Directory</td></tr>
<tr class="d"><td class="n"><a href="
</td><td class="s">- &nbsp;</td><td class="t">Directory</td></tr>
<script type="text/javascript" src="
<script type="text/javascript">
// <!--
-- handling the request as Dir-Listing
function init_sort(init_sort_column, ascending) {
 var tables = document.getElementsByTagName("table");
 for (var i = 0; i < tables.length; i++) {
  var table = tables[i];
  //var c = table.getAttribute("class")
  //if (-1 != c.split(" ").indexOf("sort")) {
   var row = table.rows[0].cells;
   for (var j = 0; j < row.length; j++) {
    var n = row[j];
    if (n.childNodes.length == 1 && n.childNodes[0].nodeType == 3) {
     var link = document.createElement("a");
     var title = n.childNodes[0].nodeValue.replace(/:$/, "");
     link.appendChild(document.createTextNode(title));
     link.setAttribute("href", "#");
     link.setAttribute("class", "sortheader");
     link.setAttribute("onclick", "resort(this);return false;");
     var arrow = document.createElement("span");
     arrow.setAttribute("class", "sortarrow");
     arrow.appendChild(document.createTextNode(":"));
     link.appendChild(arrow)
     n.replaceChild(link, n.firstChild);
    }
   }
   var lnk = row[init_sort_column].firstChild;
   if (ascending) {
    var span = lnk.childNodes[1];
    span.setAttribute('sortdir','down');
   }
   resort(lnk);
  //}
var click_column;
var name_column = 0;
var date_column = 1;
var size_column = 2;
var type_column = 3;
var prev_span = null;
if (typeof(String.prototype.localeCompare) === 'undefined') {
 String.prototype.localeCompare = function(str, locale, options) {
   return ((this == str) ? 0 : ((this > str) ? 1 : -1));
if (typeof(String.prototype.toLocaleUpperCase) === 'undefined') {
 String.prototype.toLocaleUpperCase = function() {
  return this.toUpperCase();
function get_inner_text(el) {
 if((typeof el == 'string')||(typeof el == 'undefined'))
  return el;
 if(el.innerText)
  return el.innerText;
 else {
  var str = "";
  var cs = el.childNodes;
  var l = cs.length;
  for (i=0;i<l;i++) {
   if (cs[i].nodeType==1) str += get_inner_text(cs[i]);
   else if (cs[i].nodeType==3) str += cs[i].nodeValue;
 return str;
function isdigit(c) {
 return (c >= '0' && c <= '9');
function unit_multiplier(unit) {
 return (unit=='K') ? 1000
      : (unit=='M') ? 1000000
      : (unit=='G') ? 1000000000
      : (unit=='T') ? 1000000000000
      : (unit=='P') ? 1000000000000000
      : (unit=='E') ? 1000000000000000000 : 1;
var li_date_regex=/(\d{4})-(\w{3})-(\d{2}) (\d{2}):(\d{2}):(\d{2})/;
var li_mon = ['Jan','Feb','Mar','Apr','May','Jun',
              'Jul','Aug','Sep','Oct','Nov','Dec'];
function li_mon_num(mon) {
 var i; for (i = 0; i < 12 && mon != li_mon[i]; ++i); return i;
function li_date_cmp(s1, s2) {
 var dp1 = li_date_regex.exec(s1)
 var dp2 = li_date_regex.exec(s2)
 for (var i = 1; i < 7; ++i) {
  var cmp = (2 != i)
   ? parseInt(dp1[i]) - parseInt(dp2[i])
   : li_mon_num(dp1[2]) - li_mon_num(dp2[2]);
  if (0 != cmp) return cmp;
 return 0;
function sortfn_then_by_name(a,b,sort_column) {
 if (sort_column == name_column || sort_column == type_column) {
  var ad = (a.cells[type_column].innerHTML === 'Directory');
  var bd = (b.cells[type_column].innerHTML === 'Directory');
  if (ad != bd) return (ad ? -1 : 1);
 var at = get_inner_text(a.cells[sort_column]);
 var bt = get_inner_text(b.cells[sort_column]);
 var cmp;
 if (sort_column == name_column) {
  if (at == '..') return -1;
  if (bt == '..') return  1;
 if (a.cells[sort_column].className == 'int') {
  cmp = parseInt(at)-parseInt(bt);
 } else if (sort_column == date_column) {
  var ad = isdigit(at.substr(0,1));
  var bd = isdigit(bt.substr(0,1));
  if (ad != bd) return (!ad ? -1 : 1);
  cmp = li_date_cmp(at,bt);
 } else if (sort_column == size_column) {
  var ai = parseInt(at, 10) * unit_multiplier(at.substr(-1,1));
  var bi = parseInt(bt, 10) * unit_multiplier(bt.substr(-1,1));
  if (at.substr(0,1) == '-') ai = -1;
  if (bt.substr(0,1) == '-') bi = -1;
  cmp = ai - bi;
 } else {
  cmp = at.toLocaleUpperCase().localeCompare(bt.toLocaleUpperCase());
  if (0 != cmp) return cmp;
  cmp = at.localeCompare(bt);
 if (0 != cmp || sort_column == name_column) return cmp;
 return sortfn_then_by_name(a,b,name_column);
function sortfn(a,b) {
 return sortfn_then_by_name(a,b,click_column);
function resort(lnk) {
 var span = lnk.childNodes[1];
 var table = lnk.parentNode.parentNode.parentNode.parentNode;
 var rows = new Array();
 for (j=1;j<table.rows.length;j++)
  rows[j-1] = table.rows[j];
 click_column = lnk.parentNode.cellIndex;
 rows.sort(sortfn);
 if (prev_span != null) prev_span.innerHTML = '';
 if (span.getAttribute('sortdir')=='down') {
  span.innerHTML = '&uarr;';
  span.setAttribute('sortdir','up');
  rows.reverse();
 } else {
  span.innerHTML = '&darr;';
  span.setAttribute('sortdir','down');
 for (i=0;i<rows.length;i++)
  table.tBodies[0].appendChild(rows[i]);
 prev_span = span;
:*3$"
gcc 8.2.1 20180801
GA*GOW
GA+stack_clash
GA*cf_protection
GA+GLIBCXX_ASSERTIONS
GA*FORTIFY
GA!stack_realign
mod_dirlisting.so-1.4.50-1.fc29.x86_64.debug
.data
.rodata
.shstrtab
.plt.sec
.dynamic
.note.gnu.build-id
.eh_frame
.gnu.hash
.fini
.gnu_debuglink
.dynsym
.gnu.version
.rela.dyn
.data.rel.ro
.gnu.version_r
.eh_frame_hdr
.dynstr
.gnu.build.attributes
.bss
.init
.rela.plt
.got
.text
.fini_array
.init_array
.note.gnu.property
