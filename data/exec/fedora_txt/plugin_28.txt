Z0:1
__gmon_start__
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
value_area_get_width
value_area_get_height
collect_floats_value
value_new_error_std
value_get_as_float
g_malloc0_n
g_malloc_n
g_free
g_return_if_fail_warning
value_new_array_empty
value_new_float
__stack_chk_fail
go_complex_from_polar
go_complex_mul
go_complex_add
go_complex_scale_real
go_complex_sub
collect_floats_value_with_info
g_slist_free
floor
gnm_strip_missing
complex_to_string
value_new_string_nocopy
go_range_increasing
value_new_array_non_init
gnm_slist_sort_merge
g_log
sqrt
go_cspline_init
go_cspline_get_integrals
go_cspline_destroy
go_cspline_get_value
go_cspline_get_values
collect_float_pairs
value_new_error_VALUE
g_memdup
TimeSeriesAnalysis_functions
go_plugin_header
go_plugin_depends
libm.so.6
libc.so.6
_edata
__bss_start
_end
plugin.so
GLIBC_2.2.5
GLIBC_2.4
52J 
%4J 
%2J 
%*J 
%"J 
%zI 
%rI 
%jI 
%bI 
%ZI 
%RI 
%JI 
%BI 
%:I 
%2I 
%*I 
%"I 
fffff.
=0@ 
AWAVI
AUATUSH
D$81
L$,L
D$0H
\$8dH3
H[]A\A]A^A_
Hc|$,
L$,H
D9d$,I
AWAVA
D$H1
Lcd$
t$ L
l$0E1
D9|$
D$HdH3
X[]A\A]A^A_
AWAVAUI
ATUH
D$(1
L$(dH3
8[]A\A]A^A_
L$ E
D$ H
ffffff.
AWAVA
AUATU
[]A\A]A^A_
[]A\A]A^A_
AVAUATU
[]A\A]A^A_
fff.
AWAVAUATU
tpIc
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATUS
}(Hc
[]A\A]A^A_
vSLc
AWAVAUATUH
D$H1
L$HdH3
X[]A\A]A^A_
t$(L
d$ H
D$$H
D$8M
T$0H
T$ A
L$@E1
D$@H
|$0H
t$8H
L$ D
D$$D9
L$ 9
HcT$ 
HcT$ 9
D$$L
T$ L
T$$A
D9l$
[]A\A]A^A_
[]A\A]A^A_
ffffff.
u]Hc
[]A\A]A^
AWAVAUI
ATUH
D$X1
L$,L
L$HL
D$PH
D$HH
L$XdH3
h[]A\A]A^A_
D$,L
D$0I
L$@L
D$(H
t$(H
L$0E
T$(H
D$@H
|$8L
t$,H
t$4t
t$4H
Hc|$,L
D$4I
T$(H
t$@A
|$PE1
|$,1
HcT$
;D$,}_M
HcT$
|$PI
D$(H
D$(H
D$,E
9D$,
n > 5
data != NULL
interpolation
AAA|f
periodogram
A|fAff
fourier
A|bb
hpfilter
INTERPOLATION
PERIODOGRAM
goffice
gnumeric
1.12.8
This should not happen. n0=%d n1=%d
HPFILTER:Hodrick Prescott Filter
Sequence:the data sequence to be transformed
:filter parameter 
, defaults to 1600
This array function returns the trend and cyclical components obtained by applying the Hodrick Prescott Filter with parameter @{
} to the given data sequence.
The output consists of two columns of numbers, the first containing the trend component, the second the cyclical component.
If @{Sequence} is neither an n by 1 nor 1 by n array, this function returns #VALUE!
If @{Sequence} contians less than 6 numerical values, this function returns #VALUE!
FOURIER:Fourier or inverse Fourier transform
Inverse:if true, the inverse Fourier transform is calculated, defaults to false
Separate:if true, the real and imaginary parts are given separately, defaults to false
This array function returns the Fourier or inverse Fourier transform of the given data sequence.
The output consists of one column of complex numbers if @{Separate} is false and of two columns of real numbers if @{Separate} is true.
If @{Separate} is true the first output column contains the real parts and the second column the imaginary parts.
PERIODOGRAM:periodogram of the given data
ordinates:ordinates of the given data
filter:windowing function to  be used, defaults to no filter
abscissae:abscissae of the given data, defaults to regularly spaced abscissae
interpolation:method of interpolation, defaults to none
number:number of interpolated data points
If an interpolation method is used, the number of returned values is one less than the number of targets and the targets values must be given in increasing order.
The output consists always of one column of numbers.
Possible interpolation methods are:
0: linear;
1: linear with averaging;
2: staircase;
3: staircase with averaging;
4: natural cubic spline;
5: natural cubic spline with averaging.
Possible window functions are:
0: no filter (rectangular window)
1: Bartlett (triangular window)
2: Hahn (cosine window)
3: Welch (parabolic window)
Strings and empty cells in @{abscissae} and @{ordinates} are ignored.
If several target data are provided they must be in the same column in consecutive cells.
INTERPOLATION:interpolated values corresponding to the given abscissa targets
abscissae:abscissae of the given data points
ordinates:ordinates of the given data points
targets:abscissae of the interpolated data
interpolation:method of interpolation, defaults to 0 ('linear')
The @{abscissae} should be given in increasing order. If the @{abscissae} is not in increasing order the INTERPOLATION function is significantly slower.
If any two @{abscissae} values are equal an error is returned.
If any of interpolation methods 1 ('linear with averaging'), 3 ('staircase with averaging'), and 5 ('natural cubic spline with averaging') is used, the number of returned values is one less than the number of targets and the target values must be given in increasing order. The values returned are the average heights of the interpolation function on the intervals determined by consecutive target values.
=interpolation(array(1,2,3),array(10,20,20),1.5,0)
=interpolation(array(1,2,3),array(10,20,20),array(1.5,4),1)
gnm_hpfilter
munG
;*3$"
plugin.so.debug
7zXZ
n*]Cl
XTb#
z!sc
G{zX
q~'|.
Ow5Z
J(j;
3$1oO_Zw
LA?6
m,R"
e%jQb
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.bss
.gnu_debuglink
.gnu_debugdata
