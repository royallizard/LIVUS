Ogtsy*
I;ZC
t6H#Z
__gmon_start__
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
dbus_message_iter_get_basic
pa_hashmap_get
pa_dbusiface_card_profile_get_name
pa_card_set_profile
pa_dbus_send_empty_reply
pa_dbus_send_error
pa_hashmap_isempty
pa_log_level_meta
abort
pa_dbusiface_card_profile_get_path
pa_dbus_send_basic_variant_reply
pa_dbusiface_core_get_module_path
dbus_message_get_args
pa_dbus_send_basic_value_reply
pa_idxset_get_by_index
dbus_message_new_signal
dbus_message_append_args
pa_dbus_protocol_send_signal
dbus_message_unref
pa_proplist_equal
pa_proplist_update
dbus_message_iter_init_append
pa_dbus_append_proplist
pa_dbus_send_proplist_variant_reply
pa_dbusiface_card_profile_free
pa_hashmap_size
pa_xmalloc
pa_hashmap_iterate
__assert_fail
pa_dbus_send_basic_array_variant_reply
pa_xfree
pa_idxset_size
pa_idxset_first
pa_dbusiface_core_get_sink_path
pa_idxset_next
pa_dbusiface_core_get_source_path
dbus_message_new_method_return
dbus_message_iter_open_container
pa_dbus_append_basic_variant_dict_entry
pa_dbus_append_basic_array_variant_dict_entry
pa_dbus_append_proplist_variant_dict_entry
dbus_message_iter_close_container
dbus_connection_send
pa_dbusiface_card_new
pa_xmalloc0
pa_sprintf_malloc
pa_idxset_string_compare_func
pa_idxset_string_hash_func
pa_hashmap_new
pa_proplist_copy
pa_dbus_protocol_get
pa_subscription_new
pa_dbusiface_card_profile_new
pa_hashmap_put
pa_dbus_protocol_add_interface
pa_dbusiface_card_free
pa_dbus_protocol_remove_interface
pa_hashmap_free
pa_proplist_free
pa_dbus_protocol_unref
pa_subscription_free
pa_dbusiface_card_get_path
pa_dbusiface_core_get_playback_stream_path
pa_dbus_protocol_get_client
pa_proplist_unset
dbus_free_string_array
pa_subscription_post
dbus_message_iter_init
pa_dbus_get_proplist_arg
pa_client_update_proplist
dbus_connection_ref
pa_client_kill
dbus_connection_unref
pa_dbusiface_core_get_record_stream_path
pa_dbusiface_client_new
pa_dbusiface_client_free
pa_dbusiface_client_get_path
pa_dbus_protocol_get_extensions
pa_dbusiface_device_get_path
pa_dbusiface_device_get_source
pa_namereg_set_default_source
pa_dbusiface_device_get_sink
pa_namereg_set_default_sink
pa_channel_map_init
dbus_message_iter_recurse
dbus_message_iter_get_fixed_array
pa_dbus_protocol_remove_signal_listener
pa_dbus_protocol_add_signal_listener
pa_core_exit
pa_strbuf_new
dbus_message_iter_next
dbus_message_iter_get_arg_type
pa_strbuf_isempty
pa_ascii_valid
__ctype_b_loc
pa_strbuf_free
pa_escape
pa_strbuf_printf
pa_strbuf_putc
pa_strbuf_tostring
pa_module_load
pa_dbusiface_module_new
pa_dbusiface_module_get_path
pa_sample_spec_valid
pa_frame_aligned
pa_memblock_new
pa_memblock_acquire
memcpy
pa_memblock_release
pa_scache_add_item
pa_dbusiface_sample_new
pa_dbusiface_sample_get_path
pa_memblock_unref
pa_sample_spec_snprint
__stack_chk_fail
pa_namereg_get
pa_dbusiface_device_new_source
pa_dbusiface_device_new_sink
pa_hashmap_remove
pa_dbusiface_device_free
pa_get_host_name_malloc
pa_get_user_name_malloc
dbus_connection_get_socket
pa_socket_is_local
pa_dbusiface_module_free
pa_dbusiface_sample_free
pa_dbusiface_stream_free
pa_namereg_get_default_sink
pa_namereg_get_default_source
pa_object_type_id
pa_object_unref
pa_object_ref
pa_dbusiface_stream_get_path
pa_dbusiface_stream_new_playback
pa_dbusiface_stream_new_record
pa_dbusiface_core_new
pa_idxset_trivial_hash_func
pa_idxset_trivial_compare_func
pa_hook_connect
pa_dbus_protocol_hook_connect
pa_dbusiface_memstats_new
pa_dbusiface_core_free
pa_hook_slot_free
pa_dbusiface_memstats_free
pa_dbusiface_core_get_card_path
pa_dbusiface_core_get_client_path
pa_dbusiface_core_get_sink
pa_dbusiface_core_get_source
pa_dbusiface_device_port_get_name
pa_source_set_port
pa_sink_set_port
pa_dbusiface_device_port_get_path
pa_sink_get_latency
pa_source_get_latency
pa_source_get_requested_latency
pa_sink_get_requested_latency
pa_source_set_mute
pa_sink_set_mute
pa_cvolume_init
pa_source_set_volume
pa_sink_set_volume
pa_source_suspend
pa_sink_suspend
pa_source_get_volume
pa_cvolume_equal
pa_sink_get_mute
pa_source_get_mute
pa_sink_get_volume
pa_dbusiface_device_port_free
pa_dbusiface_device_port_new
pa_scache_total_size
pa_mempool_get_stat
pa_dbusiface_memstats_get_path
pa_modargs_new
pa_modargs_get_value
dbus_message_iter_append_basic
pa_modargs_iterate
pa_modargs_free
pa_module_unload_request
pa_bytes_to_usec
pa_scache_remove_item
pa_scache_play_item
pa_resample_method_to_string
pa_source_output_get_latency
pa_sink_input_get_latency
pa_sink_input_set_mute
pa_source_output_kill
pa_sink_input_kill
pa_source_output_move_to
pa_sink_input_move_to
pa_sink_input_set_volume
pa_sink_input_get_volume
pa_sink_input_get_mute
pa_sink_input_is_volume_readable
dbus_timeout_get_data
dbus_timeout_get_enabled
pa_gettimeofday
dbus_timeout_get_interval
pa_timeval_add
dbus_watch_get_unix_fd
dbus_watch_get_enabled
dbus_watch_handle
dbus_message_is_signal
pa_dbus_wrap_connection_get
pa_dbus_protocol_unregister_connection
pa_client_free
pa_dbus_wrap_connection_free
dbus_connection_get_is_connected
pa_idxset_remove_by_data
dbus_server_disconnect
dbus_server_unref
dbus_timeout_set_data
dbus_timeout_handle
dbus_watch_get_data
dbus_watch_get_flags
dbus_watch_set_data
pa_client_new_data_init
pa_proplist_sets
pa_client_new
pa_client_new_data_done
pa_dbus_wrap_connection_new_from_existing
dbus_connection_add_filter
pa_idxset_put
pa_dbus_protocol_register_connection
dbus_connection_set_unix_user_function
dbus_connection_set_allow_anonymous
dbus_connection_close
dbus_error_init
dbus_server_listen
dbus_error_is_set
dbus_server_set_new_connection_function
dbus_server_set_watch_functions
dbus_server_set_timeout_functions
dbus_error_free
module_dbus_protocol_LTX_pa__get_description
module_dbus_protocol_LTX_pa__get_usage
module_dbus_protocol_LTX_pa__load_once
module_dbus_protocol_LTX_pa__get_author
module_dbus_protocol_LTX_pa__get_version
module_dbus_protocol_LTX_pa__done
pa_idxset_steal_first
pa_idxset_free
module_dbus_protocol_LTX_pa__init
pa_modargs_get_value_u32
pa_xstrdup
pa_idxset_new
pa_get_dbus_address_from_server_type
libpulsecore-2.1.so
libltdl.so.7
libsamplerate.so.0
libspeexdsp.so.1
liborc-0.4.so.0
libtdb.so.1
libpulse.so.0
libjson.so.0
libpulsecommon-2.1.so
libX11-xcb.so.1
libX11.so.6
libxcb.so.1
libICE.so.6
libSM.so.6
libXtst.so.6
libwrap.so.0
libsndfile.so.1
libasyncns.so.0
libdbus-1.so.3
libpthread.so.0
librt.so.1
libdl.so.2
libm.so.6
libc.so.6
_edata
__bss_start
_end
module-dbus-protocol.so
/usr/lib64/pulseaudio
PULSE_0
GLIBC_2.14
GLIBC_2.4
GLIBC_2.3
GLIBC_2.2.5
52~"
%4~"
%2~"
%*~"
%"~"
%z}"
%r}"
%j}"
%b}"
%Z}"
%R}"
%J}"
%B}"
%:}"
%2}"
%*}"
%"}"
%z|"
%r|"
%j|"
%b|"
%Z|"
%R|"
%J|"
%B|"
%:|"
%2|"
%*|"
%"|"
%z{"
%r{"
%j{"
%b{"
%Z{"
%R{"
%J{"
%B{"
%:{"
%2{"
%*{"
%"{"
%zz"
%rz"
%jz"
%bz"
%Zz"
%Rz"
%Jz"
%Bz"
%:z"
%2z"
%*z"
%"z"
%zy"
%ry"
%jy"
%by"
%Zy"
%Ry"
%Jy"
%By"
%:y"
%2y"
%*y"
%"y"
%zx"
%rx"
%jx"
%bx"
%Zx"
%Rx"
%Jx"
%Bx"
%:x"
%2x"
%*x"
%"x"
%zw"
%rw"
%jw"
%bw"
%Zw"
%Rw"
%Jw"
%Bw"
%:w"
%2w"
%*w"
%"w"
fffff.
t$(H
\$0H
l$8L
d$@H
D$(H
ffffff.
L$8H
L$(H
ffff.
L$ E1
\$0H
l$8L
d$@H
D$ H
ffff.
PHH9S(tvH
T$(1
t$0H
AUATI
t$(1
t$(1
[]A\A]
[]A\L
t$,H
D$,I
\$0H
l$8L
d$@H
AUATUH
t$,H
t$,H
[]A\A]
[]A\L
t$,H
D$,I
\$0H
l$8L
d$@H
fff.
AUATUH
t$,H
t$,H
[]A\A]
[]A\L
t$,H
D$,I
\$0H
l$8L
d$@H
AWAVAUATI
T$ t
D$0H
t$$H
t$(H
t$,H
D$8H
t$@H
5A]"
L$ H
5?]"
5>]"
59]"
L$0H
D$$H
56]"
D$(H
55]"
D$,H
54]"
50]"
L$8H
5.]"
[]A\A]A^A_
t$(1
[]A\
ffffff.
ffff.
fffff.
t$0H
L$$H
L$(H
L$,H
[]A\
fffff.
l$(H
\$ L
d$0L
l$8L
t$@H
fff.
AUATUH
t$,H
t$,H
[]A\A]
[]A\L
t$,H
D$,I
\$0H
l$8L
d$@H
L$(H
\$0H
l$8L
d$@L
l$HL
t$PH
L$$L
D$(1
D$$1
D$(H
9D$$
fff.
t$0L
T$0L
t$,H
D$,A
l$(H
\$ L
d$0H
\$xH
t$ H
AUATUH
t$,H
t$,H
[]A\A]
[]A\L
t$,H
D$,I
\$0H
l$8L
d$@H
AVAUATI
T$,t
D$8H
t$0H
t$4H
t$@H
5.:"
L$,H
5,:"
5':"
L$8H
D$0H
5$:"
D$4H
5#:"
5#:"
[]A\A]A^
[]A\
D$,I
\$0H
l$8L
d$@H
fff.
fff.
fff.
L$(H
\$8H
l$@H
AUATI
|$ H
t$(1
|$ H
t$(1
[]A\A]
[]A\L
t$,H
D$,I
\$0H
l$8L
d$@H
L$(H
L$(H
t$(H
\$0H
l$8L
d$@H
D$(H
t$,H
D$,A
\$0H
l$8L
d$@H
t$,H
D$,A
\$0H
l$8L
d$@H
t$,H
\$0H
l$8L
d$@H
t$(H
\$0H
l$8L
d$@H
D$(H
AVAUATUSH
t$0L
T$$H
t$(H
T$$E
T$(D
2woA
2wJL9
[]A\A]A^
[]A\A]A^
[]A\A]A^
[]A\A]A^
fff.
L$(E1
D$(I
\$0H
l$8L
d$@H
ATUSH
D$,H
L$01
D$0D
L$8I
@[]A\
fff.
AVAUATUSH
t$PL
t$0H
|$PI
t$8H
l$8H
[]A\A]A^A_
t$@H
|$@H
T$8H
t$0I
L$(H
ffffff.
AWAVAUATUH
t$HH
t$0H
t$4H
T$8H
t$PH
T$<H
t$XH
T$@H
t$`H
T$0H
d$8H
|$P1
L$<E
D$@H
|$pD
t$tD
t$pL
Lcd$@L
|$`H
D$DH
t$HL
T$pM
t$DH
L$8H
t$DI
[]A\A]A^A_
D$XD
T$pH
D$@H
L$ E1
t$ H
L$(H
0[]A\
0[]A\
ffffff.
L$ E1
t$ H
L$(H
0[]A\
D$ H
0[]A\
L$ E1
t$ H
L$(H
0[]A\
D$ H
0[]A\
L$ E1
t$ H
L$(H
0[]A\
0[]A\
ffffff.
t$(tfH
T$(1
t$(tfH
T$(1
ATUSH
t$(L
T$(1
[]A\
ATUSH
t$(L
T$(1
[]A\
ATUSH
T$(1
[]A\
fff.
ATUSH
T$(1
[]A\
fff.
D$(t
D$(t
L$(H
\$8H
l$@H
L$(H
\$8H
l$@H
fff.
L$,H
\$8H
l$@H
\$HH
l$PL
d$XL
l$`H
T$81
T$81
kpI9
T$81
T$81
T$81
T$81
T$81
T$81
T$81
T$81
T$81
T$81
T$81
T$(L
T$81
t$,H
D$,I
\$0H
l$8L
d$@H
AUATI
|$PH
t$(1
|$PH
t$(1
[]A\A]
[]A\L
t$,H
D$,I
\$0H
l$8L
d$@H
AUATI
t$(1
t$(1
[]A\A]
[]A\L
t$,H
D$,I
\$0H
l$8L
d$@H
AUATI
|$`H
t$(1
|$`H
t$(1
[]A\A]
[]A\L
t$,H
D$,I
\$0H
l$8L
d$@H
AUATI
|$XH
t$(1
|$XH
t$(1
[]A\A]
[]A\L
t$,H
D$,I
\$0H
l$8L
d$@H
AUATI
|$HH
t$(1
|$HH
t$(1
[]A\A]
[]A\L
t$,H
D$,I
\$0H
l$8L
d$@H
AUATI
|$@H
t$(1
|$@H
t$(1
[]A\A]
[]A\L
t$,H
D$,I
\$0H
l$8L
d$@H
AUATI
|$0H
t$(1
|$0H
t$(1
[]A\A]
[]A\L
t$,H
D$,I
\$0H
l$8L
d$@H
AWAVAUATUH
t$tH
D$(1
L$lH
L$pH
D$tH
L$xH
L$|H
L$(H
L$0H
L$8H
L$@H
L$HH
L$PH
L$XH
[]A\A]A^A_
fffff.
AWAVAUATUH
t$,H
t$,H
t$,H
t$,H
t$,H
t$,H
t$,H
t8f.
t$,H
[]A\A]A^A_
L$(H
ffff.
ffffff.
ffff.
L$(H
t$(H
\$0H
l$8L
d$@H
D$(H
ffffff.
L$8H
L$ E
L$ L
ffffff.
L$ I
L$ L
ffff.
L$(H
t$,H
D$,1
\$0H
l$8L
d$@H
AUATUSH
t$0H
T$$H
t$(H
L$$E9
[]A\A]
T$(D
xJH9
[]A\A]
[]A\A]
phu1H
L$(H
p`u1H
L$(H
L$ E1
\$0H
l$8L
d$@H
HHu$H
fffff.
L$,E1
\$0H
l$8L
d$@H
T$,H
L$,H
D$(H
t$0H
L$(H
t$0H
L$(H
ATUSH
[]A\
9W(u
L$(E1
T$$H
T$$1
T$(1
t$0H
Q8t$H
ffff.
AUATI
t$(1
t$(1
[]A\A]
[]A\L
t$,H
D$,I
\$0H
l$8L
d$@H
AWAVAUATI
D$0H
D$hH
T$\H
D$`t
D$xH
t$dL
D$(I
L$0H
L$hH
L$pH
L$xH
L$4H
L$8H
L$<H
L$@H
L$DH
L$HH
L$LH
L$PH
L$TH
L$XH
L$\H
L$`H
D$dH
L$(H
[]A\A]A^A_
=/c!
t$(1
[]A\
5__!
=x_!
t$(1
[]A\
=F[!
fffff.
t$0H
5Ss!
5Ss!
5Rs!
5Us!
L$,H
[]A\
l$(H
\$ L
d$0L
l$8L
t$@H
L$,H
\$8H
l$@H
L$,H
fff.
L$,H
fff.
L$,H
fff.
L$,H
ffff.
ATUH
t$@H
L$,H
L$0H
L$4H
L$8H
L$<H
[]A\
fff.
\$0H
l$8L
d$@H
L$@H
T$0H
T$8H
t$(H
t$@H
t$ H
|$ L
\$pH
l$xL
ffff.
l$0H
\$(H
l$0H
\$(H
ATUSH
T$(H
D$,H
t$0H
L$(H
56W!
L$,H
5TW!
[]A\A]
\$xH
t$ H
L$(H
L$ E
L$ L
L$ E
L$ L
ffff.
\$ H
l$(L
d$0H
\$ H
l$(H
d$0H
AUATUH
t$0H
t$(H
t$$H
T$0H
t$(I
[]A\A]
D$(H
t$0H
t$,H
T$0H
L$,E1
ffffff.
AVAUATI
D$(tg
t$4H
t$@H
L$(H
5y=!
L$,H
5{=!
L$0H
5y=!
5u=!
L$8H
5w=!
L$4H
5u=!
[]A\A]A^
\$xH
t$ H
[]A\
D$(t9H
L$(H
D$(u
d$(H
\$0H
l$8L
d$@H
D$(H
L$(H
t$,H
|$,1
\$0H
l$8L
d$@H
L$ I
L$ L
D$(H
L$(H
l$0H
\$(H
L$(E1
t$(H
\$8H
l$@L
d$HL
l$PH
D$(H
D$(H
AWAVAUATI
T$0H
D$4H
D$`H
D$XI
D$hH
D$@H
D$HA
t$pH
L$0H
L$8H
L$@H
5}%!
L$HH
L$PH
L$4H
L$XH
L$(H
L$hH
[]A\A]A^A_
T$0H
D$4H
D$`H
D$XI
5=$!
5<$!
D$(L
t$0H
T$(H
|$0L
ffff.
ffff.
L$(I
t$@D
T$4H
t$8H
L$4H
L$(E9
|$4H
T$8D
x:H9
L$(I
D$(t.H
\$0H
l$8L
d$@H
ATUSH
L$ E
L$ L
[]A\
[]A\
ffffff.
\$0H
l$8L
d$@H
\$0H
l$8L
d$@H
c I9
T$ 1
@|;C(tZH
L$(E1
t$0H
c I9
T$ 1
[]A\
[]A\
fffff.
T$0H
\$0H
l$8L
d$@H
|$ Hi
t$ H
\$(L
\$(H
l$0L
d$8L
l$@H
t$0H
T$(H
|$0L
[]A\
[]A\
fff.
fff.
|$ H
|$ Hi
t$ H
T$0H
l$ L
d$(L
l$0H
\$(H
l$0H
\$ H
d$0H
l$(H
fffff.
\$(H
l$0L
d$8L
l$@H
ATUSH
|$ H
D$0H
t$ H
|$ I
l$8I
D$@H
H[]A\A]
ffff.
|$ A
t$ L
|$ H
l$PH
\$HL
d$XL
l$`H
D$(L
L$ L
AVAUATUH
[]A\A]A^
[]A\A]A^
conn
modules/dbus/iface-card.c
iter
%s: No such profile.
org.PulseAudio.Core1.Card
profile
./pulse/xmalloc.h
n < 2147483647/k
{sv}
card
/org/pulseaudio/core1
%s/%s%u
Index
Driver
OwnerModule
Sinks
Sources
Profiles
ActiveProfile
PropertyList
a{say}
ActiveProfileUpdated
PropertyListUpdated
GetProfileByName
property_list
Assertion '%s' failed at %s:%u, function %s(). Aborting.
pa_hashmap_isempty(c->profiles)
The card %s has no profiles, and therefore there's no active profile either.
org.PulseAudio.Core1.NoSuchPropertyError
org.PulseAudio.Core1.NotFoundError
Internal error in PulseAudio: pa_card_set_profile() failed with error code %i.
org.freedesktop.DBus.Error.Failed
Card %s doesn't have an owner module.
dbus_message_get_args(msg, NULL, DBUS_TYPE_STRING, &profile_name, DBUS_TYPE_INVALID)
%s: No such profile on card %s.
(t & PA_SUBSCRIPTION_EVENT_FACILITY_MASK) == PA_SUBSCRIPTION_EVENT_CARD
signal_msg = dbus_message_new_signal(c->path, PA_DBUSIFACE_CARD_INTERFACE, signals[SIGNAL_ACTIVE_PROFILE_UPDATED].name)
dbus_message_append_args(signal_msg, DBUS_TYPE_OBJECT_PATH, &object_path, DBUS_TYPE_INVALID)
signal_msg = dbus_message_new_signal(c->path, PA_DBUSIFACE_CARD_INTERFACE, signals[SIGNAL_PROPERTY_LIST_UPDATED].name)
(reply = dbus_message_new_method_return(msg))
dbus_message_iter_open_container(&msg_iter, DBUS_TYPE_ARRAY, "{sv}", &dict_iter)
dbus_message_iter_close_container(&msg_iter, &dict_iter)
dbus_connection_send(conn, reply, NULL)
c->active_profile = card->active_profile
pa_dbus_protocol_add_interface(c->dbus_protocol, c->path, &card_interface_info, c) >= 0
pa_dbus_protocol_remove_interface(c->dbus_protocol, c->path, card_interface_info.name) >= 0
pa_dbusiface_card_new
pa_dbusiface_card_new
handle_get_all
handle_get_all
get_sinks
get_sinks
_pa_xnew_internal
handle_get_property_list
handle_get_property_list
handle_get_profile_by_name
handle_get_profile_by_name
handle_set_active_profile
handle_set_active_profile
handle_get_active_profile
handle_get_active_profile
handle_get_profiles
handle_get_profiles
handle_get_sources
handle_get_sources
handle_get_sinks
handle_get_sinks
handle_get_owner_module
handle_get_owner_module
handle_get_driver
handle_get_driver
handle_get_name
handle_get_name
handle_get_index
handle_get_index
get_sources
get_sources
get_profiles
get_profiles
subscription_cb
subscription_cb
pa_dbusiface_card_free
pa_dbusiface_card_free
profile_free_cb
profile_free_cb
pa_dbusiface_card_get_path
pa_dbusiface_card_get_path
Description
Priority
modules/dbus/iface-card-profile.c
pa_dbus_protocol_add_interface(p->dbus_protocol, p->path, &profile_interface_info, p) >= 0
pa_dbus_protocol_remove_interface(p->dbus_protocol, p->path, profile_interface_info.name) >= 0
org.PulseAudio.Core1.CardProfile
pa_dbusiface_card_profile_new
pa_dbusiface_card_profile_new
handle_get_all
handle_get_all
handle_get_priority
handle_get_priority
handle_get_sources
handle_get_sources
handle_get_sinks
handle_get_sinks
handle_get_description
handle_get_description
handle_get_name
handle_get_name
handle_get_index
handle_get_index
pa_dbusiface_card_profile_free
pa_dbusiface_card_profile_free
pa_dbusiface_card_profile_get_path
pa_dbusiface_card_profile_get_path
pa_dbusiface_card_profile_get_name
pa_dbusiface_card_profile_get_name
modules/dbus/iface-client.c
Invalid update mode: %u
org.PulseAudio.Core1.Client
PlaybackStreams
RecordStreams
ClientEvent
Kill
UpdateProperties
RemoveProperties
update_mode
keys
Client %d doesn't have an owner module.
Client tried to modify the property list of another client.
org.freedesktop.DBus.Error.AccessDenied
dbus_message_get_args(msg, NULL, DBUS_TYPE_ARRAY, DBUS_TYPE_STRING, &keys, &n_keys, DBUS_TYPE_INVALID)
dbus_message_iter_init(msg, &msg_iter)
org.freedesktop.DBus.Error.InvalidArgs
(t & PA_SUBSCRIPTION_EVENT_FACILITY_MASK) == PA_SUBSCRIPTION_EVENT_CLIENT
signal_msg = dbus_message_new_signal(c->path, PA_DBUSIFACE_CLIENT_INTERFACE, signals[SIGNAL_PROPERTY_LIST_UPDATED].name)
pa_dbus_protocol_add_interface(c->dbus_protocol, c->path, &client_interface_info, c) >= 0
pa_dbus_protocol_remove_interface(c->dbus_protocol, c->path, client_interface_info.name) >= 0
pa_dbusiface_client_new
pa_dbusiface_client_new
handle_get_all
handle_get_all
get_playback_streams
get_playback_streams
_pa_xnew_internal
handle_get_property_list
handle_get_property_list
handle_get_record_streams
handle_get_record_streams
handle_get_playback_streams
handle_get_playback_streams
handle_get_owner_module
handle_get_owner_module
handle_get_driver
handle_get_driver
handle_get_index
handle_get_index
get_record_streams
get_record_streams
handle_remove_properties
handle_remove_properties
handle_update_properties
handle_update_properties
handle_kill
handle_kill
subscription_cb
subscription_cb
pa_dbusiface_client_free
pa_dbusiface_client_free
pa_dbusiface_client_get_path
pa_dbusiface_client_get_path
modules/dbus/iface-core.c
%s: No such source.
Invalid sample rate.
Invalid sample format.
%s: No such sink.
Empty channel array.
Invalid channel position: %u.
%s="%s"
Failed to load module.
Empty channel map.
Invalid channel position.
Invalid volume: %u.
Empty data.
pa_sample_spec_valid(&ss)
Adding the sample failed.
No such sample.
No such card.
ext_name
org.PulseAudio.Core1
./pulsecore/object.h
pulseaudio
sink
source
sink_input
source_output
module
object_path
InterfaceRevision
Version
IsLocal
Username
Hostname
DefaultChannels
DefaultSampleFormat
DefaultSampleRate
AlternateSampleRate
Cards
FallbackSink
FallbackSource
Samples
Modules
Clients
MyClient
Extensions
NewCard
CardRemoved
NewSink
SinkRemoved
FallbackSinkUpdated
FallbackSinkUnset
NewSource
SourceRemoved
FallbackSourceUpdated
FallbackSourceUnset
NewPlaybackStream
PlaybackStreamRemoved
NewRecordStream
RecordStreamRemoved
NewSample
SampleRemoved
NewModule
ModuleRemoved
NewClient
ClientRemoved
NewExtension
ExtensionRemoved
GetCardByName
GetSinkByName
GetSourceByName
GetSampleByName
UploadSample
LoadModule
Exit
ListenForSignal
StopListeningForSignal
playback_stream
record_stream
sample
extension
sample_format
sample_rate
channels
default_volume
arguments
a{ss}
signal
objects
(my_client = pa_dbus_protocol_get_client(c->dbus_protocol, conn))
There are no sources, and therefore no fallback source either.
(fallback_source = pa_hashmap_get(c->sources_by_index, PA_UINT32_TO_PTR(c->fallback_source->index)))
There are no sinks, and therefore no fallback sink either.
(fallback_sink = pa_hashmap_get(c->sinks_by_index, PA_UINT32_TO_PTR(c->fallback_sink->index)))
Too many channels: %i. The maximum number of channels is %u.
dbus_message_get_args(msg, NULL, DBUS_TYPE_STRING, &signal_str, DBUS_TYPE_INVALID)
dbus_message_get_args(msg, NULL, DBUS_TYPE_STRING, &signal_str, DBUS_TYPE_ARRAY, DBUS_TYPE_OBJECT_PATH, &objects, &n_objects, DBUS_TYPE_INVALID)
The server is configured to disallow exiting.
The server is configured to disallow module loading.
dbus_message_iter_next(&msg_iter)
Invalid module argument name: %s
dbus_message_iter_next(&dict_entry_iter)
Too many channels: %i. The maximum is %u.
The channels and default_volume arguments have different number of elements (%i and %i, resp).
Too big sample: %i bytes. The maximum sample length is %u bytes.
The sample length (%i bytes) doesn't align with the sample format and channels (%s).
sample = pa_idxset_get_by_index(c->core->scache, idx)
dbus_message_get_args(msg, NULL, DBUS_TYPE_STRING, &sample_name, DBUS_TYPE_INVALID)
(dbus_sample = pa_hashmap_get(c->samples, PA_UINT32_TO_PTR(sample->index)))
dbus_message_get_args(msg, NULL, DBUS_TYPE_STRING, &source_name, DBUS_TYPE_INVALID)
(dbus_source = pa_hashmap_get(c->sources_by_index, PA_UINT32_TO_PTR(source->index)))
dbus_message_get_args(msg, NULL, DBUS_TYPE_STRING, &sink_name, DBUS_TYPE_INVALID)
(dbus_sink = pa_hashmap_get(c->sinks_by_index, PA_UINT32_TO_PTR(sink->index)))
dbus_message_get_args(msg, NULL, DBUS_TYPE_STRING, &card_name, DBUS_TYPE_INVALID)
(dbus_card = pa_hashmap_get(c->cards, PA_UINT32_TO_PTR(card->index)))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_EXTENSION_REMOVED].name))
dbus_message_append_args(signal_msg, DBUS_TYPE_STRING, &ext_name, DBUS_TYPE_INVALID)
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_NEW_EXTENSION].name))
pa_hashmap_put(c->sources_by_index, PA_UINT32_TO_PTR(s->index), d) >= 0
pa_hashmap_put(c->sources_by_path, object_path, d) >= 0
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_NEW_SOURCE].name))
pa_hashmap_put(c->sinks_by_index, PA_UINT32_TO_PTR(s->index), d) >= 0
pa_hashmap_put(c->sinks_by_path, object_path, d) >= 0
signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_NEW_SINK].name)
d = pa_hashmap_remove(c->sources_by_index, PA_UINT32_TO_PTR(s->index))
pa_hashmap_remove(c->sources_by_path, object_path)
signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_SOURCE_REMOVED].name)
d = pa_hashmap_remove(c->sinks_by_index, PA_UINT32_TO_PTR(s->index))
pa_hashmap_remove(c->sinks_by_path, object_path)
signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_SINK_REMOVED].name)
!obj || obj->check_type(pa_object_type_id)
device_iface = pa_hashmap_get(c->sinks_by_index, PA_UINT32_TO_PTR(c->fallback_sink->index))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_FALLBACK_SINK_UPDATED].name))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_FALLBACK_SINK_UNSET].name))
device_iface = pa_hashmap_get(c->sources_by_index, PA_UINT32_TO_PTR(c->fallback_source->index))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_FALLBACK_SOURCE_UPDATED].name))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_FALLBACK_SOURCE_UNSET].name))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_NEW_CARD].name))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_CARD_REMOVED].name))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_NEW_PLAYBACK_STREAM].name))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_PLAYBACK_STREAM_REMOVED].name))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_NEW_RECORD_STREAM].name))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_RECORD_STREAM_REMOVED].name))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_NEW_SAMPLE].name))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_SAMPLE_REMOVED].name))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_NEW_MODULE].name))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_MODULE_REMOVED].name))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_NEW_CLIENT].name))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_CLIENT_REMOVED].name))
pa_dbus_protocol_add_interface(c->dbus_protocol, PA_DBUS_CORE_OBJECT_PATH, &core_interface_info, c) >= 0
pa_dbus_protocol_remove_interface(c->dbus_protocol, PA_DBUS_CORE_OBJECT_PATH, core_interface_info.name) >= 0
pa_dbusiface_core_new
pa_dbusiface_core_new
handle_get_all
handle_get_all
get_is_local
get_is_local
get_default_channels
get_default_channels
_pa_xnew_internal
get_cards
get_cards
get_sinks
get_sinks
get_sources
get_sources
get_playback_streams
get_playback_streams
get_record_streams
get_record_streams
get_samples
get_samples
get_modules
get_modules
get_clients
get_clients
get_my_client
get_my_client
handle_get_extensions
handle_get_extensions
handle_get_my_client
handle_get_my_client
handle_get_clients
handle_get_clients
handle_get_modules
handle_get_modules
handle_get_samples
handle_get_samples
handle_get_record_streams
handle_get_record_streams
handle_get_playback_streams
handle_get_playback_streams
handle_set_fallback_source
handle_set_fallback_source
handle_get_fallback_source
handle_get_fallback_source
handle_get_sources
handle_get_sources
handle_set_fallback_sink
handle_set_fallback_sink
handle_get_fallback_sink
handle_get_fallback_sink
handle_get_sinks
handle_get_sinks
handle_get_cards
handle_get_cards
handle_set_alternate_sample_rate
handle_set_alternate_sample_rate
handle_get_alternate_sample_rate
handle_get_alternate_sample_rate
handle_set_default_sample_rate
handle_set_default_sample_rate
handle_get_default_sample_rate
handle_get_default_sample_rate
handle_set_default_sample_format
handle_set_default_sample_format
handle_get_default_sample_format
handle_get_default_sample_format
handle_set_default_channels
handle_set_default_channels
handle_get_default_channels
handle_get_default_channels
handle_get_hostname
handle_get_hostname
handle_get_username
handle_get_username
handle_get_is_local
handle_get_is_local
handle_get_version
handle_get_version
handle_get_name
handle_get_name
handle_get_interface_revision
handle_get_interface_revision
extension_unregistered_cb
extension_unregistered_cb
extension_registered_cb
extension_registered_cb
source_unlink_cb
source_unlink_cb
source_put_cb
source_put_cb
sink_unlink_cb
sink_unlink_cb
sink_put_cb
sink_put_cb
subscription_cb
subscription_cb
pa_object_cast
pa_object_cast
handle_stop_listening_for_signal
handle_stop_listening_for_signal
handle_listen_for_signal
handle_listen_for_signal
handle_exit
handle_exit
handle_load_module
handle_load_module
handle_upload_sample
handle_upload_sample
handle_get_sample_by_name
handle_get_sample_by_name
handle_get_source_by_name
handle_get_source_by_name
handle_get_sink_by_name
handle_get_sink_by_name
handle_get_card_by_name
handle_get_card_by_name
pa_dbusiface_core_free
pa_dbusiface_core_free
free_client_cb
free_client_cb
free_module_cb
free_module_cb
free_sample_cb
free_sample_cb
free_stream_cb
free_stream_cb
free_device_cb
free_device_cb
free_card_cb
free_card_cb
pa_dbusiface_core_get_card_path
pa_dbusiface_core_get_card_path
pa_dbusiface_core_get_sink_path
pa_dbusiface_core_get_sink_path
pa_dbusiface_core_get_source_path
pa_dbusiface_core_get_source_path
pa_dbusiface_core_get_playback_stream_path
pa_dbusiface_core_get_playback_stream_path
pa_dbusiface_core_get_record_stream_path
pa_dbusiface_core_get_record_stream_path
pa_dbusiface_core_get_module_path
pa_dbusiface_core_get_module_path
pa_dbusiface_core_get_client_path
pa_dbusiface_core_get_client_path
pa_dbusiface_core_get_sink
pa_dbusiface_core_get_sink
pa_dbusiface_core_get_source
pa_dbusiface_core_get_source
modules/dbus/iface-device.c
pa_hashmap_isempty(d->ports)
No such port: %s
Too large volume value: %u
%s: No such port on sink %s.
org.PulseAudio.Core1.Device
org.PulseAudio.Core1.Sink
HasFlatVolume
HasConvertibleToDecibelVolume
BaseVolume
VolumeSteps
HasHardwareVolume
HasHardwareMute
ConfiguredLatency
HasDynamicLatency
IsHardwareDevice
IsNetworkDevice
State
Ports
ActivePort
VolumeUpdated
MuteUpdated
StateUpdated
ActivePortUpdated
org.PulseAudio.Core1.Source
Suspend
GetPortByName
MonitorSource
muted
state
MonitorOfSink
suspend
d->type == PA_DEVICE_TYPE_SOURCE
Source %s is not a monitor source.
d->type == PA_DEVICE_TYPE_SINK
The sink %s has no ports, and therefore there's no active port either.
The source %s has no ports, and therefore there's no active port either.
Internal error in PulseAudio: pa_sink_set_port() failed with error code %i.
Internal error in PulseAudio: pa_source_set_port() failed with error code %i.
Sink %s doesn't support latency querying.
Source %s doesn't support latency querying.
Expected %u volume entries, got %i.
Sink %s doesn't belong to any card.
Source %s doesn't belong to any card.
Sink %s doesn't have an owner module.
Source %s doesn't have an owner module.
dbus_message_get_args(msg, NULL, DBUS_TYPE_STRING, &port_name, DBUS_TYPE_INVALID)
%s: No such port on source %s.
dbus_message_get_args(msg, NULL, DBUS_TYPE_BOOLEAN, &suspend, DBUS_TYPE_INVALID)
Internal error in PulseAudio: pa_sink_suspend() failed.
Internal error in PulseAudio: pa_source_suspend() failed.
signal_msg = dbus_message_new_signal(d->path, PA_DBUSIFACE_DEVICE_INTERFACE, signals[SIGNAL_VOLUME_UPDATED].name)
dbus_message_append_args(signal_msg, DBUS_TYPE_ARRAY, DBUS_TYPE_UINT32, &volume_ptr, d->volume.channels, DBUS_TYPE_INVALID)
signal_msg = dbus_message_new_signal(d->path, PA_DBUSIFACE_DEVICE_INTERFACE, signals[SIGNAL_MUTE_UPDATED].name)
dbus_message_append_args(signal_msg, DBUS_TYPE_BOOLEAN, &d->mute, DBUS_TYPE_INVALID)
signal_msg = dbus_message_new_signal(d->path, PA_DBUSIFACE_DEVICE_INTERFACE, signals[SIGNAL_STATE_UPDATED].name)
dbus_message_append_args(signal_msg, DBUS_TYPE_UINT32, &state, DBUS_TYPE_INVALID)
signal_msg = dbus_message_new_signal(d->path, PA_DBUSIFACE_DEVICE_INTERFACE, signals[SIGNAL_ACTIVE_PORT_UPDATED].name)
signal_msg = dbus_message_new_signal(d->path, PA_DBUSIFACE_DEVICE_INTERFACE, signals[SIGNAL_PROPERTY_LIST_UPDATED].name)
((d->type == PA_DEVICE_TYPE_SINK) && ((t & PA_SUBSCRIPTION_EVENT_FACILITY_MASK) == PA_SUBSCRIPTION_EVENT_SINK)) || ((d->type == PA_DEVICE_TYPE_SOURCE) && ((t & PA_SUBSCRIPTION_EVENT_FACILITY_MASK) == PA_SUBSCRIPTION_EVENT_SOURCE))
d->active_port = sink->active_port
pa_dbus_protocol_add_interface(d->dbus_protocol, d->path, &device_interface_info, d) >= 0
pa_dbus_protocol_add_interface(d->dbus_protocol, d->path, &sink_interface_info, d) >= 0
d->active_port = source->active_port
pa_dbus_protocol_add_interface(d->dbus_protocol, d->path, &source_interface_info, d) >= 0
pa_dbus_protocol_remove_interface(d->dbus_protocol, d->path, device_interface_info.name) >= 0
pa_dbus_protocol_remove_interface(d->dbus_protocol, d->path, sink_interface_info.name) >= 0
pa_dbus_protocol_remove_interface(d->dbus_protocol, d->path, source_interface_info.name) >= 0
pa_dbusiface_device_new_sink
pa_dbusiface_device_new_sink
handle_sink_get_all
handle_sink_get_all
handle_get_property_list
handle_get_property_list
handle_set_active_port
handle_set_active_port
handle_sink_get_monitor_source
handle_sink_get_monitor_source
handle_get_all
handle_get_all
get_ports
get_ports
_pa_xnew_internal
handle_get_port_by_name
handle_get_port_by_name
handle_suspend
handle_suspend
handle_get_active_port
handle_get_active_port
handle_get_ports
handle_get_ports
handle_get_state
handle_get_state
handle_get_is_network_device
handle_get_is_network_device
handle_get_is_hardware_device
handle_get_is_hardware_device
handle_get_latency
handle_get_latency
handle_get_has_dynamic_latency
handle_get_has_dynamic_latency
handle_get_configured_latency
handle_get_configured_latency
handle_get_has_hardware_mute
handle_get_has_hardware_mute
handle_get_has_hardware_volume
handle_get_has_hardware_volume
handle_set_mute
handle_set_mute
handle_get_mute
handle_get_mute
handle_get_volume_steps
handle_get_volume_steps
handle_get_base_volume
handle_get_base_volume
handle_get_has_convertible_to_decibel_volume
handle_get_has_convertible_to_decibel_volume
handle_get_has_flat_volume
handle_get_has_flat_volume
handle_set_volume
handle_set_volume
handle_get_volume
handle_get_volume
handle_get_channels
handle_get_channels
handle_get_sample_rate
handle_get_sample_rate
handle_get_sample_format
handle_get_sample_format
handle_get_card
handle_get_card
handle_get_owner_module
handle_get_owner_module
handle_get_driver
handle_get_driver
handle_get_name
handle_get_name
handle_get_index
handle_get_index
subscription_cb
subscription_cb
pa_object_cast
pa_object_cast
pa_dbusiface_device_new_source
pa_dbusiface_device_new_source
handle_source_get_all
handle_source_get_all
handle_source_get_monitor_of_sink
handle_source_get_monitor_of_sink
pa_dbusiface_device_free
pa_dbusiface_device_free
port_free_cb
port_free_cb
pa_dbusiface_device_get_path
pa_dbusiface_device_get_path
pa_dbusiface_device_get_sink
pa_dbusiface_device_get_sink
pa_dbusiface_device_get_source
pa_dbusiface_device_get_source
device
modules/dbus/iface-device-port.c
pa_dbus_protocol_add_interface(p->dbus_protocol, p->path, &port_interface_info, p) >= 0
pa_dbus_protocol_remove_interface(p->dbus_protocol, p->path, port_interface_info.name) >= 0
org.PulseAudio.Core1.DevicePort
pa_dbusiface_device_port_new
pa_dbusiface_device_port_new
handle_get_all
handle_get_all
handle_get_priority
handle_get_priority
handle_get_description
handle_get_description
handle_get_name
handle_get_name
handle_get_index
handle_get_index
pa_dbusiface_device_port_free
pa_dbusiface_device_port_free
pa_dbusiface_device_port_get_path
pa_dbusiface_device_port_get_path
pa_dbusiface_device_port_get_name
pa_dbusiface_device_port_get_name
modules/dbus/iface-memstats.c
dbus_core
memstats
%s/%s
org.PulseAudio.Core1.Memstats
CurrentMemblocks
CurrentMemblocksSize
AccumulatedMemblocks
AccumulatedMemblocksSize
SampleCacheSize
pa_dbus_protocol_add_interface(m->dbus_protocol, m->path, &memstats_interface_info, m) >= 0
pa_dbus_protocol_remove_interface(m->dbus_protocol, m->path, memstats_interface_info.name) >= 0
pa_dbusiface_memstats_new
pa_dbusiface_memstats_new
handle_get_all
handle_get_all
handle_get_sample_cache_size
handle_get_sample_cache_size
handle_get_accumulated_memblocks_size
handle_get_accumulated_memblocks_size
handle_get_accumulated_memblocks
handle_get_accumulated_memblocks
handle_get_current_memblocks_size
handle_get_current_memblocks_size
handle_get_current_memblocks
handle_get_current_memblocks
pa_dbusiface_memstats_free
pa_dbusiface_memstats_free
pa_dbusiface_memstats_get_path
pa_dbusiface_memstats_get_path
modules/dbus/iface-module.c
org.PulseAudio.Core1.Module
Arguments
UsageCounter
Unload
Module %u (%s) doesn't have a usage counter.
ma = pa_modargs_new(m->module->argument, NULL)
dbus_message_iter_open_container(iter, DBUS_TYPE_VARIANT, "a{ss}", &variant_iter)
dbus_message_iter_open_container(&variant_iter, DBUS_TYPE_ARRAY, "{ss}", &dict_iter)
value = pa_modargs_get_value(ma, key, NULL)
dbus_message_iter_open_container(&dict_iter, DBUS_TYPE_DICT_ENTRY, NULL, &dict_entry_iter)
dbus_message_iter_append_basic(&dict_entry_iter, DBUS_TYPE_STRING, &key)
dbus_message_iter_append_basic(&dict_entry_iter, DBUS_TYPE_STRING, &value)
dbus_message_iter_close_container(&dict_iter, &dict_entry_iter)
dbus_message_iter_close_container(&variant_iter, &dict_iter)
dbus_message_iter_close_container(iter, &variant_iter)
reply = dbus_message_new_method_return(msg)
The server is configured to disallow module unloading.
dbus_message_iter_append_basic(&dict_entry_iter, DBUS_TYPE_STRING, &property_handlers[PROPERTY_HANDLER_ARGUMENTS].property_name)
(t & PA_SUBSCRIPTION_EVENT_FACILITY_MASK) == PA_SUBSCRIPTION_EVENT_MODULE
signal_msg = dbus_message_new_signal(m->path, PA_DBUSIFACE_MODULE_INTERFACE, signals[SIGNAL_PROPERTY_LIST_UPDATED].name)
pa_dbus_protocol_add_interface(m->dbus_protocol, m->path, &module_interface_info, m) >= 0
pa_dbus_protocol_remove_interface(m->dbus_protocol, m->path, module_interface_info.name) >= 0
pa_dbusiface_module_new
pa_dbusiface_module_new
handle_get_all
handle_get_all
handle_get_property_list
handle_get_property_list
handle_unload
handle_unload
handle_get_usage_counter
handle_get_usage_counter
handle_get_arguments
handle_get_arguments
handle_get_name
handle_get_name
handle_get_index
handle_get_index
append_modargs_variant
append_modargs_variant
subscription_cb
subscription_cb
pa_dbusiface_module_free
pa_dbusiface_module_free
pa_dbusiface_module_get_path
pa_dbusiface_module_get_path
modules/dbus/iface-sample.c
Removing sample %s failed.
Invalid volume.
Playing sample %s failed.
org.PulseAudio.Core1.Sample
DefaultVolume
Duration
Bytes
Play
PlayToSink
Remove
Sample %s isn't loaded into memory yet, so its size is unknown.
Sample %s isn't loaded into memory yet, so its sample rate is unknown.
Sample %s isn't loaded into memory yet, so its sample format is unknown.
Sample %s isn't loaded into memory yet, so its duration is unknown.
Sample %s doesn't have default volume stored.
Sample %s isn't loaded into memory yet, so its channel map is unknown.
Can't play sample %s, because there are no sinks available.
signal_msg = dbus_message_new_signal(s->path, PA_DBUSIFACE_SAMPLE_INTERFACE, signals[SIGNAL_PROPERTY_LIST_UPDATED].name)
pa_dbus_protocol_add_interface(s->dbus_protocol, s->path, &sample_interface_info, s) >= 0
pa_dbus_protocol_remove_interface(s->dbus_protocol, s->path, sample_interface_info.name) >= 0
pa_dbusiface_sample_new
pa_dbusiface_sample_new
handle_get_all
handle_get_all
handle_get_property_list
handle_get_property_list
handle_remove
handle_remove
handle_play_to_sink
handle_play_to_sink
handle_play
handle_play
handle_get_bytes
handle_get_bytes
handle_get_duration
handle_get_duration
handle_get_default_volume
handle_get_default_volume
handle_get_channels
handle_get_channels
handle_get_sample_rate
handle_get_sample_rate
handle_get_sample_format
handle_get_sample_format
handle_get_name
handle_get_name
handle_get_index
handle_get_index
subscription_cb
subscription_cb
pa_dbusiface_sample_free
pa_dbusiface_sample_free
pa_dbusiface_sample_get_path
pa_dbusiface_sample_get_path
modules/dbus/iface-stream.c
call_data
org.PulseAudio.Core1.Stream
Playback stream %u
Record stream %u
%s doesn't have volume.
%s has read-only volume.
Invalid volume: %u
%s doesn't have a driver.
BufferLatency
DeviceLatency
ResampleMethod
DeviceUpdated
SampleRateUpdated
StreamEvent
Move
Record streams don't have mute.
dbus_message_get_args(msg, NULL, DBUS_TYPE_OBJECT_PATH, &device, DBUS_TYPE_INVALID)
Moving playback stream %u to sink %s failed.
Moving record stream %u to source %s failed.
signal_msg = dbus_message_new_signal(s->path, PA_DBUSIFACE_STREAM_INTERFACE, signals[SIGNAL_STREAM_EVENT].name)
dbus_message_iter_append_basic(&msg_iter, DBUS_TYPE_STRING, &name)
Expected %u volume entries, got %u.
%s isn't associated to any client.
%s doesn't have an owner module.
signal_msg = dbus_message_new_signal(s->path, PA_DBUSIFACE_STREAM_INTERFACE, signals[SIGNAL_DEVICE_UPDATED].name)
dbus_message_append_args(signal_msg, DBUS_TYPE_OBJECT_PATH, &new_device_path, DBUS_TYPE_INVALID)
signal_msg = dbus_message_new_signal(s->path, PA_DBUSIFACE_STREAM_INTERFACE, signals[SIGNAL_SAMPLE_RATE_UPDATED].name)
dbus_message_append_args(signal_msg, DBUS_TYPE_UINT32, &s->sample_rate, DBUS_TYPE_INVALID)
signal_msg = dbus_message_new_signal(s->path, PA_DBUSIFACE_STREAM_INTERFACE, signals[SIGNAL_VOLUME_UPDATED].name)
dbus_message_append_args(signal_msg, DBUS_TYPE_ARRAY, DBUS_TYPE_UINT32, &volume_ptr, s->volume.channels, DBUS_TYPE_INVALID)
signal_msg = dbus_message_new_signal(s->path, PA_DBUSIFACE_STREAM_INTERFACE, signals[SIGNAL_MUTE_UPDATED].name)
dbus_message_append_args(signal_msg, DBUS_TYPE_BOOLEAN, &s->mute, DBUS_TYPE_INVALID)
signal_msg = dbus_message_new_signal(s->path, PA_DBUSIFACE_STREAM_INTERFACE, signals[SIGNAL_PROPERTY_LIST_UPDATED].name)
((s->type == STREAM_TYPE_PLAYBACK) && ((t & PA_SUBSCRIPTION_EVENT_FACILITY_MASK) == PA_SUBSCRIPTION_EVENT_SINK_INPUT)) || ((s->type == STREAM_TYPE_RECORD) && ((t & PA_SUBSCRIPTION_EVENT_FACILITY_MASK) == PA_SUBSCRIPTION_EVENT_SOURCE_OUTPUT))
pa_dbus_protocol_add_interface(s->dbus_protocol, s->path, &stream_interface_info, s) >= 0
pa_dbus_protocol_remove_interface(s->dbus_protocol, s->path, stream_interface_info.name) >= 0
pa_dbusiface_stream_new_playback
pa_dbusiface_stream_new_playback
handle_get_all
handle_get_all
handle_get_property_list
handle_get_property_list
handle_kill
handle_kill
handle_move
handle_move
handle_get_resample_method
handle_get_resample_method
handle_get_device_latency
handle_get_device_latency
handle_get_buffer_latency
handle_get_buffer_latency
handle_set_mute
handle_set_mute
handle_get_mute
handle_get_mute
handle_set_volume
handle_set_volume
handle_get_volume
handle_get_volume
handle_get_channels
handle_get_channels
handle_get_sample_rate
handle_get_sample_rate
handle_get_sample_format
handle_get_sample_format
handle_get_device
handle_get_device
handle_get_client
handle_get_client
handle_get_owner_module
handle_get_owner_module
handle_get_driver
handle_get_driver
handle_get_index
handle_get_index
send_event_cb
send_event_cb
subscription_cb
subscription_cb
pa_object_cast
pa_object_cast
pa_dbusiface_stream_new_record
pa_dbusiface_stream_new_record
pa_dbusiface_stream_free
pa_dbusiface_stream_free
pa_dbusiface_stream_get_path
pa_dbusiface_stream_get_path
Allowing connection by user %lu.
modules/dbus/module-dbus-protocol.c
ev = dbus_timeout_get_data(timeout)
fd == dbus_watch_get_unix_fd(watch)
Asked to handle disabled watch: %p %i
signal_msg = dbus_message_new_signal(pa_dbusiface_core_get_client_path(conn->server->userdata->core_iface, c), PA_DBUSIFACE_CLIENT_INTERFACE, "ClientEvent")
dbus_connection_send(pa_dbus_wrap_connection_get(conn->wrap_conn), signal_msg, NULL)
pa_dbus_protocol_unregister_connection(c->server->userdata->dbus_protocol, pa_dbus_wrap_connection_get(c->wrap_conn)) >= 0
ev = dbus_watch_get_data(watch)
dbus_connection_add_filter(new_connection, disconnection_filter_cb, c, NULL)
pa_dbus_protocol_register_connection(s->userdata->dbus_protocol, new_connection, c->client) >= 0
dbus_server_listen() failed: %s: %s
dbus_server_set_watch_functions() ran out of memory.
dbus_server_set_timeout_functions() ran out of memory.
access=local|remote|local,remote tcp_port=<port number> tcp_listen=<hostname>
Failed to parse module arguments.
Invalid tcp_port argument: '%s'
Starting the local D-Bus server failed.
Starting the D-Bus server for remote connections failed.
timeout
message
Disconnected
org.freedesktop.DBus.Local
c->userdata
Connection killed.
watch
new_connection
D-Bus client
application.name
address
D-Bus interface
Tanu Kaskinen
access
local
local,remote
tcp_port
0.0.0.0
tcp_listen
tcp:host=%s,port=%u
Invalid access argument: '%s'
module_dbus_protocol_LTX_pa__init
module_dbus_protocol_LTX_pa__init
connection_free
connection_free
start_server
start_server
timeout_toggled_cb
timeout_toggled_cb
timeout_remove_cb
timeout_remove_cb
timeout_add_cb
timeout_add_cb
watch_toggled_cb
watch_toggled_cb
get_watch_flags
get_watch_flags
watch_remove_cb
watch_remove_cb
watch_add_cb
watch_add_cb
io_event_cb
io_event_cb
connection_new_cb
connection_new_cb
disconnection_filter_cb
disconnection_filter_cb
client_send_event_cb
client_send_event_cb
client_kill_cb
client_kill_cb
user_check_cb
server_free
server_free
module_dbus_protocol_LTX_pa__done
module_dbus_protocol_LTX_pa__done
;*3$"
module-dbus-protocol.so.debug
7zXZ
]bOP
oW-7:
4:HDj
~T~Q
@>g6
	7~c
T;-"
aq*1
t2hDZ
[W Q
+1Jn
._<XD
dHs[
Xc6@
[qeZ
oi5/
3G?w
<R~2A
UNCu
/cZQ~
jz=(jn
3Xm-fn
?,0	
YF+?
X1Le
*Z#X'D0S
'n}{
XX[#
]6(*t?
hs*zW
+fz2
m$	1
Eq']
v".^3
l1AL
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.data
.bss
.gnu_debuglink
.gnu_debugdata
