@*@7
/I3E
__gmon_start__
_init
_fini
__cxa_finalize
_Jv_RegisterClasses
boot_Unicode__Normalize
Perl_Gthr_key_ptr
pthread_getspecific
Perl_Istack_sp_ptr
Perl_Imarkstack_ptr_ptr
Perl_Istack_base_ptr
Perl_newSVpv
Perl_new_version
Perl_sv_derived_from
Perl_vcmp
XS_Unicode__Normalize_decompose
Perl_newXS_flags
XS_Unicode__Normalize_reorder
XS_Unicode__Normalize_compose
Perl_newXS
Perl_sv_setpv
XS_Unicode__Normalize_NFD
XS_Unicode__Normalize_NFC
XS_Unicode__Normalize_checkNFD
XS_Unicode__Normalize_checkNFC
XS_Unicode__Normalize_checkFCD
XS_Unicode__Normalize_getCombinClass
XS_Unicode__Normalize_isExclusion
XS_Unicode__Normalize_isSingleton
XS_Unicode__Normalize_isNonStDecomp
XS_Unicode__Normalize_isComp2nd
XS_Unicode__Normalize_isNFD_NO
XS_Unicode__Normalize_isComp_Ex
XS_Unicode__Normalize_getComposite
XS_Unicode__Normalize_getCanon
XS_Unicode__Normalize_splitOnLastStarter
Perl_Iunitcheckav_ptr
Perl_Iscopestack_ix_ptr
Perl_call_list
Perl_Isv_yes_ptr
Perl_form
Perl_get_sv
Perl_sv_2pv_flags
Perl_croak_nocontext
Perl_vstringify
Perl_croak
Perl_newSVpvn
Perl_sv_2mortal
Perl_sv_utf8_upgrade_flags
Perl_sv_pvn_force_flags
Perl_utf8_hop
Perl_utf8n_to_uvuni
Perl_Istack_max_ptr
Perl_stack_grow
Perl_uvuni_to_utf8_flags
Perl_Isv_undef_ptr
Perl_sv_2uv_flags
strlen
Perl_newSVuv
strcmp
Perl_Isv_no_ptr
Perl_Iop_ptr
Perl_pad_sv
Perl_sv_setuv
Perl_mg_set
Perl_sv_newmortal
Perl_safesysrealloc
qsort
Perl_safesysmalloc
Perl_safesysfree
PL_memory_wrap
Perl_sv_grow
Perl_sv_setpvn
Perl_sv_2bool
UNF_complist_00003c
UNF_complist_00003d
UNF_complist_00003e
UNF_complist_000041
UNF_complist_000042
UNF_complist_000043
UNF_complist_000044
UNF_complist_000045
UNF_complist_000046
UNF_complist_000047
UNF_complist_000048
UNF_complist_000049
UNF_complist_00004a
UNF_complist_00004b
UNF_complist_00004c
UNF_complist_00004d
UNF_complist_00004e
UNF_complist_00004f
UNF_complist_000050
UNF_complist_000052
UNF_complist_000053
UNF_complist_000054
UNF_complist_000055
UNF_complist_000056
UNF_complist_000057
UNF_complist_000058
UNF_complist_000059
UNF_complist_00005a
UNF_complist_000061
UNF_complist_000062
UNF_complist_000063
UNF_complist_000064
UNF_complist_000065
UNF_complist_000066
UNF_complist_000067
UNF_complist_000068
UNF_complist_000069
UNF_complist_00006a
UNF_complist_00006b
UNF_complist_00006c
UNF_complist_00006d
UNF_complist_00006e
UNF_complist_00006f
UNF_complist_000070
UNF_complist_000072
UNF_complist_000073
UNF_complist_000074
UNF_complist_000075
UNF_complist_000076
UNF_complist_000077
UNF_complist_000078
UNF_complist_000079
UNF_complist_00007a
UNF_complist_0000a8
UNF_complist_0000c2
UNF_complist_0000c4
UNF_complist_0000c5
UNF_complist_0000c6
UNF_complist_0000c7
UNF_complist_0000ca
UNF_complist_0000cf
UNF_complist_0000d4
UNF_complist_0000d5
UNF_complist_0000d6
UNF_complist_0000d8
UNF_complist_0000dc
UNF_complist_0000e2
UNF_complist_0000e4
UNF_complist_0000e5
UNF_complist_0000e6
UNF_complist_0000e7
UNF_complist_0000ea
UNF_complist_0000ef
UNF_complist_0000f4
UNF_complist_0000f5
UNF_complist_0000f6
UNF_complist_0000f8
UNF_complist_0000fc
UNF_complist_000102
UNF_complist_000103
UNF_complist_000112
UNF_complist_000113
UNF_complist_00014c
UNF_complist_00014d
UNF_complist_00015a
UNF_complist_00015b
UNF_complist_000160
UNF_complist_000161
UNF_complist_000168
UNF_complist_000169
UNF_complist_00016a
UNF_complist_00016b
UNF_complist_00017f
UNF_complist_0001a0
UNF_complist_0001a1
UNF_complist_0001af
UNF_complist_0001b0
UNF_complist_0001b7
UNF_complist_0001ea
UNF_complist_0001eb
UNF_complist_000226
UNF_complist_000227
UNF_complist_000228
UNF_complist_000229
UNF_complist_00022e
UNF_complist_00022f
UNF_complist_000292
UNF_complist_000391
UNF_complist_000395
UNF_complist_000397
UNF_complist_000399
UNF_complist_00039f
UNF_complist_0003a1
UNF_complist_0003a5
UNF_complist_0003a9
UNF_complist_0003ac
UNF_complist_0003ae
UNF_complist_0003b1
UNF_complist_0003b5
UNF_complist_0003b7
UNF_complist_0003b9
UNF_complist_0003bf
UNF_complist_0003c1
UNF_complist_0003c5
UNF_complist_0003c9
UNF_complist_0003ca
UNF_complist_0003cb
UNF_complist_0003ce
UNF_complist_0003d2
UNF_complist_000406
UNF_complist_000410
UNF_complist_000413
UNF_complist_000415
UNF_complist_000416
UNF_complist_000417
UNF_complist_000418
UNF_complist_00041a
UNF_complist_00041e
UNF_complist_000423
UNF_complist_000427
UNF_complist_00042b
UNF_complist_00042d
UNF_complist_000430
UNF_complist_000433
UNF_complist_000435
UNF_complist_000436
UNF_complist_000437
UNF_complist_000438
UNF_complist_00043a
UNF_complist_00043e
UNF_complist_000443
UNF_complist_000447
UNF_complist_00044b
UNF_complist_00044d
UNF_complist_000456
UNF_complist_000474
UNF_complist_000475
UNF_complist_0004d8
UNF_complist_0004d9
UNF_complist_0004e8
UNF_complist_0004e9
UNF_complist_0005d0
UNF_complist_0005d1
UNF_complist_0005d2
UNF_complist_0005d3
UNF_complist_0005d4
UNF_complist_0005d5
UNF_complist_0005d6
UNF_complist_0005d8
UNF_complist_0005d9
UNF_complist_0005da
UNF_complist_0005db
UNF_complist_0005dc
UNF_complist_0005de
UNF_complist_0005e0
UNF_complist_0005e1
UNF_complist_0005e3
UNF_complist_0005e4
UNF_complist_0005e6
UNF_complist_0005e7
UNF_complist_0005e8
UNF_complist_0005e9
UNF_complist_0005ea
UNF_complist_0005f2
UNF_complist_000627
UNF_complist_000648
UNF_complist_00064a
UNF_complist_0006c1
UNF_complist_0006d2
UNF_complist_0006d5
UNF_complist_000915
UNF_complist_000916
UNF_complist_000917
UNF_complist_00091c
UNF_complist_000921
UNF_complist_000922
UNF_complist_000928
UNF_complist_00092b
UNF_complist_00092f
UNF_complist_000930
UNF_complist_000933
UNF_complist_0009a1
UNF_complist_0009a2
UNF_complist_0009af
UNF_complist_0009c7
UNF_complist_000a16
UNF_complist_000a17
UNF_complist_000a1c
UNF_complist_000a2b
UNF_complist_000a32
UNF_complist_000a38
UNF_complist_000b21
UNF_complist_000b22
UNF_complist_000b47
UNF_complist_000b92
UNF_complist_000bc6
UNF_complist_000bc7
UNF_complist_000c46
UNF_complist_000cbf
UNF_complist_000cc6
UNF_complist_000cca
UNF_complist_000d46
UNF_complist_000d47
UNF_complist_000dd9
UNF_complist_000ddc
UNF_complist_000f40
UNF_complist_000f42
UNF_complist_000f4c
UNF_complist_000f51
UNF_complist_000f56
UNF_complist_000f5b
UNF_complist_000f90
UNF_complist_000f92
UNF_complist_000f9c
UNF_complist_000fa1
UNF_complist_000fa6
UNF_complist_000fab
UNF_complist_000fb2
UNF_complist_000fb3
UNF_complist_001025
UNF_complist_001b05
UNF_complist_001b07
UNF_complist_001b09
UNF_complist_001b0b
UNF_complist_001b0d
UNF_complist_001b11
UNF_complist_001b3a
UNF_complist_001b3c
UNF_complist_001b3e
UNF_complist_001b3f
UNF_complist_001b42
UNF_complist_001e36
UNF_complist_001e37
UNF_complist_001e5a
UNF_complist_001e5b
UNF_complist_001e62
UNF_complist_001e63
UNF_complist_001ea0
UNF_complist_001ea1
UNF_complist_001eb8
UNF_complist_001eb9
UNF_complist_001ecc
UNF_complist_001ecd
UNF_complist_001f00
UNF_complist_001f01
UNF_complist_001f02
UNF_complist_001f03
UNF_complist_001f04
UNF_complist_001f05
UNF_complist_001f06
UNF_complist_001f07
UNF_complist_001f08
UNF_complist_001f09
UNF_complist_001f0a
UNF_complist_001f0b
UNF_complist_001f0c
UNF_complist_001f0d
UNF_complist_001f0e
UNF_complist_001f0f
UNF_complist_001f10
UNF_complist_001f11
UNF_complist_001f18
UNF_complist_001f19
UNF_complist_001f20
UNF_complist_001f21
UNF_complist_001f22
UNF_complist_001f23
UNF_complist_001f24
UNF_complist_001f25
UNF_complist_001f26
UNF_complist_001f27
UNF_complist_001f28
UNF_complist_001f29
UNF_complist_001f2a
UNF_complist_001f2b
UNF_complist_001f2c
UNF_complist_001f2d
UNF_complist_001f2e
UNF_complist_001f2f
UNF_complist_001f30
UNF_complist_001f31
UNF_complist_001f38
UNF_complist_001f39
UNF_complist_001f40
UNF_complist_001f41
UNF_complist_001f48
UNF_complist_001f49
UNF_complist_001f50
UNF_complist_001f51
UNF_complist_001f59
UNF_complist_001f60
UNF_complist_001f61
UNF_complist_001f62
UNF_complist_001f63
UNF_complist_001f64
UNF_complist_001f65
UNF_complist_001f66
UNF_complist_001f67
UNF_complist_001f68
UNF_complist_001f69
UNF_complist_001f6a
UNF_complist_001f6b
UNF_complist_001f6c
UNF_complist_001f6d
UNF_complist_001f6e
UNF_complist_001f6f
UNF_complist_001f70
UNF_complist_001f74
UNF_complist_001f7c
UNF_complist_001fb6
UNF_complist_001fbf
UNF_complist_001fc6
UNF_complist_001ff6
UNF_complist_001ffe
UNF_complist_002190
UNF_complist_002192
UNF_complist_002194
UNF_complist_0021d0
UNF_complist_0021d2
UNF_complist_0021d4
UNF_complist_002203
UNF_complist_002208
UNF_complist_00220b
UNF_complist_002223
UNF_complist_002225
UNF_complist_00223c
UNF_complist_002243
UNF_complist_002245
UNF_complist_002248
UNF_complist_00224d
UNF_complist_002261
UNF_complist_002264
UNF_complist_002265
UNF_complist_002272
UNF_complist_002273
UNF_complist_002276
UNF_complist_002277
UNF_complist_00227a
UNF_complist_00227b
UNF_complist_00227c
UNF_complist_00227d
UNF_complist_002282
UNF_complist_002283
UNF_complist_002286
UNF_complist_002287
UNF_complist_002291
UNF_complist_002292
UNF_complist_0022a2
UNF_complist_0022a8
UNF_complist_0022a9
UNF_complist_0022ab
UNF_complist_0022b2
UNF_complist_0022b3
UNF_complist_0022b4
UNF_complist_0022b5
UNF_complist_002add
UNF_complist_003046
UNF_complist_00304b
UNF_complist_00304d
UNF_complist_00304f
UNF_complist_003051
UNF_complist_003053
UNF_complist_003055
UNF_complist_003057
UNF_complist_003059
UNF_complist_00305b
UNF_complist_00305d
UNF_complist_00305f
UNF_complist_003061
UNF_complist_003064
UNF_complist_003066
UNF_complist_003068
UNF_complist_00306f
UNF_complist_003072
UNF_complist_003075
UNF_complist_003078
UNF_complist_00307b
UNF_complist_00309d
UNF_complist_0030a6
UNF_complist_0030ab
UNF_complist_0030ad
UNF_complist_0030af
UNF_complist_0030b1
UNF_complist_0030b3
UNF_complist_0030b5
UNF_complist_0030b7
UNF_complist_0030b9
UNF_complist_0030bb
UNF_complist_0030bd
UNF_complist_0030bf
UNF_complist_0030c1
UNF_complist_0030c4
UNF_complist_0030c6
UNF_complist_0030c8
UNF_complist_0030cf
UNF_complist_0030d2
UNF_complist_0030d5
UNF_complist_0030d8
UNF_complist_0030db
UNF_complist_0030ef
UNF_complist_0030f0
UNF_complist_0030f1
UNF_complist_0030f2
UNF_complist_0030fd
UNF_complist_00fb49
UNF_complist_01d157
UNF_complist_01d158
UNF_complist_01d15f
UNF_complist_01d1b9
UNF_complist_01d1ba
UNF_complist_01d1bb
UNF_complist_01d1bc
libc.so.6
__stack_chk_fail
_edata
__bss_start
_end
GLIBC_2.1.3
GLIBC_2.4
GLIBC_2.0
t#=s
\[^_]
[^_]
<[^_]
\[^_]
[^_]
,[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
L[^_]
L[^_]
L[^_]
[^_]
G';E
L[^_]
[^_]
<[^_]
<[^_]
[^_]
t	8E
<[^_]
<[^_]
<[^_]
XS_VERSION
%s::%s
1.02
version
bootstrap parameter
Normalize.c
Unicode::Normalize::decompose
Unicode::Normalize::reorder
Unicode::Normalize::compose
Unicode::Normalize::NFKD
Unicode::Normalize::NFD
Unicode::Normalize::NFC
Unicode::Normalize::FCC
Unicode::Normalize::NFKC
Unicode::Normalize::checkNFD
Unicode::Normalize::checkNFKD
Unicode::Normalize::checkNFC
Unicode::Normalize::checkNFKC
Unicode::Normalize::checkFCD
Unicode::Normalize::checkFCC
Unicode::Normalize::isComp2nd
Unicode::Normalize::isNFKD_NO
Unicode::Normalize::isNFD_NO
Unicode::Normalize::isNFKC_NO
Unicode::Normalize::isComp_Ex
Unicode::Normalize::isNFC_NO
Unicode::Normalize::getCanon
Unicode::Normalize::getCompat
Usage: %s(%s)
uv, uv2
checkFCD or -FCC
checkNFC or -NFKC
checkNFD or -NFKD
src, compat = &PL_sv_no
VIII
viii
(10)
(11)
(12)
(13)
(14)
(15)
(16)
(17)
(18)
(19)
(20)
kcal
a.m.
p.m.
((svtype)((_svi)->sv_flags & 0xff)) >= SVt_RV
Assertion %s failed: file "Normalize.c", line %d
%s object version %-p does not match %s%s%s%s %-p
Unicode::Normalize::composeContiguous
Unicode::Normalize::getCombinClass
Unicode::Normalize::isExclusion
Unicode::Normalize::isSingleton
Unicode::Normalize::isNonStDecomp
Unicode::Normalize::isNFKC_MAYBE
Unicode::Normalize::isNFC_MAYBE
Unicode::Normalize::getComposite
Unicode::Normalize::splitOnLastStarter
((svtype)((_svi)->sv_flags & 0xff)) >= SVt_PV
Assertion %s failed: file "Normalize.xs", line %d
((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVAV
((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVHV
!((((_svi)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svi)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svi)->sv_flags & 0xff)) == SVt_PVLV))
panic (Unicode::Normalize): hopping before start
((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))
((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV
!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 1122), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (((XPVCV*)(cv)->sv_any)->xcv_gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 1122), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 1122), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 1122), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"Normalize.c\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 1122), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 1122), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
((svtype)((_svi)->sv_flags & 0xff)) == SVt_IV || ((svtype)((_svi)->sv_flags & 0xff)) >= SVt_PVIV
((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVCV
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 1056), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (((XPVCV*)(cv)->sv_any)->xcv_gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 1056), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 1056), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 1056), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"Normalize.c\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 1056), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 1056), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 1026), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (((XPVCV*)(cv)->sv_any)->xcv_gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 1026), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 1026), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 1026), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"Normalize.c\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 1026), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 1026), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 1002), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (((XPVCV*)(cv)->sv_any)->xcv_gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 1002), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 1002), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 1002), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"Normalize.c\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 1002), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 1002), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 821), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (((XPVCV*)(cv)->sv_any)->xcv_gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 821), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 821), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 821), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"Normalize.c\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 821), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 821), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
panic (Unicode::Normalize %s): zero-length character
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 751), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (((XPVCV*)(cv)->sv_any)->xcv_gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 751), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 751), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 751), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"Normalize.c\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 751), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 751), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 701), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (((XPVCV*)(cv)->sv_any)->xcv_gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 701), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 701), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 701), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"Normalize.c\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 701), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 701), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
panic (Unicode::Normalize %s): target not enough
panic (Unicode::Normalize %s): longer than source
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 595), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (((XPVCV*)(cv)->sv_any)->xcv_gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 595), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 595), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 595), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"Normalize.c\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 595), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 595), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
((svtype)((dst)->sv_flags & 0xff)) >= SVt_PV
((svtype)((dst)->sv_flags & 0xff)) != SVt_PVAV
((svtype)((dst)->sv_flags & 0xff)) != SVt_PVHV
!((((dst)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((dst)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((dst)->sv_flags & 0xff)) == SVt_PVLV))
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 644), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (((XPVCV*)(cv)->sv_any)->xcv_gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 644), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 644), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 644), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"Normalize.c\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 644), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 644), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 557), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (((XPVCV*)(cv)->sv_any)->xcv_gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 557), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 557), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 557), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Normalize.c" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"Normalize.c\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 557), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 557), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
((svtype)((_svi)->sv_flags & 0xff)) == SVt_NV || ((svtype)((_svi)->sv_flags & 0xff)) >= SVt_PVNV
((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVFM
kkkk
zzzz
Normalize.so.debug
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.ctors
.dtors
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.data
.bss
.gnu_debuglink
