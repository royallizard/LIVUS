/lib/ld-linux.so.2
"PT@
libopensc.so.4
__gmon_start__
_Jv_RegisterClasses
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
sc_ctx_detect_readers
sc_ctx_log_to_file
sc_pkcs15_bind
sc_ctx_get_reader_by_name
sc_pkcs15init_set_callbacks
sc_pkcs15init_erase_card
sc_pkcs15init_finalize_card
sc_context_create
sc_pkcs15init_update_certificate
sc_hex_to_bin
sc_format_path
sc_pkcs15_read_certificate
sc_lock
sc_pkcs15_verify_pin
sc_pkcs15_print_id
sc_strerror
sc_pkcs15init_store_public_key
sc_pkcs15_find_data_object_by_id
sc_release_context
sc_pkcs15init_sanity_check
sc_format_oid
sc_pkcs15_free_certificate
sc_pkcs15init_store_data_object
sc_pkcs15_compare_id
sc_pkcs15_convert_prkey
sc_init_oid
sc_pkcs15init_get_pin_info
sc_ctx_get_reader
sc_pkcs15init_store_certificate
sc_pkcs15init_finalize_profile
sc_pkcs15_card_new
sc_wait_for_event
sc_pkcs15init_store_pin
sc_pkcs15_find_data_object_by_app_oid
sc_pkcs15_find_pin_by_auth_id
sc_pkcs15init_unbind
sc_pkcs15init_store_private_key
sc_connect_card
sc_mem_clear
sc_pkcs15init_delete_object
sc_select_file
sc_pkcs15_unbind
sc_unlock
sc_pkcs15_card_free
sc_pkcs15init_set_p15card
sc_pkcs15_find_data_object_by_name
sc_ctx_get_reader_count
sc_pkcs15_hex_string_to_id
sc_pkcs15_find_prkey_by_id
sc_pkcs15_get_objects
sc_pkcs15init_generate_key
sc_pkcs15_find_cert_by_id
sc_pkcs15_convert_pubkey
sc_pkcs15init_bind
sc_detect_card_presence
sc_pkcs15_format_id
sc_disconnect_card
sc_pkcs15init_add_app
sc_pkcs15init_update_any_df
sc_pkcs15_find_pubkey_by_id
libcrypto.so.10
sk_free
_init
d2i_PKCS12_bio
ERR_load_crypto_strings
ERR_get_error
PEM_read_bio_PrivateKey
OPENSSL_add_all_algorithms_noconf
EVP_PKEY_get0
X509_get_pubkey
X509_NAME_ENTRY_get_data
sk_num
CRYPTO_add_lock
PEM_read_bio_PUBKEY
X509_get_subject_name
X509_free
BIO_free
ASN1_STRING_to_UTF8
EC_KEY_get0_group
EC_GROUP_get_curve_name
i2d_X509
_fini
BIO_s_file
PKCS12_parse
d2i_X509_bio
PEM_read_bio_X509
X509_NAME_oneline
d2i_PUBKEY_bio
EVP_PKEY_id
CRYPTO_set_mem_functions
X509_check_purpose
BIO_new
d2i_X509
BIO_ctrl
EVP_PKEY_free
BN_cmp
OPENSSL_config
ERR_error_string
X509_NAME_get_index_by_NID
CRYPTO_free
X509_NAME_get_entry
sk_value
libz.so.1
libdl.so.2
libpthread.so.0
__errno_location
libc.so.6
_IO_stdin_used
__stpcpy_chk
fflush
__printf_chk
exit
fopen
optind
__strdup
perror
ftell
realloc
stdin
strtok
strtol
fgets
calloc
strlen
strstr
tcsetattr
fseek
memcmp
__fprintf_chk
stdout
fputc
fputs
strnlen
fclose
strtoul
malloc
strcasecmp
__ctype_b_loc
getenv
optarg
stderr
__snprintf_chk
getopt_long
strncasecmp
fileno
fwrite
fread
strchr
__vfprintf_chk
tcgetattr
__cxa_finalize
__sprintf_chk
_IO_getc
strcmp
__libc_start_main
snprintf
__stack_chk_fail
_edata
__bss_start
_end
OPENSSL_1.0.1_EC
GLIBC_2.0
GLIBC_2.1.3
GLIBC_2.4
GLIBC_2.1
GLIBC_2.3
GLIBC_2.3.4
t$8uZj Vh
OUUVR
RVPj@j
D$,PP
[^_]
|$|e
[^_]
UWVS
|$@e
d$,[^_]
d$ 1
[^_]
UWVS
D$@e
D$(t
|$,>
[^_]
t$ s21
	D$0
d$L[^_]
D$<1
L$<e3
d$L[^_]
d$,1
[^_]
d$,1
[^_]
UWVS
T$,e
D$Dub
[^_]
;t$$}_
9|$$u
L$<;M
D$h1
[^_]
|$$e
[^_]
l$4e
T$/tF
[^_]
t6=J
T$<1
$+l$$
T$<e3
d$L[^_]
D$81
[^_]
T$,t
T$,u
t$$e
[^_]
UWVS
[^_]
D$\1
x 9l$4~
L$Dt/
UWVS
d$L[^_]
t$01
D$<1
D$<e3
d$L[^_]
D$(iD$
D$(iD$
L$ v
D$(iD$
D$8@
L$(u
[^_]
UWVS
|$te
t$L1
|$Le3=
d$\[^_]
UWVS
D$H1
L$,;
T$,1
[^_]
D$,;
[^_]
t$dt6
D$0u
D$4t
[^_]
|$(e
[^_]
D$<1
T$<e3
d$H[
UWVS
D$$e
[^_]
L$$1
D$Dc
D$,1
EH;D$Du
UWVS
d$,[^_]
UWVS
|$L~U
9l$Ht
d$,[^_]
UWVS
l$pe
D$L1
;t$xr
T$ )t$x
D$Le3
d$\[^_]
UWVS
L$\1
T$$u
Sec.
Cont
rolB
yte 
PROT
d$ [^_
TERM
Sec.
Env.f
????
PKCS
#15 
Auth
AUTH
UWVS
D$ e
[^_]
UWVS
t$,U
[^_]
no PIN given for key - either use --insecure or 
specify a PIN using --auth-id
Please enter passphrase to unlock secret key: 
You have to specify the --id of the object
No object of the specified type and with id = "%s" found
or press return to accept default
Transport key (%s #%d) required.
Refusing to prompt for transport key because --no-prompt
was specified on the command line. Please invoke without
--no-prompt, or specify the --use-default-transport-keys
option to use the default transport keys without being
prompted.
Please enter key in hexadecimal notation (e.g. 00:11:22:aa:bb:cc)%s.
To use the default transport keys without being prompted,
specify the --use-default-transport-keys option on the
command line (or -T for short), or press Ctrl-C to abort.
Delete arguments: a comma-separated list containing any of the following:
  privkey,pubkey,cert,chain,data
When "data" is specified, an --application-id must also be specified,
  in the other cases an "--id" must also be specified
When "chain" is specified, the certificate chain starting with the cert
  with specified ID will be deleted, untill there's a CA cert that certifies
Change attribute argument: either privkey, pubkey, cert or data
You also have to specify the --id of the object
For now, you can only change the --label
E.g. pkcs15-init -A cert --id 45 -a 1 --label Jim
Unknown argument for --delete_objects: %.*s
Error when reading certificate. File format "%s" not supported.
Unable to read certificate from %s
Specify the --application-id or --application-name and --label for the data object to be deleted
Specify the --id for key(s) or cert(s) to be deleted
Private key enumeration failed: %s
NOTE: couldn't find privkey %s to delete
NOTE: couldn't find pubkey %s to delete
NOTE: couldn't find cert %s to delete
Chain deletion stops with cert %s
Failed to delete object %d: %s
Unable to open '%s' for reading.
Invalid number of key bits "%s"
no ID given for the cert: use --id
Couldn't find the cert with ID %s
the public keys in the old and new certificate differ
Error when reading public key. File format "%s" not supported.
Unable to read public key from %s
Error when reading private key. Key file format "%s" not supported.
Unable to read private key from %s
Warning: requested key usage incompatible with key usage specified by X.509 certificate
Certificate #%d already present, not stored.
Valid X.509 usage names (case-insensitive):
digitalSignature,keyCertSign,cRLSign
keyEncipherment,dataEncipherment
Ambiguous X.509 key usage %.*s
Use commas to separate several usage names.
Abbreviated names are okay if unique (e.g. dataEnc)
Error: you cannot specify option
Error: The --no-so-pin option and --so-pin/--so-puk are mutuallyexclusive.
Error: erasing a card is incompatible with all other actions
 (Optional - press return for no PIN)
PIN too short (min %lu characters)
PIN too long (max %lu characters)
Sorry, the two pins did not match. Please try again.
Security officer PIN unlock key
Unspecified PIN [reference %u]
Failed to read PIN from user: %s
PIN code enumeration failed: %s
Internal error in options handling, option %u
Failed to establish context: %s
Couldn't bind to the card: %s
Failed to verify User PIN : %s
Card not pristine; detected (possibly incomplete) PKCS#15 structure
create PKCS #15 meta structure
Creates a new PKCS #15 structure
Store a new PIN/PUK on the card
Generate a new key and store it on the card
Update an X.509 certificate (carefull with mail decryption certs!!)
Delete object(s) (use "help" for more information)
Change attribute(s) (use "help" for more information)
Card specific sanity check and possibly update procedure
Erase application with AID <arg>
Specify security officer (SO) PIN
Specify unblock PIN for SO PIN
Do not install a SO PIN, and do not prompt for it
Specify the serial number of the card
Specify ID of PIN to use/create
Specify ID of PUK to use/create
Verify PIN after card binding (use with --auth-id)
Specify public key label (use with --generate-key)
Specify user cert label (use with --store-private-key)
Specify application name of data object (use with --store-data-object)
Specify application id of data object (use with --store-data-object)
Specify AID of the on-card PKCS#15 application to be binded to (in hexadecimal form)
Output public portion of generated key to file
Specify key/cert file format: PEM (=default), DER or PKCS12
Specify passphrase for unlocking secret key
Mark certificate as a CA certificate
Specify X.509 key usage (use "--key-usage help" for more information)
Finish initialization phase of the smart card
Update 'lastUpdate' attribut of tokenInfo
When storing PKCS#12 ignore CA certificates
Store or update existing certificate
Private key stored as an extractable key
Insecure mode: do not require a PIN for private key
Do not ask for transport keys if the driver thinks it knows the key
Do not prompt the user; if no PINs supplied, pinpad will be used
Specify the general profile to use
Specify the card profile to use
Read additional command line options from file
Verbose operation. Use several times to enable debug output.
You should specify a --label
Secure messaging key
External authentication key
Please enter key
%s [
%02x
privkey
help
  another cert on the card
Invalid AID value: '%s'
Unable to open %s: %m
get_cert_info() failed: %s
Deleted %d objects
pkcs15-init
Invalid OID "%s"
fseek/ftell error
read
gost2001
Unknown algorithm "%s"
No key in pkcs12 file?!
pkcs15-init.c
pkcs12
Importing %d certificates:
  %d: %s
nonRepudiation
digitalSignature
sign
decrypt
Unknown X.509 key usage %.*s
Aliases:
  %-12s %s
Cannot parse secret "%s"
 --%s
 -%c
 more than once.
erase-card
Option %s: missing argument
Unknown option "%s"
Security Officer PIN
User PIN
Please enter %s: 
Please type again to verify: 
PINs do not match.
User PUK
Security officer PIN
User PIN unlock key
%s [%s]
%s required
pkcs15init.get_pin
Unable to find PIN code: %s
PIN object '%s' not found
User PIN [%s]
User PIN required
Operation failed: %s
User
Security Officer
pkcs15init.new_%s_%s
user
Unblock Code for New %s PIN
%s unblocking PIN (PUK)
+onepin
Failed to read PIN: %s
No pin id specified
You must specify a PIN
create-pkcs15
Internal: bad has_arg value
No action specified.
No profile specified.
stderr
Finalize profile error %s
PKCS#15 binding failed: %s
Found %s
About to %s.
3F00
2F00
5015
Pristine card.
Action not yet implemented
Failed to %s: %s
keyEncipherment
dataEncipherment
keyAgreement
keyCertSign
cRLSign
pubkey
cert
chain
do nothing
verify that card is pristine
erase card
delete object(s)
store PIN
generate key
store private key
store public key
store certificate
update certificate
store data object
finalizing card
change attribute(s)
check card's sanity
update 'last-update'
erase application
Erase the smart card
Store private key
Store public key
Store an X.509 certificate
Store a data object
Specify which reader to use
Specify PIN
Specify unblock PIN
Specify ID of key/certificate
Specify label of PIN/key
Specify label of PUK
Wait for card insertion
Display this message
store-pin
generate-key
store-private-key
store-public-key
store-certificate
update-certificate
store-data
delete-objects
change-attributes
sanity-check
erase-application
reader
so-puk
no-so-pin
serial
auth-id
puk-id
verify-pin
puk-label
public-key-label
cert-label
application-name
application-id
output-file
format
passphrase
authority
key-usage
finalize
update-last-update
ignore-ca-certificates
update-existing
extractable
insecure
use-default-transport-keys
no-prompt
card-profile
options-file
wait
verbose
assert-pristine
secret
Waiting for a reader to be attached...
Error while waiting for a reader: %s
Error while refreshing readers: %s
Waiting for a card to be inserted...
Error while waiting for a card: %s
Reader "%s" not found (%d reader(s) detected)
Connecting to card in reader %s...
Failed to connect to card: %s
No smart card readers found.
Using reader with a card: %s
Matched ATR in reader: %s
Card not present.
Using card driver %s.
Failed to lock card: %s
\x%02X
%08X: 
%02X 
 <arg>
 [arg]
Usage: %s [OPTIONS] %s
Usage: %s [OPTIONS]
Options:
-%c, --%s%s
    --%s%s
  %-28s  %s
NEVR
NONE
Ox%X
error: 
Aborting.
warning: 
env:
;*2$"4
pkcs15-init.debug
7zXZ
?7I,
{w_MA
Nj'{
`>?XX
@O\E
OGS1
a$%5
gmq 
E>4kwLi
HVtC
81X=
\%hs`
'6OC*
UE G
;!&?
omWF
uZko
Lmj[
07>(k
c}%Q6
Q[ %/D
Wl F
$![2k
4)mD
x"%q
	6"f+
&qg3
>{E{
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.data
.bss
.gnu_debuglink
.gnu_debugdata
