-zs,
k/KD
__gmon_start__
_init
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
IGDstartelt
memcpy
memcmp
IGDendelt
IGDdata
printIGD
__printf_chk
puts
strlen
strncpy
parserootdesc
parsexml
simpleUPnPcommand2
__snprintf_chk
parseURL
soapPostSubmit
getHTTPResponse
close
connecthostport
simpleUPnPcommand
upnpDiscover
getDevicesFromMiniSSDPD
strstr
socket
in6addr_any
setsockopt
if_nametoindex
bind
getaddrinfo
sendto
freeaddrinfo
receivedata
malloc
strncasecmp
inet_addr
gai_strerror
stderr
__fprintf_chk
freeUPNPDevlist
free
GetUPNPUrls
__strdup
strchr
memmove
if_indextoname
FreeUPNPUrls
UPNPIGD_IsConnected
UPNP_GetStatusInfo
UPNP_GetValidIGD
calloc
memset
miniwget_getaddr
UPNP_GetIGDFromUrl
send
__memcpy_chk
__ctype_b_loc
realloc
strtol
getsockname
getnameinfo
strtoul
miniwget
UPNP_GetConnectionTypeInfo
ctime
UPNP_GetLinkLayerMaxBitRates
UPNP_GetExternalIPAddress
putchar
protofix
fwrite
UPNP_AddPortMapping
UPNP_GetSpecificPortMappingEntry
strupnperror
main
UPNP_GetOutboundPinholeTimeout
UPNP_GetGenericPortMappingEntry
UPNP_CheckPinholeWorking
UPNP_GetPinholePackets
UPNP_DeletePortMapping
UPNP_UpdatePinhole
UPNP_GetTotalBytesSent
UPNP_GetTotalBytesReceived
UPNP_GetTotalPacketsSent
UPNP_GetTotalPacketsReceived
UPNP_GetListOfPortMappings
FreePortListing
UPNP_DeletePinhole
UPNP_GetFirewallStatus
UPNP_AddPinhole
ParseNameValue
GetValueFromNameValueList
ClearNameValueList
sscanf
UPNP_GetPortMappingNumberOfEntries
ParsePortListing
strcmp
connect
__errno_location
__fdelt_chk
select
getsockopt
poll
recv
read
libc.so.6
__stack_chk_fail
_edata
__bss_start
_end
libminiupnpc.so.9
GLIBC_2.3
GLIBC_2.1.3
GLIBC_2.15
GLIBC_2.1
GLIBC_2.4
GLIBC_2.3.4
GLIBC_2.0
[^_]
D$H)
9t$X
T$Pu
9t$X
T$Pu
9t$X
D$T1
;t$X|
UWVS
[^_]
[^_]
UWVS
[^_]
[^_]
[^_]
UWVS
d$,[^_]
<ht@
/;L$0
[^_]
D$<1
D$<e3
d$H[
UWVS
T$0f
[^_]
d$([
UWVS
[^_]
D$`1
9D$ 
9D$ 
L$(u
T$Tu
D$xtE
UWVS
D$\1
D$\e3
d$l[^_]
D$l1
T$le3
d$p[^_
UWVS
D$P1
d$<[^_]
d$<1
[^_]
UWVS
t$Te
D$,1
L$,e3
d$<[^_]
UWVS
?<t(
d$<[^_]
< tB<
d$<[^_]
L$$th)
d$<[^_]
|$P)D$
9D$$
t$Pt
UWVS
T$Dt9
[^_]
D$\e
t$,9t$8
9t$4
9D$P
;T$<}
;T$<}
t$<)
D$l1
|$ 9
9l$ ~=
9l$ 
9|$8
D$$)
;L$4v)
)t$$
9l$ 
9l$ 
+l$,9T$4s*9|$8
D$0ug
[^_]
L$0e
[^_]
UWVS
t$xe
D$L1
?ht!1
L$Le3
d$\[^_]
D$ A
L$ 1
0<	w
0<	v
L$ u
:t?f
D$ @
t$+e
D$l1
L$le3
d$p[^_
UWVS
L$l1
L$le3
d$|[^_]
T$\e
+D$$
[^_]
UWVS
[^_]
D$|1
T$|e3
D$|1
T$|e3
D$|1
T$|e3
D$|1
T$|e3
UWVS
[^_]
UWVS
|$|1
L$|e3
[^_]
UWVS
t$|1
|$|e3=
[^_]
UWVS
|$|1
L$|e3
[^_]
UWVS
T$(e
[^_]
UWVS
D$$e
[^_]
UWVS
[^_]
UWVS
D$|1
L$|e3
[^_]
UWVS
[^_]
UWVS
[^_]
UWVS
[^_]
UWVS
[^_]
UWVS
t$<e
[^_]
UWVS
D$|1
L$|e3
[^_]
UWVS
D$|1
L$|e3
[^_]
UWVS
T$|1
t$|e35
[^_]
UWVS
T$|1
t$|e35
[^_]
EDt&
d$,[^_]
|$H?
d$,[^_]
L$<1
D$<e3
d$H[
|$ 1
T$$	T
[^_]
T$ 1
UWVS
[^_]
[^_]
[^_]
L$<1
D$<e3
d$H[
UWVS
l$\e
D$,1
t$$f
L$,e3
d$<[^_]
UWVS
9D$(v
[^_]
service
URLBase
presentationURL
serviceType
controlURL
eventSubURL
SCPDURL
urlbase = '%s'
 serviceType = '%s'
 controlURL = '%s'
 eventSubURL = '%s'
 SCPDURL = '%s'
 servicetype = '%s'
WAN IPv6 Firewall Control :
urn:schemas-upnp-org:service:WANCommonInterfaceConfig:1
urn:schemas-upnp-org:service:WANIPv6FirewallControl:1
urn:schemas-upnp-org:service:WANIPConnection:1
urn:schemas-upnp-org:service:WANPPPConnection:1
WAN Device (Common interface config) :
primary WAN Connection Device (IP or PPP Connection):
secondary WAN Connection Device (IP or PPP Connection):
%s#%s
></s:Body></s:Envelope>
/var/run/minissdpd.sock
FF05::C
239.255.255.250
FF02::C
socket
setsockopt
bind
1900
getaddrinfo: %s
sendto
location
[FF02::C]
[FF05::C]
http://[fe80:
Connected
upnp:rootdevice
<?xml version="1.0"?>
<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><u:%s xmlns:u="%s"></u:%s></s:Body></s:Envelope>
<?xml version="1.0"?>
<s:Envelope xmlns:s="http://schemas.xmlsoap.org/soap/envelope/" s:encodingStyle="http://schemas.xmlsoap.org/soap/encoding/"><s:Body><u:%s xmlns:u="%s">
urn:schemas-upnp-org:device:InternetGatewayDevice:1
M-SEARCH * HTTP/1.1
HOST: %s:1900
ST: %s
MAN: "ssdp:discover"
MX: %u
<![CDATA[
:%hu
send
POST %s HTTP/%s
Host: %s%s
User-Agent: Linux, UPnP/1.0, MiniUPnPc/1.8
Content-Length: %d
Content-Type: text/xml
SOAPAction: "%s"
Connection: Close
Cache-Control: no-cache
Pragma: no-cache
content-length
transfer-encoding
chunked
getsockname
getnameinfo() failed : %s
GET %s HTTP/%s
Host: %s:%d
Connection: Close
User-Agent: Linux, UPnP/1.0, MiniUPnPc/1.8
GetConnectionTypeInfo failed.
Connection Type : %s
GetStatusInfo failed.
  Time started : %s
MaxBitRateDown : %u bps
 (%u.%u Mbps)
 (%u Kbps)
   MaxBitRateUp %u bps
ExternalIPAddress = %s
Wrong arguments
invalid protocol
GetExternalIPAddress failed.
InternalIP:Port = %s:%s
protocol is UDP or TCP
Options:
option '%s' invalid
 desc: %s
 st: %s
Found valid IGD : %s
Trying to continue anyway
Found device (igd ?) : %s
Local LAN ip address : %s
1000
65535
invalid arguments
protocol invalid
Bytes:   Sent: %8u	Recv: %8u
Packets: Sent: %8u	Recv: %8u
Presentation URL found:
            %s
Unknown switch -%c
upnpDiscover() error code=%d
Status : %s, uptime=%us, LastConnectionError : %s
GetLinkLayerMaxBitRates failed.
GetExternalIPAddress failed. (errorcode=%d)
AddPortMapping(%s, %s, %s) failed with code %d (%s)
GetSpecificPortMappingEntry() failed with code %d (%s)
external %s:%s %s is redirected to internal %s:%s (duration=%s)
upnpc : miniupnpc library test client. (c) 2005-2013 Thomas Bernard
Go to http://miniupnp.free.fr/ or http://miniupnp.tuxfamily.org/
for more information.
Usage :	%s [options] -a ip port external_port protocol [duration]
		Add port redirection
       	%s [options] -d external_port protocol [port2 protocol2] [...]
		Delete port redirection
       	%s [options] -s
		Get Connection status
       	%s [options] -l
		List redirections
       	%s [options] -L
		List redirections (using GetListOfPortMappings, IGD v2)
       	%s [options] -r port1 protocol1 [port2 protocol2] [...]
		Add all redirections to the current host
       	%s [options] -A remote_ip remote_port internal_ip internal_port protocol lease_time
		Add Pinhole (for IGD:2 only)
       	%s [options] -U uniqueID new_lease_time
		Update Pinhole (for IGD:2 only)
       	%s [options] -C uniqueID
		Check if Pinhole is Working (for IGD:2 only)
       	%s [options] -K uniqueID
		Get Number of packets going through the rule (for IGD:2 only)
       	%s [options] -D uniqueID
		Delete Pinhole (for IGD:2 only)
       	%s [options] -S
		Get Firewall status (for IGD:2 only)
       	%s [options] -G remote_ip remote_port internal_ip internal_port protocol
		Get Outbound Pinhole Timeout (for IGD:2 only)
       	%s [options] -P
		Get Presentation url
  -e description : set description for port mapping.
  -6 : use ip v6 instead of ip v4.
  -u url : bypass discovery process by providing the XML root description url.
  -m address/interface : provide ip address (ip v4) or interface name (ip v4 or v6) to use for sending SSDP multicast packets.
  -p path : use this path for MiniSSDPd socket.
Found a (not connected?) IGD : %s
UPnP device found. Is it an IGD ? : %s
 i protocol exPort->inAddr:inPort description remoteHost leaseTime
%2d %s %5s->%s:%-5s '%s' '%s' %s
GetGenericPortMappingEntry() returned %d (%s)
%2d %s %5hu->%s:%-5hu '%s' '%s' %u
GetListOfPortMappings() returned %d (%s)
UPNP_DeletePortMapping() returned : %d
AddPinhole([%s]:%s -> [%s]:%s) failed with code %d (%s)
AddPinhole: ([%s]:%s -> [%s]:%s) / Pinhole ID = %s
CheckPinholeWorking: Pinhole ID = %s / IsWorking = %s
CheckPinholeWorking() failed with code %d (%s)
UpdatePinhole: Pinhole ID = %s with Lease Time: %s
UpdatePinhole: ID (%s) failed with code %d (%s)
GetPinholePackets() failed with code %d (%s)
GetPinholePackets: Pinhole ID = %s / PinholePackets = %d
UPNP_DeletePinhole() returned : %d
FirewallEnabled: %d & Inbound Pinhole Allowed: %d
GetFirewallStatus:
   Firewall Enabled: %s
   Inbound Pinhole Allowed: %s
GetOutboundPinholeTimeout([%s]:%s -> [%s]:%s) failed with code %d (%s)
GetOutboundPinholeTimeout: ([%s]:%s -> [%s]:%s) / Timeout = %d
No valid UPNP Internet Gateway Device found.
No IGD UPnP Device found on the network !
List of UPNP devices found on the network :
GetTotalBytesSent
NewTotalBytesSent
GetTotalBytesReceived
NewTotalBytesReceived
GetTotalPacketsSent
NewTotalPacketsSent
GetTotalPacketsReceived
NewTotalPacketsReceived
GetStatusInfo
NewUptime
NewConnectionStatus
NewLastConnectionError
errorCode
GetConnectionTypeInfo
NewConnectionType
GetCommonLinkProperties
NewLayer1DownstreamMaxBitRate
NewLayer1UpstreamMaxBitRate
GetExternalIPAddress
NewExternalIPAddress
libminiupnpc
NewRemoteHost
NewExternalPort
NewProtocol
NewInternalPort
NewInternalClient
NewEnabled
NewPortMappingDescription
NewLeaseDuration
AddPortMapping
DeletePortMapping
NewPortMappingIndex
GetGenericPortMappingEntry
GetPortMappingNumberOfEntries
NewPortMappingNumberOfEntries
GetSpecificPortMappingEntry
NewStartPort
NewEndPort
NewManage
NewNumberOfPorts
GetListOfPortMappings
GetFirewallStatus
FirewallEnabled
InboundPinholeAllowed
RemotePort
GetOutboundPinholeTimeout
empty
AddPinhole
UniqueID
NewLeaseTime
UpdatePinhole
DeletePinhole
CheckPinholeWorking
IsWorking
GetPinholePackets
NewPortListing
Success
Miniupnpc Unknown Error
Miniupnpc Invalid Arguments
Miniupnpc Socket error
Invalid Action
Invalid Args
Action Failed
Action not authorized
PinholeSpaceExhausted
FirewallDisabled
InboundPinholeNotAllowed
NoSuchEntry
ProtocolNotSupported
ProtocolWildcardingNotAllowed
WildcardNotPermittedInSrcIP
NoPacketSent
SpecifiedArrayIndexInvalid
NoSuchEntryInArray
WildCardNotPermittedInSrcIP
WildCardNotPermittedInExtPort
ConflictInMappingEntry
SamePortValuesRequired
OnlyPermanentLeasesSupported
UnknownError
Miniupnpc Memory allocation error
InternalPortWildcardingNotAllowed
RemoteHostOnlySupportsWildcard
ExternalPortOnlySupportsWildcard
getaddrinfo() error : %s
getsockopt
connect
NewDescription
recv
poll
socket(unix)
minissdpc.c: write()
minissdpc.c: read()
;*2$"P
libminiupnpc.so.9.debug
7zXZ
;CVp
/Eg\F
|@tE
TlypCo
\u;W
zb<-U
J7m%
=w> 
9Q3;I&p
E"M[
,lbDE
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.bss
.gnu_debuglink
.gnu_debugdata
