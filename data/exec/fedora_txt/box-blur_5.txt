__gmon_start__
_init
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
g_snprintf
gegl_operation_area_filter_get_type
g_type_module_register_type
__stack_chk_fail
g_slice_alloc0
g_type_check_instance_cast
babl_format
gegl_operation_set_format
g_type_class_peek_parent
gegl_operation_get_type
g_type_check_class_cast
gegl_operation_filter_get_type
g_dgettext
gegl_operation_class_set_keys
gegl_param_spec_double
g_object_class_install_property
g_object_set_data_full
g_slice_free1
g_type_name
g_log
g_value_set_double
g_value_get_double
gegl_cl_is_accelerated
gegl_operation_get_format
gegl_buffer_cl_iterator_new
gegl_buffer_cl_iterator_add_2
gegl_buffer_cl_iterator_next
gegl_clSetKernelArg
gegl_buffer_new
g_malloc0_n
gegl_buffer_get
gegl_buffer_set
g_free
g_object_unref
gegl_clEnqueueNDRangeKernel
gegl_cl_get_command_queue
gegl_clEnqueueBarrier
gegl_cl_compile_and_build
gegl_chant_get_type
gegl_module_query
gegl_module_register
libgmodule-2.0.so.0
libgio-2.0.so.0
libgobject-2.0.so.0
libgthread-2.0.so.0
libglib-2.0.so.0
libm.so.6
libpthread.so.0
libc.so.6
_edata
__bss_start
_end
box-blur.so
GLIBC_2.2.5
GLIBC_2.4
=Y- 
=?- 
=i) 
\$Pf
T$0f
L$2H
D$ H
D$81
T$PH
ATUI
[]A\
tkATUH
 []A\
ATUStgH
 []A\
[]A\
AWAVAUATUSH
L$0H
)l$ 
l$0H
|$hI
C0E1
D$,j
D$(PA
D$$PH
t$pE
D$,H
D$(L
D$8H
D$HH
D$XH
t$8L
D$pf
(l$ H
D$0H
|$8L
D$XA)
HcD$PH
\$ H
\$pfE
HcD$XH
t$X;D$x
\$ L
l$8H
l$HI
D$8A
|$@D
D$pL
HcD$PA
t$XH
;\$ 
$;D$`
\$@H
t$0E1
|$hH
[]A\A]A^A_
D$hH
t$HH
GeglChantbox-blur.c
RaGaBaA float
input
output
gegl-0.2
description
categories
gegl:box-blur
name
Radius
radius
chant-data
property
GEGL-../../gegl/gegl-chant.h
kernel_blur_hor
kernel_blur_ver
Performs an averaging of a square box of pixels
Radius of square pixel region, (width and height will be radius*2+1)
%s:%d: invalid %s id %u for "%s" of type '%s' in '%s'
__kernel void kernel_blur_hor (__global const float4     *in,                                      
                               __global       float4     *aux,                                     
                               int width, int radius)                                              
{                                                                                                  
  const int in_index = get_global_id(0) * (width + 2 * radius)                                     
                       + (radius + get_global_id (1));                                             
                                                                                                   
  const int aux_index = get_global_id(0) * width + get_global_id (1);                              
  int i;                                                                                           
  float4 mean;                                                                                     
                                                                                                   
  mean = (float4)(0.0f);                                                                           
                                                                                                   
  for (i=-radius; i <= radius; i++)                                                                
   {                                                                                               
     mean += in[in_index + i];                                                                     
   }                                                                                               
                                                                                                   
  aux[aux_index] = mean / (2 * radius + 1);                                                        
}                                                                                                  
__kernel void kernel_blur_ver (__global const float4     *aux,                                     
                               __global       float4     *out,                                     
                               int width, int radius)                                              
{                                                                                                  
  const int aux_index = (radius + get_global_id(0)) * width + get_global_id (1);                   
                                                                                                   
  const int out_index = get_global_id(0) * width + get_global_id (1);                              
  int i;                                                                                           
  float4 mean;                                                                                     
                                                                                                   
  mean = (float4)(0.0f);                                                                           
                                                                                                   
  for (i=-radius; i <= radius; i++)                                                                
   {                                                                                               
     mean += aux[aux_index + i * width];                                                           
   }                                                                                               
                                                                                                   
  out[out_index] = mean / (2 * radius + 1);                                                        
}                                                                                                  
;*3$"
box-blur.so.debug
7zXZ
]? ~
MCKK'
]^iy
DzCU
s[mLd8
ee,m
5}99jsV
?G!W
pO!0
8Ap~
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.init
.plt
.plt.got
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.bss
.gnu_debuglink
.gnu_debugdata
