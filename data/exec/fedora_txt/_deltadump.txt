__gmon_start__
_init
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
_PyThreadState_Current
PyNumber_Int
PyNumber_Long
PyExc_TypeError
PyErr_Format
PyErr_Occurred
PyErr_SetString
PyLong_AsLong
PyExc_OverflowError
PyLong_AsUnsignedLongLong
_PyObject_GC_New
PyObject_GC_Track
_Py_NoneStruct
PyMethod_New
PyObject_GC_UnTrack
PyObject_GC_Del
PyObject_GetAttrString
PyModule_GetDict
PyDict_New
PyInt_FromLong
PyObject_CallFunctionObjArgs
PyList_New
PyObject_GetAttr
PyErr_Clear
PyExc_NameError
PyErr_SetObject
PyString_FromString
PyCode_New
PyFrame_New
PyTraceBack_Here
PyString_FromFormat
free
calloc
PyErr_NoMemory
_PyString_Eq
PyDict_Next
PyString_AsString
PyString_Type
PyTuple_New
PyObject_Call
PyDict_GetItem
PyDict_Size
PyExc_BaseException
PyType_IsSubtype
__errno_location
strerror
fread
ftell
fileno
lseek64
fclose
sqlite3_finalize
PyErr_NormalizeException
_Py_TrueStruct
_Py_ZeroStruct
PyLong_AsVoidPtr
fdopen
PyObject_Size
PyList_Type
PyTuple_Type
PyObject_GetIter
PyObject_GetItem
PySequence_GetItem
PyNumber_Index
PyInt_AsSsize_t
PyObject_RichCompare
PyObject_IsTrue
PyInt_FromSsize_t
PyNumber_Remainder
PyExc_StopIteration
PyErr_ExceptionMatches
PyList_Append
sqlite3_prepare_v2
fwrite
sqlite3_step
sqlite3_column_type
sqlite3_column_int64
sqlite3_column_blob
sqlite3_column_bytes
sqlite3_column_double
PyNumber_Multiply
sqlite3_bind_blob
sqlite3_bind_double
sqlite3_bind_int64
sqlite3_reset
PyExc_ZeroDivisionError
init_deltadump
PyOS_snprintf
Py_GetVersion
PyErr_WarnEx
PyString_FromStringAndSize
PyCFunction_Type
PyType_Ready
Py_InitModule4_64
PyImport_AddModule
PyObject_SetAttrString
PyString_InternFromString
PyUnicodeUCS4_DecodeUTF8
PyExc_ImportError
__pyx_module_is_main_s3ql___deltadump
PyObject_SetAttr
PyCFunction_NewEx
__stack_chk_fail
libpython2.7.so.1.0
libsqlite3.so.0
libpthread.so.0
libc.so.6
_edata
__bss_start
_end
GLIBC_2.2.5
GLIBC_2.4
AWAVM
([]A\A]A^A_
ATUSS
Hc8H
A[[]A\A]
[]A\
fffff.
ffff.
ffff.
l$ H
\$(H
l$0L
d$8L
l$@L
t$HL
|$PH
ffff.
L;%!
fff.
t$0H
l$(1
D$8L
d$ L
l$PH
\$HL
d$XL
l$`L
t$hH
|$pH
\$HH
l$PL
d$XL
l$`L
t$hL
|$pH
ffffff.
\$HH
l$PL
d$XL
l$`L
t$hL
|$pH
D$0H
D$(H
D$ H
D$0tPI
t$ L
l$(L
\$8H
l$@L
d$HL
l$PL
t$XL
|$`H
D$(H
D$ H
l$ L
D$ t&I
D$(t.I
l$ H
l$ H
AUATUSH
Hc8H
[]A\A]
t$ H
Hc8H
Hc8H
Hc8H
fffff.
l$ H
AWAVAUATUH
[]A\A]A^A_
Hc8H
D$XH
T$0H
T$(H
D$xH
L;=(
L;=+| 
|$ I
L;=	y 
Hc8H
I;\$
I;\$
l$(I
D$ H
D$@H
Hc8H
=4~ 
Hc8H
=|{ 
Hc8H
5^x 
=_x 
=9x 
l$(H
Hc8H
=Sp 
5|o 
5}p 
5{m 
5$l 
5*m 
5`j 
=)j 
5jk 
P0Hc
Hc8H
D$HH
5k` 
Hc8H
5XT 
=!T 
5_U 
=uR 
P0Hc
=qK 
Hc9H
5b: 
P0Ic
fffff.
|$ H
t$ 1
5!= 
=a= 
5R< 
= < 
=q: 
=N: 
=+: 
5d= 
=9- 
5o8 
=88 
=O8 
5.8 
=~7 
5q7 
5-7 
=v6 
=66 
=p+ 
5U6 
=6+ 
=U5 
long
an integer is required
__import__
src/s3ql/_deltadump.c
%s (%s:%d)
_deltadump.pyx
s3ql._deltadump.calloc
%s() keywords must be strings
exactly
s3ql._deltadump.dump_table
s3ql._deltadump.load_table
s3ql._deltadump.fwrite
s3ql._deltadump.fread
s3ql._deltadump.read_integer
s3ql._deltadump.fclose
s3ql._deltadump._dump_or_load
float division
s3ql._deltadump._load_table
s3ql._deltadump.write_integer
s3ql._deltadump._dump_table
%d.%d
__builtin__
__builtins__
__name__
init s3ql._deltadump
lambda1
lambda2
lambda3
lambda4
lambda5
lambda6
__%s__ returned non-%s (type %.200s)
can't convert negative value to unsigned PY_LONG_LONG
s3ql._deltadump._dump_or_load.lambda6
s3ql._deltadump._dump_or_load.lambda4
s3ql._deltadump._dump_or_load.lambda3
s3ql._deltadump._dump_or_load.lambda2
%s() got multiple values for keyword argument '%s'
%s() got an unexpected keyword argument '%s'
%s() takes %s %zd positional argument%s (%zd given)
raise: exception class must be a subclass of BaseException
s3ql._deltadump._dump_or_load.lambda1
s3ql._deltadump.sqlite3_finalize_p
s3ql._deltadump._dump_or_load.lambda5
value too large to convert to int
compiletime version %s of module '%.100s' does not match runtime version %s
cython_binding_builtin_function_or_method
s3ql._deltadump.__pyx_scope_struct___dump_or_load
;*3$"
_deltadump.pyx - this file is part of S3QL (http://s3ql.googlecode.com)
Copyright (C) Nikolaus Rath <Nikolaus@rath.org>
This program can be distributed under the terms of the GNU GPLv3.
dump_table(table, order, columns, db, fh)
Dump *columns* of *table* into *fh*
    *order* specifies the order in which the rows are written and must be a
    string that can be inserted after the "ORDER BY" clause in an SQL SELECT
    statement.
    
    *db* is an `s3ql.Connection` instance for the database.
    
    *columns* must a list of 3-tuples, one for each column that should be
    stored. The first element of the tuple must contain the column name and the
    second element the type of data stored in the column (`INTEGER`, `TIME`
    or `BLOB`). Times will be converted to nanosecond integers.
    
    For integers and seconds, the third tuple element specifies the expected
    change of the values between rows. For blobs it can be either zero
    (indicating variable length columns) or an integer specifying the length of
    the column values in bytes.
    
load_table(table, columns, db, fh)
Load *columns* of *table* from *fh*
    Parameters are described in the docstring of the `dump_table` function.
    
_dump_or_load(table, order, columns, db, fh)
Dump or load *columns* of *table*
    
    If *order* is None, load data from *fh* into *db*.
    
    If *order* is not None, data will be read from *db* and written
    into *fh*. In this case, *order* specifies the order in which
    the rows are written and must be a string that can be inserted
    after the "ORDER BY" clause in an SQL SELECT statement.
    
    *db* is an `s3ql.Connection` instance for the database.
    
    *columns* must a list of 3-tuples, one for each column that should be stored
    or retrieved. The first element of the tuple must contain the column name
    and the second element the type of data stored in the column (`INTEGER`,
    `TIME` or `BLOB`). Times will be converted to nanosecond integers.
    
    For integers and times, the third tuple element specifies the expected
    change of the values between rows. For blobs it can be either zero
    (indicating variable length columns) or an integer specifying the length of
    the column values in bytes.    
    
_dump_or_load(%s): writing %d rows
Can't dump NULL values
Can not dump BLOB of size %d (max: %d)
Length %d != %d in column %d
BLOB too large to read (%d vs %d)
s3ql._deltadump
Invalid type for column %d
INSERT INTO %s (%s) VALUES(%s)
SELECT %s FROM %s ORDER BY %s 
_dump_or_load(%s): reading %d rows
SELECT COUNT(rowid) FROM %s
BLOB
CleanupManager
INTEGER
IOError
MAX_BLOB_SIZE
OSError
RuntimeError
TIME
ValueError
__enter__
__exit__
__main__
__test__
_dump_or_load
apsw
cleanup_manager
columns
conn
debug
deltadump
dump_table
exceptionfor
fileno
getLogger
get_val
join
load_table
logging
order
range
register
sqlite3pointer
table
_deltadump.so.debug
7zXZ
K,0+uJI
40yW3
pq.h
p5XP
hAU2
s2'e&
r>(%
|p,*>
.WZZ
$=!&D
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.data
.bss
.gnu_debuglink
.gnu_debugdata
