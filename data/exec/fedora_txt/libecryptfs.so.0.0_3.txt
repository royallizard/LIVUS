tdl@
z @@
ILZR
.V1l
:w}L
r;xT
KAK%
__gmon_start__
_init
_fini
__cxa_finalize
_Jv_RegisterClasses
ecryptfs_get_versions
cryptfs_get_ctx_opts
semop
__syslog_chk
semget
__errno_location
sleep
shmget
shmat
memset
shmdt
semctl
ecryptfs_mount
strlen
realpath
setmntent
malloc
strcat
addmntent
free
endmntent
ecryptfs_generate_key_payload
memcpy
strncpy
ecryptfs_generate_sig_from_key_data
generate_payload
ecryptfs_private_is_mounted
__asprintf_chk
flockfile
getmntent
strcmp
hasmntopt
perror
ecryptfs_fetch_private_mnt
fopen
fgets
strtok
fclose
do_hash
NSS_NoDB_Init
PK11_HashBuf
PORT_GetError
from_hex
strtol
to_hex
__sprintf_chk
ecryptfs_list_zombie_session_placeholders
getpid
getsid
ecryptfs_kill_and_clear_zombie_session_placeholder
kill
ecryptfs_set_zombie_session_placeholder
generate_passphrase_sig
__memcpy_chk
ecryptfs_verbosity
ecryptfs_sort_ciphers
ecryptfs_default_cipher
ecryptfs_free_cipher_list
ecryptfs_get_module_ciphers
uname
opendir
readdir
strstr
strncmp
closedir
ecryptfs_get_proc_mount_point
ecryptfs_get_kernel_ciphers
ecryptfs_add_crypto_modules
__strncat_chk
ecryptfs_get_loaded_ciphers
ecryptfs_get_current_kernel_ciphers
ecryptfs_run_daemon
ecryptfs_run_miscdev_daemon
ecryptfs_run_netlink_daemon
ecryptfs_send_message
ecryptfs_send_netlink
ecryptfs_send_miscdev
ecryptfs_parse_packet_length
ecryptfs_write_packet_length
ecryptfs_messaging_exit
ecryptfs_release_miscdev
ecryptfs_release_netlink
ecryptfs_init_messaging
ecryptfs_init_miscdev
ecryptfs_init_netlink
parse_packet
request_key
keyctl_read_alloc
ecryptfs_find_key_mod
ecryptfs_recv_netlink
realloc
recvfrom
socket
bind
sendto
ecryptfs_register_key_modules
ecryptfs_free_key_mod_list
init_miscdev_daemon
write
ecryptfs_recv_miscdev
read
ecryptfs_supports_passphrase
ecryptfs_supports_pubkey
ecryptfs_supports_plaintext_passthrough
ecryptfs_supports_hmac
ecryptfs_supports_filename_encryption
ecryptfs_supports_policy
ecryptfs_supports_xattr
ecryptfs_get_version
system
ecryptfs_version_str_map
ecryptfs_passphrase_sig_from_blob
ecryptfs_get_wrapped_passphrase_filename
getuid
getpwuid
__xstat
ecryptfs_enable_echo
tcsetattr
ecryptfs_disable_echo
tcgetattr
ecryptfs_get_passphrase
__printf_chk
stdin
strrchr
stderr
__fprintf_chk
ecryptfs_validate_keyring
keyctl
ecryptfs_check_sig
ecryptfs_add_key_module_key_to_keyring
keyctl_search
add_key
ecryptfs_add_auth_tok_to_keyring
ecryptfs_add_blob_to_keyring
ecryptfs_unwrap_passphrase
PK11_GetBestSlot
PK11_ImportSymKey
PK11_ParamFromIV
PK11_CreateContextBySymKey
PK11_CipherOp
PK11_DigestFinal
PK11_DestroyContext
PK11_FreeSymKey
SECITEM_FreeItem
PK11_FreeSlot
ecryptfs_remove_auth_tok_from_keyring
keyctl_unlink
strerror
ecryptfs_generate_passphrase_auth_tok
ecryptfs_add_passphrase_key_to_keyring
ecryptfs_insert_wrapped_passphrase_into_keyring
ecryptfs_append_sig
getgid
fchown
lseek
ecryptfs_read_salt_hex_from_rc
ecryptfs_parse_rc_file
free_name_val_pairs
ecryptfs_wrap_passphrase
ecryptfs_wrap_passphrase_file
ecryptfs_passphrase_blob
set_exit_param_node_for_node
ecryptfs_set_exit_param_on_graph
set_exit_param_node_for_arr
ecryptfs_destroy_nvp
ecryptfs_delete_nvp
stack_push
ecryptfs_build_linear_subgraph
ecryptfs_insert_params
ecryptfs_insert_params_in_subgraph
stack_pop_val
stack_pop
ecryptfs_dump_param_node
ecryptfs_dump_transition_node
ecryptfs_dump_decision_graph
do_transition
add_transition_node_to_param_node
eval_param_tree
ecryptfs_eval_decision_graph
print_nvp_list
memcmp
process_comma_tok
__snprintf_chk
generate_nv_list
parse_options_file
__fxstat
getpagesize
mmap
munmap
ecryptfs_parse_options
ecryptfs_parse_rc_file_fullpath
ecryptfs_nvp_list_union
strchr
ecryptfs_process_key_gen_decision_graph
ecryptfs_process_decision_graph
ecryptfs_fill_in_dummy_ops
dlclose
dlopen
dlsym
passphrase_get_key_mod_ops
dlerror
ecryptfs_parse_stat
passphrase_transition
ecryptfs_passphrase_ops
passphrase_param_nodes
libssl3.so
libsmime3.so
libnss3.so
libnssutil3.so
libkeyutils.so.1
libdl.so.2
libc.so.6
__stack_chk_fail
_edata
__bss_start
_end
libecryptfs.so.0
KEYUTILS_0.3
GLIBC_2.1
GLIBC_2.0
NSS_3.3
NSS_3.2
GLIBC_2.1.3
GLIBC_2.4
GLIBC_2.3
GLIBC_2.8
GLIBC_2.2
GLIBC_2.3.4
d$$[]
d$$[]
d$|[^_]
[^_]
[^_]
,noe
,nos
,nodf
d$<[^_]
d$<[^_]
d$<[^_]
[^_]
[^_]
[^_]
[^_]
d$$[]
d$<[^_]
d$<[^_]
d$<[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
d$L1
[^_]
d$,1
[^_]
[^_]
[^_]
[^_]
d$<1
[^_]
[^_]
d$,[^_]
[^_]
[^_]
[^_]
des3
_ede
[^_]
[^_]
d$|[^_]
[^_]
[^_]
[^_]
d$L[^_]
[^_]
d$<1
[^_]
[^_]
[^_]
d$t[]
d$l[^_]
d$L[^_]
[^_]
d$\[^_]
[^_]
[^_]
[^_]
[^_]
d$<[^_]
d$<1
[^_]
99~Q
[^_]
d$<1
[^_]
[^_]
d$<[^_]
d$\[^_]
[^_]
d$,[^_]
d$,[^_]
d$,[^_]
d$L[^_]
d$<[^_]
[^_]
d$l[^_]
d$l[^_]
9B@~<
~	;F@
d$,1
[^_]
<,t+
[^_]
d$4[]
d$<[^_]
d$L1
[^_]
d$L1
[^_]
d$L1
[^_]
d$l[^_]
[^_]
d$l[^_]
[^_]
[^_]
d$,[^_]
[^_]
[^_]
[^_]
d$\[^_]
d$\1
[^_]
d$L[^_]
d$\[^_]
Error unlocking semaphore
Error initializing semaphore
Invalid source directory
Invalid target directory
Invalid mount options length
/etc/mtab
ecryptfs_sig=%s
asprintf
/proc/mounts
setmntent
Private
%s/%s
%s/.ecryptfs/%s.mnt
malloc
%.2x
Error getting existing semaphore
Error attempting to get semaphore
Error attempting to get zombie semaphore
Error locking semaphore; hit max retries
Error attaching to newly allocated shared memory; errno string = [%m]
Error attempting to get identifier for shared memory with key [0x%.8x]
Waited too long for initialized semaphore; something's wrong
Error locking semaphore; errno string = [%m]
could not resolve full path for source %s [%d]
could not resolve full path for target %s [%d]
Failed to perform eCryptfs mount: [%m]
Failed to update the mount table
Failed to allocate memory for mount options
Failed to write to the mount table
Call into key module's get_blob failed; rc = [%d]
BUG: blob_size != blob_size_tmp; key module is having a hard time getting the two to match between get_blob() calls, and this has probably led to memory corruption. Bombing out.
Call into key module's get_key_data failed; rc = [%d]
Call into key module's get_key_sig failed; rc = [%d]
Error attempting to generate signature from key data; rc = [%d]
%s: PK11_HashBuf() error; SECFailure = [%d]; PORT_GetError() = [%d]
Error getting shared memory segment
Error listing sid/pid pairs in shared memory segment; rc = [%d]
Error finding pid for sid in shared memory segment; rc = [%d]
No valid pid found for this sid
Error attempting to kill process [%d]; rc = [%d]; errno string = [%m]
Error attempting to remove pid/sid pair from shared memory segment; rc = [%d]
Error attaching to shared memory; error string = [%m]
No space left in shared memory region
Error detaching from shared memory
Error adding sid/pid pair to shared memory segment; rc = [%d]
Passphrase too large (%d bytes)
do_hash
%s: uname returned [%d]
/lib/modules/%s/kernel/crypto
/proc
%s/crypto
name
module
%s.ko
driver
blocksize
min keysize
max keysize
/lib/modules/
aes.ko
aes_generic.ko
serpent
serpent.ko
tnepres
tea.ko
xeta
xtea
blowfish
blowfish.ko
twofish
twofish.ko
khazad
khazad.ko
cast5
cast5.ko
cast6
cast6.ko
des3_ede
des.ko
des_generic.ko
des3_ede128
des_s390.ko
anubis
anubis.ko
cipher_null
cipher_null.ko
AES-128
Blowfish
Triple-DES
Twofish
CAST5
CAST6
AES-192
AES-256
%s: Error building kernel location string
%s: opendir error on [%s]. Cannot get a list of ciphers available as modules.
Error attempting to find proc mount point in [/etc/mtab]. Defaulting to [/proc].
%s: Failed to open [%s] for reading; This is not a problem if the Kernel Crypto API is built as a kernel module (called crypto_algapi) and is not loaded. If this is not the case, eCryptfs will not be able to use ciphers that are directly built into the kernel.
%s: Adding kernel cipher with name [%s] to the list
%s: min keysize match on buf = [%s]
%s: For cipher with name [%s], set min_keysize = [%d] from str = [%s]
%s: For cipher with name [%s], set max_keysize = [%d] from str = [%s]
ecryptfs_get_module_ciphers
ecryptfs_get_kernel_ciphers
ecryptfs_get_loaded_ciphers
%s: Failed to register netlink daemon with the eCryptfs kernel module; rc = [%d]
%s: Failed to register miscdev daemon with the eCryptfs kernel module; rc = [%d]
Five-byte packet length not supported
Unsupported packet size: [%zu]
Error parsing packet length
ecryptfs_send_message
Failed to allocate memory: %m
Could not find key with signature: [%s]
Failed to locate desired key module
Failed to get size for decrypted key
Decrypted key size reported by key module decrypt function is 0
Decrypted key size reported by key module decrypt function is [%zu]; max is [%d]
Failed to decrypt key; rc = [%d]
Failed to write decrypted key via tag 65 packet
Error attempting to get encrypted key size from key module; rc = [%d]
Encrypted key size reported by key module encrypt function is 0
Failed to allocate memory: [%m]
Failed to encrypt key; rc = [%d]
Encrypted key size reported by key module encrypt function is [%zu]; max is [%d]
Failed to write encrypted key to tag 67 packet
Unrecognized packet type: [%d]
Invalid packet format
Failed to allocate memory
user
Failed to decrypt key
Failed to encrypt public key
Failed to allocate memory for netlink message: %m
Failed to receive netlink header; errno = [%d]; errno msg = [%m]
Received invalid netlink message
Received netlink packet from a userspace application; pid [%d] may be trying to spoof eCryptfs netlink packets
Failed to allocate memory for eCryptfs netlink message: %m
Failed to create the eCryptfs netlink socket: [%m]
Failed to bind the eCryptfs netlink socket: %m
eCryptfs netlink socket was successfully initialized
%s: Failed to allocate memory for netlink header: %m
Failed to send eCryptfs netlink message: %m
Failed to register key modules; rc = [%d]
Error while receiving eCryptfs netlink message; errno = [%d]; errno msg = [%m]
Netlink error threshold exceeded maximum of [%d]; terminating daemon
Received eCryptfs netlink HELO message from the kernel
Received eCryptfs netlink QUIT message from the kernel
Failed to process netlink packet
Failed to send netlink message in response to kernel request
Received unrecognized netlink message type [%d]
ecryptfs_send_netlink
/dev/ecryptfs
/dev/misc/ecryptfs
%s: Error whilst attempting to open [%s]; errno msg = [%m]
Failed to send eCryptfs miscdev message; errno msg = [%m]
%s: Error attempting to read message from miscdev handle; errno msg = [%m]
%s: Received invalid packet from kernel; read_bytes = [%zu]; minimum possible packet site is [%d]
%s: Invalid packet. (1 + 4 + packet_len_size=[%zu] + packet_len=[%zu])=[%zu] != read_bytes=[%zu]
Failed to miscdevess netlink packet
ecryptfs_init_miscdev
ecryptfs_recv_miscdev
sysfs
%s/fs/ecryptfs/version
passphrase
netlink daemon interface
plaintext passthrough
policy
filename encryption
gcm cipher block chaining
/sbin/modprobe ecryptfs 2>/dev/null
metadata in extended attribute
/dev/misc/ecryptfs daemon interface
getpwuid
stat
%s: 
9988776655443322
Open resulted in [%d]; [%m]
%s/.ecryptfs/wrapped-passphrase
Passphrase is too long. Use at most %u characters long passphrase.
Error attempting to link the user session keyring into the session keyring
Error attempting to get blob from key module; rc = [%d]
Error initializing key from module; rc = [%d]
Error adding key with sig [%s]; rc = [%d]
Error adding key to keyring - keyring is full
keyctl_search failed: %m errno=[%d]
Error adding key with sig [%s]; rc = [%d] "%m"
Error generating passphrase signature; rc = [%d]
Error attempting to open [%s] for reading
Error attempting to read encrypted passphrase from file [%s]; size = [%zu]
Incorrect wrapping key for file [%s]
%s: PK11_ImportSymKey() returned NULL
%s: PK11_CipherOp() error; SECFailure = [%d]; PORT_GetError() = [%d]
%s: PK11 error on digest final; SECFailure = [%d]; PORT_GetError() = [%d]
Wrong size of unwrapped passphrase
Failed to find key with sig [%s]: %m
Failed to unlink key with sig [%s]: %s
Unable to allocate memory for auth_tok
Error generating payload for auth tok key; rc = [%d]
%s: Error attempting to generate the passphrase auth tok payload; rc = [%d]
%s: Error adding auth tok with sig [%s] to the keyring; rc = [%d]
Error attempting to unwrap passphrase from file [%s]; rc = [%d]
Error attempting to add filename encryption key to user session keyring; rc = [%d]
Error attempting to add passphrase key to user session keyring; rc = [%d]
Can't change ownership of sig file; errno = [%d]; [%m]
Write of sig resulted in [%zu]; errno = [%d]; [%m]
Error attempting to parse .ecryptfsrc file; rc = [%d]
Decrypted passphrase is [%d] bytes long; [%d] is the max
Wrong size of wrapped passphrase
Error attempting to open [%s] for writing
Error attempting to write encrypted passphrase ([%d] bytes) to file [%s]; size = [%zu]
Error attempting to read encrypted passphrase from file [%s]; size = [%zd]
Error attempting to wrap passphrase file [%s]-> [%s]
%s: Error attempting to generate passphrase authentication token blob; rc = [%d]
ecryptfs_unwrap_passphrase
ecryptfs_wrap_passphrase
ecryptfs_add_passphrase_key_to_keyring
ecryptfs_passphrase_blob
default
Setting flag [0x%.8x]
param_node
mnt_opt_names[0] = [%s]
num_transitions = [%d]
transition node [%d]:
---------------
transition_node
next_token = [%p]
%s: Called on node [%s]
(null)
NULL
verbosity
%s:  node->tl[%d].val = [%s]
%s: ctx->get_string defined
%s: 
 %d) %s
Selection [%s]
Selection
%s [%s]
Verify %s
Key module [%s] returned error whilst retrieving parameter list; rc = [%d]
Key module [%s] has empty parameter list
linear_subgraph_exit_dummy_node
No value supplied for parameter node with primary opt name [%s]
Error attempting to allocate nvp
Error attempting to allocate nvp entry for param_node->mnt_opt_names[%d] = [%s]
Error inserting param; param_node->mnt_opt_names[0] = [%s]; transition token index = [%d]
Error attempting to add key to keyring for key module [%s]; rc = [%d]
%s: Cannot find key_mod for param_node with val = [%s]
From param_node = [%p]; mnt_opt_names[0] = [%s]: Setting ECRYPTFS_PROCESSED to nvp with nvp->name = [%s]
%s: Value retrieved from node->default_val = [%s]
Transitioning from [%p]; name = [%s] to [%p]; name = [%s] per transition node's next_token
Too many transitions on node with primary alias [%s]
%s: Calling alloc_and_get_val() on node = [%p]; node->mnt_opt_names[0] = [%s]
%s: Called on node->mnt_opt_names[0] = [%s]
%s: node->val already set to [%s]
%s: Error attempting to retrieve value; rc = [%d]
%s: Value retrieved from default_val or from parameter list; returning
%s: Value retrieved from default_val or from parameter list for successive node at transition slot [%d]; returning
%s: ECRYPTFS_PARAM_FLAG_NO_VALUE set
%s: ctx->verbosity == 0 and STDIN_REQUIRED not set
%s: PARAMETER_SET and STDIN_REQUIRED not set
%s: DISPLAY_TRANSITION_NODE_VALS set
%s: DISPLAY_TRANSITION_NODE_VALS not set
%s: node->mnt_opt_names[0] = [%s]
; node->flags = [0x%.8x]
Wrong input, non-empty value required!
%s: ctx->get_string not defined
ecryptfs_enter_linear_subgraph_tf
eval_param_tree
alloc_and_get_val
retrieve_val
Printing nvp list
name=%s
val=%s
key=
%s%s
File size too large
%s/.ecryptfsrc
Duplicates allowed for [%s]
%s: fstat returned [%d] on fd [%d]
%s: mmap failed on fd [%d]; rc = [%d]
Internal error: src_tmp->next != src_cursor->children[%d]
parse_options_file
Comparing nvp->name = [%s] to key_module_select_node.mnt_opt_names[0] = [%s]
Error initializing key_bytes selection: there is no posibility left for used params
%s: Error initializing key_bytes param node; rc = [%d]
%s: Pushing onto stack; opt = [%s]
Error attempting to get key module list; rc = [%d]
Key module [%s] does not have a key generation subgraph transition node
Error attempting to add transition node to param node; rc = [%d]
Key module [%s] does not have a subgraph transition node; attempting to build a linear subgraph from its parameter list
Error attempting to build linear subgraph for key module [%s]; excluding; rc = [%d]
Error attempting to insert allowed duplicate parameters into subgraph for key module; rc = [%d]
%s: Error getting kernel ciphers; rc = [%d]
%s: Error getting module ciphers; rc = [%d]
%s: Unable to detect any available kernel ciphers; bailing out
%s: Error sorting ciphers; rc = [%d]
%s: Exceeded maximum number of transition nodes [%d] whilst constructing cipher list
%s: blocksize = %d; min keysize = %d; max keysize = %d (%s)
%s: Error initializing cipher list; rc = [%d]
%s: Error attempting to fill in decision graph; rc = [%d]
%s: No memory whilst attempting to write [%s]
Select key type to use for newly created files
Internal check for another key
Enable plaintext passthrough (y/n)
Enable HMAC integrity verification (y/N)
Write metadata to extended attribute region (y/N)
Pass through encrypted versions of all files (y/N)
ecryptfs_enable_filename_crypto
Enable filename encryption (y/n)
Filename Encryption Key (FNEK) Signature
Found another nvp match
Out of memory
ecryptfs_fnek_sig=%s
ecryptfs_key_bytes=%s
max_key_bytes=
min_key_bytes=
ecryptfs_cipher=%s
not loaded
name = [%s]; value = [%s]
ecryptfs_sig=
ecryptfs_encrypted_view
ecryptfs_xattr_metadata
ecryptfs_hmac
ecryptfs_passthrough
dummy
Existing key signature
ecryptfs_cipher
Select cipher
another_key
ecryptfs_xattr
ecryptfs_fnek_sig
ecryptfs_key_bytes
Select key bytes
arc4
ecryptfs_process_decision_graph
fill_in_decision_graph_based_on_version_support
get_enable_filename_crypto
init_ecryptfs_cipher_param_node
tf_ecryptfs_cipher
/usr/lib/ecryptfs
get_key_mod_ops
ERROR: Could not open key_mod directory
Could not open library handle
Error attempting to get the symbol [get_key_mod_ops] from key module [%s]: err = [%s]. The key module is likely using the deprecated key module API.
Library function get_key_mod_ops() failed to return ops for [%s]
Error attempting to fill in missing  key module operations for [%s]; rc = [%d]
Error initializing key module [%s]; rc = [%d]
Library function get_key_mod_ops() failed to return ops for built-in key module in array position [%d]
Error initializing key module in array position [%d]
Preferring [%s] file over built-in module for key module with name [%s]
%s: Dummy function substituted for unimplemented function in key module
ecryptfs_dummy_finalize
ecryptfs_dummy_destroy
ecryptfs_dummy_decrypt
ecryptfs_dummy_encrypt
ecryptfs_dummy_get_key_hint
ecryptfs_dummy_get_key_sig
ecryptfs_dummy_get_key_data
ecryptfs_dummy_get_blob
ecryptfs_dummy_get_param_subgraph_trans_node
ecryptfs_dummy_get_params
ecryptfs_dummy_get_gen_key_subgraph_trans_node
ecryptfs_dummy_get_gen_key_params
ecryptfs_dummy_init
%s: Invalid metadata size; must have at least [%zu] bytes; there are only [%zu] bytes
%s Invalid header size: [%zu]
%s: Magic eCryptfs marker not found in header.
%s: Invalid header content.
ecryptfs_parse_stat
ecryptfs_parse_header_metadata
passphrase_passwd_file
passphrase_passwd_fd
passphrase_passwd
passphrase_type
Provide passphrase directly
Passphrase
passphrase_salt
passfile
Passphrase File
passfd
Passphrase File Discriptor
0011223344556677
%s: Error whilst attempting to open [%s]; errno = [%m]
%s: Invalid file descriptor qualifier
%s: Error parsing file for passwd; rc = [%d]
%s: Cannot find [passwd] directive
Method for providing the passphrase
File containing passphrase (only use secure media)
File descriptor for file containing passphrase
Salt (hexadecimal representation)
tf_pass_file
libecryptfs.so.0.0.0.debug
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.ctors
.dtors
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.data
.bss
.gnu_debuglink
