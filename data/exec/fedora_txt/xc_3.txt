__gmon_start__
_init
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
xc_get_last_error
xc_error_code_to_desc
Py_BuildValue
xc_clear_last_error
PyErr_SetObject
__errno_location
strerror
__snprintf_chk
PyErr_SetFromErrno
xc_interface_open
PyArg_ParseTupleAndKeywords
xc_flask_access
xc_interface_close
__stack_chk_fail
xc_flask_setenforce
xc_flask_getenforce
xc_flask_load
xc_flask_sid_to_context
xc_flask_context_to_sid
PyInt_FromLong
xc_get_max_cpus
PyList_New
PyList_Append
xc_cpupool_freeinfo
xc_cpupool_movedomain
xc_cpupool_removecpu
xc_cpupool_addcpu
xc_cpupool_getinfo
xc_cpupool_infofree
PyArg_ParseTuple
xc_domain_destroy
xc_domain_unpause
xc_domain_pause
xc_cpupool_destroy
xc_cpupool_create
xc_memshr_control
xc_tmem_auth
xc_tmem_control
xc_domain_suppress_spurious_page_faults
xc_domain_set_machine_address_size
xc_cpuid_apply_policy
PyDict_GetItemString
PyDict_New
PyString_FromString
PyDict_SetItemString
xc_cpuid_set
PyLong_AsUnsignedLong
xc_cpuid_check
xc_send_debug_keys
xc_domain_send_trigger
xc_domain_disable_migrate
xc_domain_set_tsc_info
xc_domain_set_time_offset
PyLong_FromUnsignedLong
xc_domain_iomem_permission
xc_domain_irq_permission
xc_domain_ioport_permission
xc_domain_set_memmap_limit
xc_domain_set_pod_target
xc_domain_setmaxmem
xc_shadow_control
xc_version
xc_numainfo
calloc
_Py_NoneStruct
xc_availheap
xc_cputopoinfo
malloc
xc_getcpuinfo
xc_readconsolering
realloc
PyString_FromStringAndSize
xc_physdev_pci_access_modify
xc_physdev_map_pirq
xc_evtchn_reset
xc_evtchn_alloc_unbound
xc_sched_credit2_domain_get
xc_sched_credit2_domain_set
xc_sched_credit_domain_get
xc_sched_credit_domain_set
xc_sched_id
strchr
strtol
xc_deassign_device
xc_assign_device
xc_test_assign_device
xc_get_device_group
strcat
PyErr_NoMemory
xc_hvm_param_set
xc_hvm_param_get
PyLong_FromUnsignedLongLong
xc_dom_gnttab_hvm_seed
xc_get_bit_size
xc_dom_loginit
xc_dom_allocate
xc_dom_linux_build
xc_dom_release
xc_vcpu_getinfo
xc_cpumap_alloc
xc_vcpu_getaffinity
xc_domain_getinfo
PyList_SetItem
PyList_Size
PyList_GetItem
PyInt_AsLong
xc_domain_sethandle
xc_vcpu_setaffinity
xc_domain_shutdown
xc_domain_resume
xc_domain_dumpcore
xc_domain_max_vcpus
xc_domain_create
xc_domain_set_target
Py_FindMethod
_PyLong_AsByteArray
xc_hvm_build_target_mem
xc_map_foreign_range
munmap
xc_physinfo
__sprintf_chk
initxc
PyType_Ready
Py_InitModule4_64
PyExc_RuntimeError
PyErr_NewException
stdout
setbuf
stderr
PyModule_AddObject
PyModule_AddIntConstant
libxenctrl.so.4.6
libxenguest.so.4.6
libpython2.7.so.1.0
libpthread.so.0
libc.so.6
_edata
__bss_start
_end
GLIBC_2.2.5
GLIBC_2.4
GLIBC_2.3.4
D$81
D$$PH
D$(PH
D$,PH
D$0PH
D$0PH
D$6PL
L$XL
D$`H
D$$PH
D$(PH
D$,PH
D$0PL
L$4D
D$0H
T$HH
t$PH
\$8dH3
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
D$ 1
L$ L
D$ PH
D$$PL
L$(L
D$$H
D$(PD
L$$D
t$ H
ATUSH
D$(1
 t/I
D$(dH3
0[]A\
ATUSH
D$(1
 t3H
L$(dH3
0[]A\
D$x1
L$ H
t$0H
L$0H
\$xdH3
D$h1
t$ H
L$@H
T$ H
\$hdH3
D$ 1
L$ L
D$(1
D$ PH
D$ PL
L$ L
D$ H
L$(dH3
D$ 1
L$ L
L$ A
qPVH
q@VH
AWAVAUATUSH
D$X1
t$LH
L$XdH3
h[]A\A]A^A_
t$LI
D$PH
D$8L
D$L9
D$LD9
D$0H
D$8D
|$PH
D$0H
|$ L
|$(L
|$ H
|$(H
AWAVAUATUSH
D$(1
t$$H
L$(dH3
8[]A\A]A^A_
t$$I
T$$9
AWAVAUATUSH
Hc<$H
[]A\A]A^A_
AWAVAUATUSH
D$01
D$(PL
L$,L
D$(H
T$$I
d$$A
D$$H
D$$D
T$$A
t$$H
L$(dH3
8[]A\A]A^A_
D$ 1
D$ PH
D$$PL
L$(L
D$$H
D$ 1
L$ L
u Hc|$
D$ 1
D$$H
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
D$(1
L$ L
|$ M
T$(dH3
8[]A\A]A^A_
AWAVAUATUSH
D$(1
L$ L
|$ M
T$(dH3
8[]A\A]A^A_
AWAVAUATUSH
D$(1
L$ L
|$ M
T$(dH3
8[]A\A]A^A_
AUATUSH
D$81
D$$PL
L$(L
D$$H
l$ H
t$8dH34%(
H[]A\A]
D$ 1
D$01
D$ PH
D$0PL
L$@L
D$,H
L$(dH3
D$01
D$ H
D$(PL
L$(L
D$ H
L$ H
L$(dH3
AWAVAUATUSH
D$`1
D$@H
D$(PH
D$,PH
D$XPH
D$0PH
D$`PH
D$`PH
D$`PH
D$XPH
D$lPL
L$dL
D$\H
T$@H
D$ A
D$XP
D$(PH
D$`P
D$4PHcD$8PL
L$`L
T$<L
D$`H
T$XH
L$XdH3
h[]A\A]A^A_
AWAVAUATUSH
D$81
L$ H
T$$H
D$8PH
t$@H
D$NPL
D$UH
D$8H
L$8dH3
H[]A\A]A^A_
AWAVAUATUSH
D$(1
L$$L
D$ H
Hc|$$
hD9|$
E`PH
ELPL
L$(dH3
8[]A\A]A^A_
D$(1
L$(dH3
AVAUATUSH
D$ 1
 []A\A]A^
D$@1
D$ PH
D$0PL
L$,L
D$(H
T$ H
L$8dH3
=Lt 
D$H1
D$ PH
D$8PH
D$,PH
D$0PH
D$HPL
L$<L
D$8H
|$(H
t$0A
t$0H
|$8H
|$HdH3<%(
AUATUSH
l$0H
D$PPH
D$xH
[]A\A]
=&n 
5"} 
xc_interface_open failed: %s
(iss)
(is)
ssil|llll
n_dom
sched
cpupool
{s:i,s:i,s:i,s:N}
cpulist
iiiiiis
IIOO
ii|i
illi
virt_start=0x%lx
xen_extra
xen_minor
xen_major
cc_compile_date
cc_compile_domain
cc_compile_by
cc_compiler
xen_commandline
xen_changeset
platform_params
xen_pagesize
xen_caps
max_node_index
{s:i}
node_memsize
node_memfree
node_to_dma32_mem
node_to_node_dist
max_cpu_index
cpu_to_core
cpu_to_socket
cpu_to_node
idletime
{s:k}
|iii
iiiii
weight
{s:H}
{s:H,s:H}
%02x:%02x.%x,
type
iiiis|ssisii
notes
console_mfn
store_mfn
{s:i,s:i,s:N}
native_protocol
running
blocked
online
{s:i,s:i,s:i,s:L,s:i}
cpu_time
cpumap
max_vcpu_id
online_vcpus
shutdown_reason
ssidref
maxmem_kb
paused
crashed
dying
i|iO
iis|iiOii
hvm_directio
%08x:
cores_per_socket
threads_per_core
nr_nodes
virt_caps
hw_caps
cpu_khz
scrub_memory
free_memory
total_memory
nr_cpus
xen.lowlevel.xc
xen.lowlevel.xc.Error
XEN_SCHEDULER_CREDIT
XEN_SCHEDULER_CREDIT2
flags
target
vcpu
first_dom
max_doms
store_evtchn
console_evtchn
image
ramdisk
cmdline
features
vhpt
superpages
vcpu_avail
acpi
apic
console_gmfn
xenstore_gmfn
console_domid
xenstore_domid
value
remote_dom
func
enable
clear
incremental
max_cpus
first_port
nr_ports
allow_access
first_pfn
nr_pfns
pool_id
subop
cli_id
arg1
arg2
uuid_str
policy
mode
src_context
tar_context
tar_class
req_permissions
decided
auditallow
auditdeny
seqno
xen.lowlevel.xc.xc
Xen client connections
domain_create
domain_max_vcpus
domain_dumpcore
domain_pause
domain_unpause
domain_destroy
domain_destroy_hook
domain_resume
domain_shutdown
vcpu_setaffinity
domain_sethandle
domain_getinfo
vcpu_getinfo
linux_build
getBitSize
hvm_build
gnttab_hvm_seed
hvm_get_param
hvm_set_param
get_device_group
test_assign_device
deassign_device
sched_id_get
sched_credit_domain_set
sched_credit_domain_get
sched_credit2_domain_set
sched_credit2_domain_get
evtchn_alloc_unbound
evtchn_reset
physdev_map_pirq
physdev_pci_access_modify
readconsolering
physinfo
getcpuinfo
topologyinfo
numainfo
xeninfo
shadow_control
shadow_mem_control
domain_setmaxmem
domain_set_target_mem
domain_set_memmap_limit
domain_ioport_permission
domain_irq_permission
domain_iomem_permission
pages_to_kib
domain_set_time_offset
domain_set_tsc_info
domain_disable_migrate
domain_send_trigger
send_debug_keys
domain_check_cpuid
domain_set_cpuid
domain_set_policy_cpuid
tmem_control
tmem_shared_auth
dom_set_memshr
cpupool_create
cpupool_destroy
cpupool_getinfo
cpupool_addcpu
cpupool_removecpu
cpupool_movedomain
cpupool_freeinfo
flask_context_to_sid
flask_sid_to_context
flask_load
flask_getenforce
flask_setenforce
flask_access
{s:i,s:i,s:s,s:s,s:i,s:s,s:s,s:s,s:s,s:s,s:s,s:s}
{s:i,s:i,s:i,s:i,s:i,s:i,s:i,s:i,s:i,s:i,s:L,s:L,s:L,s:i,s:i,s:i}
{s:i,s:i,s:i,s:i,s:l,s:l,s:l,s:i,s:s,s:s}
Create a new domain.
 dom    [int, 0]:        Domain identifier to use (allocated if zero).
Returns: [int] new domain identifier; -1 on error.
Set the maximum number of VCPUs a domain may create.
 dom       [int, 0]:      Domain identifier to use.
 max     [int, 0]:      New maximum number of VCPUs in domain.
Returns: [int] 0 on success; -1 on error.
Dump core of a domain.
 dom [int]: Identifier of domain to dump core of.
 corefile [string]: Name of corefile to be created.
Returns: [int] 0 on success; -1 on error.
Temporarily pause execution of a domain.
 dom [int]: Identifier of domain to be paused.
Returns: [int] 0 on success; -1 on error.
(Re)start execution of a domain.
 dom [int]: Identifier of domain to be unpaused.
Returns: [int] 0 on success; -1 on error.
Destroy a domain.
 dom [int]:    Identifier of domain to be destroyed.
Returns: [int] 0 on success; -1 on error.
Add a hook for arch stuff before destroy a domain.
 dom [int]:    Identifier of domain to be destroyed.
Returns: [int] 0 on success; -1 on error.
Resume execution of a suspended domain.
 dom [int]: Identifier of domain to be resumed.
 fast [int]: Use cooperative resume.
Returns: [int] 0 on success; -1 on error.
Shutdown a domain.
 dom       [int, 0]:      Domain identifier to use.
 reason     [int, 0]:      Reason for shutdown.
Returns: [int] 0 on success; -1 on error.
Pin a VCPU to a specified set CPUs.
 dom [int]:     Identifier of domain to which VCPU belongs.
 vcpu [int, 0]: VCPU being pinned.
 cpumap [list, []]: list of usable CPUs.
Returns: [int] 0 on success; -1 on error.
Set domain's opaque handle.
 dom [int]:            Identifier of domain.
 handle [list of 16 ints]: New opaque handle.
Returns: [int] 0 on success; -1 on error.
Get information regarding a set of domains, in increasing id order.
 first_dom [int, 0]:    First domain to retrieve info about.
 max_doms  [int, 1024]: Maximum number of domains to retrieve info about.
Returns: [list of dicts] if list length is less than 'max_doms'
         parameter then there was an error, or the end of the
         domain-id space was reached.
 dom      [int]: Identifier of domain to which this info pertains
 cpu      [int]:  CPU to which this domain is bound
 vcpus    [int]:  Number of Virtual CPUS in this domain
 dying    [int]:  Bool - is the domain dying?
 crashed  [int]:  Bool - has the domain crashed?
 shutdown [int]:  Bool - has the domain shut itself down?
 paused   [int]:  Bool - is the domain paused by control software?
 blocked  [int]:  Bool - is the domain blocked waiting for an event?
 running  [int]:  Bool - is the domain currently running?
 mem_kb   [int]:  Memory reservation, in kilobytes
 maxmem_kb [int]: Maximum memory limit, in kilobytes
 cpu_time [long]: CPU time consumed, in nanoseconds
 shutdown_reason [int]: Numeric code from guest OS, explaining reason why it shut itself down.
 cpupool  [int]   Id of cpupool domain is bound to.
Get information regarding a VCPU.
 dom  [int]:    Domain to retrieve info about.
 vcpu [int, 0]: VCPU to retrieve info about.
Returns: [dict]
 online   [int]:  Bool - Is this VCPU currently online?
 blocked  [int]:  Bool - Is this VCPU blocked waiting for an event?
 running  [int]:  Bool - Is this VCPU currently running on a CPU?
 cpu_time [long]: CPU time consumed, in nanoseconds
 cpumap   [int]:  Bitmap of CPUs this VCPU can run on
 cpu      [int]:  CPU that this VCPU is currently bound to
Build a new Linux guest OS.
 dom     [int]:      Identifier of domain to build into.
 image   [str]:      Name of kernel image file. May be gzipped.
 ramdisk [str, n/a]: Name of ramdisk file, if any.
 cmdline [str, n/a]: Kernel parameters, if any.
 vcpus   [int, 1]:   Number of Virtual CPUS in domain.
Returns: [int] 0 on success; -1 on error.
Get the bitsize of a guest OS.
 image   [str]:      Name of kernel image file. May be gzipped.
 cmdline [str, n/a]: Kernel parameters, if any.
Build a new HVM guest OS.
 dom     [int]:      Identifier of domain to build into.
 image   [str]:      Name of HVM loader image file.
 vcpus   [int, 1]:   Number of Virtual CPUS in domain.
 vcpu_avail [long, 1]: Which Virtual CPUS available.
Returns: [int] 0 on success; -1 on error.
Initialise HVM guest grant table.
 dom     [int]:      Identifier of domain to build into.
 console_gmfn [int]: 
 xenstore_gmfn [int]: 
 console_domid [int]: 
 xenstore_domid [int]: 
Returns: None on sucess. Raises exception on error.
get a parameter of HVM guest OS.
 dom     [int]:      Identifier of domain to build into.
 param   [int]:      No. of HVM param.
Returns: [long] value of the param.
set a parameter of HVM guest OS.
 dom     [int]:      Identifier of domain to build into.
 param   [int]:      No. of HVM param.
 value   [long]:     Value of param.
Returns: [int] 0 on success.
get sibling devices infomation.
 dom     [int]:      Domain to assign device to.
 seg     [int]:      PCI segment.
 bus     [int]:      PCI bus.
 dev     [int]:      PCI dev.
 func    [int]:      PCI func.
Returns: [string]:   Sibling devices 
test device assignment with VT-d.
 dom     [int]:      Identifier of domain to build into.
 pci_str [str]:      PCI devices.
Returns: [int] 0 on success, or device bdf that can't be assigned.
Assign device to IOMMU domain.
 dom     [int]:      Domain to assign device to.
 pci_str [str]:      PCI devices.
Returns: [int] 0 on success, or device bdf that can't be assigned.
Deassign device from IOMMU domain.
 dom     [int]:      Domain to deassign device from.
 pci_str [str]:      PCI devices.
Returns: [int] 0 on success, or device bdf that can't be deassigned.
Get the current scheduler type in use.
Returns: [int] sched_id.
Set the scheduling parameters for a domain when running with the
SMP credit scheduler.
 domid     [int]:   domain id to set
 weight    [short]: domain's scheduling weight
Returns: [int] 0 on success; -1 on error.
Get the scheduling parameters for a domain when running with the
SMP credit scheduler.
 domid     [int]:   domain id to get
Returns:   [dict]
 weight    [short]: domain's scheduling weight
Set the scheduling parameters for a domain when running with the
SMP credit2 scheduler.
 domid     [int]:   domain id to set
 weight    [short]: domain's scheduling weight
Returns: [int] 0 on success; -1 on error.
Get the scheduling parameters for a domain when running with the
SMP credit2 scheduler.
 domid     [int]:   domain id to get
Returns:   [dict]
 weight    [short]: domain's scheduling weight
Allocate an unbound port that will await a remote connection.
 dom        [int]: Domain whose port space to allocate from.
 remote_dom [int]: Remote domain to accept connections from.
Returns: [int] Unbound event-channel port.
Reset all connections.
 dom [int]: Domain to reset.
map physical irq to guest pirq.
 dom     [int]:      Identifier of domain to map for.
 index   [int]:      physical irq.
 pirq    [int]:      guest pirq.
Returns: [long] value of the param.
Allow a domain access to a PCI device
 dom    [int]: Identifier of domain to be allowed access.
 bus    [int]: PCI bus
 dev    [int]: PCI slot
 func   [int]: PCI function
 enable [int]: Non-zero means enable access; else disable access
Returns: [int] 0 on success; -1 on error.
Read Xen's console ring.
 clear [int, 0]: Bool - clear the ring after reading from it?
Returns: [str] string is empty on failure.
Get information about the physical host machine
Returns [dict]: information about the hardware        [None]: on failure.
Get information about physical CPUs
Returns [list]: information about physical CPUs        [None]: on failure.
Get information about the cpu topology on the host machine
Returns [dict]: information about the cpu topology on host        [None]: on failure.
Get NUMA information on the host machine
Returns [dict]: NUMA information on host        [None]: on failure.
Get information about the Xen host
Returns [dict]: information about Xen        [None]: on failure.
Set parameter for shadow pagetable interface
 dom [int]:   Identifier of domain.
 op [int, 0]: operation
Returns: [int] 0 on success; -1 on error.
Set or read shadow pagetable memory use
 dom [int]:   Identifier of domain.
 mb [int, -1]: MB of shadow memory this domain should have.
Returns: [int] MB of shadow memory in use by this domain.
Set a domain's memory limit
 dom [int]: Identifier of domain.
 maxmem_kb [int]: .
Returns: [int] 0 on success; -1 on error.
Set a domain's memory target
 dom [int]: Identifier of domain.
 mem_kb [int]: .
Returns: [int] 0 on success; -1 on error.
Set a domain's physical memory mappping limit
 dom [int]: Identifier of domain.
 map_limitkb [int]: .
Returns: [int] 0 on success; -1 on error.
Allow a domain access to a range of IO ports
 dom          [int]: Identifier of domain to be allowed access.
 first_port   [int]: First IO port
 nr_ports     [int]: Number of IO ports
 allow_access [int]: Non-zero means enable access; else disable access
Returns: [int] 0 on success; -1 on error.
Allow a domain access to a physical IRQ
 dom          [int]: Identifier of domain to be allowed access.
 pirq         [int]: The Physical IRQ
 allow_access [int]: Non-zero means enable access; else disable access
Returns: [int] 0 on success; -1 on error.
Allow a domain access to a range of IO memory pages
 dom          [int]: Identifier of domain to be allowed access.
 first_pfn   [long]: First page of I/O Memory
 nr_pfns     [long]: Number of pages of I/O Memory (>0)
 allow_access [int]: Non-zero means enable access; else disable access
Returns: [int] 0 on success; -1 on error.
Returns: [int]: The size in KiB of memory spanning the given number of pages.
Set a domain's time offset to Dom0's localtime
 dom        [int]: Domain whose time offset is being set.
 offset     [int]: Time offset from UTC in seconds.
Returns: [int] 0 on success; -1 on error.
Set a domain's TSC mode
 dom        [int]: Domain whose TSC mode is being set.
 tsc_mode   [int]: 0=default (monotonic, but native where possible)
                   1=always emulate 2=never emulate 3=pvrdtscp
Returns: [int] 0 on success; -1 on error.
Marks domain as non-migratable AND non-restoreable
 dom        [int]: Domain whose TSC mode is being set.
Returns: [int] 0 on success; -1 on error.
Send trigger to a domain.
 dom     [int]: Identifier of domain to be sent trigger.
 trigger [int]: Trigger type number.
 vcpu    [int]: VCPU to be sent trigger.
Returns: [int] 0 on success; -1 on error.
Inject debug keys into Xen.
 keys    [str]: String of keys to inject.
Apply checks to host CPUID.
 input [long]: Input for cpuid instruction (eax)
 sub_input [long]: Second input (optional, may be None) for cpuid                      instruction (ecx)
 config [dict]: Dictionary of register
 config [dict]: Dictionary of register, use for checking
Returns: [int] 0 on success; exception on error.
Set cpuid response for an input and a domain.
 dom [int]: Identifier of domain.
 input [long]: Input for cpuid instruction (eax)
 sub_input [long]: Second input (optional, may be None) for cpuid                      instruction (ecx)
 config [dict]: Dictionary of register
Returns: [int] 0 on success; exception on error.
Set the default cpuid policy for a domain.
 dom [int]: Identifier of domain.
Returns: [int] 0 on success; exception on error.
domain_set_machine_address_size
Set maximum machine address size for this domain.
 dom [int]: Identifier of domain.
 width [int]: Maximum machine address width.
domain_suppress_spurious_page_faults
Do not propagate spurious page faults to this guest.
 dom [int]: Identifier of domain.
Do various control on a tmem pool.
 pool_id [int]: Identifier of the tmem pool (-1 == all).
 subop [int]: Supplementary Operation.
 cli_id [int]: Client identifier (-1 == all).
 arg1 [int]: Argument.
 arg2 [int]: Argument.
 buf [str]: Buffer.
Returns: [int] 0 or [str] tmem info on success; exception on error.
De/authenticate a shared tmem pool.
 cli_id [int]: Client identifier (-1 == all).
 uuid_str [str]: uuid.
 auth [int]: 0|1 .
Returns: [int] 0 on success; exception on error.
Enable/disable memory sharing for the domain.
 dom     [int]:        Domain identifier.
 enable  [int,0|1]:    Disable or enable?
Returns: [int] 0 on success; -1 on error.
Create new cpupool.
 pool    [int, 0]: cpupool identifier to use (allocated if zero).
 sched   [int]: scheduler to use (credit if unspecified).
Returns: [int] new cpupool identifier; -1 on error.
Destroy a cpupool.
 pool [int]:    Identifier of cpupool to be destroyed.
Returns: [int] 0 on success; -1 on error.
Get information regarding a set of cpupools, in increasing id order.
Returns: [list of dicts]
 pool     [int]: Identifier of cpupool to which this info pertains
 sched    [int]:  Scheduler used for this cpupool
 n_dom    [int]:  Number of Domains in this cpupool
 cpulist  [list]: List of CPUs this cpupool is using
Add a cpu to a cpupool.
 pool    [int]: Identifier of cpupool.
 cpu     [int, -1]: Cpu to add (lowest free if -1)
Returns: [int] 0 on success; -1 on error.
Remove a cpu from a cpupool.
 pool    [int]: Identifier of cpupool.
 cpu     [int, -1]: Cpu to remove (highest used if -1)
Returns: [int] 0 on success; -1 on error.
Move a domain to another cpupool.
 pool    [int]: Identifier of cpupool to move domain to.
 dom     [int]: Domain to move
Returns: [int] 0 on success; -1 on error.
Get info about cpus not in any cpupool.
Returns: [list]: List of CPUs
Convert a context string to a dynamic SID.
 context [str]: String specifying context to be converted
Returns: [int]: Numeric SID on success; -1 on error.
Convert a dynamic SID to context string.
 context [int]: SID to be converted
Returns: [str]: Numeric SID on success; -1 on error.
Loads a policy into the hypervisor.
 policy [str]: policy to be load
Returns: [int]: 0 on success; -1 on failure.
Returns the current mode of the Flask XSM module.
Returns: [int]: 0 for permissive; 1 for enforcing; -1 on failure.
Modifies the current mode for the Flask XSM module.
 mode [int]: mode to change to
Returns: [int]: 0 on success; -1 on failure.
Returns whether a source context has access to target context based on        class and permissions requested.
 scon [str]: source context
 tcon [str]: target context
 tclass [int]: target security class
 req [int] requested permissions
 allowed [int] permissions allow for the target class between the source         and target context
 decided [int] the permissions that were returned in the allowed         parameter
 auditallow [int] permissions set to audit on allow
 auditdeny [int] permissions set to audit on deny
 seqno [int] not used
Returns: [int]: 0 on all permission granted; -1 if any permissions are        denied
;*3$"
I|HH
xc.so.debug
7zXZ
r3Hg]
]G]?!
@|0r
Mm7N
F(R:
Kahr
-^>g
SH47
1y*$
Q4p(
&L+}
 d"P
xYKnB
Z@A8
`%uc=
xBeu
B1]kM
E?2)1
=YuD
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.init
.plt
.plt.got
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.data
.bss
.gnu_debuglink
.gnu_debugdata
