X_cZ
cn 'e
#x@n
UWSG*kaK
k|vl
|[=w
VCt#
P^~wp@
__gmon_start__
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
trigger_search_option
weechat_trigger_plugin
trigger_option_string
trigger_search_hook_type
trigger_hook_type_string
trigger_search_return_code
trigger_return_code_string
trigger_search
trigger_search_with_option
strchr
trigger_unhook
malloc
trigger_callback_print_cb
trigger_callback_config_cb
trigger_callback_focus_cb
trigger_callback_signal_cb
trigger_callback_command_cb
trigger_callback_command_run_cb
strtol
trigger_callback_timer_cb
trigger_callback_hsignal_cb
trigger_callback_modifier_cb
__strdup
trigger_regex_free
regfree
trigger_regex_split
strlen
strstr
realloc
trigger_split_command
trigger_name_valid
trigger_alloc
trigger_find_pos
trigger_add
trigger_new_with_options
last_trigger
triggers_count
trigger_new
trigger_config_create_trigger_option
trigger_create_default
trigger_config_default_list
trigger_rename
__snprintf_chk
trigger_copy
trigger_free
trigger_free_all
trigger_print_log
trigger_debug_dump_cb
weechat_plugin_init
trigger_callback_init
trigger_command_init
trigger_config_init
trigger_config_read
trigger_completion_init
trigger_buffer_set_callbacks
weechat_plugin_end
trigger_buffer_end
trigger_config_write
trigger_config_free
trigger_callback_end
last_trigger_temp
triggers_temp
trigger_return_code
trigger_hook_regex_default_var
trigger_hook_default_rc
trigger_hook_default_arguments
trigger_hook_option_values
trigger_option_default
weechat_plugin_license
weechat_plugin_version
weechat_plugin_author
weechat_plugin_description
weechat_plugin_api_version
weechat_plugin_name
trigger_buffer
trigger_buffer_close_cb
trigger_buffer_hashtable_map_cb
trigger_config_look_monitor_strip_colors
trigger_buffer_match_filters
trigger_buffer_filters
trigger_buffer_set_filter
trigger_buffer_set_title
trigger_buffer_input_cb
trigger_buffer_open
trigger_buffer_display_hashtable
trigger_buffer_display_trigger
trigger_config_color_trigger
trigger_callback_irc_message_parse
trigger_callback_set_tags
trigger_callback_check_conditions
trigger_callback_hashtable_options
trigger_callback_replace_regex
trigger_callback_run_command
trigger_callback_execute
strcmp
localtime
strftime
__isoc99_sscanf
trigger_command_display_status
trigger_command_display_trigger_internal
__memset_chk
trigger_config_color_replace
trigger_config_color_regex
trigger_config_color_flag_regex
trigger_config_color_flag_command
trigger_config_color_flag_return_code
trigger_config_color_trigger_disabled
trigger_config_color_flag_conditions
trigger_command_display_trigger
trigger_command_list
trigger_command_list_default
trigger_command_error_running
trigger_command_set_enabled
trigger_command_rename
trigger_command_trigger
trigger_config_look_enabled
trigger_completion_triggers_cb
trigger_completion_options_cb
trigger_completion_hooks_cb
trigger_completion_hook_conditions_cb
trigger_completion_hook_regex_cb
trigger_completion_hook_command_cb
trigger_completion_option_value_cb
trigger_completion_hooks_filter_cb
trigger_completion_add_quoted_word
trigger_completion_add_default_for_hook
trigger_completion_hook_arguments_cb
trigger_completion_hook_rc_cb
trigger_config_change_enabled
trigger_config_change_trigger_hook
trigger_config_change_trigger_arguments
trigger_config_change_trigger_enabled
trigger_config_change_trigger_regex
trigger_config_change_trigger_command
trigger_config_trigger_write_default_cb
trigger_config_section_trigger
trigger_config_file
trigger_config_create_option_temp
trigger_config_trigger_read_cb
trigger_config_use_temp_triggers
trigger_config_reload_cb
libc.so.6
__stack_chk_fail
_edata
__bss_start
trigger.so
GLIBC_2.7
GLIBC_2.1.3
GLIBC_2.4
GLIBC_2.0
GLIBC_2.3.4
UWVS
[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
UWVS
[^_]
[^_]
UWVS
d$,[^_]
UWVS
[^_]
UWVS
D$\1
D$\e3
d$l[^_]
9t$X
9t$X
9t$X
9t$X
9t$X
9t$X
UWVS
[^_]
UWVS
[^_]
t$,)
+D$ 
[^_]
UWVS
t$8t1
[^_]
[^_]
t(<-t$
UWVS
[^_]
[^_]
UWVS
[^_]
[^_]
UWVS
D$l1
L$T1
T$le3
d$|[^_]
d$$[^
UWVS
d$<[^_]
UWVS
d$L1
[^_]
d$L[^_]
UWVS
d$,[^_]
UWVS
D$4f
D$0f
[^_]
UWVS
;|$Du
d$,[^_]
UWVS
d$L[^_]
d$L[^_]
d$L[^_]
UWVS
[^_]
d$,1
[^_]
d$ [^_
UWVS
[^_]
UWVS
d$<[^_]
d$$[^
UWVS
d$\[^_]
d$\[^_]
UWVS
[^_]
UWVS
D$(e
[^_]
d$|[^_]
UWVS
d$|[^_]
UWVS
d$,[^_]
UWVS
[^_]
T$<tD
T$0t
UWVS
d$<[^_]
d$<[^_]
d$<1
[^_]
T$,t<
UWVS
D$0e
D$\1
D$Dt
T$\e3
d$l[^_]
UWVS
[^_]
T$4t?
UWVS
D$4e
D$|1
|$|e3=
[^_]
UWVS
d$<[^_]
d$<[^_]
d$<1
[^_]
UWVS
[^_]
UWVS
d$<[^_]
d$<[^_]
d$<1
[^_]
UWVS
T$de
D$<1
|$<e3=
d$L[^_]
T$$t&
T$$t"
T$$~
d$$[^
UWVS
D$`u
[^_]
D$P~x
D$d~x
D$`~o
D$hu
UWVS
d$|[^_]
UWVS
[^_]
[^_]
UWVS
[^_]
UWVS
d$<[^_]
UWVS
d$,[^_]
d$,[^_]
UWVS
d$<[^_]
UWVS
[^_]
T$(1
L$D1
L$@t 
d$([
UWVS
[^_]
UWVS
d$,1
[^_]
UWVS
d$,1
[^_]
UWVS
[^_]
UWVS
[^_]
UWVS
[^_]
UWVS
D$<1
|$<e3=
d$L[^_]
D$(t
T$(u(
UWVS
;l$ u
[^_]
UWVS
d$,[^_]
UWVS
D$<1
D$<e3
d$L[^_]
T$,x
L$81
9|$8
d$$[^
UWVS
d$<[^_]
d$<[^_]
d$<[^_]
UWVS
D$,e
|$<1
[^_]
UWVS
d$\[^_]
UWVS
[^_]
UWVS
[^_]
UWVS
d$l[^_]
d$l[^_]
config_option
%s.%s
[trigger (addr:0x%lx)]
***** "%s" plugin dump *****
debug_dump
--upgrade
ok_eat
tg_signal_data
tg_string
tg_message
tg_argv_eol1
tg_command
tg_remaining_calls
tg_value
ok,ok_eat,error
ok,error
/cmd
60000;0;0
chat
hsignal
command_run
timer
config
focus
%s%s: unable to create hook for trigger "%s" (bad arguments)
%s%s: invalid regular expression in trigger "%s"
  name. . . . . . . . . . : '%s'
  enabled . . . . . . . . : %d
  hook . .  . . . . . . . : %d ('%s')
  arguments . . . . . . . : '%s'
  conditions. . . . . . . : '%s'
  regex . . . . . . . . . : '%s'
  command . . . . . . . . : '%s'
  return_code . . . . . . : %d ('%s')
  hooks_count . . . . . . : %d
  hooks . . . . . . . . . : 0x%lx
  hook_count_cb . . . . . : %llu
  hook_count_cmd. . . . . : %llu
  hook_running. . . . . . : %d
  hook_print_buffers. . . : '%s'
  regex_count . . . . . . : %d
  regex . . . . . . . . . : 0x%lx
    hooks[%03d]. . . . . . : 0x%lx
  commands_count. . . . . : %d
  commands. . . . . . . . : 0x%lx
    regex[%03d].variable . . . : '%s'
    regex[%03d].str_regex. . . : '%s'
    regex[%03d].regex. . . . . : 0x%lx
    regex[%03d].replace. . . . : '%s'
    regex[%03d].replace_escaped: '%s'
  prev_trigger. . . . . . : 0x%lx
  next_trigger. . . . . . : 0x%lx
    commands[%03d] . . . . : '%s'
***** End of "%s" plugin dump *****
cmd;desc;args;args_desc;%(buffers_names)
signal|hsignal|modifier|print|command|command_run|timer|config|focus
type_values
chat_delimiters
pointer
	    %s: 0x%lx
no_trigger
reset
	    %s: %s"%s%s%s"
localvar_trigger_filter
title
localvar_del_trigger_filter
localvar_set_trigger_filter
monitor
close_callback
input_callback
short_name_is_set
short_name
debug
localvar_set_type
localvar_set_server
localvar_set_channel
localvar_set_no_log
highlight_words
display
  %s:
%s	%s%s %s(%s%s%s)
full_name
chat_buffer
	  buffer: %s%s
pointers
extra_vars
Trigger monitor (filter: %s) | Input: q=close, words=filter
irc_message_parse
tg_tags_count
localvar_type
notify_
tg_tag_notify
none
tg_notify
private
tg_msg_pv
tg_tag_nick
prefix_nick_
tg_tag_prefix_nick
host_
tg_tag_host
no variable
	  regex %d: %s
empty variable
	  regex %d (%s): %s
,irc_in_
,irc_in2_
,irc_raw_in_
,irc_raw_in2_
,irc_out1_
,irc_out_
,irc_outtags_
tg_signal
type_keys
tg_modifier
tg_modifier_data
tg_string_nocolor
weechat_print
tg_prefix
tg_prefix_nocolor
tg_message_nocolor
tg_plugin
tg_buffer
,%s,
tg_tags
%Y-%m-%d %H:%M:%S
tg_date
tg_displayed
tg_highlight
tg_argv%d
tg_argv_eol%d
tg_option
_window
condition
	  regex %d %s(%s%s%s)%s: %s"%s%s%s"
%s  running command %s"%s%s%s"%s on buffer %s%s%s
Triggers enabled
Triggers disabled
  %s%s%s: %s%s%s%s%s%s%s
%s hooks: %d
%s callback: %d
%s commands: %d
%s %s=? %s"%s%s%s"
%s %s/%d %s"%s%s%s"
%s %s=> %s%s
 %s=?%s
 %s~%d%s
 %s/%d%s
 %s=>%s
No trigger defined
List of default triggers:
Trigger "%s" restarted
Trigger "%s" enabled
Trigger "%s" disabled
Trigger "%s" renamed to "%s"
addreplace
List of triggers:
list
addoff
%s%s: invalid hook type "%s"
%s%s: not enough memory
Trigger "%s" created
addinput
/abc/def
${...}
input_pos
output
recreate
%s%s: trigger "%s" not found
Trigger "%s" updated
rename
copy
Trigger "%s" copied to "%s"
enable
disable
toggle
restart
-all
%sTrigger "%s" not found
%d triggers removed
Trigger "%s" removed
show
Trigger:
-yes
Default triggers restored:
listfull
listdefault
%s %s~%d %s"%s%s%s" --> "%s%s%s"%s%s%s%s
  %s%s%s: %s%s%s%s%s%s%s%s%s%s%s%s
%s%s: action "%s" can not be executed on trigger "%s" because it is currently running
%s%s: a disabled trigger can not be restarted
%s%s: invalid name for trigger
%s%s: trigger "%s" already exists
%s%s: failed to rename trigger "%s"
%s%s: invalid format for regular expression
%s%s: invalid regular expression (compilation failed)
%s%s: invalid return code "%s"
%s%s: trigger "%s" already exists (choose another name or use option "addreplace" to overwrite it)
%s%s: failed to create trigger "%s"
/trigger add name %s "%s" "%s" "%s" "%s"%s%s%s
//trigger %s %s %s "%s" "%s" "%s" "%s"%s%s%s
%s%s: trigger option "%s" not found
%s%s: failed to copy trigger "%s"
%s%s: "-yes" argument is required for restoring default triggers (security reason)
list|listfull|listdefault || add|addoff|addreplace %(trigger_names) %(trigger_hooks) %(trigger_hook_arguments) %(trigger_hook_conditions) %(trigger_hook_regex) %(trigger_hook_command) %(trigger_hook_rc) || addinput %(trigger_hooks) || input|output|recreate %(trigger_names) || set %(trigger_names) %(trigger_options)|name %(trigger_option_value) || rename|copy %(trigger_names) %(trigger_names) || enable|disable|toggle|restart|del %(trigger_names)|-all %(trigger_names)|%* || show %(trigger_names) || default || monitor %(trigger_names)|%(trigger_hooks_filter)
       list: list triggers (without argument, this list is displayed)
   listfull: list triggers with detailed info for each trigger
listdefault: list default triggers
        add: add a trigger
     addoff: add a trigger (disabled)
 addreplace: add or replace an existing trigger
       name: name of trigger
       hook: signal, hsignal, modifier, print, command, command_run, timer, config, focus
  arguments: arguments for the hook, depending on hook (separated by semicolons):
             signal: name(s) of signal (required)
             hsignal: name(s) of hsignal (required)
             modifier: name(s) of modifier (required)
             print: buffer, tags, message, strip colors
             command: command (required), description, arguments, description of arguments, completion
             command_run: command(s) (required)
             timer: interval (required), align on second, max calls
             config: name(s) of option (required)
             focus: name(s) of area (required)
 conditions: evaluated conditions for the trigger
      regex: one or more regular expressions to replace strings in variables
    command: command to execute (many commands can be separated by ";"
return_code: return code in callback (ok (default), ok_eat, error)
   addinput: set input with default arguments to create a trigger
      input: set input with the command used to create the trigger
     output: send the command to create the trigger on the buffer
   recreate: same as "input", with option "addreplace" instead of "add"
        set: set an option in a trigger
     option: name of option: name, hook, arguments, conditions, regex, command, return_code
             (for help on option, you can type: /help trigger.trigger.<name>.<option>)
      value: new value for the option
     rename: rename a trigger
       copy: copy a trigger
     enable: enable trigger(s) (without arguments: enable triggers globally)
    disable: disable trigger(s) (without arguments: disable triggers globally)
     toggle: toggle trigger(s) (without arguments: toggle triggers globally)
    restart: restart trigger(s) (recreate the hooks)
       show: show detailed info on a trigger (with some stats)
        del: delete a trigger
       -all: do action on all triggers
    default: restore default triggers
    monitor: open the trigger monitor buffer, with optional filter:
     filter: filter hooks/triggers to display (a hook must start with "@", for example "@signal"), many filters can be separated by commas; wildcard "*" is allowed in each trigger name
When a trigger callback is called, following actions are performed, in this order:
  1. check conditions; if false, exit
  2. replace text using POSIX extended regular expression(s) (if defined in trigger)
  3. execute command(s) (if defined in trigger)
  4. exit with a return code (except for modifiers and focus)
Examples (you can also look at default triggers with /trigger listdefault):
  add text attributes *bold*, _underline_ and /italic/ (only in user messages):
    /trigger add effects modifier weechat_print "${tg_tag_nick}" "==\*(\S+)\*==*${color:bold}$1${color:-bold}*== ==_(\S+)_==_${color:underline}$1${color:-underline}_== ==/(\S+)/==/${color:italic}$1${color:-italic}/"
  hide nicklist bar on small terminals:
    /trigger add resize_small signal signal_sigwinch "${info:term_width} < 100" "" "/bar hide nicklist"
    /trigger add resize_big signal signal_sigwinch "${info:term_width} >= 100" "" "/bar show nicklist"
  silently save config each hour:
    /trigger add cfgsave timer 3600000;0;0 "" "" "/mute /save"
  open trigger monitor and show only modifiers and triggers whose name starts with "resize":
    /trigger monitor @modifier,resize*
list|listfull|listdefault || add|addoff|addreplace <name> <hook> ["<arguments>" ["<conditions>" ["<regex>" ["<command>" ["<return_code>"]]]]] || addinput [<hook>] || input|output|recreate <name> || set <name> <option> <value> || rename|copy <name> <new_name> || enable|disable|toggle [<name>|-all [<name>...]] || restart <name>|-all [<name>...] || show <name> || del <name>|-all [<name>...] || default -yes || monitor [<filter>]
manage triggers, the Swiss Army knife for WeeChat
sort
"${...}"
"/abc/def"
"/cmd"
args
beginning
trigger_names
options for triggers
trigger_options
value of a trigger option
trigger_option_value
hooks for triggers
trigger_hooks
trigger_hooks_filter
default arguments for a hook
trigger_hook_arguments
default conditions for a hook
trigger_hook_conditions
trigger_hook_regex
default command for a hook
trigger_hook_command
trigger_hook_rc
hooks for triggers (for filter in monitor buffer)
default regular expression for a hook
default return codes for hook callback
boolean
type of hook used
integer
ok|ok_eat|error
look
enable trigger support
monitor_strip_colors
lightgreen
flag_command
yellow
flag_conditions
lightcyan
flag_regex
lightmagenta
flag_return_code
white
text color for trigger name
trigger_disabled
/print -beep
cmd_pass
msg_auth
5000|irc_message_auth
server_pass
%s%s: invalid format for option "regex", see /help trigger.trigger.%s.regex
%s%s: invalid regular expression in option "regex", see /help trigger.trigger.%s.regex
if disabled, the hooks are removed from trigger, so it is not called any more
arguments for the hook (depend on the hook type, see /help trigger)
condition(s) for running the command (it is checked in hook callback) (note: content is evaluated when trigger is run, see /help eval)
replace text with a POSIX extended regular expression (it is done only if conditions are OK, and before running the command) (note: content is evaluated when trigger is run, see /help eval); format is: "/regex/replace/var" (var is the hashtable variable to replace, it is optional), many regex can be separated by a space, for example: "/regex1/replace1/var1 /regex2/replace2/var2"; escaped chars are interpreted in the regex (for example "\n"); the separator "/" can be replaced by any char (one or more identical chars); matching groups can be used in replace: $0 to $99, $+ for last match and $.cN to replace all chars of group N by char c
command(s) to run if conditions are OK, after regex replacements (many commands can be separated by semicolons)
return code for hook callback (see plugin API reference to know where ok_eat/error can be used efficiently)
%sWarning: unknown option for section "%s": %s (value: "%s")
strip colors in hashtable values displayed on monitor buffer
text color for command flag (in /trigger list)
text color for conditions flag (in /trigger list)
text color for regex flag (in /trigger list)
text color for return code flag (in /trigger list)
text color for regular expressions
text color for replacement text (for regular expressions)
text color for disabled trigger name
${tg_highlight} || ${tg_msg_pv}
5000|input_text_display;5000|history_add;5000|irc_command_auth
==^((/(msg|quote) +nickserv +(id|identify|register|ghost +[^ ]+|release +[^ ]+|regain +[^ ]+) +)|/oper +[^ ]+ +|/quote +pass +|/set +[^ ]*password[^ ]* +|/secure +(passphrase|decrypt|set +[^ ]+) +)(.*)==$1$.*+
==^(.*(id|identify|register|ghost +[^ ]+|release +[^ ]+) +)(.*)==$1$.*+
5000|input_text_display;5000|history_add
==^(/(server|connect) .*-(sasl_)?password=)([^ ]+)(.*)==$1$.*4$5
;*2$"P
GPL3
1.0.1
bastien Helleu <flashcode@flashtux.org>
Text replacement and command execution on events triggered by WeeChat/plugins
20140802-01
trigger
trigger.so.debug
7zXZ
}E%8
Mt>J
pH'g
@\~<?
D-5y
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.data
.bss
.gnu_debuglink
.gnu_debugdata
