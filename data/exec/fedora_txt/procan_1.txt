/lib64/ld-linux-x86-64.so.2
kA[A!XH4
libutil.so.1
_ITM_deregisterTMCloneTable
__gmon_start__
_Jv_RegisterClasses
_ITM_registerTMCloneTable
openpty
libreadline.so.6
write_history
where_history
read_history
readline
append_history
using_history
add_history
libssl.so.10
libcrypto.so.10
libc.so.6
setuid
chroot
socket
fflush
__rawmemchr
fchmod
setgrent
fopen
ftruncate
strrchr
pipe
__strdup
connect
ftruncate64
__fdelt_chk
initgroups
nanosleep
signal
strncpy
fork
sigprocmask
getgrent
__stack_chk_fail
__lxstat
unlink
listen
select
realloc
abort
socketpair
getpid
kill
strftime
mkstemp
flock
localtime_r
strtol
isatty
symlink
getppid
calloc
strlen
send
openlog
getaddrinfo
strstr
__errno_location
tcsetattr
bind
chdir
read
__syslog_chk
endgrent
getsockopt
setgroups
grantpt
ttyname
dup2
pause
unsetenv
__fxstat64
shutdown
poll
ptsname
__fprintf_chk
fchown
stdout
fputc
recv
getsid
fputs
lseek
memcpy
fclose
tcsetpgrp
__vsnprintf_chk
strtoul
setsockopt
malloc
umask
strcasecmp
setpgid
getpeername
getgid
__lxstat64
__xstat64
__ctype_b_loc
getenv
recvfrom
getservbyname
stderr
ioctl
alarm
system
gethostbyname
__snprintf_chk
getgroups
getuid
readlink
getegid
getpgid
execvp
__xmknod
creat
__fxstat
fileno
gethostname
usleep
fwrite
gettimeofday
sigaction
geteuid
waitpid
unlockpt
lseek64
strchr
getsockname
sendto
fdopen
accept
tcgetattr
__ctype_toupper_loc
__strcpy_chk
__cxa_finalize
setsid
fcntl
__sprintf_chk
__xstat
getrlimit
uname
setgid
mkfifo
strcmp
recvmsg
strerror
tcgetpgrp
__libc_start_main
__cxa_atexit
_edata
__bss_start
_end
__libc_csu_init
__libc_csu_fini
GLIBC_2.2.5
GLIBC_2.15
GLIBC_2.4
GLIBC_2.14
GLIBC_2.3.4
GLIBC_2.3
<?t_~s<cu
<ht?
fffff.
ATUSH
D$@H
L$ H
;,$}[Hc
[]A\A]A^
fffff.
ffffff.
eto~=@
AVAUATUS
[]A\A]A^
|$ 1
D$<0
D$@H
D$ H
t$PH
D$(H
unknown 
    
time    H
H;8t
H;8t
H;;t
ht2@
H;8t
AVAUATUSH
l$0H
C(Lc
C0Lc
C8Lc
C@Lc
[]A\A]A^A_
fffff.
AVAUATA
l$0H
C(Lc
C0Lc
C8Lc
C@Lc
[]A\A]A^A_
l$0H
[]A\
AVAUATA
[]A\A]A^A_
AUATU
[]A\A]A^
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
fffff.
[]A\
ffffff.
[]A\
fff.
[]A\
[]A\
AVAUATUH
[]A\A]A^
[]A\
[]A\
fffff.
ATUH
[]A\A]
ATUH
[]A\A]
[]A\A]
fffff.
[]A\A]
fffff.
ATUH
[]A\A]
ATUH
[]A\A]
ATUS
[]A\A]
AUATU
[]A\A]A^
ffffff.
ATUSH
[]A\A]
ffffff.
[]A\
[]A\
[]A\
ffffff.
[]A\
[]A\
fffff.
[]A\
fffff.
[]A\
fffff.
[]A\
[]A\
fff.
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
fffff.
[]A\
[]A\
fffff.
AWAVI
([]A\A]A^A_
[]A\
[]A\A]
[]A\
[]A\
[]A\
fff.
[]A\
[]A\
ATUH
[]A\
[]A\
AVAUA
([]A\A]A^A_
AVAUATA
[]A\A]A^A_
[]A\A]
[]A\
[]A\
AVAUA
ATUH
[]A\A]A^A_
AUATA
[]A\A]A^
AVAUATA
[]A\A]A^A_
[]A\A]A^
[]A\A]A^
[]A\A]
ffffff.
[]A\A]A^A_
fffff.
AVAUATA
D$ H
L$8H
[]A\A]A^A_
fff.
[]A\A]
L$ dH
[]A\A]A^A_
[]A\
fffff.
fff.
ATUH
(t0H
[]A\A]
[]A\
fff.
AWAVL
\$@L
T$8D
l$P1
dH34%(
[]A\A]A^A_
ffffff.
[]A\
[]A\
AVAUATUH
[]A\A]A^A_
AWAVA
|$ dH
D$0H
[]A\A]A^A_
 t&H
[]A\
[]A\
[]A\
[]A\A]A^A_
fffff.
[]A\
[]A\
 t&H
[]A\
[]A\
ATUSH
[]A\A]
ATUH
[]A\A]
fff.
ATUSH
[]A\A]
[]A\
AWAVI
[]A\A]A^A_
[]A\A]A^A_
fffff.
AUATI
[]A\A]
fff.
ffffff.
AVAUA
r/fA
[]A\A]A^A_
AWAVI
ATE1
[]A\A]A^A_
[]A\A]A^A_
AVAUATUSH
|$0H
T$ H
Ic<$
Ic<$H
[]A\A]A^A_
H9L$
T$ H
[]A\
ATUH
D$(1
L$(dH3
0[]A\
ATUSH
[]A\
AVAUA
ATUH
[]A\A]A^A_
AUATA
dH34%(
[]A\A]A^A_
 []A\
 []A\
AWAVE1
t1xG
[]A\A]A^A_
StiH
[]A\A]A^A_
Analyze system parameters of process
      -?|-h  print a help text describing command line options
      -c     print values of compile time C defines
Usage:
procan [options]
   options:
unknown option "%s"
%d superfluous arguments
procan by Gerhard Rieger - send bug reports to socat@dest-unreach.org
process id = %d
process parent id = %d
/dev/tty
controlling terminal: -
controlling terminal: "%s"
process group id = %d
process session id = %d
effective user id  = %u
effective group id = %u
RESOURCE LIMITS
getrlimit(RLIMIT_CPU, %p): %s
getrlimit(RLIMIT_RSS, %p): %s
getrlimit(RLIMIT_AS, %p): %s
process group id if fg process / stdin = %d
process group id if fg process / stdout = %d
process group id if fg process / stderr = %d
process has a controlling terminal
process does not have a controlling terminal
resource                         current         maximum
cpu time (seconds)      %16lu%16lu
getrlimit(RLIMIT_FSIZE, %p): %s
file size (blocks)      %16lu%16lu
getrlimit(RLIMIT_DATA, %p): %s
data seg size (kbytes)  %16lu%16lu
getrlimit(RLIMIT_STACK, %p): %s
stack size (blocks)     %16lu%16lu
getrlimit(RLIMIT_CORE, %p): %s
core file size (blocks) %16lu%16lu
max resident set size   %16lu%16lu
getrlimit(RLIMIT_NPROC, %p): %s
max user processes      %16lu%16lu
getrlimit(RLIMIT_NOFILE, %p): %s
open files              %16lu%16lu
getrlimit(RLIMIT_MEMLOCK, %p): %s
max locked-in-memory address space %16lu%16lu
virtual memory (kbytes) %16lu%16lu
#define FD_SETSIZE %u
#define NFDBITS %u
#define O_RDONLY %u
#define O_WRONLY %u
#define O_RDWR %u
#define SHUT_RD %u
#define SHUT_WR %u
#define SHUT_RDWR %u
#define CRDLY 0%011o
#define CR0 0%011o
#define CR1 0%011o
#define CR2 0%011o
#define CR3 0%011o
#define TABDLY 0%011o
#define TAB0 0%011o
#define TAB1 0%011o
#define TAB2 0%011o
#define TAB3 0%011o
#define CSIZE 0%011o
#define TIOCEXCL 0x%lx
#define FOPEN_MAX %u
#define PF_UNIX %d
#define PF_INET %d
#define PF_INET6 %d
#define PF_APPLETALK %d
#define PF_PACKET %d
#define SOCK_STREAM %d
#define SOCK_DGRAM %d
#define SOCK_RAW %d
#define SOCK_SEQPACKET %d
#define SOCK_PACKET %d
#define IPPROTO_IP %d
#define IPPROTO_TCP %d
#define IPPROTO_UDP %d
#define IPPROTO_SCTP %d
#define IPPROTO_DCCP %d
#define SOL_SOCKET 0x%x
#define SOL_PACKET 0x%x
#define SOL_IP 0x%x
#define SOL_IPV6 0x%x
#define SOL_TCP 0x%x
#define SO_REUSEADDR %d
socket(PF_INET, SOCK_DGRAM, IPPROTO_IP): %s
ioctl(%d, SIOCGIFCONF, %p): %s
ioctl(%d, SIOCGIFINDEX, {"%s"}): %s
%2d: %s
IP INTERFACES
%Y/%m/%d %H:%M:%S
.%06ld 
%Y/%m/%d %H:%M:%S 
%s[%d] 
N exit(1)
DINWEF
unknown syslog facility "%s"
cannot open log file "%s": %s
unknown diagnostic option %c
HOSTNAME
auth
authpriv
cron
daemon
kern
local0
local1
local2
local3
local4
local5
local6
local7
mail
news
syslog
user
uucp
cannot read time:   %s[%d] E %s
%s(, {%lu,%lu,0%03o,%lu,%u,%u
,%lu
,%ld
,...}) -> %d
%s(, {}) -> %d
umask(0%03o)
umask() -> 0%03o
open("%s", 0%o, 0%03o)
open("%s", 0%o, 0%03o) -> %d
creat("%s", 0%03o)
creat("%s", 0%03o) -> %d
lseek(%d, %ld, %d)
lseek() -> %ld
lseek64(%d, %ld, %d)
lseek64() -> %ld
getpid()
getpid() -> %d
getppid()
getppid() -> %d
getpgrp()
getpgid(%d)
getpgid() -> %d
setpgid(%d, %d)
setpgid() -> %d
tcgetpgrp(%d)
tcgetpgrp() -> %d
tcsetpgrp(%d, %d)
tcsetpgrp() -> %d
getsid(%d)
getsid() -> %d
setsid()
setsid() -> %d
getuid()
getuid() -> %u
geteuid()
geteuid() -> %u
setuid(%u)
setuid() -> %d
getgid()
getgid() -> %u
getegid()
getegid() -> %u
setgid(%u)
setgid() -> %d
initgroups("%s", %u)
initgroups() -> %d
getgroups(%d, %u,...)
getgroups() -> %d
setgroups(%Zu, %u,...)
setgroups() -> %d
chdir("%s")
chdir() -> %d
chroot("%s")
chroot() -> %d
gettimeofday(%p, {%d,%d})
gettimeofday(%p, NULL)
mknod("%s", 0%o, %lu)
mknod() -> %d
mkfifo("%s", 0%o)
mkfifo() -> %d
fstat(%d, %p)
fstat
fstat64(%d, %p)
fstat64
lstat(%s, %p)
lstat
lstat64(%s, %p)
lstat64
dup(%d)
dup(%d) -> %d
dup2(%d, %d)
dup2(%d, %d) -> %d
pipe(%p)
pipe({%d,%d}) -> %d
read(%d, %p, %Zu)
read -> %Zd
write(%d, %p, %Zu)
write -> %Zd
fcntl(%d, %d)
fcntl() -> %d
fcntl(%d, %d, %ld)
ftruncate(%d, %ld)
ftruncate() -> %d
ftruncate64(%d, %ld)
ftruncate64() -> %d
flock(%d, %d)
flock() -> %d
ioctl(%d, 0x%x, %p{%lu})
ioctl(%d, 0x%x, 0x%p)
ioctl() -> %d
ioctl(%d, 0x%x, %d)
close(%d)
close()  -> %d
fchown(%d, %u, %u)
fchown() -> %d
fchmod(%d, 0%o)
fchmod()  -> %d
unlink("%s")
unlink()  -> %d
symlink("%s", "%s")
symlink()  -> %d
readlink("%s", %p, %Zu)
readlink() -> %d
chown("%s", %u, %u)
chown()  -> %d
chmod("%s", 0%o)
poll({%d,0x%02hx,}, , %u, %d)
poll(, {,,0x%02hx}) -> %d
NULL/
fork()
fork() -> %d
waitpid(%d, %p, %d)
waitpid(, {%d}, ) -> %d
signal(%d, %p)
signal() -> %p
sigaction(%d, %p, %p)
sigaction() -> %d
sigprocmask(%d, %p, %p)
sigprocmask() -> %d
alarm(%u)
alarm() -> %u
kill(%d, %d)
kill() -> %d
execvp("%s", "%s")
execvp("%s", "%s" "%s")
execvp("%s", "%s" "%s" "%s")
execvp() -> %d
system("%s")
system() -> %d
socketpair(%d, %d, %d, %p)
socket(%d, %d, %d)
socket(%d, %d, %d) -> %d
bind(%d, %s, %Zd)
bind() -> %d
connect(%d, {%d,%s}, %Zd)
connect() -> %d
listen(%d, %d)
listen() -> %d
accept(%d, %p, %p)
accept(,,) -> %d
getsockname(%d, %p, %p{%u})
getpeername(%d, %p, %p{%u})
setsockopt() -> %d
recv(%d, %p, %Zu, %d)
recv() -> %d
send() -> %d
sendto() -> %d
shutdown(%d, %d)
shutdown()  -> %d
sleep(%u)
sleep() -> %u
usleep(%lu)
usleep() ->
nanosleep({%ld,%ld},%p)
nanosleep(,{%ld,%ld}) -> %d
nanosleep() -> %d
pause()
pause() -> %d
gethostbyname("%s")
gethostbyname() -> NULL
getaddrinfo(,,,{%p}) -> %d
malloc(%Zd)
malloc() -> %p
malloc(%Zd): out of memory
calloc(%Zd, %Zd)
calloc() -> %p
realloc(%p, %Zd)
realloc() -> %p
tcgetattr(%d, %p)
%02x,
%02x
tcsetattr() -> %d
ttyname(%d)
ttyname() -> %s
ttyname() -> NULL
isatty(%d)
isatty() -> %d
openpty(%p, %p, %p, %p, %p)
grantpt(%d)
grantpt() -> %d
unlockpt(%d)
unlockpt() -> %d
ptsname(%d)
ptsname() -> %s
ptsname() -> NULL
uname(%p)
uname({%s, %s, %s, %s, %s})
gethostname(%p, %Zu)
gethostname("%s", ) -> %d
atexit(%p)
atexit() -> %d
exit(%d)
abort()
mkstemp("%s")
mkstemp({%s}) -> %d
setenv("%s", "%s", %d)
setenv() -> %d
unsetenv("%s")
unsetenv() ->
readline("%s")
readline(NULL)
readline() -> "..."
readline() -> NULL
using_history()
using_history() ->
read_history("%s")
read_history(NULL)
read_history() -> %d
read_history() -> 0
write_history("%s")
write_history(NULL)
write_history() -> %d
write_history() -> 0
append_history(%d, "%s")
append_history(%d, NULL)
append_history() -> %d
append_history() -> 0
where_history()
where_history() -> %d
add_history("%s")
add_history() ->
gettimeofday({%ld,%ld}, {%d,%d}) -> %d
gettimeofday({%ld,%ld},) -> %d
fcntl(%d, %d, {type=%hd,whence=%hd,start=%ld,len=%ld,pid=%d})
poll({%d,0x%02hx,}{%d,0x%02hx,}{%d,0x%02hx,}{%d,0x%02hx,}, %u, %d)
poll(, {,,0x%02hx}{,,0x%02hx}{,,0x%02hx}{,,0x%02hx}) -> %d
select(%d, &0x%lx, &0x%lx, &0x%lx, %s%lu.%06ld)
select -> (, 0x%lx, 0x%lx, 0x%lx, %s%lu.%06ld), %d
execvp("%s", "%s" "%s" "%s" "%s")
execvp("%s", "%s" "%s" "%s" "%s" "%s")
execvp("%s", "%s" "%s" "%s" "%s" "%s" ...)
socketpair(%d, %d, %d, {%d,%d}) -> %d
accept(%d, {%d, %s}, %Zd) -> %d
getsockname(, {%s}, {%u}) -> %d
getpeername(, {%s}, {%u}) -> %d
getsockopt(%d, %d, %d, %p, {%Zd})
getsockopt() -> (,,, 0x%08x, %d), %d
setsockopt(%d, %d, %d, {0x%x}, %d)
setsockopt(%d, %d, %d, {0x%08x,%08x}, %d)
recvfrom(%d, %p, %Zu, %d, %p, %Zu)
recvfrom(,,,, {%d,%s}, %Zd) -> %d
recvfrom(,,,, NULL, NULL) -> %d
recvmsg(%d, %p{%p,%u,%p,%u,%p,%u,%d}, %d)
recvmsg(, {%s,%u,,%u,,%u,}, ) -> %d
send(%d, %p[%08x...], %Zu, %d)
sendto(%d, %p[%08x...], %Zu, %d, {%s}, %d)
gethostbyname() -> %d.%d.%d.%d
getaddrinfo(%s%s%s, %s%s%s, {%d,%d,%d,%d,%Zu,%p,%p,%p}, %p)
getaddrinfo(,,,{{%s, %s}) -> 0
calloc(%Zd, %Zd): out of memory
realloc(%p, %Zd): out of memory
tcgetattr(, {%08x,%08x,%08x,%08x,%s}) -> %d
tcsetattr(%d, %d, {%08x,%08x,%08x,%08x,%s})
openpty({%d}, {%d}, {"%s"},,) -> %d
write(%d, %p, %Zu): %s
<anon>
%u.%u.%u.%u
%u.%u.%u.%u:%hu
AF=%d 
setenv("%s", "%s", 1): %s
write(%d, %p, %Zu): only wrote %Zu bytes, trying to continue 
socket_init(): unknown address family %d
inet4addr_info(): buffer too short
sockaddr_inet4_info(): buffer too short
[%04x:%04x:%04x:%04x:%04x:%04x:%04x:%04x]:%hu
sockaddr_inet6_info(): buffer too short
sockaddr_info(): buffer too short (%Zu)
0x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x%02x
sockaddr_info(): buffer too short
parseport("%s", %d): extra trailing data "%s"
cannot resolve service "%s/%d"
ioctl(%d, SIOCGIFINDEX, {"%s"}) -> { %d }
;*3$"
procan.debug
7zXZ
J$,?
 gGCt;
$!)E
A`Bx
UWwD
u~KOA
AI/E
^Q8)
)-	!e
mr=%
:'d2
1Q$bj
=@z?S
I>Tj
u$jf
e	y%biX
1WC4
5i;9
K#fw
:"]	
8I^V~
<w1vS
S#2h
BoH-
^?=+)
P.:;
Q,Q~
7IyV
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.data
.bss
.gnu_debuglink
.gnu_debugdata
