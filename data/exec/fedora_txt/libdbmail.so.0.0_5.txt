0sGi
B/E$
N"5(
@`@@@s4
^0FL$
Mq-Xss
51\KI
{<6.`@
.S`G
g	" vwt
 *xgJ;x
VPX/
=,op	
~"'IZ
D 5noH~/:
W0xY
dRN=W6@
50}S.
6wCE
*,7ru
2m-M
(C(o
|G!j
BXpl
vjCtN:
ju%*;
 zm@
WK}8
_F$zZG
w/jy
dBiS~s@
	=jc
b),W
ik,2
__gmon_start__
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
getpid
__stack_chk_fail
auth_check_user_ext
reallyquiet
g_list_join
__printf_chk
g_string_free
g_list_first
g_list_destroy
auth_get_userid
g_list_free
__fprintf_chk
do_username
no_to_all
auth_change_username
fwrite
__assert_fail
do_password
auth_change_password
mkpassword
dm_tiger
g_strdup
dm_sha1
dm_sha256
dm_sha512
dm_whirlpool
fopen
fgets
strchr
dm_md5_base64
dm_md5
__sprintf_chk
crypt
strcmp
fclose
do_clientid
auth_change_clientid
do_maxmail
auth_change_mailboxsize
do_forwards
auth_get_aliases_ext
match_glob_list
auth_removealias_ext
auth_addalias_ext
do_aliases
auth_getclientid
auth_get_user_aliases
auth_removealias
auth_addalias
do_spasswd
db_user_set_security_password
do_saction
db_user_set_security_action
do_enable
db_user_set_active
do_delete
auth_delete_user
do_show
auth_user_exists
auth_getmaxmailsize
dm_quota_user_get
g_string_new
g_list_append_printf
g_list_length
auth_get_known_users
auth_get_known_aliases
g_list_dedup
g_list_foreach
do_add
trace
auth_adduser
db_createmailbox
do_empty
yes_to_all
fflush
db_empty_mailbox
db_findmailbox_by_regex
db_get_mailbox_owner
db_getmailboxname
strtomaxmail
verbose
db_returning
strlen
db_con_get
Exception_stack
pthread_getspecific
pthread_setspecific
_setjmp
SQLException
db_con_close
db_begin_transaction
db_get_sql
db_params
db_stmt_prepare
db_stmt_set_str
db_stmt_set_blob
db_stmt_set_int
db_stmt_query
db_insert_result
db_commit_transaction
Exception_throw
db_stmt_exec
db_get_pk
db_rollback_transaction
g_strcasestr
__ctype_b_loc
g_string_insert_c
g_strchug
g_strchomp
g_mime_content_type_new_from_string
g_ascii_strncasecmp
db_con_clear
db_stmt_set_u64
internet_address_list_length
g_string_append
internet_address_list_get_address
internet_address_group_get_members
internet_address_get_name
g_string_append_printf
internet_address_mailbox_get_addr
internet_address_list_parse_string
dm_shellesc
__snprintf_chk
db_result_next
db_result_get_u64
dm_get_hash_for_string
g_list_append
g_ascii_strdown
g_hash_table_lookup
config_get_value
g_strdup_printf
g_malloc0
g_hash_table_insert
g_strndup
g_return_if_fail_warning
db_result_get
find_end_of_header
g_mime_object_get_body
g_mime_object_get_type
g_type_check_instance_cast
g_mime_object_to_string
memmove
g_realloc
dbmail_message_free
g_object_unref
p_string_free
g_hash_table_destroy
g_tree_destroy
mempool_push
mempool_close
dbmail_message_set_class
dbmail_message_new
mempool_pop
p_string_new
g_ascii_strcasecmp
g_tree_new
g_str_equal
g_str_hash
g_hash_table_new_full
mempool_open
dbmail_message_get_class
dbmail_message_set_physid
dbmail_message_get_physid
db_exec
g_mime_object_get_headers
g_type_check_instance_is_a
g_mime_message_get_type
g_mime_object_get_content_type
g_mime_content_type_is_type
g_mime_header_list_set_stream
g_mime_message_get_mime_part
g_mime_message_part_get_type
g_mime_message_part_get_message
g_mime_multipart_get_boundary
g_mime_multipart_get_preface
g_mime_multipart_get_postface
g_mime_content_type_get_type
g_mime_multipart_get_count
g_mime_multipart_get_part
dm_message_store
dbmail_message_set_internal_date
g_mime_utils_header_decode_date
dbmail_message_get_internal_date
gmtime_r
strftime
db_find_create_mailbox
gettimeofday
localtime_r
char2date_str
db_query
dbmail_message_set_envelope_recipient
p_string_printf
dbmail_message_get_envelope_recipient
p_string_len
p_string_str
dbmail_message_set_header
g_mime_object_set_header
dbmail_message_get_header
g_mime_object_get_header
dbmail_message_get_header_repeated
g_mime_object_get_header_list
g_mime_header_list_foreach
dbmail_message_get_header_addresses
dbmail_message_get_charset
dbmail_iconv_decode_field
g_utf8_strncpy
gmtime
dm_base_subject
dbmail_iconv_str_to_db
g_strlcpy
g_strsplit
g_strfreev
dbmail_message_to_string
dbmail_message_init_with_string
g_mime_stream_mem_new
g_mime_stream_write
g_mime_stream_reset
g_mime_parser_new_with_stream
g_mime_parser_construct_message
get_crlf_encoded_opt
g_strstr_len
g_mime_parser_construct_part
date2char_str
memset
db_result_get_int
db_result_get_bool
db_result_get_blob
p_string_append_printf
g_mime_content_type_get_parameter
g_string_append_len
dbmail_message_body_to_string
dbmail_message_hdrs_to_string
dbmail_message_get_size
g_mime_stream_length
dbmail_message_retrieve
_message_cache_envelope_date
g_mime_utils_header_format_date
dbmail_message_cache_referencesfield
g_strconcat
g_mime_references_decode
dm_strcmpdata
g_tree_new_full
g_tree_lookup
g_tree_insert
g_mime_references_clear
dbmail_message_cache_headers
g_mime_content_type_to_string
g_mime_object_get_content_disposition
g_mime_content_disposition_to_string
dbmail_message_cache_envelope
imap_get_envelope
dbmail_message_store
create_unique_id
db_update
db_get_useridnr
dm_quota_user_inc
usleep
dbmail_message_construct
g_mime_message_new
g_mime_utils_text_is_8bit
g_mime_message_set_sender
g_mime_message_set_subject
g_mime_message_add_recipient
g_mime_part_new
g_mime_stream_filter_new
g_mime_stream_write_string
g_mime_data_wrapper_new_with_stream
g_mime_part_set_content_object
g_mime_content_type_new
g_mime_object_set_content_type
g_mime_object_set_content_type_parameter
g_mime_message_set_mime_part
g_mime_utils_best_encoding
g_mime_filter_basic_new
g_mime_stream_filter_add
sort_deliver_to_mailbox
MailboxState_new
MailboxState_setId
acl_has_right
MailboxState_free
db_mailbox_has_message_id
db_copymsg
db_set_msgflag
db_mailbox_seq_update
sort_and_deliver
dm_sievescript_isactive
sort_process
sort_get_cancelkeep
sort_get_reject
sort_free_result
find_bounded
send_mail
popen
fputs
pclose
send_forward_list
localtime
insert_messages
p_list_first
p_list_data
db_get_reply_body
dsnuser_worstcase_int
set_dsn
p_list_next
db_delete_message
db_get_notify_address
g_list_concat
strstr
db_replycache_validate
dbmail_iconv_decode_text
g_mime_utils_header_encode_text
db_replycache_register
g_tree_merge
g_tree_nnodes
g_node_depth
g_node_nth_child
g_node_children_foreach
g_tree_foreach
g_snprintf
g_strlcat
g_mime_message_get_sender
g_strdelimit
p_list_free
p_list_new
p_list_append
g_node_new
g_node_insert_before
g_list_prepend
dbmail_mailbox_free
g_node_get_root
g_node_traverse
g_node_destroy
dbmail_mailbox_get_id
g_string_printf
ucmp
g_list_reverse
dbmail_mailbox_set_uid
dbmail_mailbox_new
dbmail_mailbox_get_uid
dbmail_mailbox_open
dbmail_mailbox_dump
g_mime_stream_file_new
g_mime_stream_file_set_owner
dbmail_mailbox_orderedsubject
dbmail_mailbox_ids_as_string
g_tree_keys
MailboxState_getMsginfo
MailboxState_getMsn
g_tree_values
uint64_free
ucmpdata
MailboxState_getIds
small_pool
date_imap2sql
dbmail_mailbox_sorted_as_string
dbmail_mailbox_build_imap_search
check_msg_set
dm_strtoull
__errno_location
check_date
find_modseq
g_tree_remove
dbmail_mailbox_get_set
MailboxState_get_set
dbmail_mailbox_sort
dbmail_mailbox_search
_compare_data
g_tree_lookup_extended
Connection_execute
Connection_rowsChanged
MailboxState_remap
MailboxState_removeUid
MailboxState_getId
MailboxState_getSeq
MailboxState_getExists
MailboxState_setExists
MailboxState_getRecent
MailboxState_getUidnext
MailboxState_setOwner
MailboxState_getOwner
MailboxState_setPermission
MailboxState_getPermission
MailboxState_setName
mailbox_match_free
mailbox_add_namespace
g_string_truncate
mailbox_match_new
MailboxState_getName
MailboxState_setIsUsers
MailboxState_isUsers
MailboxState_setIsPublic
MailboxState_isPublic
MailboxState_hasKeyword
MailboxState_addKeyword
MailboxState_setNoSelect
MailboxState_noSelect
MailboxState_setNoChildren
MailboxState_noChildren
MailboxState_noInferiors
MailboxState_getUnseen
g_list_last
g_string_split
MailboxState_info
MailboxState_count
MailboxState_flags
MailboxState_hasPermission
MailboxState_getAcl
MailboxState_build_recent
MailboxState_addMsginfo
MailboxState_flush_recent
g_list_slices_u64
MailboxState_clear_recent
MailboxState_message_flags
imap_flag_desc_escaped
MailboxState_merge_recent
Cram_new
Cram_setChallenge
getdomainname
g_mime_utils_generate_message_id
gethostname
Cram_getChallenge
Cram_getUsername
Cram_decode
dm_base64_decode
stridx
Cram_verify
mhash_get_hash_pblock
mhash_hmac_init
mhash
mhash_hmac_deinit
dm_digest
strncmp
Cram_free
Capa_new
Capa_as_string
p_string_append_len
Capa_match
Capa_add
Capa_remove
p_list_remove
Capa_free
g_key_file_get_value
config_get_file
configFile
config_create
__strdup
dirname
g_mkdir_with_parents
config_free
g_key_file_free
config_read
__xstat
g_key_file_new
g_key_file_load_from_file
null_logger
g_log_set_default_handler
_exit
g_ascii_strup
SetTraceLevel
strtol
configure_debug
GetDBParams
getenv
strtoul
config_get_timeout
config_get_logfiles
config_get_pidfile
g_build_filename
config_get_security_actions
ilogb
__vsnprintf_chk
g_thread_self
__progname
fputc
__syslog_chk
TabortHandler
freopen
fstderr
_alloc_list
p_list_last
p_list_prepend
p_list_previous
p_list_length
g_list_delete_link
g_list_join_u64
g_strdup_vprintf
g_list_slices
g_list_merge
g_list_find_custom
g_list_remove_link
g_mutex_lock
g_mutex_unlock
db_disconnect
db_connected
ConnectionPool_free
dburi
URL_free
ConnectionPool_stop
ConnectionPool_getConnection
ConnectionPool_reapConnections
Connection_setQueryTimeout
Connection_close
Connection_clear
log_query_time
Connection_executeQuery
Connection_prepareStatement
PreparedStatement_setString
PreparedStatement_setInt
PreparedStatement_setLLong
PreparedStatement_setBlob
PreparedStatement_execute
PreparedStatement_executeQuery
ResultSet_next
ResultSet_getLLong
db_num_fields
ResultSet_getColumnCount
ResultSet_getString
ResultSet_getInt
ResultSet_getBlob
Connection_lastRowId
Connection_beginTransaction
Connection_commit
Connection_rollback
db_savepoint
db_savepoint_rollback
db_do_cleanup
mailbox_remove_namespace
db_check_version
db_connect
URL_new
URL_toString
ConnectionPool_new
ConnectionPool_setReaper
ConnectionPool_setAbortHandler
ConnectionPool_start
ConnectionPool_getMaxConnections
ConnectionPool_getInitialConnections
ConnectionPool_setMaxConnections
URL_getProtocol
ConnectionPool_setInitialConnections
dm_db_ping
Connection_ping
db_use_usermap
db_get_physmessage_id
dm_quota_user_set
dm_quota_user_dec
dm_quota_rebuild_user
dm_quota_rebuild
db_log_ip
db_cleanup
DB_TABLENAMES
db_icheck_physmessages
db_icheck_partlists
db_icheck_mimeparts
db_icheck_headernames
db_icheck_headervalues
db_icheck_rfcsize
db_update_rfcsize
db_set_headercache
db_icheck_headercache
db_set_envelope
db_icheck_envelope
db_set_message_status
db_get_mailbox_size
db_get_message_lines
db_update_pop
db_findmailbox
mailbox_is_writable
db_imap_split_mailbox
strcat
strcpy
db_mailbox_set_permission
db_listmailboxchildren
db_isselectable
db_noinferiors
db_setmailboxname
db_subscribe
db_unsubscribe
db_get_msgflag
db_acl_delete_acl
db_acl_get_identifier
db_delete_mailbox
db_user_is_mailbox_owner
db_acl_set_right
db_usermap_resolve
dm_sock_compare
dm_sock_score
dm_valid_format
db_user_active
db_user_get_security_action
db_user_delete_messages
db_user_security_trigger
server_conf
db_user_exists
db_user_create
db_user_create_shadow
db_change_mailboxsize
db_user_delete
db_user_rename
db_user_find_create
auth_requires_shadow_user
db_mailbox_create_with_parents
checkmailboxname
acl_set_rights
db_replycache_unregister
db_user_log_login
create_current_timestring
db_user_validate
db_movemsg
db_message_set_seq
db_rehash_store
db_append_msg
global_cache
imap_flag_desc
dm_sievescript_getbyname
dm_sievescript_isactive_byname
dm_sievescript_get
dm_sievescript_list
dm_sievescript_rename
dm_sievescript_add
dm_sievescript_deactivate
dm_sievescript_activate
dm_sievescript_delete
dm_sievescript_quota_check
dm_sievescript_quota_set
dm_sievescript_quota_get
acl_get_acl
dbmail_imap_astring_as_string
acl_listrights
acl_myrights
g_mime_object_get_content_type_parameter
g_string_maybe_shrink
drop_privileges
getgrnam_r
getpwnam_r
setgid
setuid
random
g_str_has_suffix
zap_between
strrchr
pack_char
dm_pack_spaces
g_str_has_prefix
g_utf8_strdown
listex_match
__ctype_tolower_loc
dm_getguid
strtoll
cidr_new
cidr_free
cidr_match
fnmatch
rindex
AcceptedMailboxnameChars
month_desc
month_len
date_sql2imap
strptime
num_from_imapdate
g_tree_steal
dm_strcasecmpdata
discard_client_input
dbmail_imap_plist_collapse
g_strjoinv
dbmail_imap_plist_as_string
g_string_erase
__strncpy_chk
g_strcompress
g_strescape
g_mime_content_disposition_new_from_string
g_mime_content_disposition_get_disposition
dbmail_imap_plist_free
g_mime_object_get_content_id
dbmail_imap_append_alist_as_plist
g_mime_utils_header_encode_phrase
g_mime_message_foreach
imap_get_partspec
g_list_nth_data
imap_cleanup_address
dbmail_iconv_str_to_utf8
g_mime_message_get_date_as_string
g_mime_message_get_message_id
g_strrstr
imap_get_structure
g_mime_multipart_get_type
base64_decodev
g_base64_decode
g_malloc0_n
imap_get_logical_part
strip_crlf
unlink
pidfile_create
fread
chmod
kill
mhash_init
mhash_deinit
mhash_get_block_size
g_base64_encode
match_glob
g_mime_iconv_open
g_mime_locale_charset
dbmail_iconv_init
g_once_impl
g_utf8_validate
g_mime_iconv_strdup
g_mime_iconv_close
dbmail_iconv_db_to_utf7
g_mime_utils_header_decode_text
dbmail_iconv_decode_address
g_mime_utils_header_decode_phrase
dsn_tostring
dsnuser_init
dsnuser_free
dsnuser_free_list
dsnuser_worstcase_list
dsnuser_resolve
auth_check_userid
dsnuser_resolve_list
Sset_new
Sset_has
Sset_add
malloc
memcpy
Sset_len
Sset_del
Sset_map
Sset_free
Sset_or
Sset_and
Sset_not
Sset_xor
mempool_resize
p_string_assign
p_string_append_vprintf
p_string_erase
p_string_truncate
p_string_unescape
mmap
sbrk
getpagesize
munmap
mpool_clear
mpool_alloc
mpool_calloc
mpool_free
mpool_set_log_func
mpool_set_max_pages
mpool_strerror
pthread_mutex_init
perror
pthread_mutex_lock
pthread_mutex_unlock
mempool_stats
pthread_mutex_destroy
evbase
server_sig_cb
event_new
sig_int
event_assign
event_add
sig_hup
sig_term
sig_pipe
g_async_queue_new
queue
queue_pool
g_thread_pool_new
tpool
mainReload
fstdout
fnull
stdin
event_get_fd
g_mem_profile
getpeername
getsockname
getnameinfo
setsockopt
bind
listen
getaddrinfo
fcntl
freeaddrinfo
gai_strerror
g_strsplit_set
g_strv_length
dm_queue_heartbeat
selfpipe
selfpipe_lock
dm_queue_drain
g_async_queue_try_pop
event_del
dm_queue_push
g_async_queue_push
dm_thread_data_push
ci_cork
g_thread_pool_push
g_thread_pool_unprocessed
g_thread_pool_get_max_threads
g_thread_pool_get_num_threads
g_thread_pool_get_max_unused_threads
g_thread_pool_get_num_unused_threads
dm_thread_data_sendmessage
ci_write
server_daemonize
fork
setsid
chdir
umask
getsid
disconnect_all
auth_disconnect
g_mime_shutdown
g_thread_pool_free
event_free
StartCliServer
auth_connect
srand
evthread_use_pthreads
event_base_new
event_base_dispatch
evhttp_free
closelog
server_run
tls_load_certs
evhttp_new
evhttp_bind_socket
Request_cb
evhttp_set_gencb
tls_load_ciphers
server_showhelp
server_getopt
opterr
optarg
optind
server_mainloop
g_mime_init
g_mime_parser_get_type
g_mime_stream_get_type
g_mime_stream_mem_get_type
g_mime_stream_file_get_type
g_mime_stream_buffer_get_type
g_mime_stream_filter_get_type
g_mime_filter_crlf_get_type
tls_init
tls_context
sig_usr
client_session_new
client_init
socket_read_cb
socket_write_cb
client_session_reset_parser
client_session_reset
client_session_bailout
ci_wbuf_len
ci_write_cb
ci_close
client_session_read
ci_read_cb
client_session_set_timeout
SSL_get_error
ERR_error_string
ERR_get_error
ci_uncork
SSL_write
ci_starttls
SSL_accept
SSL_shutdown
SSL_free
tls_setup
SSL_read
ci_read
ci_readln
ci_authlog_init
SSL_library_init
SSL_load_error_strings
SSLv23_server_method
SSL_CTX_new
tls_get_error
SSL_CTX_load_verify_locations
SSL_CTX_use_certificate_file
SSL_CTX_use_PrivateKey_file
SSL_CTX_check_private_key
SSL_CTX_set_cipher_list
SSL_new
SSL_set_fd
Http_getUsers
Request_getId
Request_error
evbuffer_new
Request_getMethod
Request_getPOST
evhttp_find_header
Request_setContentType
evbuffer_add_printf
evbuffer_get_length
evbuffer_free
Request_send
Http_getMailboxes
Http_getMessages
Request_getArg
g_ascii_toupper
Request_new
evhttp_request_get_uri
evhttp_decode_uri
evhttp_parse_query
evbuffer_pullup
Request_getUser
Request_getController
Request_getGET
evhttp_send_reply
evhttp_add_header
auth_validate
Request_header
evhttp_remove_header
Request_free
evhttp_clear_headers
Request_handle
cidr_repr
inet_aton
inet_ntoa
auth_load_driver
g_module_supported
g_module_build_path
g_module_open
g_module_symbol
g_module_error
auth_getencryption
auth_md5_validate
sort_load_driver
sort_validate
sort_listextensions
sort_get_mailbox
sort_get_errormsg
sort_get_error
libcrypt.so.1
libgmodule-2.0.so.0
libgthread-2.0.so.0
libgmime-2.6.so.0
libgio-2.0.so.0
libgobject-2.0.so.0
libglib-2.0.so.0
libm.so.6
libmhash.so.2
libevent_pthreads-2.0.so.5
libevent-2.0.so.5
libssl.so.10
libcrypto.so.10
libzdb.so.11
libldap-2.4.so.2
libpthread.so.0
libc.so.6
__cxa_atexit
_edata
__bss_start
_end
libdbmail.so.0
GLIBC_2.2.5
GLIBC_2.4
GLIBC_2.14
GLIBC_2.3
GLIBC_2.3.4
%z	&
%r	&
%j	&
%b	&
%Z	&
%R	&
%J	&
%B	&
%:	&
%2	&
%*	&
%"	&
fffff.
fffff.
fffff.
gfffH1
dH3<%(
ATU1
 []A\
fffff.
AWAVAUATI
D$d	
D$l	
[]A\A]A^A_
D$(H
\$(L
\$(L
AWAVAUATI
[]A\A]A^A_
AWAVAUATI
([]A\A]A^A_
AUATI
[]A\A]
[]A\A]
ffff.
ATUSH
D$(1
t$ H
T$ H
L$(dH3
0[]A\
AWAVI
AUATM
D$(1
L$(dH3
8[]A\A]A^A_
T$ H
fffff.
AVAUATUH
$tqH
H;l$
[]A\A]A^
dH34%(
AVUSH
t$ dH
L$8L
D$8H
[]A^
t$(H
D$8H
L$@H
 t*I
I;T$
[]A\
ffff.
\$0H
D$(H
L$0H
AWAVAUATI
[]A\A]A^A_
$tn1
[]A\
AWAVUSH
\$@H
D$0H
[]A^A_
L$@H
D$0L
T$0H
D$8H
D$8H
fffff.
ATUSH
t$(H
[]A\
\$@H
D$ H
H+\$ H
L$@H
ATUH
[]A\
T$ H
D$ H
L$(H
D$ L
L$@H
L$ H
L$ H
L$ H
L$0H
fff.
AVUI
[]A^
t$8H
\$@H
|$8L
T$8H
L$@H
ffff.
StrH
ATUS
[]A\
[]A\H
ffffff.
ATE1
[]A\
ffff.
fff.
AVATUSH
@~&L
D$(H
[]A\A^
D$<A
L$0H
tkUSH
ffff.
fff.
ATUA
[]A\
AWAVL
AUATI
[]A\A]A^A_
t	H9
t	H9
[]A\A]A^A_
t	H;
t	H;
~<E1
D$81
L$8dH3
AVATH
L$0H
[]A\A^
t$PH
D$dH
D$8H
D$8H
t$8H
L$8L
L$(H
L$@I
L$8L
L$(H
L$@1
fffff.
fff.
ATUI
|$HH
[]A\
ffffff.
AVAUATUS
[]A\A]A^
]A\A]A^
St%H
AWAVI
AUATI
[]A\A]A^A_
T$8H
T$,L
d$P1
l$@L
D$01
T$@H
|$HL
D$@L
D$HH
D9l$
fffff.
St$H
AVAUATUH
D$X1
T$XdH3
`[]A\A]A^
AWAVAUATUSH
D$`H
[]A\A]A^A_
t$XL
|$`H
|$xM
A]A^L
t$`I
l$(H
\$@1
T$PH
|$PH
T$8H
D$(1
T$@H
D$0H
|$@1
\$(H
|$XH
AWAV1
AUAT
[]A\A]A^A_
HcT$
St$H
ffff.
AVAUATUSH
d$ 1
[]A\A]A^
fffff.
ATUH
[]A\
ffff.
ATUS
[]A\
L$0H
ffffff.
AUATUSH
D$x1
L$xdH3
[]A\A]
ffff.
AWAVAUATI
[]A\A]A^A_
AVSM
AWAVM
AUATI
|$(A
[]A\A]A^A_
l$0H
L$ A
t$01
D$ I
L$ L
|$ E1
t$ H
AWAVI
AUATI
UAUM
\$0H
[]A\A]A^A_
L$(L
XZE1
AWAVI
AUATE
l$ H
[]A\A]A^A_
AWAVAUATI
D$ L
t$`H
[]A\A]A^A_
T$ H
T$(H
T$0H
T$8H
T$@H
T$HH
AWAVAUATUSH
D$pL
D$(H
D$ H
D$xH
D$8H
t$(L
D$pH
D$LI
\$@H
[]A\A]A^A_
t$8L
L$xM
T$ H
|$ H
L$ H
D$pH
d$XL
L$PL
|$ L
T$ H
D$h1
L$hI
D$`H
l$XL
D$0H
T$ H
t$XH
AUATI
[]A\A]
ffff.
AUATH
[]A\A]
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
GPdH
t$XH
|$PH
l$PL
t$XH
D$0H
|$pH
D$ t[1
L$@H
|$ H
|$01
T$81
L$01
D$(I
|$(H
|$ H
|$pH
[]A\A]A^A_
|$HH
l$xL
|$PH
|$pL
ffff.
AUATUSH
[]A\A]
t&E1
H9H w
[]A\
[]A\
AVATL
[]A\A^
D$(H
-TO%
|$(H
D$(H
l$8H
D$8H
|$ H
T$8H
|$ H
L$@H
ffff.
fff.
AUATE1
[]A\A]
fff.
ffffff.
AWAV1
AUAT1
\$@dH
D$0H
[]A\A]A^A_
|$(L
D$01
D$8H
-?I%
D$0H
|$(L
D$01
D$8I
D$8I
L$@H
AWAVAUATI
|$@H
@ I9
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATUSH
D$(H
-vC%
[]A\A]A^A_
L$`H
\$ H
-9B%
T$PH
L$PL
\$PI
\$(H
\$@I
\$ H
\$@L
\$@L
\$ H
\$ H
=[9%
d$XH
L$XL
D$8H
T$XH
L$8L
L$XL
AUATUSH
[]A\A]
[]A\A]
AWAVAUATI
([]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AXAYt:I
L;|$
t$@1
t$@1
|$ L
AUATI
}@XZH
[]A\A]
[]A\A]
AVAUATUSH
AVPI
]A\A]A^
]A\A]A^
AVAUATUSH
AVPI
]A\A]A^
]A\A]A^
t4SL
ffff.
AWAV1
AUATI
uZE1
K@XZ
[]A\A]A^A_
ATUSH
$[]A\
AVAUATUH
[]A\A]A^
\$0H
D$(H
dH34%(
[]A^
T$(H
D$(H
L$0H
AWAVAUATI
|$xI
|$pI
|$pH
|$xH
[]A\A]A^A_
AWAV
AUATI
\$01
D$(E1
D$(H
AQAQ
[]A\A]A^A_
fff.
G(dH
\$ H
L$ H
fff.
fff.
fff.
fff.
GHdH
\$ H
L$ H
fff.
AWAV1
AUATI
[]A\A]A^A_
fff.
fff.
fff.
fff.
fff.
fff.
fff.
fff.
fff.
fff.
AWAVAUATUSH
L$h1
D$@H
D$ H
D$8H
|$8A
|$8A
T$HH
T$ H
L$@H
D$PL
|$8H9
L$(H9
D$8A
\$hdH3
x[]A\A]A^A_
ffffff.
AUATE1
[]A\A]
H;k(
C@P1
L$ H
\$ dH
L$ H
\$ dH
L$ H
ATUH
AVUI
_AXH
H9D$
D$<H
[]A^
t$HH
D$HH9D$
\$PH
L$(H
L$ H
L$(H
|$(H
L$PH
ffff.
t$(H
\$0H
L$0H
ATUI
[]A\
ATUSH
[]A\
ffff.
AUATI
[]A\A]
$(non
ATUI
$t7H
[]A\
AVAU
ATUI
[]A\A]A^
AUAT
[]A\A]
fff.
AUATUSH
[]A\A]
[]A\A]
fffff.
ffff.
$t2H
ATUSH
[]A\
ffff.
ffffff.
AWAVAUATI
[]A\A]A^A_
ffff.
AUATH
[]A\A]
AUATH
[]A\A]
ATUH
[]A\
AUATI
[]A\A]
fffff.
AWAVAUATUSH
[]A\A]A^A_
d$ 1
8:ulL
D$H1
D$ H
D$(H
D$0H
D$8H
T$HdH3
fffff.
AWAVA
AUATA
[]A\A]A^A_
D$p(
D$t0
D$xH
D$pH
D$(L
L$0H
|$(L
SAUATUH
L$8QH
T$8RPH
D$XH
L$@H
SAUH
StpH
[]A\A]A^
 []A\A]A^
ffffff.
ffffff.
t?SH
fffff.
AUATA
[]A\A]
fff.
ATUH
[]A\
ATUH
[]A\
T$PH
L$XL
D$`L
L$ht=
)D$p
D$81
t$ H
D$ H
D$(H
D$@H
T$8dH3
AVAUA
ATUS
]A\A]A^
AVAUA
ATUS
]A\A]A^
fffff.
AUATA
[]A\A]
AUATUSH
]A\A]
[]A\A]
t+SH
fffff.
ffff.
AUATA
gfffUS1
[]A\A]
fff.
t$XH
D$HH
D$D0
D$PH
D$@H
D$XH
D$`H
|$ 1
|$01
L$0L
D$8H
t$ H
T$(H
L$pH
t$hH
D$XH
D$T0
D$`H
D$hH
D$pH
L$ H
|$01
|$@1
D$,H
L$@L
D$HH
t$0H
T$8H
T$PH
L$XL
D$`L
L$ht=
)D$p
D$81
t$ H
D$ H
D$(H
D$@H
L$8dH3
AUATI
[]A\A]
ffff.
ffff.
ffff.
\$ dH
L$ H
t$(H
\$0H
L$(H
L$0H
\$0dH
D$(H
L$0H
\$0dH
L$0H
fff.
D$D0
L$XI
D$HH
D$PH
D$@H
D$XH
D$`H
L$0L
D$8H
t$ H
|$ 1
|$01
L$pH
ffff.
ffff.
ffff.
t$(H
|$ H
L$@H
AWAVAUATUSH
t$,H
|$HH
T$XH
t$PH
|$XH
L$XL
[]A\A]A^A_
t$`L
L$`H
AXAYH
\$`H
H;D$HH
|$0H
t$,H
|$8H
|$8M
L$`H
\$ H
L$ H
AVAUATUSH
[]A\A]A^
ATUS
[]A\
L$ H
fff.
\$0H
D$(H
L$0H
\$0H
L$0H
fff.
fff.
\$0dH
--q$
L$ H
L$0H
AVUSH
-pn$
[]A^
|$(L
L$0H
fffff.
\$0dH
D$(H
L$0H
fff.
D$(H
L$0H
\$0dH
-uf$
t$ H
|$(I
L$0H
\$0dH
-Md$
D$(H
L$0H
ffffff.
AVUSH
\$0dH
D$(H
[]A^
L$0H
fffff.
AVUSH
\$0dH
D$(H
[]A^
L$0H
fffff.
AVUSH
\$0dH
-M[$
D$(H
[]A^
L$0H
fffff.
AVUSH
\$0dH
-}X$
D$(H
[]A^
L$0H
fffff.
AVUSH
\$0dH
D$(H
[]A^
L$0H
fffff.
\$ dH
L$ H
AVSH
D$@H
D$ H
D$HH
t$ H
L$@H
ATUSH
[]A\
\$ dH
-gL$
L$ H
ATUSH
[]A\
\$ dH
L$ H
ffffff.
\$0H
-xF$
D$(H
L$0H
AVAUI
ATUL
dH3<%(
[]A\A]A^
dH34%(
[]A^
H|;Hxt>H
L$0H
AUATUSH
D$(1
>/u%H)
T$ H
L$ M
|$ H
T$(dH3
8[]A\A]
L$ L
fffff.
AWAVAUATUSH
D$X1
t$(H
T$8H
t$0H
l$8I
|$8H
l$8L
|$0M
AWAT1
D$@E1
D$HH
t$HH
t$@1
t$HH
D$ H
L$XdH3
h[]A\A]A^A_
t$(H
t$@1
t$(H
INBOf
D$ H
D$ H
D$ H
L$8L
D$ H
D$ H
ffffff.
ATUH
|$(H
\$@dH
-85$
D$4H
[]A\
L$@H
D$ H
L$(H
ffffff.
\$ dH
L$ H
\$ dH
L$ H
AVATI
AQAQAQAQ
-|+$
\$0H
[]A\A^
L$0H
fff.
\$0dH
-1)$
D$(H
L$0H
fff.
AWAVATUSH
\$0dH
D$(H
[]A\A^A_
L$0H
fffff.
draft_fl
seen_fla
-E#$
\$0H
L$0H
deleted_
flag
answered
_flaH
recent_f
flagged_
flag
AWAVA
AUATUSH
|$ H
L$<L
D$(L
L$0dH
D$\L
D$\H
D$(H
\$pH
D$`H
[]A\A]A^A_
D$\L
D$\L
D$lAXAY
D$\L
|$@H
D$hH
L$pH
|$`H
D$hH
D$hH
|$@L
|$HH
D$hH
T$ H
fffff.
\$0dH
D$(H
t$0H
|$0I
L$0H
\$0H
L$0H
AUATL
([]A\A]
fffff.
t$(H
|$ H
\$@dH
L$ L
D$8H
t$(H
L$ H
L$@H
AVUSH
|$(H
t$8H
\$@H
t$8H
[]A^
L$(H
|$ H
L$@H
\$0dH
D$(H
L$0H
AWAVAUATUSH
_AXH
[]A\A]A^A_H
[]A\A]A^A_
fffff.
AWAVE1
AUATI
t$@H
T$H1
|$(H
\$`L
D$8E
[]A\A]A^A_
L$@L
|$0H
T$@H
AYAZL
L$`H
l$<D
|$(H
\$8I
t$ H
t$PL
L$PH
L$@L
D$ H
ffff.
\$ dH
L$ H
\$0dH
D$(H
L$0H
\$ dH
L$ H
\$0dH
D$(H
L$0H
fff.
\$0dH
D$(H
L$0H
fff.
AWAV1
AUATUSH
[]A\A]A^A_
D$(1
L$PH
fff.
\$0H
D$ H
D$ H
t$(H
D$(H
t$0H
L$0H
D$(H
\$0H
L$0H
AVUM
L$(L
D$0H
T$@H
[]A^
t$ L
_AXH
|$ H
|$ H
T$(H
T$0H
L$PH
D$ H
|$ H
fffff.
\$ dH
L$ H
\$0dH
D$(H
L$0H
ffff.
\$0H
D$(H
L$0H
AWAVAUATUSH
D$81
D$(H
D$(H
L$8dH3
H[]A\A]A^A_
|$(L
t$(H
t$(H
t$(H
t$(H
AVAUATUSH
 []A\A]A^
AUATI
\$0L
D$$H
[]A\A]
L$0H
\$0L
D$(H
L$0H
fff.
ATUA
\$0H
D$(H
[]A\
L$0H
D$(1
T$(dH3
ATUSH
|$(dH
t$ 1
dH34%(
[]A\
T$ H
L$@H
D$(H
AWAVUSH
\$0dH
D$(H
D$(H
[]A^A_
T$(H
L$0H
\$0dH
D$(H
D$(H
L$0H
D$(H
|$(H
t$ H
|$HH
|$ H
|$8H
t$(H
t$8H
\$X1
D$TH
L$@H
\$@H
L$(H
L$`H
t$8H
\$X1
D$TH
L$@H
\$0dH
L$0H
AWAVAUATUSH
D$$H
[]A\A]A^A_
L$0H
fffff.
AWAVI
AUATI
[]A\A]A^A_
\$0H
D$(H
L$0H
\$0dH
D$(H
L$0H
\$0H
D$(H
L$0H
\$0dH
D$(H
L$0H
AWAVATUSH
t$(H
\$@H
D$8H
[]A\A^A_
L$@H
AVUSH
\$0H
D$(H
[]A^
L$0H
\$0H
D$(H
L$0H
AWAVUSH
\$0H
D$(H
[]A^A_
L$0H
\$0H
D$(H
L$0H
AWAVL
AUATI
[]A\A]A^A_
[]A\A]A^A_
fff.
AUATUSH
D$H1
l$ E
d$$E
\$,E
T$0E
L$4E
D$8E
L$HdH3
X[]A\A]
l$ E
d$$E
\$,E
T$0E
L$4E
D$8E
AWAVAUATI
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATI
t$ H
D$H1
|$ H
D$ H
D$ H
|$ I
\$0L
|$ H
D$ L
|$(H
|$ H
L$HdH3
X[]A\A]A^A_
fffff.
ATUH
[]A\
ffff.
AVAUATUH
+[]A\A]A^
ffff.
ffffff.
\$`dH
t$0I
[]A\
ATUI
D$H1
D$HdH3
P[]A\
ATUS
[]A\
[]A\
AUATI
/u6M
[]A\A]
[]A\A]
[]A\A]
AWAVI
AUATM
t I9
D:#t
D8+u
SATU
([]A\A]A^A_
]A\A]A^A_
AWAVI
AUATM
tJH)
[]A\A]A^A_
tYUS1
ATUH
[]A\
@:)u
fffff.
ffff.
AWAVAUATUSH
[]A\A]A^A_
ffff.
AWAVI
AUATA
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
D$81
L$8dH3
fff.
AUATUSH
ATSI
[]A\A]
ffff.
AVAUE1
ATUS
]A\A]A^
AWAVAUATUSH
([]A\A]A^A_
=Br#
:uxE
03-Nov-1H
T$XH
D$@H
979 00:0H
D$HH
0:00 +00
D$P1
03-Nov-1H
D$@H
979 00:0H
D$HH
0:00 +00H
l$`H
ffff.
ATUH
D$81
T$8dH3
@[]A\
AWAV
AUATI
D$81
YYYYMMDDL
D$&A
D$'1
L$8dH3
H[]A\A]A^A_
D$&0
AWAVAUATUSH
D$(1
AVATAUI
\$PH
D$ H
L$(dH3
8[]A\A]A^A_
D$ H
T$ H
D$ H
D$ H
D$ H
T$ H
D$ H
AUATA
[]A\A]
fffff.
ATUSH
[]A\
AVAUATUSH
;(ue
;(u;B
<#)u4
(u.B
<+)u'H
[]A\A]A^
AWAV1
AUATI
\$ H
dH34%(
[]A\A]A^A_
ffff.
tKUSI
fff.
[]A\
ATUH
rj<\tf
tM<"t@H
<\tA
[]A\
[]A\
fff.
ffffff.
AUATA
([]A\A]
ffff.
AWAVAUATUSH
([]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_1
ffffff.
AWAVAUATUSH
[]A\A]A^A_
fffff.
AWAVAUATE1
D$ L
< u#
tOE1
=tOE
L;d$(
+t&1
[]A\A]A^A_
t$ H
"t#L9d$(A
AUATI
[]A\A]
[]A\A]
AWAVAUATUSH
_AXH
[]A\A]A^A_
AWAVA
AUATI
([]A\A]A^A_
AWAVA
AUATUSH
D$(1
D$ H
|$ H
|$ H
D$(dH3
8[]A\A]A^A_
|$ H
ATUSH
[]A\
AUATA
[]A\A]
]A\A]
AVAUATUSH
[]A\A]A^
ATUH
[]A\
ATUS
[]A\
ATUS
[]A\
[]A\
[]A\H
tFSH
u H)
fffff.
AUATI
[]A\A]
=QA#
AUATA
([]A\A]
ATUH
[]A\
]A\A]A^
AWAVAUATI
D$(H
|$$I
D9<$
D$(H
8[]A\A]A^A_
$t{A
D;|$ ~
8[]A\A]A^A_
}fMc
USt_H
ATUH
[]A\
[]A\
AUATI
=$/#
[]A\A]
[]A\A]
=b.#
=N.#
=/.#
=]-#
fff.
AUATA
[]A\A]
ATUA
[]A\
fff.
AVAUATUS
]A\A]A^
AWAVAUATUSH
D$H1
Y^~nH
L$HdH3
X[]A\A]A^A_
D$0L
d$@L
T$@H
t$HH
A[]H
|$01
L$@H
D$ 1
t+I9
t&H;D$
_AXL
|$0H
T$(H
t$0L
L$@H
AYAZH
L$0L
AUATUSH
[]A\A]
ATUH
ATUH
ATUH
fffff.
ATUI
[]A\
AUATI
([]A\A]
ATUI
 []A\
AUATI
([]A\A]
AUATI
([]A\A]
AUATUSH
[]A\A]
ATUI
[]A\
ffffff.
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
D$ H
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
ffffff.
fffff.
ATUH
[]A\
xQHc
ATUSH
/u"L
[]A\
AWAVAUATUSH
t+;G w&H
[]A\A]A^A_
[]A\A]A^A_
tVI;
JhI9
fffff.
AVAUI
ATUH
t6H9
]A\A]A^
L9]P
L;]Hs
]A\A]A^
v H)
]A\A]A^
AWAVAUATA
L$(1
D$(I
D$ I
|$(L
T$ I
d$hI
D$pM
[]A\A]A^A_
d$@H
d$HE
l$(M
l$PH
fff.
AVUSH
u H)
[]A^
AVAUI
ATUI
[]A\A]A^
[]A\A]A^
[]A\A]A^
ATUH
[]A\
[]A\
AWAVI
AUATI
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
ffff.
ffff.
AUATI
[]A\A]
ATUI
[]A\
[]A\H
ffffff.
L$ L
D$(1
t$(H
t$(H
D$(dH3
ATUSH
D$(1
D$(dH3
0[]A\
AVAUATUI
[]A\A]A^
fff.
AWAVAUATA
[]A\A]A^A_
[]A\A]A^A_H
AVAUA
ATUI
 []A\A]A^
tQ~J
C ZY
fffff.
AWAVE
AUATA
t$ H
[]A\A]A^A_
AUATL
G USA
D$X1
T$ L
D$XdH3
h[]A\A]
AWAVL
AUATH
_AXH
[]A\A]A^A_
ATUA
[]A\
ffff.
AUATI
[]A\A]
[]A\A]
AWAVAUATUSH
D$ H
[]A\A]A^A_
AUATUSH
[]A\A]
AUATUSH
[]A\A]
AWAVAUATUSH
[]A\A]A^A_
AVATL
AXAY
4(E1
AVAWL
|$ 1
A_XE
AWAVI
AUATI
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
D;+~hH
AUATUSH
D$h1
T$hdH3
x[]A\A]
$t2f
AUATUSH
D$(1
|$ H
D$(dH3
8[]A\A]
fffff.
fffff.
AUATA
[]A\A]
[]A\A]
L$0H
{hXZH
ATUL
[]A\
[]A\
[]A\
ATUH
o(SH
[]A\
ffffff.
AWAVAUATUSH
T$`H
L$hL
D$pL
L$xt@
D$H1
T$0H
D$ H
D$PH
D$(H
D$0H
D$8H
D$PH
ATU1
L$HdH3
[]A\A]A^A_
ATUH
[]A\
[]A\
[]A\
AWAV
AUATUSH
[]A\A]A^A_
AYAZ
ARAW
AWPH
AUATL
o(USH
ZYxq
	]PL
[]A\A]
	]PL
AWAVAUATUSH
[]A\A]A^A_
fffff.
ATUS
[]A\
AVUSH
T$ H
L$PH
[]A^
L$0H
t$8H
|$(H
|$(H
AVAU1
ATE1
_AXA
[]A\A]A^
AYAZ
fffff.
AWAVAUATUSH
([]A\A]A^A_
AVAUM
AWAVAUATUSH
([]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AVAUATUI
_AXH
]A\A]A^
ATUI
AWAVAUATL
[A\A]A^A_]
DBMail H
TTP Accef
AUATI
[]A\A]
fD;N
fffff.
AVAUATUSH
dH34%(
[]A\A]A^
;/tG1
AUATUSH
l$ H
/usr/lib
D$ H
64/dbmaif
L$0H
[]A\A]
ffff.
ATUSH
l$ H
[]A\
/usr/lib
D$ H
64/dbmaif
L$0H
./0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz
Nothing found searching for [%s].
Pretending to change username of user id number [%lu] to [%s]
Error: could not change username.
Pretending to change password for user id number [%lu]
Error: could not change password.
Error: cannot read file [%s], please make sure that you have permission to read this file.
Error: password for user [%s] not found in file [%s].
Error: password type not supported [%s].
Pretending to change client for user id number [%lu] to client id number [%lu]
Warning: could not change client id
Pretending to change mail quota for user id number [%lu] to [%lu] bytes
Error: could not change max mail size.
Pretending to remove forwards for alias [%s]
Pretending to add forwards for alias [%s]
Error: could not remove forward [%s] 
Error: could not add forward [%s]
Pretending to remove aliases for user id number [%lu]
Pretending to add aliases for user id number [%lu]
Error: could not remove alias [%s] 
Error: could not add alias [%s]
Pretending to set security password for user [%lu] to [%s]
Pretending to set security action for user [%lu] to [%ld]
Pretending to %s authentication for user [%lu]
Pretending to delete alias [%s] for user id number [%lu]
Deleting aliases for user [%s]...
Pretending to add user %s with password type %s, %lu bytes mailbox limit and clientid %lu
Adding user %s with password type %s,%lu bytes mailbox limit and clientid %lu... 
Failed: user name already exists
Failed: unable to create user
You've requested to delete all mailboxes owned by user number [%lu]:
please run again with -y to actually perform this action.
%s: %s
forward [%s] to [%s]
deliver [%s] to [%s]
dm_user.c
newuser
crypt
md5sum
md5base64
whirlpool
sha512
sha256
sha1
tiger
plaintext
plaintext-raw
crypt-raw
md5-raw
md5sum-raw
md5-hash
md5-hash-raw
md5-digest
md5-digest-raw
md5-base64
md5-base64-raw
md5base64-raw
shadow
  [%s]
[%s] matches:
Done
enable
disable
Deleting user [%s]...
Failed. Please check the log
-- users --
-- forwards --
%.02f
Ok, user added id [%lu]
Adding INBOX for new user... 
INBOX
failed... removing user... 
failed also.
done.
Ok. INBOX created for user.
Emptying mailbox... 
Error. Please check the log.
do_username
do_add
>dm_message.c
SQLException: %s
inserted id [%lu]
Content-type: 
"%s":
"%s" 
parsing address [%s]
new headervalue.id [%lu]
DBMAIL
header_cache_readonly
true
headername
references
insert %sfield failed [%s]
value != NULL
default mailbox [%s]
anyone
object != NULL
GMIME_IS_OBJECT(object)
multipart
self->internal_date
%Y-%m-%d %T
unique_id
physmessage
no physmessage_id [%lu]
new physmessage_id [%lu]
message_idnr
new message_idnr [%lu]
self && self->content
headername [%s]
From
Return-path
Subject
Date
%Y-%m-%d %H:%M:%S
%Y-%m-%d
self->content == ((void *)0)
From 
From_ [%s]
ph.internal_date
rfc822
boundary
--%s--
--%s
p.internal_date
physid
References
In-Reply-To
reference_decode failed [%lu]
self
self->id
content-type
content-disposition
insert envelope failed [%s]
rfcsize
Failed to store mimeparts
plain
charset
Content-Transfer-Encoding
quoted-printable
7bit
self->content==NULL
mailbox [%s] not found
DELIVERY
suppress_duplicates
message-id
suppress_duplicate: [%s]
SUBADDRESS
SIEVE
Calling for a Sieve sort
Message will be rejected.
DBMAIL-MAILER@dbmail
POSTMASTER
SENDMAIL
 -i -f 
opening pipe to [%s]
pipe opened
pipe closed
sendmail exited normally
%a %b %e %H:%M:%S %Y
storing message failed
temporary msgidnr is [%lu]
QUOTA_FAILURE
soft
hard
AUTO_NOTIFY
AUTO_REPLY
sending notification to [%s]
AUTO_NOTIFY_SENDER
AUTO_NOTIFY_SUBJECT
autonotify@dbmail
NEW MAIL NOTIFICATION
starting auto-reply procedure
no reply body found
X-Dbmail-Reply
reply loop detected [%s]
Precedence
bulk
list
Delivered-To
no valid destination 
Return-Path
no address to send to
mailer-daemon@
postmaster@
skip auto-reply
Re: 
X-DBMail-Reply
auto-replied
Auto-Submitted
error in call to send_reply
INSERT INTO %smimeparts (hash, data, %ssize%s) VALUES (?, ?, ?) %s
INSERT INTO %sheader (physmessage_id, headername_id, headervalue_id) VALUES (?,?,?)
unable to parse email address [%s]
out of memory calling dm_shellesc
INSERT INTO %smimeparts (hash, data, %ssize%s) VALUES (?, ?, ?)
SELECT a.id, b.id FROM dbmail_mimeparts a INNER JOIN %smimeparts b ON a.hash=b.hash AND DBMS_LOB.COMPARE(a.data, b.data) = 0  AND a.id<>b.id AND b.id=?
SELECT id FROM %smimeparts WHERE hash=? AND %ssize%s=? AND %s
SELECT id FROM %sheadervalue WHERE hash=? AND %s
INSERT INTO %sheadervalue (hash, headervalue, sortfield, datefield) VALUES (?,?,?,?) %s
INSERT INTO %sheadervalue (hash, headervalue, sortfield) VALUES (?,?,?) %s
SELECT id FROM %sheadername WHERE %s=?
skip: [%s] since headername table is readonly
INSERT %s INTO %sheadername (headername) VALUES (?) %s
INSERT INTO %s%sfield (physmessage_id, %sfield) VALUES (?,?)
SELECT f.mailbox,f.headername,f.headervalue FROM %sfilters f JOIN %sheadername n ON f.headername=n.headername JOIN %sheader h ON h.headername_id = n.id join %sheadervalue v on v.id=h.headervalue_id WHERE v.headervalue %s f.headervalue AND h.physmessage_id=? AND f.user_id in (?,?)
match [%s: %s] file-into mailbox [%s]
MIME part depth exceeds allowed limit. You should recompile with CFLAGS+=-DMAX_MIME_DEPTH=<int> where <int> greater than [%d]
INSERT INTO %spartlists (physmessage_id, is_header, part_key, part_depth, part_order, part_id) VALUES (%lu,%d,%d,%d,%d,%lu)
parent [%p], object [%p], message->content [%p]
internal_date [%s] [%ld] offset [%d]
mailbox [%s] could not be found!
INSERT INTO %sphysmessage (internal_date) VALUES (%s) %s
INSERT INTO %smessages(mailbox_idnr, physmessage_id, unique_id,recent_flag, status) VALUES (%lu, %lu, '%s', 1, %d)
INSERT INTO %smessages(mailbox_idnr, physmessage_id, unique_id,recent_flag, status) VALUES (%lu, %lu, '%s', 1, %d) %s
received a NULL argument, this is a bug
mail address parser looking at field [%s] with value [%s]
mail address parser error parsing header field
mail address parser found [%s]
mail address parser found [%d] email addresses
Date is [%s] offset [%d], datefield [%s]
error inserting headervalue. skipping.
dbmail_message_get_physid(self)
SELECT l.part_key,l.part_depth,l.part_order,l.is_header,%s,%s FROM %smimeparts p JOIN %spartlists l ON p.id = l.part_id JOIN %sphysmessage ph ON ph.id = l.physmessage_id WHERE l.physmessage_id = ? ORDER BY l.part_key,l.part_order ASC
MIME part depth exceeds allowed maximum [%d]
[%lu] Deprecation warning. Please migrate the old messageblks using dbmail-util -M
SELECT b.messageblk, b.is_header, %s FROM %smessageblks b JOIN %sphysmessage p ON b.physmessage_id=p.id WHERE b.physmessage_id = %lu ORDER BY b.messageblk_idnr
retrieval failed for physid [%lu]
self->content is not a message
INSERT INTO %senvelope (physmessage_id, envelope) VALUES (?,?)
__@!internal_delivery_user!@__
unable to find user_idnr for user [%s]. Make sure this system user is in the database!
UPDATE %sphysmessage SET messagesize = %lu, rfcsize = %lu WHERE id = %lu
UPDATE %smessages SET status = %d WHERE message_idnr = %lu
from: [%s] to: [%s] subject: [%s] body: [%s]
Brute force delivery; skipping ACL checks on mailbox.
Checking if we have the right to post incoming messages
error retrieving right for [%lu] to deliver mail to [%s]
user [%lu] does not have right to deliver mail to [%s]
already tried to deliver to INBOX
user [%lu] has right to deliver mail to [%s]
invalid return value from acl_has_right
key "suppress_duplicates" section "DELIVERY" var val value [%s]
error copying message to user [%lu],maxmail exceeded
error copying message to user [%lu]
useridnr [%lu] mailbox [%lu] message [%lu] size [%zd] is inserted
message id=%lu, setting imap flags
Beginning brute force delivery for user [%lu] to mailbox [%s].
Destination [%s] useridnr [%lu], mailbox [%s], source [%d]
Setting BOX_ADDRESSPART mailbox to [%s]
Keep was cancelled. Message may be discarded.
Keep was not cancelled. Message will be delivered by default.
no config value for POSTMASTER
error getting value for SENDMAIL in DBMAIL section of dbmail.conf.
SENDMAIL not set in DBMAIL section of dbmail.conf.
could not prepare 'to' address.
could not prepare 'from' address.
out of memory calling g_strconcat
could not open pipe to sendmail
invalid sendwhat in call to send_mail: [%d]
sendmail was terminated by signal
sendmail was stopped by signal
sendmail error return value was [%d]
delivering to [%u] external addresses
forwarding address is zero length, message not forwarded.
prepending mbox style From header to pipe returnpath: %s
Using default hard bounce for quota failure
calling sort_and_deliver for useridnr [%lu]
successful sort_and_deliver for useridnr [%lu]
permanent failure sort_and_deliver for useridnr [%lu]
mailbox over quota, message rejected for useridnr [%lu]
unknown temporary failure in sort_and_deliver for useridnr [%lu]
error getting config value for AUTO_NOTIFY
error getting config value for AUTO_REPLY
starting auto-notification procedure
error fetching notification address
no notification address specified, skipping
no config value for AUTO_NOTIFY_SENDER
no config value for AUTO_NOTIFY_SUBJECT
error in call to send_notification.
no reply body specified, skipping
valid alias found as recipient [%s]
sender invalid. skip auto-reply.
deliver [%u] messages to external addresses
delivering to external addresses
forwaring failed, reporting transient error.
failed to delete temporary message [%lu]
temporary message deleted from database. Done.
error in execute_auto_ran(), but continuing delivery normally.
check_destination
send_reply
send_notification
execute_auto_ran
insert_messages
send_forward_list
parse_and_escape
send_mail
sort_deliver_to_mailbox
get_mailbox_from_filters
sort_and_deliver
dbmail_message_construct
dbmail_message_cache_envelope
insert_field_cache
dbmail_message_cache_referencesfield
_header_cache
dbmail_message_cache_headers
dbmail_message_cache_headers
_header_value_insert
_header_value_get_id
_header_name_get_id
_update_message
insert_physmessage
_message_insert
_message_insert
dbmail_message_store
_mime_retrieve
_mime_retrieve
_retrieve
_retrieve
dbmail_message_retrieve
dbmail_message_retrieve
dbmail_message_body_to_string
dbmail_message_to_string
dbmail_message_get_charset
dbmail_message_get_header_addresses
dbmail_message_get_internal_date
dbmail_message_set_internal_date
dbmail_message_init_with_string
dbmail_message_init_with_string
store_mime_text
store_mime_multipart
register_blob
blob_insert
blob_insert
blob_exists
blob_exists
store_mime_object
g_mime_object_get_body
g_mime_object_get_body
find_end_of_header
(%lu)
 DESC
%s%s,
nobody@foo
dm_mailbox.c
message->internal_date
%a %b %d %H:%M:%S %Y
Tue Oct 11 13:06:24 2005
%s %s
self->id > 0
type [%d]
cannot dump empty mailbox
no ids found
 (MODSEQ %lu)
AND m.message_idnr IN (%s)
%%%s%%
p.data
key missing in ids: [%lu]
key missing in ids: [%lu]
skip key [%lu]
%lu 
reverse
arrival
messagesize
from
fromfield
subject
subjectfield
sortfield
ccfield
tofield
datefield
us-ascii
iso-8859-1
search_key: [%s]
done [%d] at idx [%lu]
answered_flag=1
deleted_flag=1
flagged_flag=1
recent
recent_flag=1
seen_flag=1
draft_flag=1
recent_flag=0
unanswered
answered_flag=0
undeleted
deleted_flag=0
unflagged
flagged_flag=0
unseen
seen_flag=0
undraft
draft_flag=0
unkeyword
sentbefore
senton
sentsince
p.internal_date < '%s'
%s = '%s'
p.internal_date > '%s'
older
p.internal_date < %s
younger
p.internal_date > %s
modseq
check token [%d:%s]
body
larger
smaller
unknown search key [%s]
[%s] uid [%d]
self && self->mbstate && set
0123456789:,*
found no ids
found [%d] ids
[%p] leaf [%d] depth [%d] type [%d] found [%d]
LEFT JOIN %s%s ON m.physmessage_id=%s%s.physmessage_id 
SELECT id,message_idnr FROM %sphysmessage p LEFT JOIN %smessages m ON p.id=m.physmessage_id LEFT JOIN %smailboxes b ON b.mailbox_idnr=m.mailbox_idnr WHERE b.mailbox_idnr=? ORDER BY message_idnr
GMIME_IS_MESSAGE(message->content)
[%p] leaf [%d] type [%d] field [%s] search [%s] at depth [%u]
SELECT m.message_idnr FROM %smessages m LEFT JOIN %sphysmessage p ON m.physmessage_id=p.id %sWHERE m.mailbox_idnr = %lu AND m.status IN (%d,%d) ORDER BY %smessage_idnr
SELECT min(m.message_idnr),v.sortfield FROM %smessages m LEFT JOIN %sheader h USING (physmessage_id) LEFT JOIN %sheadername n ON h.headername_id = n.id LEFT JOIN %sheadervalue v ON h.headervalue_id = v.id WHERE m.mailbox_idnr=? AND n.headername = 'subject' AND m.status IN (%d,%d) GROUP BY v.sortfield
SELECT m.message_idnr,v.sortfield FROM %smessages m LEFT JOIN %sheader h USING (physmessage_id) LEFT JOIN %sheadername n ON h.headername_id = n.id LEFT JOIN %sheadervalue v ON h.headervalue_id = v.id WHERE m.mailbox_idnr = ? AND n.headername = 'subject' AND m.status IN (%d,%d) ORDER BY v.sortfield, v.datefield
SELECT message_idnr FROM %smessages m LEFT JOIN %sheader h USING (physmessage_id) LEFT JOIN %sheadername n ON h.headername_id = n.id LEFT JOIN %sheadervalue v ON h.headervalue_id = v.id WHERE m.mailbox_idnr=? AND m.status IN (?,?) %s AND n.headername = 'date' AND %s %s %s ORDER BY message_idnr
SELECT message_idnr FROM %smessages m LEFT JOIN %sheader h USING (physmessage_id) LEFT JOIN %sheadername n ON h.headername_id = n.id LEFT JOIN %sheadervalue v ON h.headervalue_id = v.id WHERE mailbox_idnr=? AND status IN (?,?) %s AND n.headername = '%s' AND v.headervalue %s ? ORDER BY message_idnr
SELECT DISTINCT m.message_idnr FROM %smimeparts k LEFT JOIN %spartlists l ON k.id=l.part_id LEFT JOIN %sphysmessage p ON l.physmessage_id=p.id LEFT JOIN %sheader h ON h.physmessage_id=p.id LEFT JOIN %sheadervalue v ON h.headervalue_id=v.id LEFT JOIN %smessages m ON m.physmessage_id=p.id WHERE m.mailbox_idnr = ? AND m.status IN (?,?) %s AND (v.headervalue %s ? OR k.data %s ?) ORDER BY m.message_idnr
SELECT message_idnr FROM %smessages m LEFT JOIN %sphysmessage p ON m.physmessage_id=p.id WHERE mailbox_idnr = ? AND status IN (?,?) %s AND %s ORDER BY message_idnr
SELECT DISTINCT m.message_idnr FROM %smimeparts p LEFT JOIN %spartlists l ON p.id=l.part_id LEFT JOIN %sphysmessage s ON l.physmessage_id=s.id LEFT JOIN %smessages m ON m.physmessage_id=s.id LEFT JOIN %smailboxes b ON m.mailbox_idnr = b.mailbox_idnr WHERE b.mailbox_idnr=? AND m.status IN (?,?) %s AND (l.part_key > 1 OR l.is_header=0) AND %s %s ? ORDER BY m.message_idnr
SELECT m.message_idnr FROM %smessages m LEFT JOIN %sphysmessage p ON m.physmessage_id = p.id WHERE m.mailbox_idnr = ? AND m.status IN (?,?) %s AND p.rfcsize %c ? ORDER BY message_idnr
SELECT m.message_idnr FROM %smessages m JOIN %skeywords k ON m.message_idnr=k.message_idnr WHERE mailbox_idnr=? AND status IN (?,?) %s AND k.keyword = ? ORDER BY message_idnr
SELECT message_idnr FROM %smessages WHERE mailbox_idnr = ? AND status IN (?,?) AND %s ORDER BY message_idnr
(seen_flag=0 AND recent_flag=1)
search_key [%s] is not charset [%s]
(seen_flag=1 AND recent_flag=0)
using charset [%s] for searching
[%p] depth [%d] type [%d] rows [%d]
_prescan_search
mailbox_search
_do_search
_merge_search
dbmail_mailbox_search
_do_sort
dbmail_mailbox_get_set
dbmail_mailbox_get_set
_handle_search_args
append_search
dbmail_mailbox_build_imap_search
dbmail_mailbox_ids_as_string
dbmail_mailbox_orderedsubject
_message_get_envelope_date
dump_message_to_stream
_mimeparts_dump
dbmail_mailbox_dump
dbmail_mailbox_get_id
dbmail_mailbox_new
SELECT name,seq FROM %smailboxes WHERE mailbox_idnr=?
id: [%lu] name: [%s] seq [%lu]
Aii. No such mailbox mailbox_idnr: [%lu]
exists [%d] unseen [%d] recent [%d]
SELECT MAX(message_idnr)+1 FROM %smessages WHERE mailbox_idnr=?
SELECT SUM( CASE WHEN seen_flag = 0 THEN 1 ELSE 0 END) AS unseen, SUM( CASE WHEN seen_flag = 1 THEN 1 ELSE 0 END) AS seen, SUM( CASE WHEN recent_flag = 1 THEN 1 ELSE 0 END) AS recent FROM %smessages WHERE mailbox_idnr=? AND status IN (%d,%d)
SELECT permission FROM %smailboxes WHERE mailbox_idnr = ?
UPDATE %smessages SET recent_flag = 0, seq = %lu WHERE recent_flag = 1 AND seq < %lu AND message_idnr IN (%s)
SELECT seen_flag, answered_flag, deleted_flag, flagged_flag, draft_flag, recent_flag, %s, rfcsize, seq, message_idnr, status FROM %smessages m LEFT JOIN %sphysmessage p ON p.id = m.physmessage_id WHERE m.mailbox_idnr = ? AND m.status IN (%d,%d,%d) ORDER BY message_idnr ASC
SELECT k.message_idnr, keyword FROM %skeywords k LEFT JOIN %smessages m ON k.message_idnr=m.message_idnr LEFT JOIN %smailboxes b ON m.mailbox_idnr=b.mailbox_idnr WHERE b.mailbox_idnr = ? AND m.status IN (%d,%d)
trying to remove unknown UID [%lu]
SELECT CASE WHEN user_id IS NULL THEN 0 ELSE 1 END, owner_idnr, name, no_select, no_inferiors FROM %smailboxes b LEFT OUTER JOIN %ssubscription s ON b.mailbox_idnr = s.mailbox_id WHERE b.mailbox_idnr = ?
SELECT COUNT(*) AS nr_children FROM %smailboxes WHERE owner_idnr = ? 
SELECT DISTINCT(keyword) FROM %skeywords k LEFT JOIN %smessages m ON k.message_idnr=m.message_idnr LEFT JOIN %smailboxes b ON m.mailbox_idnr=b.mailbox_idnr WHERE b.mailbox_idnr=? AND m.status IN (%d,%d)
\Seen \Answered \Deleted \Flagged \Draft
checking ACL [%s] for user [%lu] on mailbox [%lu]
SELECT * FROM %sacl WHERE user_id = ? AND mailbox_id = ?
mailbox [%lu] is owned by user [%lu]and no ACL in place. Giving all rights
mailbox [%lu] is owned by user [%lu]but ACL in place. Restricted access for owner.
SELECT * FROM %sacl WHERE user_id = ? AND mailbox_id = ? AND %s = 1
SELECT lookup_flag,read_flag,seen_flag,write_flag,insert_flag,post_flag,create_flag,delete_flag,deleted_flag,expunge_flag,administer_flag FROM %sacl WHERE mailbox_id = ? AND user_id = ?
build list of [%d] [%d] recent messages...
MailboxState
M->id
01-Jan-1970 00:00:01 +0100
no keywords
[%lu] exists [%u] -> [%d]
[%lu] exists [%u] -> [%u]
%s/%%
cannot compare null trees
return NULL
[%lu] exists [%d] recent [%d]
Error opening mailbox
dm_mailboxstate.c
MailboxState_getId(M)
flush [%d] recent messages
set \recent flag
MailboxState_message_flags
_update_recent
MailboxState_flush_recent
MailboxState_build_recent
MailboxState_getAcl
MailboxState_hasPermission
MailboxState_flags
MailboxState_count
MailboxState_info
MailboxState_get_set
MailboxState_getPermission
MailboxState_setExists
MailboxState_getExists
MailboxState_getSeq
MailboxState_removeUid
state_load_messages
db_getmailbox_count
db_getmailbox_permission
db_getmailbox_seq
state_load_metadata
MailboxState_new
dm_cram.c
C->username
Cram_getUsername
IMAP
capability
CAPA
dm_capa.c
A->current_set
key "capability" section "IMAP" var val value [%s]
IMAP4rev1 AUTH=LOGIN AUTH=CRAM-MD5 ACL RIGHTS=texk NAMESPACE CHILDREN SORT QUOTA THREAD=ORDEREDSUBJECT UNSELECT IDLE STARTTLS ID UIDPLUS WITHIN LOGINDISABLED CONDSTORE LITERAL+ ENABLE QRESYNC
Capa_remove
Capa_add
Capa_new
Capa_new
dm_config.c
service_name
config_dict
/etc/dbmail.conf
unable to create [%s]: %s
config
error writing [%s] %s
error reading config [%s]
trace_level
syslog_logging_levels
file_logging_levels
trace_syslog
trace_stderr
dburi
sqlite
mysql
postgresql
oracle
driver not supported
error getting config! [host]
error getting config! [db]
error getting config! [user]
pass
error getting config! [pass]
sqlport
sqlsocket
sqlite://~
HOME
can't expand ~ in db name
sqlite://%s%s
authdriver
missing config! [authdriver]
sortdriver
serverid
encoding
table_prefix
max_db_connections
query_time_info
query_time_notice
query_time_warning
query_timeout
dbmail_
LOGIN_TIMEOUT
login_timeout [%d] seconds
logfile
/var/log/dbmail.log
config->log
errorlog
/var/log/dbmail.err
config->error_log
pid_directory
/var
config->pid_dir
.pid
security_action
NONE
error parsing security action
# (c) 2000-2006 IC&S, The Netherlands 
# Configuration file for DBMAIL 
[DBMAIL] 
# Database settings
# database connection URI
dburi                = sqlite:///var/tmp/dbmail.db
# Supported drivers are sql, ldap.
authdriver           = sql
# following fields are now DEPRECATED!
#driver               =
#host                 =
#sqlport              =
#sqlsocket            =              
#user                 =
#pass                 =                   
#db                   =
# Number of database connections per threaded daemon
# This also determines the size of the worker threadpool
# Do NOT increase this without proper consideration. A
# very large database/worker pool will not only increase
# the connection pressure on the database, but will more
# significantly cause unnecessary context-switching in 
# your CPUs.
#max_db_connections   = 10
# Table prefix. Defaults to "dbmail_" if not specified.
table_prefix         = dbmail_   
# encoding must match the database/table encoding.
# i.e. latin1, utf8
encoding             = utf8
# messages with unknown encoding will be assumed to have 
# default_msg_encoding
# i.e. iso8859-1, utf8
default_msg_encoding = utf8
# Postmaster's email address for use in bounce messages.
#postmaster           = DBMAIL-MAILER       
# Sendmail executable for forwards, replies, notifies, vacations.
# You may use pipes (|) in this command, for example:
# dos2unix|/usr/sbin/sendmail  works well with Qmail.
# You may use quotes (") for executables with unusual names.
sendmail              = /usr/sbin/sendmail     
# The following items can be overridden in the service-specific sections.
# Logging via stderr/log file and syslog
# Logging is broken up into 8 logging levels and each level can be indivually turned on or off.
# The Stderr/log file logs all entries to stderr or the log file.
# Syslog logging uses the facility mail and the logging level of the event for logging.
# Syslog can then be configured to log data according to the levels.
# Set the log level to the sum of the values next to the levels you want to record.
#   1 = Emergency 
#   2 = Alert
#   4 = Critical
#   8 = Error
#  16 = Warning
#  32 = Notice
#  64 = Info
# 128 = Debug
# 256 = Database -> Logs at debug level
# Examples:   0 = Nothing
#            31 = Emergency + Alert + Critical + Error + Warning
#           511 = Everything
file_logging_levels       = 7
syslog_logging_levels     = 31
# Generate a log entry for database queries for the log level at number of seconds of query execution time.
query_time_info       = 10
query_time_notice     = 20
query_time_warning    = 30
# Throw an exception is the query takes longer than query_timeout seconds
query_timeout         = 300 
# Root privs are used to open a port, then privs
# are dropped down to the user/group specified here.
effective_user        = nobody
effective_group       = nogroup
# The IPv4 and/or IPv6 addresses the services will bind to.
# Use * for all local interfaces.
# Use 127.0.0.1 for localhost only.
# Separate multiple entries with spaces ( ) or commas (,).
bindip                = 0.0.0.0		# IPv4 only - all IP's
#bindip                = ::		# IPv4 and IPv6 - all IP's (linux)
#bindip                = ::		# IPv6 only - all IP's (BSD)
#bindip                = 0.0.0.0,::	# IPv4 and IPv6 - all IP's (BSD)
# The maximum length of the queue of pending connections. See
# listen(2) for more information
# backlog              = 128
# Idle time allowed before a connection is shut off.
timeout               = 300             
# Idle time allowed before a connection is shut off if you have not logged in yet.
login_timeout         = 60
# If yes, resolves IP addresses to DNS names when logging.
resolve_ip            = no
# If yes, keep statistics in the authlog table for connecting users
authlog               = no
# logfile for stdout messages
logfile               = /var/log/dbmail.log        
# logfile for stderr messages
errorlog              = /var/log/dbmail.err        
# directory for storing PID files
pid_directory         = /var/run
# directory for locating libraries (normally has a sane default compiled-in)
#library_directory       = /usr/lib/dbmail
# SSL/TLS certificates
# A file containing a list of CAs in PEM format
tls_cafile            =
# A file containing a PEM format certificate
tls_cert              =
# A file containing a PEM format RSA or DSA key
tls_key               =
# A cipher list string in the format given in ciphers(1)
tls_ciphers           =
# hashing algorithm. You can select your favorite hash type
# for generating unique ids for message parts. 
# for valid values check mhash(3) but minus the MHASH_ prefix.
# if you ever change this value run 'dbmail-util --rehash' to 
# update the hash for all mimeparts.
# examples: MD5, SHA1, SHA256, SHA512, TIGER, WHIRLPOOL
# hash_algorithm = SHA1
# header_cache tuning
# set header_cache_readonly to 'yes' to prevent new
# unknown header-names from being cached.
# header_cache_readonly = yes
[LMTP]
port                  = 24                 
#tls_port              =
[POP]
port                  = 110
#tls_port              = 995
# You can set an alternate banner to display when connecting to the service
# banner = DBMAIL pop3 server ready to rock
# If yes, allows SMTP access from the host IP connecting by POP3.
# This requires addition configuration of your MTA
pop_before_smtp       = no      
[HTTP]
port                  = 41380
# the httpd daemon provides full access to all users, mailboxes
# and messages. Be very careful with this one!
bindip                = 127.0.0.1
admin                 = admin:secret
[IMAP]
# You can set an alternate banner to display when connecting to the service
# banner = imap 4r1 server (dbmail 2.3.x)
# Port to bind to.
port                  = 143                
#tls_port              = 993
# IMAP prefers a longer timeout than other services.
timeout               = 4000            
# If yes, allows SMTP access from the host IP connecting by IMAP.
# This requires addition configuration of your MTA
imap_before_smtp      = no     
# during IDLE, how many seconds between checking the mailbox
# status (default: 30)
# idle_timeout          = 30
# during IDLE, how often should the server send an '* OK' still
# here message (default: 10)
# the time between such a message is idle_timeout * idle_interval
# seconds
# idle_interval         = 10
# If TLS is enabled, login before starttls is normally
# not allowed. Use login_disabled=no to change this
# login_disabled        = yes
# Provide a CAPABILITY to override the default
# capability 		= IMAP4 IMAP4rev1 AUTH=LOGIN ACL RIGHTS=texk NAMESPACE CHILDREN SORT QUOTA THREAD=ORDEREDSUBJECT UNSELECT IDLE
# max message size. You can specify the maximum message size
# accepted by the IMAP daemon during APPEND commands.
# Supported formats:
#  decimal: 1000000    
#  octal:   03777777
#  hex:     0xfffff
# max_message_size      =
[SIEVE]
# Port to bind to.
port                  = 2000               
tls_port              =
[LDAP]
port                  = 389
version               = 3
hostname              = ldap
base_dn               = ou=People,dc=mydomain,dc=com
# If your LDAP library supports ldap_initialize(), then you can use the
# alternative LDAP server DSN like following.
# URI                = ldap://127.0.0.1:389
# URI                = ldapi://%2fvar%2frun%2fopenldap%2fldapi/
# Leave blank for anonymous bind.
# example: cn=admin,dc=mydomain,dc=com     
bind_dn               = 
# Leave blank for anonymous bind.
bind_pw               = 
scope                 = SubTree
# AD users may want to set this to 'no' to disable
# ldap referrals if you are seeing 'Operations errors' 
# in your logs
referrals             = yes
user_objectclass      = top,account,dbmailUser
forw_objectclass      = top,account,dbmailForwardingAddress
cn_string             = uid
field_passwd          = userPassword
field_uid             = uid
field_nid             = uidNumber
min_nid               = 10000
max_nid               = 15000
field_cid             = gidNumber
min_cid               = 10000
max_cid               = 15000
# a comma-separated list of attributes to match when searching
# for users or forwards that match a delivery address. A match
# on any of them is a hit.
field_mail            = mail
# field that holds the mail-quota size for a user.
field_quota           = mailQuota
# field that holds the forwarding address. 
field_fwdtarget       = mailForwardingAddress
# override the query string used to search for users 
# or forwards with a delivery address.
# query_string          = (mail=%s)
[DELIVERY]
# Run Sieve scripts as messages are delivered.
SIEVE                 = yes               
# Use 'user+mailbox@domain' format to deliver to a mailbox.
SUBADDRESS            = yes          
# Turn on/off the Sieve Vacation extension.
SIEVE_VACATION        = yes      
# Turn on/off the Sieve Notify extension
SIEVE_NOTIFY          = yes
# Turn on/off additional Sieve debugging.
SIEVE_DEBUG           = no          
# Use the auto_notify table to send email notifications.
AUTO_NOTIFY           = no
# Use the auto_reply table to send away messages.
AUTO_REPLY            = no
# Defaults to "NEW MAIL NOTIFICATION"
#AUTO_NOTIFY_SUBJECT        =    
# Defaults to POSTMASTER from the DBMAIL section.
#AUTO_NOTIFY_SENDER        =   
# If you set this to 'yes' dbmail will check for duplicate
# messages in the relevant mailbox during delivery using 
# the Message-ID header
suppress_duplicates	= no
# Soft or hard bounce on over-quota delivery
quota_failure           = hard
# end of configuration file
config_filename != ((void *)0)
Config item TRACE_LEVEL is deprecated and ignored. Please use SYSLOG_LOGGING_LEVELS and FILE_LOGGING_LEVELS instead.
Config item TRACE_SYSLOG is deprecated. Please use SYSLOG_LOGGING_LEVELS and FILE_LOGGING_LEVELS instead.
Config item TRACE_STDERR is deprecated. Please use SYSLOG_LOGGING_LEVELS and FILE_LOGGING_LEVELS instead.
deprecation warning! [dburi] missing
error getting config! [driver]
error getting config! [sqlpost]
error getting config! [sqlsocket]
wrong value for sqlport in config file [%s]
invalid filename for sqlite database
error getting config! [sortdriver]
error getting config! [serverid]
error getting config! [encoding]
error getting config! [table_prefix]
error getting config! [max_db_connections]
error getting config! [query_time_info]
error getting config! [query_time_notice]
error getting config! [query_time_warning]
error getting config! [query_timeout]
serverid invalid in config file
max_db_connnections invalid in config file
no value for TIMEOUT in config file
value for TIMEOUT is invalid: [%d]
key "security_action" section "DBMAIL" var var value [%s]
duplicate security action specified [%lu]
ignoring security_action configuration. using defaults.
config_get_security_actions
config_get_logfiles
config_get_timeout
GetDBParams
SetTraceLevel
config_get_value_once
config_read
config_read
config_create
EMERGENCY
Alert
Critical
Error
Warning
Notice
Info
Debug
Database
%b %d %H:%M:%S
%s:[%s] %s(+%d): %s
libzdb
freopen failed on [%s] [%s]
debug
%s %s %s[%d]: [%p] %s:[%s] %s(+%d): %s
[%s] syslog [%d -> %d] stderr [%d -> %d]
configure_stderr
configure_debug
TabortHandler
dm_list.c
%s%lu
,%lu
p_list_data
p_list_next
p_list_previous
p_list_first
p_list_last
p_list_prepend
p_list_append
_alloc_list
error looking up user_idnr for %s
Thread is having trouble obtaining a database connection. Try [%d]
Database reaper closed [%d] stale connections
last query took [%.3f] seconds
slow query [%s] took [%.3f] seconds
BEGIN;
ALTER TABLE dbmail_users ADD COLUMN spasswd VARCHAR(130) DEFAULT '' NOT NULL;
ALTER TABLE dbmail_users ADD COLUMN saction SMALLINT DEFAULT '0' NOT NULL;
ALTER TABLE dbmail_users ADD COLUMN active SMALLINT DEFAULT '1' NOT NULL;
INSERT INTO dbmail_upgrade_steps (from_version, to_version) values (32001, 32004);
COMMIT;
BEGIN;
ALTER TABLE dbmail_users ADD COLUMN spasswd VARCHAR(130) DEFAULT '' NOT NULL;
ALTER TABLE dbmail_users ADD COLUMN saction SMALLINT DEFAULT '0' NOT NULL;
ALTER TABLE dbmail_users ADD COLUMN active SMALLINT DEFAULT '1' NOT NULL;
INSERT INTO dbmail_upgrade_steps (from_version, to_version, applied) values (32001, 32004, now());
COMMIT;
BEGIN;
ALTER TABLE dbmail_messages ADD COLUMN seq INTEGER NOT NULL DEFAULT '0';
CREATE INDEX dbmail_messages_seq_index on dbmail_messages(seq);
INSERT INTO dbmail_upgrade_steps (from_version, to_version) values (32001, 32003);
COMMIT;
BEGIN;
ALTER TABLE dbmail_messages ADD seq BIGINT not null default '0';
CREATE INDEX dbmail_messages_seq_index ON dbmail_messages(seq);
INSERT INTO dbmail_upgrade_steps (from_version, to_version, applied) values (32001, 32003, now());
COMMIT;
BEGIN;
DROP VIEW IF EXISTS dbmail_subjectfield;
CREATE VIEW dbmail_subjectfield AS
   SELECT physmessage_id, headervalue AS subjectfield, sortfield
   FROM dbmail_messages m
   JOIN dbmail_header h USING (physmessage_id)
   JOIN dbmail_headername n ON h.headername_id = n.id
   JOIN dbmail_headervalue v ON h.headervalue_id = v.id
WHERE n.headername::text = 'subject'::text;
INSERT INTO dbmail_upgrade_steps (from_version, to_version) values (32001, 32002);
COMMIT;
BEGIN;
DROP VIEW IF EXISTS dbmail_subjectfield;
CREATE VIEW dbmail_subjectfield AS
   SELECT physmessage_id, headervalue AS subjectfield, sortfield
   FROM dbmail_messages m
   JOIN dbmail_header h USING (physmessage_id)
   JOIN dbmail_headername n ON h.headername_id = n.id
   JOIN dbmail_headervalue v ON h.headervalue_id = v.id
WHERE n.headername = 'subject';
INSERT INTO dbmail_upgrade_steps (from_version, to_version, applied) values (32001, 32002, now());
COMMIT;
BEGIN;
DROP VIEW IF EXISTS dbmail_subjectfield;
CREATE VIEW dbmail_subjectfield AS
   SELECT physmessage_id, headervalue AS subjectfield, sortfield
   FROM dbmail_messages m
   JOIN dbmail_header h USING (physmessage_id)
   JOIN dbmail_headername n ON h.headername_id = n.id
   JOIN dbmail_headervalue v ON h.headervalue_id = v.id
WHERE n.headername = 'subject';
INSERT INTO dbmail_upgrade_steps (from_version, to_version) values (32001, 32002);
COMMIT;
BEGIN;
CREATE TABLE dbmail_upgrade_steps (
  from_version int not null,
  to_version int not null,
  applied TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW()
CREATE UNIQUE INDEX dbmail_upgrade_steps_index_1 ON dbmail_upgrade_steps (from_version, to_version);
INSERT INTO dbmail_upgrade_steps (from_version, to_version) values (0, 32001);
COMMIT;
BEGIN;
CREATE TABLE dbmail_upgrade_steps (
  from_version int not null,
  to_version int not null,
  applied datetime not null,
  unique key (from_version, to_version)
INSERT INTO dbmail_upgrade_steps (from_version, to_version, applied) values (0, 32001, now());
COMMIT;
BEGIN;
CREATE TABLE dbmail_upgrade_steps (
  from_version int not null,
  to_version int not null,
  applied datetime default current_timestamp not null
CREATE UNIQUE INDEX dbmail_upgrade_steps_index_1 on dbmail_upgrade_steps(from_version, to_version);
INSERT INTO dbmail_upgrade_steps (from_version, to_version) values (0, 32001);
COMMIT;
SELECT 1=1 FROM %supgrade_steps WHERE from_version = ? AND to_version = ?
Migrations not supported for database driver
Unable to find migration query for upgrade step [%d]
SELECT 1 FROM %susers WHERE user_idnr = %lu AND (curmail_size + %lu > %lu)
SELECT user_id, mailbox_id FROM %sacl WHERE user_id = %lu AND mailbox_id = %lu
SELECT pm.messagesize FROM %sphysmessage pm, %smessages msg WHERE pm.id = msg.physmessage_id AND message_idnr = %lu
SELECT sq_%s%s.CURRVAL FROM DUAL
TO_DATE(%s::text,'YYYY-MM-DD')
TO_CHAR(%s, 'YYYY-MM-DD HH24:MI:SS')
SELECT TABLE_NAME FROM USER_TABLES WHERE TABLE_NAME='%s%s'
SYSTIMESTAMP - NUMTODSINTERVAL(%d,'second')
SYSTIMESTAMP - NUMTODSINTERVAL(%d,'day')
DBMAIL_UTILS.UNIX_TIMESTAMP(%s)
TO_TIMESTAMP(%s, 'YYYY-MM-DD HH24:MI:SS')
TO_CHAR(%s, 'YYYY-MM-DD HH24:MI:SS' )
SELECT 1=1 FROM %s%s LIMIT 1 OFFSET 0
TO_TIMESTAMP(%s::text, 'YYYY-MM-DD HH24:MI:SS')
DATE_FORMAT(%s, GET_FORMAT(DATETIME,'ISO'))
STRFTIME('%%Y-%%m-%%d %%H:%%M:%%S','now','localtime')
driver not in [sqlite|mysql|postgresql|oracle]
SELECT mailbox_idnr FROM %smailboxes WHERE owner_idnr = ?
invalid mailbox search pattern [%s]
cannot search namespace because user [%s] does not exist
searching namespace [%s] for user [%s] with pattern [%s]
SELECT distinct(mbx.name), mbx.mailbox_idnr, mbx.owner_idnr FROM %smailboxes mbx LEFT JOIN %sacl acl ON mbx.mailbox_idnr = acl.mailbox_id LEFT JOIN %susers usr ON acl.user_id = usr.user_idnr 
LEFT JOIN %ssubscription sub ON sub.mailbox_id = mbx.mailbox_idnr WHERE ( sub.user_id=? ) 
AND ((mbx.owner_idnr=?) %s (acl.user_id=? AND acl.lookup_flag=1) OR (usr.userid=? AND acl.lookup_flag=1)) 
adding namespace prefix to [%s] got [%s]
-- Copyright (C) 2005 Internet Connection, Inc.
-- Copyright (C) 2006-2014 NFG Net Facilities Group BV.
-- This program is free software; you can redistribute it and/or 
-- modify it under the terms of the GNU General Public License 
-- as published by the Free Software Foundation; either 
-- version 2 of the License, or (at your option) any later 
-- version.
-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.
-- You should have received a copy of the GNU General Public License
-- along with this program; if not, write to the Free Software
-- Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
BEGIN TRANSACTION;
PRAGMA auto_vacuum = 1;
CREATE TABLE dbmail_aliases (
   alias_idnr INTEGER PRIMARY KEY,
   alias TEXT NOT NULL,
   deliver_to TEXT NOT NULL,
   client_idnr INTEGER DEFAULT '0' NOT NULL
CREATE INDEX dbmail_aliases_index_1 ON dbmail_aliases(alias);
CREATE INDEX dbmail_aliases_index_2 ON dbmail_aliases(client_idnr);
CREATE TABLE dbmail_authlog (
  id INTEGER PRIMARY KEY,
  userid TEXT,
  service TEXT,
  login_time DATETIME,
  logout_time DATETIME,
  src_ip TEXT,
  src_port INTEGER,
  dst_ip TEXT,
  dst_port INTEGER,
  status TEXT DEFAULT 'active',
  bytes_rx INTEGER DEFAULT '0' NOT NULL,
  bytes_tx INTEGER DEFAULT '0' NOT NULL
CREATE TABLE dbmail_users (
   user_idnr INTEGER PRIMARY KEY,
   userid TEXT NOT NULL,
   passwd TEXT NOT NULL,
   client_idnr INTEGER DEFAULT '0' NOT NULL,
   maxmail_size INTEGER DEFAULT '0' NOT NULL,
   curmail_size INTEGER DEFAULT '0' NOT NULL,
   encryption_type TEXT DEFAULT '' NOT NULL,
   last_login DATETIME DEFAULT '1979-11-03 22:05:58' NOT NULL
CREATE UNIQUE INDEX dbmail_users_1 ON dbmail_users(userid);
CREATE TABLE dbmail_mailboxes (
   mailbox_idnr INTEGER PRIMARY KEY,
   owner_idnr INTEGER DEFAULT '0' NOT NULL,
   name TEXT BINARY NOT NULL,
   seq INTEGER DEFAULT '0' NOT NULL,
   seen_flag BOOLEAN default '0' not null,
   answered_flag BOOLEAN default '0' not null,
   deleted_flag BOOLEAN default '0' not null,
   flagged_flag BOOLEAN default '0' not null,
   recent_flag BOOLEAN default '0' not null,
   draft_flag BOOLEAN default '0' not null,
   no_inferiors BOOLEAN default '0' not null,
   no_select BOOLEAN default '0' not null,
   permission BOOLEAN default '2'
CREATE INDEX dbmail_mailboxes_1 ON dbmail_mailboxes(name);
CREATE INDEX dbmail_mailboxes_2 ON dbmail_mailboxes(owner_idnr);
CREATE UNIQUE INDEX dbmail_mailboxes_3 ON dbmail_mailboxes(owner_idnr,name);
CREATE INDEX dbmail_mailbox_4 ON dbmail_mailboxes(seq);
CREATE TRIGGER fk_insert_mailboxes_users_idnr
	BEFORE INSERT ON dbmail_mailboxes
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.owner_idnr IS NOT NULL)
				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.owner_idnr) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_mailboxes" violates foreign key constraint "fk_insert_mailboxes_users_idnr"')
		END;
	END;
CREATE TRIGGER fk_update1_mailboxes_users_idnr
	BEFORE UPDATE ON dbmail_mailboxes
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.owner_idnr IS NOT NULL)
				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.owner_idnr) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_mailboxes" violates foreign key constraint "fk_update2_mailboxes_users_idnr"')
		END;
	END;
CREATE TRIGGER fk_update2_mailboxes_users_idnr
	AFTER UPDATE ON dbmail_users
	FOR EACH ROW BEGIN
		UPDATE dbmail_mailboxes SET owner_idnr = new.user_idnr WHERE owner_idnr = OLD.user_idnr;
	END;
CREATE TRIGGER fk_delete_mailboxes_users_idnr
	BEFORE DELETE ON dbmail_users
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_mailboxes WHERE owner_idnr = OLD.user_idnr;
	END;
CREATE TABLE dbmail_subscription (
	user_id INTEGER NOT NULL,
	mailbox_id INTEGER NOT NULL
CREATE UNIQUE INDEX dbmail_subscriptioin_1 ON dbmail_subscription(user_id, mailbox_id);
CREATE TRIGGER fk_insert_subscription_users_idnr
	BEFORE INSERT ON dbmail_subscription
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.user_id IS NOT NULL)
				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_subscription" violates foreign key constraint "fk_insert_subscription_users_idnr"')
		END;
	END;
CREATE TRIGGER fk_update1_subscription_users_idnr
	BEFORE UPDATE ON dbmail_subscription
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.user_id IS NOT NULL)
				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_subscription" violates foreign key constraint "fk_update1_subscription_users_idnr"')
		END;
	END;
CREATE TRIGGER fk_update2_subscription_users_idnr
	AFTER UPDATE ON dbmail_users
	FOR EACH ROW BEGIN
		UPDATE dbmail_subscription SET user_id = new.user_idnr WHERE user_id = OLD.user_idnr;
	END;
CREATE TRIGGER fk_delete_subscription_users_idnr
	BEFORE DELETE ON dbmail_users
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_subscription WHERE user_id = OLD.user_idnr;
	END;
CREATE TRIGGER fk_insert_subscription_mailbox_id
	BEFORE INSERT ON dbmail_subscription
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.mailbox_id IS NOT NULL)
				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_subscription" violates foreign key constraint "fk_insert_subscription_mailbox_id"')
		END;
	END;
CREATE TRIGGER fk_update1_subscription_mailbox_id
	BEFORE UPDATE ON dbmail_subscription
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.mailbox_id IS NOT NULL)
				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_subscription" violates foreign key constraint "fk_update1_subscription_mailbox_id"')
		END;
	END;
CREATE TRIGGER fk_update2_subscription_mailbox_id
	AFTER UPDATE ON dbmail_mailboxes
	FOR EACH ROW BEGIN
		UPDATE dbmail_subscription SET mailbox_id = new.mailbox_idnr WHERE mailbox_id = OLD.mailbox_idnr;
	END;
CREATE TRIGGER fk_delete_subscription_mailbox_id
	BEFORE DELETE ON dbmail_mailboxes
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_subscription WHERE mailbox_id = OLD.mailbox_idnr;
	END;
CREATE TABLE dbmail_acl (
	user_id INTEGER NOT NULL,
	mailbox_id INTEGER NOT NULL,
	lookup_flag BOOLEAN default '0' not null,
	read_flag BOOLEAN default '0' not null,
	seen_flag BOOLEAN default '0' not null,
	write_flag BOOLEAN default '0' not null,
	insert_flag BOOLEAN default '0' not null,	
	post_flag BOOLEAN default '0' not null,
	create_flag BOOLEAN default '0' not null,	
	delete_flag BOOLEAN default '0' not null,	
	deleted_flag BOOLEAN default '0' not null,	
	expunge_flag BOOLEAN default '0' not null,	
	administer_flag BOOLEAN default '0' not null
CREATE INDEX dbmail_acl_1 ON dbmail_acl(user_id);
CREATE INDEX dbmail_acl_2 ON dbmail_acl(mailbox_id);
CREATE UNIQUE INDEX dbmail_acl_3 ON dbmail_acl(user_id, mailbox_id);
CREATE TRIGGER fk_insert_acl_user_id
	BEFORE INSERT ON dbmail_acl
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.user_id IS NOT NULL)
				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_acl" violates foreign key constraint "fk_insert_acl_user_id"')
		END;
	END;
CREATE TRIGGER fk_update1_acl_user_id
	BEFORE UPDATE ON dbmail_acl
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.user_id IS NOT NULL)
				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_acl" violates foreign key constraint "fk_update1_acl_user_id"')
		END;
	END;
CREATE TRIGGER fk_update2_acl_user_id
	AFTER UPDATE ON dbmail_users
	FOR EACH ROW BEGIN
		UPDATE dbmail_acl SET user_id = new.user_idnr WHERE user_id = OLD.user_idnr;
	END;
CREATE TRIGGER fk_delete_acl_user_id
	BEFORE DELETE ON dbmail_users
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_acl WHERE user_id = OLD.user_idnr;
	END;
CREATE TRIGGER fk_insert_acl_mailbox_id
	BEFORE INSERT ON dbmail_acl
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.mailbox_id IS NOT NULL)
				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_acl" violates foreign key constraint "fk_insert_acl_mailbox_id"')
		END;
	END;
CREATE TRIGGER fk_update1_acl_mailbox_id
	BEFORE UPDATE ON dbmail_acl
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.mailbox_id IS NOT NULL)
				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_acl" violates foreign key constraint "fk_update1_acl_mailbox_id"')
		END;
	END;
CREATE TRIGGER fk_update2_acl_mailbox_id
	AFTER UPDATE ON dbmail_mailboxes
	FOR EACH ROW BEGIN
		UPDATE dbmail_acl SET mailbox_id = new.mailbox_idnr WHERE mailbox_id = OLD.mailbox_idnr;
	END;
CREATE TRIGGER fk_delete_acl_mailbox_id
	BEFORE DELETE ON dbmail_mailboxes
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_acl WHERE mailbox_id = OLD.mailbox_idnr;
	END;
CREATE TABLE dbmail_physmessage (
   id INTEGER PRIMARY KEY,
   messagesize INTEGER DEFAULT '0' NOT NULL,
   rfcsize INTEGER DEFAULT '0' NOT NULL,
   internal_date DATETIME default '0' not null
CREATE TABLE dbmail_messages (
   message_idnr INTEGER PRIMARY KEY,
   mailbox_idnr INTEGER DEFAULT '0' NOT NULL,
   physmessage_id INTEGER DEFAULT '0' NOT NULL,
   seen_flag BOOLEAN default '0' not null,
   answered_flag BOOLEAN default '0' not null,
   deleted_flag BOOLEAN default '0' not null,
   flagged_flag BOOLEAN default '0' not null,
   recent_flag BOOLEAN default '0' not null,
   draft_flag BOOLEAN default '0' not null,
   unique_id TEXT NOT NULL,
   status BOOLEAN unsigned default '0' not null
CREATE INDEX dbmail_messages_1 ON dbmail_messages(mailbox_idnr);
CREATE INDEX dbmail_messages_2 ON dbmail_messages(physmessage_id);
CREATE INDEX dbmail_messages_3 ON dbmail_messages(seen_flag);
CREATE INDEX dbmail_messages_4 ON dbmail_messages(unique_id);
CREATE INDEX dbmail_messages_5 ON dbmail_messages(status);
CREATE INDEX dbmail_messages_6 ON dbmail_messages(mailbox_idnr,status);
CREATE INDEX dbmail_messages_7 ON dbmail_messages(mailbox_idnr,status,seen_flag);
CREATE INDEX dbmail_messages_8 ON dbmail_messages(mailbox_idnr,status,recent_flag);
CREATE TRIGGER fk_insert_messages_physmessage_id
	BEFORE INSERT ON dbmail_messages
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_messages" violates foreign key constraint "fk_insert_messages_physmessage_id"')
		END;
	END;
CREATE TRIGGER fk_update1_messages_physmessage_id
	BEFORE UPDATE ON dbmail_messages
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_messages" violates foreign key constraint "fk_update1_messages_physmessage_id"')
		END;
	END;
CREATE TRIGGER fk_update2_messages_physmessage_id
	AFTER UPDATE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		UPDATE dbmail_messages SET physmessage_id = new.id WHERE physmessage_id = OLD.id;
	END;
CREATE TRIGGER fk_delete_message_physmessage_id
	BEFORE DELETE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_messages WHERE physmessage_id = OLD.id;
	END;
CREATE TRIGGER fk_insert_messages_mailbox_idnr
	BEFORE INSERT ON dbmail_messages
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.mailbox_idnr IS NOT NULL)
				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_idnr) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_messages" violates foreign key constraint "fk_insert_messages_mailbox_idnr"')
		END;
	END;
CREATE TRIGGER fk_update1_messages_mailbox_idnr
	BEFORE UPDATE ON dbmail_messages
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.mailbox_idnr IS NOT NULL)
				AND ((SELECT mailbox_idnr FROM dbmail_mailboxes WHERE mailbox_idnr = new.mailbox_idnr) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_messages" violates foreign key constraint "fk_update1_messages_mailbox_idnr"')
		END;
	END;
CREATE TRIGGER fk_update2_messages_mailbox_idnr
	AFTER UPDATE ON dbmail_mailboxes
	FOR EACH ROW BEGIN
		UPDATE dbmail_messages SET mailbox_idnr = new.mailbox_idnr WHERE mailbox_idnr = OLD.mailbox_idnr;
	END;
CREATE TRIGGER fk_delete_messages_mailbox_idnr
	BEFORE DELETE ON dbmail_mailboxes
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_messages WHERE mailbox_idnr = OLD.mailbox_idnr;
	END;
CREATE TABLE dbmail_messageblks (
   messageblk_idnr INTEGER PRIMARY KEY,
   physmessage_id INTEGER DEFAULT '0' NOT NULL,
   messageblk TEXT NOT NULL,
   blocksize INTEGER DEFAULT '0' NOT NULL,
   is_header BOOLEAN DEFAULT '0' NOT NULL
CREATE INDEX dbmail_messageblks_1 ON dbmail_messageblks(physmessage_id);
CREATE INDEX dbmail_messageblks_2 ON dbmail_messageblks(physmessage_id, is_header);
CREATE TRIGGER fk_insert_messageblks_physmessage_id
	BEFORE INSERT ON dbmail_messageblks
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_messageblks" violates foreign key constraint "fk_insert_messageblks_physmessage_id"')
		END;
	END;
CREATE TRIGGER fk_update1_messageblks_physmessage_id
	BEFORE UPDATE ON dbmail_messageblks
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_messageblks" violates foreign key constraint "fk_update1_messageblks_physmessage_id"')
		END;
	END;
CREATE TRIGGER fk_update2_messageblks_physmessage_id
	AFTER UPDATE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		UPDATE dbmail_messageblks SET physmessage_id = new.id WHERE physmessage_id = OLD.id;
	END;
CREATE TRIGGER fk_delete_messageblks_physmessage_id
	BEFORE DELETE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_messageblks WHERE physmessage_id = OLD.id;
	END;
CREATE TABLE dbmail_auto_replies (
   user_idnr INTEGER PRIMARY KEY,
   reply_body TEXT,  
   start_date DATETIME DEFAULT '1980-01-01 22:05:58' NOT NULL,
   stop_date DATETIME DEFAULT '1980-01-01 22:05:58' NOT NULL
);                   
CREATE TRIGGER fk_insert_auto_replies_user_idnr
        BEFORE INSERT ON dbmail_auto_replies
        FOR EACH ROW BEGIN
                SELECT CASE 
                        WHEN (new.user_idnr IS NOT NULL)
                                AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_idnr) IS NULL)
                        THEN RAISE (ABORT, 'insert on table "dbmail_auto_replies" violates foreign key constraint "fk_insert_auto_replies_user_idnr"')
                END; 
        END;         
CREATE TRIGGER fk_update1_auto_replies_user_idnr
        BEFORE UPDATE ON dbmail_auto_replies
        FOR EACH ROW BEGIN
                SELECT CASE 
                        WHEN (new.user_idnr IS NOT NULL)
                                AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_idnr) IS NULL)
                        THEN RAISE (ABORT, 'update on table "dbmail_auto_replies" violates foreign key constraint "fk_update1_auto_replies_user_idnr"')
                END; 
        END;         
CREATE TRIGGER fk_update2_auto_replies_user_idnr
        AFTER UPDATE ON dbmail_users
        FOR EACH ROW BEGIN
                UPDATE dbmail_auto_replies SET user_idnr = new.user_idnr WHERE user_idnr = OLD.user_idnr;
        END;         
CREATE TRIGGER fk_delete_auto_replies_user_idnr
        BEFORE DELETE ON dbmail_users
        FOR EACH ROW BEGIN
                DELETE FROM dbmail_auto_replies WHERE user_idnr = OLD.user_idnr;
        END;         
                     
CREATE TABLE dbmail_auto_notifications (
   user_idnr INTEGER PRIMARY KEY,
   notify_address TEXT  
);                   
CREATE TRIGGER fk_insert_auto_notifications_user_idnr
        BEFORE INSERT ON dbmail_auto_notifications
        FOR EACH ROW BEGIN
                SELECT CASE 
                        WHEN (new.user_idnr IS NOT NULL)
                                AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_idnr) IS NULL)
                        THEN RAISE (ABORT, 'insert on table "dbmail_auto_notifications" violates foreign key constraint "fk_insert_auto_notifications_user_idnr"')
                END; 
        END;         
CREATE TRIGGER fk_update1_auto_notifications_user_idnr
        BEFORE UPDATE ON dbmail_auto_notifications
        FOR EACH ROW BEGIN
                SELECT CASE 
                        WHEN (new.user_idnr IS NOT NULL)
                                AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_idnr) IS NULL)
                        THEN RAISE (ABORT, 'update on table "dbmail_auto_notifications" violates foreign key constraint "fk_update1_auto_notifications_user_idnr"')
                END; 
        END;         
CREATE TRIGGER fk_update2_auto_notifications_user_idnr
        AFTER UPDATE ON dbmail_users
        FOR EACH ROW BEGIN
                UPDATE dbmail_auto_notifications SET user_idnr = new.user_idnr WHERE user_idnr = OLD.user_idnr;
        END;         
CREATE TRIGGER fk_delete_auto_notifications_user_idnr
        BEFORE DELETE ON dbmail_users
        FOR EACH ROW BEGIN
                DELETE FROM dbmail_auto_notifications WHERE user_idnr = OLD.user_idnr;
        END;         
                     
CREATE TABLE dbmail_pbsp (
   idnr INTEGER PRIMARY KEY,
   since DATETIME default '0' not null,
   ipnumber TEXT NOT NULL
CREATE UNIQUE INDEX dbmail_pbsp_1 ON dbmail_pbsp(ipnumber);
CREATE INDEX dbmail_pbsp_2 ON dbmail_pbsp(since);
CREATE TABLE dbmail_sievescripts (
  owner_idnr INTEGER DEFAULT '0' NOT NULL,
  name TEXT NOT NULL,
  script TEXT,
  active BOOLEAN default '0' not null
CREATE INDEX dbmail_sievescripts_1 ON dbmail_sievescripts(name);
CREATE INDEX dbmail_sievescripts_2 ON dbmail_sievescripts(owner_idnr);
CREATE UNIQUE INDEX dbmail_sievescripts_3 ON dbmail_sievescripts(owner_idnr,name);
CREATE TRIGGER fk_insert_sievescripts_owner_idnr
	BEFORE INSERT ON dbmail_sievescripts
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.owner_idnr IS NOT NULL)
				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.owner_idnr) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_sievescripts" violates foreign key constraint "fk_insert_sievescripts_owner_idnr"')
		END;
	END;
CREATE TRIGGER fk_update1_sievescripts_owner_idnr
	BEFORE UPDATE ON dbmail_sievescripts
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.owner_idnr IS NOT NULL)
				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.owner_idnr) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_sievescripts" violates foreign key constraint "fk_update1_sievescripts_owner_idnr"')
		END;
	END;
CREATE TRIGGER fk_update2_sievescripts_owner_idnr
	AFTER UPDATE ON dbmail_users
	FOR EACH ROW BEGIN
		UPDATE dbmail_sievescripts SET owner_idnr = new.user_idnr WHERE owner_idnr = OLD.user_idnr;
	END;
CREATE TRIGGER fk_delete_sievescripts_owner_idnr
	BEFORE DELETE ON dbmail_users
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_sievescripts WHERE owner_idnr = OLD.user_idnr;
	END;
-- store all headers by storing all headernames and headervalues in separate
-- tables.
CREATE TABLE dbmail_headername (
	id		INTEGER PRIMARY KEY,
	headername	TEXT NOT NULL DEFAULT ''
CREATE UNIQUE INDEX dbmail_headername_1 on dbmail_headername (headername);
CREATE TABLE dbmail_headervalue (
 	id		INTEGER NOT NULL PRIMARY KEY,
	hash 		TEXT NOT NULL,
        headervalue   	BLOB NOT NULL,
	sortfield	TEXT NOT NULL,
	datefield	DATETIME
CREATE INDEX dbmail_headervalue_1 ON dbmail_headervalue(hash);
CREATE INDEX dbmail_headervalue_2 ON dbmail_headervalue(sortfield);
CREATE INDEX dbmail_headervalue_3 ON dbmail_headervalue(datefield);
CREATE TABLE dbmail_header (
        physmessage_id      INTEGER NOT NULL,
	headername_id       INTEGER NOT NULL,
        headervalue_id      INTEGER NOT NULL
CREATE UNIQUE INDEX dbmail_header_1 ON dbmail_header(physmessage_id,headername_id,headervalue_id);
CREATE TRIGGER fk_insert_header_physmessage_id
	BEFORE INSERT ON dbmail_header
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_header" violates foreign key constraint "fk_insert_header_physmessage_id"')
		END;
	END;
CREATE TRIGGER fk_update_header_physmessage_id
	BEFORE UPDATE ON dbmail_header
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_header" violates foreign key constraint "fk_update_header_physmessage_id"')
		END;
	END;
CREATE TRIGGER fk_update2_header_physmessage_id
	AFTER UPDATE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		UPDATE dbmail_header SET physmessage_id = new.id WHERE physmessage_id = OLD.id;
	END;
CREATE TRIGGER fk_delete_header_physmessage_id
	BEFORE DELETE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_header WHERE physmessage_id = OLD.id;
	END;
CREATE TRIGGER fk_insert_header_headername_id
	BEFORE INSERT ON dbmail_header
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.headername_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_headername WHERE id = new.headername_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_header" violates foreign key constraint "fk_insert_header_headername_id"')
		END;
	END;
CREATE TRIGGER fk_update_header_headername_id
	BEFORE UPDATE ON dbmail_header
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.headername_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_headername WHERE id = new.headername_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_header" violates foreign key constraint "fk_update_header_headername_id"')
		END;
	END;
CREATE TRIGGER fk_update2_header_headername_id
	AFTER UPDATE ON dbmail_headername
	FOR EACH ROW BEGIN
		UPDATE dbmail_header SET headername_id = new.id WHERE headername_id = OLD.id;
	END;
CREATE TRIGGER fk_delete_header_headername_id
	BEFORE DELETE ON dbmail_headername
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_header WHERE headername_id = OLD.id;
	END;
CREATE TRIGGER fk_insert_header_headervalue_id
	BEFORE INSERT ON dbmail_header
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.headervalue_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_headervalue WHERE id = new.headervalue_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_header" violates foreign key constraint "fk_insert_header_headervalue_id"')
		END;
	END;
CREATE TRIGGER fk_update_header_headervalue_id
	BEFORE UPDATE ON dbmail_header
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.headervalue_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_headervalue WHERE id = new.headervalue_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_header" violates foreign key constraint "fk_update_header_headervalue_id"')
		END;
	END;
CREATE TRIGGER fk_update2_header_headervalue_id
	AFTER UPDATE ON dbmail_headervalue
	FOR EACH ROW BEGIN
		UPDATE dbmail_header SET headervalue_id = new.id WHERE headervalue_id = OLD.id;
	END;
CREATE TRIGGER fk_delete_header_headervalue_id
	BEFORE DELETE ON dbmail_headervalue
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_header WHERE headervalue_id = OLD.id;
	END;
-- Threading
-- support fast threading by breaking out In-Reply-To/References headers
-- these fields contain zero or more Message-Id values that determine the message
-- threading
CREATE TABLE dbmail_referencesfield (
        physmessage_id  INTEGER NOT NULL,
	id		INTEGER NOT NULL PRIMARY KEY,
	referencesfield	TEXT NOT NULL DEFAULT ''
CREATE UNIQUE INDEX dbmail_referencesfield_1 on dbmail_referencesfield (physmessage_id, referencesfield);
--	FOREIGN KEY (physmessage_id)
--			REFERENCES dbmail_physmessage(id)
--			ON UPDATE CASCADE ON DELETE CASCADE
CREATE TRIGGER fk_insert_referencesfield_physmessage_id
	BEFORE INSERT ON dbmail_referencesfield
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_referencesfield" violates foreign key constraint "fk_insert_referencesfield_physmessage_id"')
		END;
	END;
CREATE TRIGGER fk_update1_referencesfield_physmessage_id
	BEFORE UPDATE ON dbmail_referencesfield
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_referencesfield" violates foreign key constraint "fk_update1_referencesfield_physmessage_id"')
		END;
	END;
CREATE TRIGGER fk_update2_referencesfield_physmessage_id
	AFTER UPDATE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		UPDATE dbmail_referencesfield SET physmessage_id = new.id WHERE physmessage_id = OLD.id;
	END;
CREATE TRIGGER fk_delete_referencesfield_physmessage_id
	BEFORE DELETE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_referencesfield WHERE physmessage_id = OLD.id;
	END;
-- Table structure for table `dbmail_replycache`
CREATE TABLE dbmail_replycache (
  to_addr TEXT NOT NULL default '',
  from_addr TEXT NOT NULL default '',
  handle TEXT NOT NULL default '',
  lastseen datetime NOT NULL default '0000-00-00 00:00:00'
CREATE UNIQUE INDEX dbmail_replycache_1 on dbmail_replycache (to_addr,from_addr, handle);
-- Add tables and columns to hold Sieve scripts.
CREATE TABLE dbmail_usermap (
  login TEXT NOT NULL,
  sock_allow TEXT NOT NULL,
  sock_deny TEXT NOT NULL,
  userid TEXT NOT NULL
CREATE UNIQUE INDEX usermap_idx_1 ON dbmail_usermap(login, sock_allow, userid);
-- Create the user for the delivery chain
INSERT INTO dbmail_users (userid, passwd, encryption_type) 
	VALUES ('__@!internal_delivery_user!@__', '', 'md5');
-- Create the 'anyone' user which is used for ACLs.
INSERT INTO dbmail_users (userid, passwd, encryption_type) 
	VALUES ('anyone', '', 'md5');
-- Create the user to own #Public mailboxes
INSERT INTO dbmail_users (userid, passwd, encryption_type) 
	VALUES ('__public__', '', 'md5');
COMMIT;
-- support faster FETCH commands by caching ENVELOPE information
CREATE TABLE dbmail_envelope (
        physmessage_id  INTEGER NOT NULL,
	id		INTEGER NOT NULL PRIMARY KEY,
	envelope	TEXT NOT NULL DEFAULT ''
CREATE UNIQUE INDEX dbmail_envelope_1 on dbmail_envelope (physmessage_id);
CREATE UNIQUE INDEX dbmail_envelope_2 on dbmail_envelope (physmessage_id, id);
CREATE TRIGGER fk_insert_envelope_physmessage_id
	BEFORE INSERT ON dbmail_envelope
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_envelope" violates foreign key constraint "fk_insert_envelope_physmessage_id"')
		END;
	END;
CREATE TRIGGER fk_update1_envelope_physmessage_id
	BEFORE UPDATE ON dbmail_envelope
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_envelope" violates foreign key constraint "fk_update1_envelope_physmessage_id"')
		END;
	END;
CREATE TRIGGER fk_update2_envelope_physmessage_id
	AFTER UPDATE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		UPDATE dbmail_envelope SET physmessage_id = new.id WHERE physmessage_id = OLD.id;
	END;
CREATE TRIGGER fk_delete_envelope_physmessage_id
	BEFORE DELETE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_envelope WHERE physmessage_id = OLD.id;
	END;
-- 2.3.x additions
DROP TABLE IF EXISTS dbmail_mimeparts;
CREATE TABLE dbmail_mimeparts (
	id	INTEGER NOT NULL PRIMARY KEY,
	hash	TEXT NOT NULL,
	data	BLOB NOT NULL,
	size	INTEGER NOT NULL
CREATE INDEX dbmail_mimeparts_1 ON dbmail_mimeparts(hash);
DROP TABLE IF EXISTS dbmail_partlists;
CREATE TABLE dbmail_partlists (
	physmessage_id	INTEGER NOT NULL,
   	is_header 	BOOLEAN DEFAULT '0' NOT NULL,
	part_key	INTEGER DEFAULT '0' NOT NULL,
	part_depth	INTEGER DEFAULT '0' NOT NULL,
	part_order	INTEGER DEFAULT '0' NOT NULL,
	part_id		INTEGER NOT NULL
CREATE INDEX dbmail_partlists_1 ON dbmail_partlists(physmessage_id);
CREATE INDEX dbmail_partlists_2 ON dbmail_partlists(part_id);
CREATE UNIQUE INDEX message_parts ON dbmail_partlists(physmessage_id, part_key, part_depth, part_order);
-- ALTER TABLE ONLY dbmail_partlists
--    ADD CONSTRAINT dbmail_partlists_part_id_fkey FOREIGN KEY (part_id) REFERENCES dbmail_mimeparts(id) ON UPDATE CASCADE ON DELETE CASCADE;
DROP TRIGGER IF EXISTS fk_insert_partlists_mimeparts_id;
CREATE TRIGGER fk_insert_partlists_mimeparts_id
	BEFORE INSERT ON dbmail_partlists
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.part_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_mimeparts WHERE id = new.part_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_partlists" violates foreign key constraint "fk_insert_partlists_mimeparts_id"')
		END;
	END;
DROP TRIGGER IF EXISTS fk_update_partlists_mimeparts_id;
CREATE TRIGGER fk_update_partlists_mimeparts_id
	BEFORE UPDATE ON dbmail_partlists
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.part_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_mimeparts WHERE id = new.part_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_partlists" violates foreign key constraint "fk_update_partlists_mimeparts_id"')
		END;
	END;
DROP TRIGGER IF EXISTS fk_update2_partlists_mimeparts_id;
CREATE TRIGGER fk_update2_partlists_mimeparts_id
	AFTER UPDATE ON dbmail_mimeparts
	FOR EACH ROW BEGIN
		UPDATE dbmail_partlists SET part_id = new.id WHERE part_id = OLD.id;
	END;
DROP TRIGGER IF EXISTS fk_delete_partlists_mimeparts_id;
CREATE TRIGGER fk_delete_partlists_mimeparts_id
	BEFORE DELETE ON dbmail_mimeparts
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_partlists WHERE part_id = OLD.id;
	END;
-- ALTER TABLE ONLY dbmail_partlists
--    ADD CONSTRAINT dbmail_partlists_physmessage_id_fkey FOREIGN KEY (physmessage_id) REFERENCES dbmail_physmessage(id) ON UPDATE CASCADE ON DELETE CASCADE;
DROP TRIGGER IF EXISTS fk_insert_partlists_physmessage_id;
CREATE TRIGGER fk_insert_partlists_physmessage_id
	BEFORE INSERT ON dbmail_partlists
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_partlists" violates foreign key constraint "fk_insert_partlists_physmessage_id"')
		END;
	END;
DROP TRIGGER IF EXISTS fk_update_partlists_physmessage_id;
CREATE TRIGGER fk_update_partlists_physmessage_id
	BEFORE UPDATE ON dbmail_partlists
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.physmessage_id IS NOT NULL)
				AND ((SELECT id FROM dbmail_physmessage WHERE id = new.physmessage_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_partlists" violates foreign key constraint "fk_update_partlists_physmessage_id"')
		END;
	END;
DROP TRIGGER IF EXISTS fk_update2_partlists_physmessage_id;
CREATE TRIGGER fk_update2_partlists_physmessage_id
	AFTER UPDATE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		UPDATE dbmail_partlists SET physmessage_id = new.id WHERE physmessage_id = OLD.id;
	END;
DROP TRIGGER IF EXISTS fk_delete_partlists_physmessage_id;
CREATE TRIGGER fk_delete_partlists_physmessage_id
	BEFORE DELETE ON dbmail_physmessage
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_partlists WHERE physmessage_id = OLD.id;
	END;
CREATE TABLE dbmail_keywords (
	keyword		TEXT NOT NULL,
	message_idnr	INT NOT NULL
CREATE UNIQUE INDEX dbmail_keywords_1 ON dbmail_keywords(keyword,message_idnr);
DROP TRIGGER IF EXISTS fk_insert_dbmail_keywords_dbmail_messages_message_idnr;
CREATE TRIGGER fk_insert_dbmail_keywords_dbmail_messages_message_idnr
	BEFORE INSERT ON dbmail_keywords
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.message_idnr IS NOT NULL)
				AND ((SELECT message_idnr FROM dbmail_messages WHERE message_idnr = new.message_idnr) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_keywords" violates foreign key constraint "fk_insert_dbmail_keywords_dbmail_messages_message_idnr"')
		END;
	END;
DROP TRIGGER IF EXISTS fk_update_dbmail_keywords_dbmail_messages_message_idnr;
CREATE TRIGGER fk_update_dbmail_keywords_dbmail_messages_message_idnr
	BEFORE UPDATE ON dbmail_keywords
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.message_idnr IS NOT NULL)
				AND ((SELECT message_idnr FROM dbmail_messages WHERE message_idnr = new.message_idnr) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_keywords" violates foreign key constraint "fk_update_dbmail_keywords_dbmail_messages_message_idnr"')
		END;
	END;
DROP TRIGGER IF EXISTS fk_update2_dbmail_keywords_dbmail_messages_message_idnr;
CREATE TRIGGER fk_update2_dbmail_keywords_dbmail_messages_message_idnr
	AFTER UPDATE ON dbmail_messages
	FOR EACH ROW BEGIN
		UPDATE dbmail_keywords SET message_idnr = new.message_idnr WHERE message_idnr = OLD.message_idnr;
	END;
DROP TRIGGER IF EXISTS fk_delete_dbmail_keywords_dbmail_messages_message_idnr;
CREATE TRIGGER fk_delete_dbmail_keywords_dbmail_messages_message_idnr
	BEFORE DELETE ON dbmail_messages
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_keywords WHERE message_idnr = OLD.message_idnr;
	END;
DROP TABLE IF EXISTS dbmail_filters;
CREATE TABLE dbmail_filters (
	id           INTEGER PRIMARY KEY,
	user_id      INTEGER NOT NULL,
	headername   TEXT NOT NULL,
	headervalue  TEXT NOT NULL,	
	mailbox      TEXT NOT NULL
CREATE UNIQUE INDEX dbmail_filters_index_1 ON dbmail_filters(user_id, id);
CREATE TRIGGER fk_insert_filters_users_user_idnr
	BEFORE INSERT ON dbmail_filters
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.user_id IS NOT NULL)
				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)
			THEN RAISE (ABORT, 'insert on table "dbmail_filters" violates foreign key constraint "fk_insert_filters_users_user_idnr"')
		END;
	END;
CREATE TRIGGER fk_update_filters_users_user_idnr
	BEFORE UPDATE ON dbmail_filters
	FOR EACH ROW BEGIN
		SELECT CASE 
			WHEN (new.user_id IS NOT NULL)
				AND ((SELECT user_idnr FROM dbmail_users WHERE user_idnr = new.user_id) IS NULL)
			THEN RAISE (ABORT, 'update on table "dbmail_filters" violates foreign key constraint "fk_update_filters_users_user_idnr"')
		END;
	END;
CREATE TRIGGER fk_update2_filters_users_user_idnr
	AFTER UPDATE ON dbmail_users
	FOR EACH ROW BEGIN
		UPDATE dbmail_filters SET user_id = new.user_idnr WHERE user_id = OLD.user_idnr;
	END;
CREATE TRIGGER fk_delete_filters_users_user_idnr
	BEFORE DELETE ON dbmail_users
	FOR EACH ROW BEGIN
		DELETE FROM dbmail_filters WHERE user_id = OLD.user_idnr;
	END;
CREATE VIEW dbmail_fromfield AS
        SELECT physmessage_id,sortfield AS fromfield
        FROM dbmail_messages m
        JOIN dbmail_header h USING (physmessage_id)
        JOIN dbmail_headername n ON h.headername_id = n.id
        JOIN dbmail_headervalue v ON h.headervalue_id = v.id
WHERE n.headername='from';
CREATE VIEW dbmail_ccfield AS
        SELECT physmessage_id,sortfield AS ccfield
        FROM dbmail_messages m
        JOIN dbmail_header h USING (physmessage_id)
        JOIN dbmail_headername n ON h.headername_id = n.id
        JOIN dbmail_headervalue v ON h.headervalue_id = v.id
WHERE n.headername='cc';
CREATE VIEW dbmail_tofield AS
        SELECT physmessage_id,sortfield AS tofield
        FROM dbmail_messages m
        JOIN dbmail_header h USING (physmessage_id)
        JOIN dbmail_headername n ON h.headername_id = n.id
        JOIN dbmail_headervalue v ON h.headervalue_id = v.id
WHERE n.headername='to';
CREATE VIEW dbmail_subjectfield AS
        SELECT physmessage_id,headervalue AS subjectfield
        FROM dbmail_messages m
        JOIN dbmail_header h USING (physmessage_id)
        JOIN dbmail_headername n ON h.headername_id = n.id
        JOIN dbmail_headervalue v ON h.headervalue_id = v.id
WHERE n.headername='subject';
CREATE VIEW dbmail_datefield AS
        SELECT physmessage_id,datefield,sortfield
        FROM dbmail_messages m
        JOIN dbmail_header h USING (physmessage_id)
        JOIN dbmail_headername n ON h.headername_id = n.id
        JOIN dbmail_headervalue v ON h.headervalue_id = v.id
WHERE n.headername='date';
Try creating the database tables
Schema version incompatible. Bailing out
Schema version incompatible [%d]. Bailing out
error creating database connection pool
database connection pool created with maximum connections of [%d]
run a database connection reaper thread every [%d] seconds
database connection pool started with [%d] connections, max [%d]
error getting a database connection from the pool
database has gone away. trying to reconnect...
SELECT physmessage_id FROM %smessages WHERE message_idnr = ?
SELECT curmail_size FROM %susers WHERE user_idnr = ?
UPDATE %susers SET curmail_size = %lu WHERE user_idnr = %lu
UPDATE %susers SET curmail_size = curmail_size + %lu WHERE user_idnr = %lu
UPDATE %susers SET curmail_size = CASE WHEN curmail_size >= %lu THEN curmail_size - %lu ELSE 0 END WHERE user_idnr = %lu
SELECT COALESCE(SUM(pm.messagesize),0) FROM %sphysmessage pm, %smessages m, %smailboxes mb WHERE m.physmessage_id = pm.id AND m.mailbox_idnr = mb.mailbox_idnr AND mb.owner_idnr = %lu AND m.status < %d
SUM did not give result, assuming empty mailbox
found quotum usage of [%lu] bytes
SELECT usr.user_idnr, SUM(pm.messagesize), usr.curmail_size FROM %susers usr LEFT JOIN %smailboxes mbx ON mbx.owner_idnr = usr.user_idnr LEFT JOIN %smessages msg ON msg.mailbox_idnr = mbx.mailbox_idnr LEFT JOIN %sphysmessage pm ON pm.id = msg.physmessage_id AND msg.status < %d GROUP BY usr.user_idnr, usr.curmail_size HAVING ((SUM(pm.messagesize) <> usr.curmail_size) OR (NOT (SUM(pm.messagesize) IS NOT NULL) AND usr.curmail_size <> 0))
SELECT notify_address FROM %sauto_notifications WHERE user_idnr = %lu
SELECT reply_body FROM %sauto_replies WHERE user_idnr = ? AND %s BETWEEN start_date AND stop_date
SELECT %smailboxes.owner_idnr FROM %smailboxes, %smessages WHERE %smailboxes.mailbox_idnr = %smessages.mailbox_idnr AND %smessages.message_idnr = %lu
SELECT idnr FROM %spbsp WHERE ipnumber = ?
UPDATE %spbsp SET since = %s WHERE idnr = ?
INSERT INTO %spbsp (since, ipnumber) VALUES (%s, ?)
SELECT p.id FROM %sphysmessage p LEFT JOIN %smessages m ON p.id = m.physmessage_id WHERE m.physmessage_id IS NULL
DELETE FROM %sphysmessage WHERE id = %lu
SELECT COUNT(*), l.physmessage_id FROM %spartlists l LEFT JOIN %sphysmessage p ON p.id = l.physmessage_id WHERE p.id IS NULL GROUP BY l.physmessage_id
DELETE FROM %spartlists WHERE physmessage_id = %lu
SELECT p.id FROM %smimeparts p LEFT JOIN %spartlists l ON p.id = l.part_id WHERE l.part_id IS NULL
DELETE FROM %smimeparts WHERE id = %lu
SELECT hn.id FROM %sheadername hn LEFT JOIN %sheader h ON hn.id = h.headername_id WHERE h.headername_id IS NULL
DELETE FROM %sheadername WHERE id = %lu
SELECT hv.id FROM %sheadervalue hv LEFT JOIN %sheader h ON hv.id = h.headervalue_id WHERE h.headervalue_id IS NULL
DELETE FROM %sheadervalue WHERE id = %lu
SELECT id FROM %sphysmessage WHERE rfcsize=0
error retrieving physmessage: [%lu]
UPDATE %sphysmessage SET rfcsize = %lu WHERE id = %lu
error caching headers for physmessage: [%lu]
SELECT p.id FROM %sphysmessage p LEFT JOIN %sheader h ON p.id = h.physmessage_id WHERE h.physmessage_id IS NULL
SELECT p.id FROM %sphysmessage p LEFT JOIN %senvelope e ON p.id = e.physmessage_id WHERE e.physmessage_id IS NULL
DELETE FROM %smessages WHERE message_idnr = %lu
SELECT COALESCE(SUM(pm.messagesize),0) FROM %smessages msg, %sphysmessage pm WHERE msg.physmessage_id = pm.id AND msg.mailbox_idnr = ? AND msg.status < %d %s
UPDATE %smessages set status=%d WHERE message_idnr=%lu AND status < %d
Could not calculate quotum used for user [%lu]
looking for mailbox with FQN [%s].
Could not remove mailbox namespace.
no mailbox [%s] for owner [%lu]
did not find any mailboxes that match pattern. returning 0, nchildren = 0
Splitting mailbox [%s] simple name [%s] namespace [%s] username [%s]
Invalid mailbox name specified
Public user required for #Public folder access.
UPDATE %smailboxes SET permission=%d WHERE mailbox_idnr=%lu
SELECT name FROM %smailboxes WHERE mailbox_idnr=%lu AND owner_idnr=%lu
SELECT mailbox_idnr FROM %smailboxes WHERE owner_idnr = ? 
SELECT no_select FROM %smailboxes WHERE mailbox_idnr = %lu
SELECT no_inferiors FROM %smailboxes WHERE mailbox_idnr=%lu
SELECT m.message_idnr FROM %smessages m LEFT JOIN %sphysmessage p ON m.physmessage_id=p.id LEFT JOIN %sheader h ON p.id=h.physmessage_id LEFT JOIN %sheadername n ON h.headername_id=n.id LEFT JOIN %sheadervalue v ON h.headervalue_id=v.id WHERE m.mailbox_idnr=? AND m.status < %d AND n.headername IN ('resent-message-id','message-id') AND %s=? AND p.internal_date > %s
UPDATE %smailboxes SET name = ? WHERE mailbox_idnr = ?
SELECT * FROM %ssubscription WHERE user_id=? and mailbox_id=?
INSERT INTO %ssubscription (user_id, mailbox_id) VALUES (?, ?)
DELETE FROM %ssubscription WHERE user_id=%lu AND mailbox_id=%lu
SELECT %s FROM %smessages WHERE message_idnr=%lu AND status < %d 
 WHERE message_idnr = %lu AND status < %d AND seq <= %lu
 WHERE message_idnr = %lu AND status < %d
DELETE FROM %skeywords WHERE message_idnr=? AND keyword=?
DELETE FROM %skeywords WHERE message_idnr=?
INSERT %s INTO %skeywords (message_idnr,keyword) VALUES (?, ?)
DELETE FROM %sacl WHERE user_id = %lu AND mailbox_id = %lu
SELECT %susers.userid FROM %susers, %sacl WHERE %sacl.mailbox_id = %lu AND %susers.user_idnr = %sacl.user_id
SELECT owner_idnr FROM %smailboxes WHERE mailbox_idnr = %lu
mailbox_idnr [%lu] only_empty [%d] update_curmail_size [%d]
cannot find owner of mailbox for mailbox [%lu]
unable to find owner of mailbox [%lu]
DELETE FROM %smessages WHERE mailbox_idnr = %lu
DELETE FROM %smailboxes WHERE mailbox_idnr = %lu
SELECT mailbox_idnr FROM %smailboxes WHERE owner_idnr=%lu
user [%lu] does not have any mailboxes?
error checking ownership of mailbox
SELECT name FROM %smailboxes WHERE mailbox_idnr=%lu
error getting fully qualified mailbox name
SELECT mailbox_idnr FROM %smailboxes WHERE mailbox_idnr = %lu AND owner_idnr = %lu
Setting ACL for user [%lu], mailbox [%lu].
error checking ownership of mailbox.
Error finding acl for user [%lu], mailbox [%lu]
INSERT INTO %sacl (user_id, mailbox_id) VALUES (%lu, %lu)
Error creating ACL for user [%lu], mailbox [%lu]
UPDATE %sacl SET %s = %i WHERE user_id = %lu AND mailbox_id = %lu
checking userid [%s] in usermap
SELECT login, sock_allow, sock_deny, userid FROM %susermap WHERE login in (?,'ANY') ORDER BY sock_allow, sock_deny
login [%s] not found in usermap
SELECT active FROM %susers WHERE user_idnr = ?
UPDATE %susers SET active = ? WHERE user_idnr = ?
SELECT saction FROM %susers WHERE user_idnr = ?
UPDATE %susers SET saction = ? WHERE user_idnr = ?
UPDATE %susers SET spasswd = ? WHERE user_idnr = ?
UPDATE %smessages SET status=%d WHERE message_idnr IN (SELECT m.message_idnr FROM %smessages m JOIN %smailboxes b ON m.mailbox_idnr=b.mailbox_idnr LEFT OUTER JOIN %skeywords k ON k.message_idnr=m.message_idnr WHERE b.owner_idnr=? AND status IN (%d,%d) AND (1=0
Found: user_idnr [%lu] security_action [%lu] flags [%s]
NotFound: user_idnr [%lu] security_action [%lu]
SELECT user_idnr FROM %susers WHERE lower(userid) = lower(?)
INSERT INTO %susers (userid,passwd,client_idnr,maxmail_size,encryption_type) VALUES (?,?,?,?,?) %s
INSERT INTO %susers (userid,user_idnr,passwd,client_idnr,maxmail_size,encryption_type) VALUES (?,?,?,?,?,?) %s
create shadow account userid [%s], user_idnr [%lu]
UPDATE %susers SET maxmail_size = %lu WHERE user_idnr = %lu
DELETE FROM %susers WHERE userid = ?
UPDATE %susers SET userid = ? WHERE user_idnr= ?
found username for user_idnr [%lu -> %s]
user_idnr for sql shadow account differs from user_idnr [%lu != %lu]
creating shadow user for [%lu]
unable to find or create sql shadow account for useridnr [%lu]
INSERT INTO %smailboxes (name,owner_idnr,permission,seq) VALUES (?, ?, %d, 1) %s
created mailbox with idnr [%lu] for user [%lu]
Creating mailbox [%s] source [%d] for user [%lu]
New mailbox name contains invalid characters
New mailbox name contains invalid characters. Aborting create.
Asked to create mailbox [%s] which already exists. Aborting create.
db_imap_split_mailbox returned with error
Mailbox requested with BRUTEFORCE creation status; pretending that all permissions have been granted to create it.
Top-level mailboxes may not be created for others under #Users
General error while subscribing
Database error while setting rights
Checking if we have the right to create mailboxes under mailbox [%lu]
Mailbox cannot have inferior names
Internal database error while checking inferiors
Permission to create mailbox denied
Internal database error while checking ACL
could not create mailbox [%s] because [%s]
mailbox [%s] created on the fly
SELECT lastseen FROM %sreplycache WHERE to_addr = ? AND from_addr = ? AND handle = ? 
UPDATE %sreplycache SET lastseen = %s WHERE to_addr = ? AND from_addr = ? AND handle = ?
INSERT INTO %sreplycache (to_addr, from_addr, handle, lastseen) VALUES (?,?,?, %s)
DELETE FROM %sreplycache WHERE to_addr = ? AND from_addr = ? AND handle    = ? 
SELECT lastseen FROM %sreplycache WHERE to_addr = ? AND from_addr = ? AND handle = ? AND lastseen > (%s)
UPDATE %susers SET last_login = '%s' WHERE user_idnr = %lu
SELECT %s, encryption_type FROM %susers WHERE user_idnr = %lu
validating using plaintext passwords
validating using crypt() encryption
validating using MD5 digest comparison
validating using MD5 hash comparison
validating using MD5 digest base64 comparison
validating using WHIRLPOOL hash comparison
validating using SHA-512 hash comparison
validating using SHA-256 hash comparison
validating using SHA-1 hash comparison
validating using TIGER hash comparison
UPDATE %s %smailboxes SET seq=seq+1 WHERE mailbox_idnr = ?
SELECT seq FROM %smailboxes WHERE mailbox_idnr = ?
UPDATE %s %smessages SET seq = ? WHERE message_idnr = ? AND seq < ?
mailbox_id [%lu] message_id [%lu] -> [%lu]
UPDATE %smessages SET mailbox_idnr=%lu WHERE mailbox_idnr=%lu
error getting size for message [%lu]
user [%lu] would exceed quotum
INSERT INTO %smessages (mailbox_idnr,physmessage_id,seen_flag,answered_flag,deleted_flag,flagged_flag,recent_flag,draft_flag,unique_id,status) SELECT %lu,physmessage_id,seen_flag,answered_flag,deleted_flag,flagged_flag,%d,draft_flag,'%s',status FROM %smessages WHERE message_idnr = %lu %s
INSERT INTO %skeywords (message_idnr, keyword) SELECT %lu,keyword from %skeywords WHERE message_idnr=%lu
SELECT data FROM %smimeparts WHERE id=?
UPDATE %smimeparts SET hash=? WHERE id=?
looking up user_idnr for [%s]
[%p] connection from pool
[%p] connection to pool
[%p] connection cleared
[%p] [%s]
failed query [%s]
[%p] %d:[%s]
[%p] %d:[%d]
[%p] %d:[%lu]
[%p] %d:[blob of length %d]
Running upgrade step %d -> %d
auth_getmaxmailsize() failed
dm_db.c
BEGIN
COMMIT
ROLLBACK
DATE(%s)
TRUNC(TO_TIMESTAMP(%s))
DBMS_LOB.COMPARE(%s,?) = 0
SYSTIMESTAMP
%s=?
RETURNING %s
SUBSTRING(%s,0,255)
LOWER(%s)
ENCODE(%s::bytea,'escape')
ILIKE
NOW() - INTERVAL '%d SECOND'
NOW() - INTERVAL '%d DAY'
NOW()
ROUND(DATE_PART('epoch',%s))
LIKE BINARY
NOW() - INTERVAL %d SECOND
NOW() - INTERVAL %d DAY
UNIX_TIMESTAMP(%s)
OR IGNORE
DATETIME('now','-%d SECONDS')
DATETIME('now','-%d DAYS')
STRFTIME('%%s',%s)
DATETIME(%s)
mailbox_idnr
 AND name %s ?
mailboxes != ((void *)0)
WHERE 1=1 
 AND mbx.name %s ? 
Schema check successful
dburi: %s
%s://
?user=%s
&password=%s
&charset=%s
&unix-socket=%s
db at dburi: [%s]
database has gone away
enabling
disabling
usermap
%s usermap lookups
physmessage_id != ((void *)0)
quotum is already up to date
notify address [%s]
reply_body [%s]
ip [%s] logged
AND msg.deleted_flag = 1
mailbox_size != ((void *)0)
request for [%ld] lines
mailbox_idnr != ((void *)0)
finding user with name [%s].
user [%s] not found.
error listing mailboxes
found [%d] mailboxes for [%s]
read-only mailbox
errmsg
#Users
#Public
could not create chunks
Server ran out of memory
inbox
Preparing mailbox [%s]
__public__
Public folder not found.
Everything is peachy keen
 AND name %s ? 
v.headervalue
messageid!=NULL
UPDATE %smessages SET 
set %s
%s%s=1
%s%s=0
owner_id != ((void *)0)
error emptying mailbox [%lu]
set == 0 || set == 1
frag
inet:%s:%s
client on inet socket [%s]
access denied
bestscore [%d]
best match: [%s] -> [%s]
[%s] maps to [%s]
 OR m.%s=1
 OR lower(k.keyword)=lower(?)
user_idnr
user_idnr != ((void *)0)
password length is insane
UNUSED
user_idnr > 0
user_idnr [%lu]
shadow entry exists and valid
Mailbox already exists
General error while creating
Database error while creating
lrswipkxteacd
Folder created
mailbox [%s] found
salt   : %s
hash   : %s
crypt(): %s
SELECT id FROM %smimeparts
message id=%lu is inserted
envelope
partlists
pbsp
referencesfield
replycache
sievescripts
subscription
\Seen
\Answered
\Deleted
\Flagged
\Draft
\Recent
seen_flag
answered_flag
deleted_flag
flagged_flag
draft_flag
recent_flag
db_append_msg
db_rehash_store
db_message_set_seq
db_mailbox_seq_update
db_replycache_validate
db_replycache_unregister
db_replycache_register
db_user_find_create
db_user_find_create
db_user_rename
db_user_delete
db_user_create
db_user_create
db_user_exists
db_user_exists
db_user_security_trigger
db_user_security_trigger
db_user_delete_messages
db_user_validate
db_user_set_security_password
db_user_set_security_action
db_user_get_security_action
db_user_set_active
db_user_active
db_usermap_resolve
char2date_str
date2char_str
db_user_is_mailbox_owner
db_get_mailbox_owner
db_get_mailbox_owner
db_acl_get_identifier
db_acl_has_acl
db_acl_set_right
db_acl_set_right
db_set_msgflag
db_get_msgflag
db_subscribe
db_setmailboxname
db_getmailboxname
dm_quota_user_validate
message_get_size
db_copymsg
db_mailbox_has_message_id
db_movemsg
db_noinferiors
db_isselectable
db_listmailboxchildren
db_find_create_mailbox
db_find_create_mailbox
db_createmailbox
db_createmailbox
db_mailbox_create_with_parents
db_mailbox_create_with_parents
db_imap_split_mailbox
db_imap_split_mailbox
mailbox_is_writable
mailboxes_by_regex
mailboxes_by_regex
db_findmailbox_by_regex
db_findmailbox_owner
db_findmailbox_owner
db_findmailbox
db_findmailbox
db_update_pop
db_get_message_lines
db_delete_mailbox
db_get_mailbox_size
db_icheck_envelope
db_set_envelope
db_icheck_headercache
db_set_headercache
db_update_rfcsize
db_icheck_rfcsize
db_icheck_headervalues
db_icheck_headernames
db_icheck_mimeparts
db_icheck_partlists
db_icheck_physmessages
db_empty_mailbox
db_log_ip
db_get_useridnr
db_get_reply_body
db_get_notify_address
dm_quota_rebuild
dm_quota_rebuild_user
user_idnr_is_delivery_user_idnr
dm_quota_user_get
dm_quota_user_get
db_get_physmessage_id
db_get_physmessage_id
db_use_usermap
check_upgrade_step
db_check_version
db_get_sql
db_rollback_transaction
db_commit_transaction
db_begin_transaction
db_get_pk
db_insert_result
db_stmt_set_blob
db_stmt_set_u64
db_stmt_set_int
db_stmt_set_str
db_stmt_prepare
db_update
db_query
db_exec
log_query_time
db_con_clear
db_con_close
dm_db_ping
db_con_get
db_connect
.Adm_sievescript.c
scriptname
sievescript
SELECT script FROM %ssievescripts WHERE owner_idnr = ? AND name = ?
SELECT name FROM %ssievescripts WHERE owner_idnr = ? AND active = 1 AND name = ?
SELECT name FROM %ssievescripts WHERE owner_idnr = ? AND active = 1
SELECT name from %ssievescripts where owner_idnr = %lu and active = 1
SELECT name,active FROM %ssievescripts WHERE owner_idnr = %lu
SELECT active FROM %ssievescripts WHERE owner_idnr = ? AND name = ?
DELETE FROM %ssievescripts WHERE owner_idnr = ? AND name = ?
UPDATE %ssievescripts SET name = ?, active = ? WHERE owner_idnr = ? AND name = ?
SELECT COUNT(*) FROM %ssievescripts WHERE owner_idnr = ? AND name = ?
INSERT INTO %ssievescripts (owner_idnr, name, script, active) VALUES (?,?,?,1)
UPDATE %ssievescripts set active = 0 where owner_idnr = ? and name = ?
UPDATE %ssievescripts SET active = 0 WHERE owner_idnr = ? 
UPDATE %ssievescripts SET active = 1 WHERE owner_idnr = ? AND name = ?
checking %lu sievescript quota with %lu
setting %lu sievescript quota with %lu
getting sievescript quota for %lu
dm_sievescript_quota_get
dm_sievescript_quota_set
dm_sievescript_quota_check
dm_sievescript_delete
dm_sievescript_delete
dm_sievescript_activate
dm_sievescript_activate
dm_sievescript_deactivate
dm_sievescript_deactivate
dm_sievescript_add
dm_sievescript_add
dm_sievescript_rename
dm_sievescript_rename
dm_sievescript_list
dm_sievescript_get
dm_sievescript_get
dm_sievescript_isactive_byname
dm_sievescript_getbyname
dm_sievescript_getbyname
lookup_flag
read_flag
write_flag
insert_flag
post_flag
create_flag
delete_flag
expunge_flag
administer_flag
dm_acl.c
rightsstring
error replacing ACL
before looping identifiers!
acl_string size = %zd
%s %s 
"" l r s w i p k x t e a c d
error getting rightsstring.
error wrong acl character. This error should have been caught earlier!
mailbox [%lu] is owned by user [%lu], giving all rights
replacing rights for user [%lu], mailbox [%lu] to %s
error when getting identifier list for mailbox [%lu].
error querying ownership of mailbox
error getting username for user [%lu]
error finding user id for user with name [%s]
error checking if user is owner of a mailbox
error allocating memory for rightsstring
acl_myrights
acl_listrights
acl_get_rightsstring
acl_get_rightsstring
acl_get_rightsstring_identifier
acl_get_acl
acl_replace_rights
acl_get_right_from_char
lrswipkxteacd
could not set gid to %s
misc
could not set uid to %s
%lu:%ld
created: %s
error getting time from OS
error, mailbox_name is NULL.
%s%s%s%s%s
Mailbox not found
returning [%s]
(fwd)
[fwd:
dm_misc.c
(int)serverid >= 0
%ld%06ld%02u
unix:
inet:
clientsock
fail
%d-%b-%Y %H:%M:%S
%s +0000
sqldate
invalid size IMAP date [%s]
%d-%b-%Y
error parsing IMAP date %s
%Y-%m-%d 00:00:00
%02d
a && b
bare LF.
analyse [%s]
name: %s
value: %s
clean: %s
plist from content-type: %s
plist from content-type: NIL
Content-Disposition
{%lu}
no type information
parse [%s/%s]
Content-Type
Content-Description
"7BIT"
Content-MD5
Content-Language
Content-Location
(NIL NIL "%s" NIL)
(NIL)
(NIL NIL NIL NIL)
NIL NIL
ia!=NULL
partspec
[%s] [%s] -> [%s]
Sender
In-Reply-to
@(none)
<%s>
no type for object!
error getting content_type
message type: [%s/%s]
hash_algorithm
unhandled hash algorithm
object
HEADER
TEXT
MIME
[%lu:%s]->[%s]
Username not found, returning mbox [%s]
Copying out username [%s] of length [%zu]
Missing part or all of our bounding points
Found [%s] of length [%zu] between '%c' and '%c' so next skip [%zu]
clientsock [%s] sock_allow[%s], sock_deny [%s] => [%d]
(%p) (%p): a[%d] [%s] b[%d] -> a[%d]
recursing into address group [%s].
handling a standard address [%s] [%s].
parse [%d] parts for [%s/%s] with boundary [%s]
hash algorithm not supported. Using SHA1.
dm_base64_decode
get_crlf_encoded_opt
dm_get_hash_for_string
imap_cleanup_address
imap_get_partspec
imap_get_logical_part
imap_get_envelope
_structure_basic
imap_append_hash_as_string
_structure_part_handle_part
_structure_part_multipart
imap_get_structure
dbmail_imap_append_alist_as_plist
dbmail_imap_plist_collapse
discard_client_input
g_tree_merge
date_imap2sql
date_imap2sql
check_msg_set
dm_sock_compare
dm_sock_compare
dm_getguid
find_bounded
mailbox_remove_namespace
mailbox_add_namespace
create_current_timestring
create_unique_id
drop_privileges
abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-=/ _.&,+@()[]'#
Error closing pidfile: [%s].
pidfile
Error unlinking pidfile [%s]: [%s].
open pidfile [%s] failed: [%s]
chown pidfile [%s] failed: [%s]
File [%s] exists and process id [%d] is running.
pidfile_remove
pidfile_create
s != NULL
dm_md5_base64
dm_md5
dm_tiger
dm_sha1
dm_sha256
dm_sha512
dm_whirlpool
0123456789abcdef
closing
iconv
DEFAULT_MSG_ENCODING
UTF-8
iconv failure
key "ENCODING" section "DBMAIL" var ic->db_charset value [%s]
key "DEFAULT_MSG_ENCODING" section "DBMAIL" var ic->msg_charset value [%s]
Initialize DB encoding surface [UTF-8..%s]
Initialize DB decoding surface [%s..UTF-8]
Initialize default MSG decoding surface [%s..UTF-8]
unable to decode headervalue [%s] using charset [%s]
dbmail_iconv_decode_field
dbmail_iconv_close
dbmail_iconv_once
dm_dsn.c
class
detail
dsnuser initialized
dsnuser freed
username not found [%s]
delivering [%s] as an alias.
could not find [%s] at all.
Cryptographic failure
Message integrity failure
Media not supported
Conversion failed
Invalid command
Syntax error
Too many recipients
Invalid command arguments
Wrong protocol version
No answer from host
Bad connection
Routing server failure
Unable to route
Network congestion
Routing loop detected
Delivery time expired
Mail system full
Message too big for system
Mailbox full
Other address status
Mailbox has moved
Bad sender's system address
Address Status
Mailbox Status
Mail System Status
Network and Routing Status
Mail Delivery Protocol Status
Security or Policy Status
Success
Persistent Transient Failure
Permanent Failure
Invalid dsn code received [%d][%d][%d]
checking if [%lu] is a valid useridnr.
useridnr [%lu] temporary lookup failure.
useridnr [%lu] does not exist.
delivery [%lu] directly to a useridnr.
checking if [%s] is a valid username, alias, or catchall.
user [%s] found total of [%d] aliases
added user [%s] id [%lu] to delivery list
delivering [%s] as a username.
delivering [%s] as a username with mailbox.
user [%s] checking for domain forwards.
domain [%s] checking for domain forwards
user [%s] checking for userpart forwards.
userpart [%s] checking for userpart forwards
userpart [%s] found total of [%d] aliases
this delivery had neither useridnr nor address.
delivering [%s] as an alias with mailbox.
domain [%s] found total of [%d] aliases
delivering [%s] as a domain catchall.
delivering [%s] as a userpart catchall.
Other or undefined security status
Delivery not authorized, message refused
Mailing list expansion prohibited
Security conversion required but not possible
Security features not supported
Cryptographic algorithm not supported
Other or undefined media error
Conversion required and prohibited
Conversion required but not supported
Conversion with loss performed
Other or undefined protocol status
Other or undefined network or routing status
Other or undefined mail system status
System not accepting network messages
System not capable of selected features
Other or undefined mailbox status
Mailbox disabled, not accepting messages
Message length exceeds administrative limit
Mailing list expansion problem
Bad destination mailbox address
Bad destination system address
Bad destination mailbox address syntax
Destination mailbox address ambiguous
Destination mailbox address valid
Bad sender's mailbox address syntax
Message Content or Message Media Status
address_is_userpart_catchall
address_is_domain_catchall
address_is_username_mailbox
address_is_username
address_has_alias_mailbox
address_has_alias
dsnuser_resolve
dsnuser_free
dsnuser_init
dsn_tostring
dsn_tostring
dm_sset.c
size > 0
Sset_new
dm_string.c
S->str
pos <= S->used
pos + len <= S->used
p_string_erase
p_string_append_len
p_string_new
no error
function argument is null
function argument is invalid
invalid mpool pointer
could not open /dev/zero
no memory available
problems with mmap
invalid memory address
invalid internal block status
invalid internal free address
system alloc function failed
invalid error code
mpool structure was overwritten
could not get system page-size
error processing requested size
allocation exceeds pool max size
memory lower bounds overwritten
memory block not found in pool
memory address has already been freed
sbrk did not return contiguous memory
no available pages left in pool
user pointer admin space overwritten
DM_POOL
pthread_mutex_init failed
pthread_mutex_lock failed
pthread_mutex_unlock failed
mempool
dm_mempool.c
error == 1
[%p] page_size: %u num: %lu user: %lu max: %lu tot: %lu
mempool_close
mempool_stats
mempool_push
mempool_push
mempool_resize
mempool_resize
mempool_pop
server.c
evbase
signal handler placed
reopening log files
/dev/null
freopen failed on stdin [%s]
%d:%s
getpeername::error [%s]
getsockname::error [%s]
connection accepted
data[%p], user_data[%p]
setsockopt::error [%s]
bind::error [%s]
listen::error [%s]
getaddrinfo error [%d] %s
F_GETFL
F_SETFL
not 
Enabling
Disabling
max_db_connections [%d]
SOCKET
TLS_PORT
2000
HTTP
41380
binding to PORT [%s]
binding to SSL_PORT [%s]
BINDIP
127.0.0.1
BACKLOG
0.0.0.0
binding to IP [%s]
%s backlog [%d]
RESOLVE_IP
%sresolving client IP
_BEFORE_SMTP
%s %s-before-SMTP
authlog
%s %s Authentication logging
EFFECTIVE_USER
effective user shall be [%s]
EFFECTIVE_GROUP
effective group shall be [%s]
TLS_CAFILE
CA file is set to [%s]
TLS_CERT
TLS_KEY
Key file is set to [%s]
TLS_CIPHERS
Cipher string is set to [%s]
self-pipe setup failed
[%p] [%p]
chdir / failed
sid: [%d]
disconnecting all
could not connect to database
starting httpd cli server...
connections closed
starting HTTP service [%s:%d]
started HTTP service [%p]
chmod [%s] failed: [%s]
unable to drop privileges
dispatching event loop...
*** %s ***
checking command line options
dbmail 3.2.3
This is %s
%s: unrecognized option: %s
vVhqnDf:p:s:
%s: unrecognized options: 
exiting cli server
leaving main loop
g_thread_pool creation failed [%s]
could not get numeric hostname
creating %s socket [%d] on [%s:%s]
could not create a socket of family [%d], socktype[%d], protocol [%d]
no value for SOCKET in config file
no value for PORT or TLS_PORT in config file. Using defaults
no value for BINDIP in config file
no value for BACKLOG in config file. Using default value [%d]
value for BACKLOG is invalid: [%d]
no value for RESOLVE_IP in config file
no value for %s_BEFORE_SMTP  in config file
no value for AUTHLOG in config file
no value for EFFECTIVE_USER in config file
no value for EFFECTIVE_GROUP in config file
Certificate file is set to [%s]
threads unused %u/%d limits %u/%d queued jobs %d
g_thread_pool_push failed [%s]
could not connect to authentication
starting main service loop for [%s]
Failed to convert port spec [%s]
create socket [%s] backlog [%d]
Adding event for plain socket [%d] [%d/%d]
Adding event for ssl socket [%d] [%d/%d]
See the man page for more info.
Common options for all DBMail daemons:
     -f file   specify an alternative config file
     -p file   specify an alternative runtime pidfile
     -n        stdin/stdout mode
     -D        foreground mode
     -v        verbose logging to syslog and stderr
     -V        show the version
     -h        show this help message
Copyright (C) 1999-2004 IC & S, dbmail@ic-s.nl
Copyright (C) 2001-2007 Aaron Stone, aaron@serendipity.cx
Copyright (C) 2004-2013 NFG Net Facilities Group BV, support@nfg.nl
Please see the AUTHORS and THANKS files for additional contributors.
This program is free software; you can redistribute it and/or 
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of
the License, or (at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
%s: -p requires a filename argument
%s: -f requires a filename argument
server_mainloop
server_config_load
server_getopt
create_inet_socket
dm_bind_and_listen
create_unix_socket
_sock_cb
server_run
server_run
disconnect_all
reopen_logs_level
server_daemonize
server_daemonize
server_set_sighandler
server_set_sighandler
dm_thread_dispatch
server_setup
server_setup
server_start_cli
StartCliServer
dm_thread_data_push
dm_thread_data_push
dm_queue_heartbeat
<%s@%s>
clientsession.c
clientsession
client_state ERROR
reset timeout [%d]
socket_write_cb
client_session_read
client_session_bailout
client_session_bailout
client_session_new
clientbase
[%p] %d %s
[%p] %d %d, %p
[%p] fd [%d] %s[%d], %p
[%p] [%d] [%d]
[%p] [%d] [%d], [%d]
ssl_ragged_eof
[%p] S > [%ld/%lu:%s]
[%p] ssl_state [%d]
ssl already initialized
[%p] tls_setup failed
[%p] SSL_accept hard failure
Lookup failed
getnameinfo::error [%s]
getnameinfo:error [%s]
[%p] [%ld]
clientbase.c
buffer
insane line-length [%lu]
[%p] C < [%lu:%s]
client
UPDATE %sauthlog SET logout_time=%s, status=?, bytes_rx=?, bytes_tx=? WHERE id=?
incoming connection on [%s:%s] from [%s:%s (%s)]
incoming connection on [%s:%s] from [%s:%s]
INSERT INTO %sauthlog (userid, service, login_time, logout_time, src_ip, src_port, dst_ip, dst_port, status) VALUES (?, ?, %s, %s, ?, ?, ?, ?, ?) %s
closing clientbase [%p] [%d] [%d]
ci_authlog_close
ci_close
ci_close
ci_authlog_init
ci_readln
ci_readln
ci_read
ci_read_cb
ci_write
ci_starttls
ci_uncork
ci_cork
dm_tls_error
client_error_cb
client_init
Error loading CA file [%s]: %s
Error loading key file [%s]: %s
Mismatch between certificate file [%s] and key file [%s]: %s
Error loading certificate file [%s]: %s
Unable to set any ciphers in list [%s]: %s
Error creating TLS connection: %s
Error linking SSL structure to file descriptor: %s
tls_setup
tls_load_ciphers
tls_load_certs
create
NO mailbox doesn't exists
NO permission denied
NO delete failed
quota
Http
edit
edit user: [%s]
delete
delete user: [%s]
{"users": {
    "%lu":{"name":"%s"}
User not found
{"mailboxes": {
Server error
Not found
mailbox id [%lu]
{"messages": {
    "%lu":{"size":%lu}
view
message/rfc822; charset=utf-8
headers
text/plain; charset=utf-8
header: [%s]
NO cannot delete special mailbox INBOX
create user: [%s] password: [%s] encoding [%s] quota [%s]
application/json; charset=utf-8
    "%lu":{"name":"%s","exists":%u}
    "%lu":{"name":"%s","exists":%d}
Http_getMessages
Http_getMailboxes
Http_getUsers
GET: [%s]->[%s]
Request
POST: [%s]->[%s]
input_header: [%s: %s]
R->controller: [%s]
R->id: [%s]
R->method: [%s]
R->arg: [%s]
R->uri: [%s]
Basic realm="%s"
WWW-Authenticate
UNAUTHORIZED
realm
Authorization
No authorization header
Basic 
admin
auth [%s]
Authorization failed
close
Content-type
text/html; charset=utf-8
Host
/users/
http://%s%s
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
 "http://www.w3.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML>
  <HEAD>
    <TITLE>Error</TITLE>
    <META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=ISO-8859-1">
  </HEAD>
  <BODY><H1>401 Unauthorised.</H1></BODY>
</HTML>
Authorization [%lu][%s] <-> [%s]
<HTML><HEAD>
<TITLE>%d %s</TITLE>
</HEAD><BODY>
<H1>%d %s</H1>
</BODY></HTML>
Request_basic_auth
Request_parse_postvars
Request_parse_getvars
Request_new
255.255.255.255
dm_cidr.c
str != ((void *)0)
cidr
struct cidrfilter {
	sock_str: %s;
	socket->sin_addr: %s;
	socket->sin_port: %d;
	mask: %d;
cidr_new
cidr_new
auth_ldap
auth
LDAP
using default auth_sql
library_directory
/usr/lib64/dbmail
library_directory is [%s]
/src/modules/.libs
looking for %s as %s
cannot load %s
auth_disconnect
cannot find function %s
auth_user_exists
auth_get_userid
auth_check_userid
auth_get_known_users
auth_get_known_aliases
auth_getclientid
auth_getmaxmailsize
auth_getencryption
auth_check_user_ext
auth_adduser
auth_delete_user
auth_change_username
auth_change_password
auth_change_clientid
auth_change_mailboxsize
auth_validate
auth_md5_validate
auth_get_user_aliases
auth_get_aliases_ext
auth_addalias
auth_addalias_ext
auth_removealias
auth_removealias_ext
auth_requires_shadow_user
auth_connect
loadable modules unsupported on this platform
no value for library_directory, using default [%s]
/builddir/build/BUILD/dbmail-3.2.3
could not load auth module - turn up debug level for details
auth_load_driver
cannot find function: %s: Did you enable SIEVE sorting in the DELIVERY section of dbmail.conf but forget to build the Sieve loadable module?
could not load sort module - turn up debug level for details
cannot allocate memory
sort_sieve
sort_validate
sort_free_result
sort_listextensions
sort_get_cancelkeep
sort_get_reject
sort_get_errormsg
sort_get_error
sort_get_mailbox
sort_process
Error loading sort driver
sort_listextensions
sort_validate
sort_process
sort_load_driver
;*3$"
........
libdbmail.so.0.0.0.debug
7zXZ
`hV]O
91JeP
_'%[
.Ve"q
Qh#C
He1vj
4X^|
0	%(
{j2Z
F.A*
Op|?X
n-r'
$+;8
?+L_
,*))
$'G>
hz`'
!]sl
nk@d 
wd'5
kt9V
!mJ_
^&v7d
[hAX
A\. 4
fF>w!
s]%}sU0
h+!E
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.data
.bss
.gnu_debuglink
.gnu_debugdata
