vyzr{
O@IA
cHRF
m(!6L
f4l|gy
SgMV
E#Cz
*}aoKr
y3hmZ
qa7s
tj-8
'$IV
/1CE
I=n-
 kKr
E#?*
__gmon_start__
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
_ZN24bx_simulator_interface_c16get_param_stringEPKcP10bx_param_c
_ZN24bx_simulator_interface_c13is_pci_deviceEPKc
_ZN24bx_simulator_interface_c14get_bochs_rootEv
_ZN18bx_nonvga_device_c11redraw_areaEjjjj
_ZN18bx_nonvga_device_c15refresh_displayEPvj
_ZN16bx_svga_cirrus_c23cirrus_mem_read_handlerEmjPvS0_
_ZN16bx_svga_cirrus_c24cirrus_mem_write_handlerEmjPvS0_
_ZN16bx_svga_cirrus_c16pci_read_handlerEhj
_ZN12logfunctions6ldebugEPKcz
_ZThn48_N16bx_svga_cirrus_c16pci_read_handlerEhj
_ZN16bx_svga_cirrus_c30svga_colorexpand_transp_memsrcEv
__stack_chk_fail
_ZN16bx_svga_cirrus_c17pci_write_handlerEhjj
bx_devices
_ZN12bx_devices_c16pci_set_base_memEPvPFjmjS0_S0_ES2_PjPhj
_ZN12logfunctions4infoEPKcz
_ZThn48_N16bx_svga_cirrus_c17pci_write_handlerEhjj
_ZN16bx_svga_cirrus_c14register_stateEv
_Znwm
_ZN9bx_list_cC1EP10bx_param_cPKcS3_
_ZN12bx_vgacore_c14register_stateEP9bx_list_c
_ZN9bx_list_cC1EP10bx_param_cPKc
_ZN15bx_shadow_num_cC1EP10bx_param_cPKcPhihh
__sprintf_chk
_ZN15bx_shadow_num_cC1EP10bx_param_cPKcPjihh
_ZN16bx_shadow_bool_cC1EP10bx_param_cPKcPjh
_ZN15bx_shadow_num_cC1EP10bx_param_cPKcPtihh
_ZN20bx_pci_device_stub_c18register_pci_stateEP9bx_list_c
_ZdlPvm
_Unwind_Resume
__gxx_personality_v0
_ZN16bx_svga_cirrus_cD2Ev
_ZTV16bx_svga_cirrus_c
_ZN12bx_vgacore_cD2Ev
_ZThn48_N16bx_svga_cirrus_cD1Ev
_ZN16bx_svga_cirrus_cD1Ev
_ZN16bx_svga_cirrus_cD0Ev
_ZThn48_N16bx_svga_cirrus_cD0Ev
libsvga_cirrus_LTX_plugin_fini
_ZN16bx_svga_cirrus_cC2Ev
_ZN12bx_vgacore_cC2Ev
_ZN16bx_svga_cirrus_cC1Ev
libsvga_cirrus_LTX_plugin_init
pluginRegisterDeviceDevmodel
_ZN16bx_svga_cirrus_c24mem_write_mode4and5_8bppEhjh
_ZN16bx_svga_cirrus_c25mem_write_mode4and5_16bppEhjh
_ZN16bx_svga_cirrus_c15svga_modeupdateEv
_ZN12logfunctions5panicEPKcz
_ZN16bx_svga_cirrus_c20draw_hardware_cursorEjjP18bx_svga_tileinfo_t
bx_gui
_ZN12logfunctions5errorEPKcz
_ZN16bx_svga_cirrus_c11svga_updateEv
_ZN12bx_vgacore_c6updateEv
_ZN8bx_gui_c25graphics_tile_info_commonEP18bx_svga_tileinfo_t
memcpy
_ZN16bx_svga_cirrus_c18svga_timer_handlerEPv
_ZN16bx_svga_cirrus_c18svga_param_handlerEP10bx_param_cil
bx_virt_timer
_ZN15bx_virt_timer_c14activate_timerEjjj
_ZN16bx_svga_cirrus_c15refresh_displayEPvj
_ZN16bx_svga_cirrus_c15update_bank_ptrEh
_ZN16bx_svga_cirrus_c14svga_read_crtcEjj
_ZN12bx_vgacore_c12read_handlerEPvjj
_ZN16bx_svga_cirrus_c15svga_write_crtcEjjh
_ZN12bx_vgacore_c13write_handlerEPvjjj
_ZN16bx_svga_cirrus_c19svga_read_sequencerEjj
_ZN16bx_svga_cirrus_c20svga_write_sequencerEjjh
_ZN16bx_svga_cirrus_c17svga_read_controlEjj
_ZN16bx_svga_cirrus_c17svga_read_handlerEPvjj
_ZN16bx_svga_cirrus_c18svga_mmio_vga_readEj
_ZN16bx_svga_cirrus_c18svga_mmio_blt_readEj
_ZN16bx_svga_cirrus_c21svga_init_pcihandlersEv
_ZN12bx_devices_c21register_pci_handlersEP20bx_pci_device_stub_cPhPKcS4_
_ZN20bx_pci_device_stub_c12load_pci_romEPKc
_ZN16bx_svga_cirrus_c17svga_reset_bitbltEv
_ZN16bx_svga_cirrus_c17svga_init_membersEv
memset
_Znam
_ZN16bx_svga_cirrus_c18init_vga_extensionEv
_ZN12logfunctions3putEPKcS1_
_ZN16bx_svga_cirrus_c18svga_write_handlerEPvjjj
_ZN12bx_vgacore_c15init_iohandlersEPFjPvjjEPFvS0_jjjE
_ZN12bx_vgacore_c16init_systemtimerEPFvPvEPFlP10bx_param_cilE
_ZN16bx_svga_cirrus_c5resetEj
_ZN16bx_svga_cirrus_c28svga_setup_bitblt_cputovideoEjj
_ZN16bx_svga_cirrus_c23svga_patterncopy_memsrcEv
_ZN16bx_svga_cirrus_c24svga_simplebitblt_memsrcEv
_ZN16bx_svga_cirrus_c28svga_setup_bitblt_videotocpuEjj
_ZN16bx_svga_cirrus_c30svga_setup_bitblt_videotovideoEjj
_ZN16bx_svga_cirrus_c17svga_simplebitbltEv
_ZN16bx_svga_cirrus_c16svga_patterncopyEv
_ZN16bx_svga_cirrus_c18svga_colorexpand_8EPhPKhi
_ZN16bx_svga_cirrus_c19svga_colorexpand_16EPhPKhi
_ZN16bx_svga_cirrus_c19svga_colorexpand_24EPhPKhi
_ZN16bx_svga_cirrus_c19svga_colorexpand_32EPhPKhi
_ZN16bx_svga_cirrus_c16svga_colorexpandEPhPKhii
_ZN16bx_svga_cirrus_c14svga_solidfillEv
_ZN16bx_svga_cirrus_c21svga_asyncbitblt_nextEv
memmove
_ZN16bx_svga_cirrus_c24svga_get_fwd_rop_handlerEh
_ZN16bx_svga_cirrus_c25svga_get_bkwd_rop_handlerEh
_ZN16bx_svga_cirrus_c11svga_bitbltEv
_ZN16bx_svga_cirrus_c18svga_write_controlEjjh
_ZN16bx_svga_cirrus_c19svga_mmio_vga_writeEjh
_ZN16bx_svga_cirrus_c19svga_mmio_blt_writeEjh
_ZN16bx_svga_cirrus_c19after_restore_stateEv
_ZN8bx_gui_c21palette_change_commonEhhhh
_ZN12bx_vgacore_c19after_restore_stateEv
_ZN16bx_svga_cirrus_c11redraw_areaEjjjj
_ZN12bx_vgacore_c11redraw_areaEjjjj
_ZN16bx_svga_cirrus_c8mem_readEm
_ZN12bx_vgacore_c8mem_readEm
_ZN16bx_svga_cirrus_c9mem_writeEmh
_ZN12bx_vgacore_c9mem_writeEmh
_ZN16bx_svga_cirrus_c17get_text_snapshotEPPhPjS2_
_ZN12bx_vgacore_c17get_text_snapshotEPPhPjS2_
_ZTS16bx_svga_cirrus_c
_ZTI16bx_svga_cirrus_c
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTI12bx_vgacore_c
_ZN12bx_vgacore_c4initEv
_ZN12bx_vgacore_c12set_overrideEjPv
_ZN14bx_param_num_c3getEv
_ZN24bx_simulator_interface_c13get_param_numEPKcP10bx_param_c
_ZN13bx_devmodel_c4initEv
_ZN13bx_devmodel_c5resetEj
_ZN13bx_devmodel_c14register_stateEv
_ZN13bx_devmodel_c19after_restore_stateEv
_ZN20bx_pci_device_stub_c16pci_read_handlerEhj
_ZN20bx_pci_device_stub_c17pci_write_handlerEhjj
_ZN12bx_vgacore_c5resetEj
_ZN12bx_vgacore_c15refresh_displayEPvj
_ZN12bx_vgacore_c18init_vga_extensionEv
_ZN12bx_vgacore_c16mem_read_handlerEmjPvS0_
_ZN12bx_vgacore_c17mem_write_handlerEmjPvS0_
_ZN14bx_cmos_stub_c7get_regEj
pluginlog
_ZN14bx_cmos_stub_c7set_regEjj
_ZN13bx_devmodel_cD2Ev
_ZTV13bx_devmodel_c
_ZN12logfunctionsD2Ev
_ZN13bx_devmodel_cD1Ev
_ZN13bx_devmodel_cD0Ev
_ZN20bx_pci_device_stub_cD2Ev
_ZTV20bx_pci_device_stub_c
_ZdaPv
_ZN20bx_pci_device_stub_cD1Ev
_ZN20bx_pci_device_stub_cD0Ev
_ZN16bx_shadow_data_cC1EP10bx_param_cPKcPhj
_ZN8bx_gui_c17set_text_charbyteEth
_ZN15bx_virt_timer_c16deactivate_timerEj
_ZTV12bx_vgacore_c
_ZN14bx_param_num_c11set_handlerEPFlP10bx_param_cilE
_ZThn48_N12bx_vgacore_cD1Ev
_ZN12bx_vgacore_cD1Ev
_ZN12bx_vgacore_cD0Ev
_ZThn48_N12bx_vgacore_cD0Ev
_ZN12logfunctionsC2Ev
_ZN12bx_vgacore_cC1Ev
_ZN12bx_vgacore_c17init_standard_vgaEv
_ZN8BX_MEM_C22registerMemoryHandlersEPvPFjmjS0_S0_ES2_PFPhmjS0_Emm
_ZN12bx_vgacore_c8init_guiEv
strlen
_ZN8bx_gui_c4initEiPPcjjjj
_ZN17bx_param_string_c3getEPci
strtok
isspace
free
strdup
_ZN8BX_MEM_C8load_ROMEPKcmh
pluginRegisterIOReadHandler
pluginRegisterIOWriteHandler
_ZN15bx_virt_timer_c14register_timerEPvPFvS0_EjjjPKc
_ZN12bx_vgacore_c27determine_screen_dimensionsEPjS0_
_ZN12bx_vgacore_c24calculate_retrace_timingEv
_ZN12bx_vgacore_c4readEjj
bx_pc_system
_ZN14bx_pc_system_c9time_usecEv
_ZN12bx_vgacore_c5writeEjjjj
_ZN8bx_gui_c16set_text_charmapEPh
_ZN12bx_vgacore_c13get_vga_pixelEttttjPPh
_ZN12bx_vgacore_c11skip_updateEv
_ZN8bx_gui_c27graphics_tile_update_commonEPhjj
_ZN12bx_vgacore_c5timerEv
_ZN12bx_vgacore_c13timer_handlerEPv
_ZTS12logfunctions
_ZTI12logfunctions
_ZTVN10__cxxabiv117__class_type_infoE
_ZTS13bx_devmodel_c
_ZTI13bx_devmodel_c
_ZTVN10__cxxabiv121__vmi_class_type_infoE
_ZTS20bx_pci_device_stub_c
_ZTI20bx_pci_device_stub_c
_ZTS13bx_vga_stub_c
_ZTI13bx_vga_stub_c
_ZTS12bx_vgacore_c
libstdc++.so.6
libm.so.6
libc.so.6
libgcc_s.so.1
_edata
__bss_start
_end
libbx_svga_cirrus.so.0
GCC_3.0
CXXABI_1.3
CXXABI_1.3.9
GLIBCXX_3.4
GLIBC_2.14
GLIBC_2.3.4
GLIBC_2.4
GLIBC_2.2.5
%".!
%".!
%*.!
%*.!
%*.!
%*.!
%2.!
%2.!
%2.!
%B.!
%B.!
%J.!
%R.!
%R.!
%R.!
%R.!
%R.!
%R.!
%R.!
%R.!
%R.!
%Z.!
%Z.!
%Z.!
%Z.!
%j.!
%j.!
%j.!
%j.!
%j.!
%r.!
=y.!
5r.!
=).!
=g+!
ATH)
ATH)
=Q-!
~BSLc
~GSLc
~BSLc
~DSLc
~BSLc
~BSLc
~GSLc
~JSLc
~GSLc
~DSLc
~DSLc
~GSLc
<)E9
<)E9
<)E9
<)E9
<)E9
<)E9
<)E9
<)E9
<)E9
<)E9
<)E9
<)E9
StSL
AWAVH
AUATUSH
u2Hc
([]A\A]A^A_
VUUU
AWAVD
AUATA
vyE1
[]A\A]A^A_
[]A\A]A^A_1
AXAY
AWAVAUATSH
@@H;
[A\A]A^A_]
A]A^
A[A\H
AYAZ
_AXH
A[A\
AYAZ
A\A]
AYAZ
A]A^
AZA[
AXAY
euSUSH
AWAVAUATUSH
[]A\A]A^A_
AWAVAUATUSH
D$X1
T$ D
L$PL
D$TH
D$(H
T$ H
D$8H
L$ I	
K H!
L$HI	
H#t$
H#D$ H	
H#D$HH	
T$ A
T$0L
T$@9
d$(D
D$0I
L$(H
D$(E
D$0H
9D$ t/H
D$XdH3
h[]A\A]A^A_
D$8H
AWAVAUATUSH
[]A\A]A^A_
T$b1
T$bH
t$ H
t$\H
t$(H
t$XH
L$0L
T$HE1
L$\L
\$@H
T$XE1
T$`9
D9T$X
T$bI
D9|$\
\$@D
t$HH
t$(H
t$\H
t$0H
t$XH
D9d$
T$ 9\$
t$(H
t$\H
t$0H
t$XH
t$8D
t$H9
D9d$
T$ 9\$
t$0H
t$\H
t$8H
t$XH
t$H9
T$(9\$
t$0H
t$\H
t$8H
t$XH
\$(D
t$H9
T$(9\$
t$0H
t$\H
t$8H
t$XH
\$(1
t$H9
D9d$
T$(9\$
D$8H
L$@H
T$\L
|$XE1
L$dH
L$eL
#T$pG
#L$xH
|$`9
D9L$X
T$bL
l$ A
D9t$\
L$XD
t$H9
D$`A
L$@A
D$\A
\$LL
|$XE1
L$fI
L$eA
#L$x
#|$p	
|$`9
D9L$X
T$bH
\$ A
D9l$\
\$LD
t$H9
D$`A
L$@A
T$\A
\$LL
|$XE1
L$fI
L$eA
#L$x
#|$p	
|$`9
D9L$X
T$bH
\$ A
D9l$\
\$LD
t$H9
#|$p	
D$`A
D$0H
L$8D
T$\E1
L$XE1
L$dA
L$e#T$p
D#L$x
L$fD	
|$`9
D9T$X
T$bL
D9\$\
L$XD
t$H9
L$`A
L$8L
D$0D
T$HH
L$\E1
T$XE1
L$dA
L$e#T$p
D#L$x
L$fD	
|$`9
D9T$X
T$bL
D9\$\
|$HH
L$XD
L$`A
L$e#T$p
@8H;
S	Hc
AUATA
[]A\A]
[]A\A]H
[]A\A]
taw1
[]A\A]A^
]A\A]A^
@@H;
ATUSH
@@H;
[]A\
[]A\
@@H;
6~=D
AUATI
]A\A]
]A\A]
]A\A]
[]A\A]H
]A\A]
AWAVAUATUSH
HcD$
D$(f
|$(A9
[]A\A]A^A_
D$  
VUUU
D$3D
HcD$
D$(H
D$0H
Lc|$
d$ L
,:E1
u:Hc
l$0H
AWAVAUATUSH
[]A\A]A^A_
VUUU
D$#D
D$ H
uGHc
ATUH
xct9H
[]A\
AUATH
[]A\A]
[]A\
[]A\
[]A\
[]A\
[]A\
AWAVA
AUATA
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_1
!w%H
[]A\1
[]A\
[]A\
[]A\H
ATUSD
[]A\
AXAY
^_ucH
J0L;
AUATUSH)
[]A\A]
[]E	
AUATUSH)
[]A\A]
AWAVAUATI
A]A^
AYAZu
A]A_
AYAZ
A[A]
AYAZ
A[A]
AYAZ
A[A]
AYAZ
A]A^
AYAZ
A]A^
AYAZ
A]A^
AYAZ
[A\A]A^A_]
AWAVAUATE1
D$(1
t=H=
D$(dH3
8[]A\A]A^A_
@"|$
@"|$
@"t$
@"t$
@"t$
@"t$
D"t$
@"t$
@"t$
D"t$
@"t$
@8H;
J@H;
@0H;
{huMH
AWAVI
AUAT
|$0H
D$0H
@@H;
[]A\A]A^A_
D$(1
@@H;
\$(H
|$ A
ATUSH
@hH;
@@L9
t>[]A\
@@L9
[]A\H
AWAVAUATA
D$(1
D$(dH3
]A\A]A^A_
@8H;
AUATI
P0H;
[]A\A]
[]A\A]
AVAUATI
[]A\A]A^
[]A\A]A^
AUATA
[]A\A]
[]A\A]
[]A\A]
[]A\A]
[]A\A]
[]A\A]1
 u1H
AWAVI
AUATUSH
D$x1
D$xdH3
[]A\A]A^A_
D$PA
D$Ru
D$RA
D$SA
t$Tf
D$VA
D$YA
D$\A
D$`t
D$XH
\$P1
T$HA
t$Lu
D$LE
D$HfA
T$TL
T$LH
t$HL
T$H9
D$LA
D$HfA
D$LI
D$LE1
9\$L
9D$H
T$HH
D$LI
D$8E
\$(9
|$49
t$ D
\$(9
|$49
T$ H
t$8H
D$ 9D$L
D$09D$H
t$HE
l$(D
9\$L
9D$H
l$HE
d$L1
l$(D
9\$L
9D$H
d$HE
T$LE1
9\$L
9D$H
\$LE1
9\$L
9D$H
AUATL
USE1
[]A\A]
[]A\A]
pci_read:  address 0x%02x, io_len 0x%02x, value 0x%x
BLT, cpu-to-video, transparent
pci_write: address 0x%02x, io_len 0x%02x, value 0x%x
unknown bpp - seqencer.reg[0x07] = %02x
unsupported hardware cursor size
current guest pixel format is unsupported on indexed colour host displays, svga_dispbpp=%d
CRTC index 0x%02x is unknown(read)
crtc: index 0x%02x write 0x%02x
CRTC index 0x%02x is unknown(write 0x%02x)
sequencer index 0x%02x is unknown(read)
sequencer: index 0x%02x write 0x%02x
sequencer index 0x%02x is unknown(write 0x%02x)
control index 0x%02x is unknown(read)
MMIO vga read - address 0x%04x, value 0x%02x
CLGD543x_MMIO_BLTTRANSPARENTCOLOR
CLGD543x_MMIO_BLTTRANSPARENTCOLORMASK
MMIO blt read - address 0x%04x
MMIO blt read - address 0x%04x, value 0x%02x
BLT: MEMSYSDEST is not implemented
COLOREXPAND: unknown pixelwidth %u
PATTERNCOPY: unknown bltmode %02x
svga_patterncopy_memsrc() - not tested
SIMPLE BLT: unknown bltmode %02x
svga_cirrus: BLT, cpu-to-video
cpu-to-video BLT: unknown bltmode %02x
svga_asyncbitblt_next: unexpected call
BLT: src:0x%08x,dst 0x%08x,block %ux%u,mode 0x%02x,ROP 0x%02x
BLT: srcpitch:0x%08x,dstpitch 0x%08x,modeext 0x%02x,writemask 0x%02x
BLT: memory-to-memory copy is requested, ROP %02x
BLT redraw: x = %d, y = %d, w = %d, h = %d
control: index 0x%02x write 0x%02x
BLT WRITE MASK support is not complete (value = 0x%02x)
BLT MODE EXTENSION support is not complete (value = 0x%02x)
BLT MODE EXTENSION not available
control index 0x%02x is unknown (write 0x%02x)
MMIO vga write - address 0x%04x, value 0x%02x
MMIO blt write - address 0x%04x, value 0x%02x
mem_write 0x%08x, value 0x%02x
new pci_memaddr: 0x%04x
new pci_mmioaddr = 0x%08x
new ROM address: 0x%08x
display.vga_extension
Cirrus SVGA State
svga_cirrus
crtc
sequencer
control
shadow_reg0
shadow_reg1
hidden_dac
lockindex
palette
svga_unlock_special
svga_xres
svga_yres
svga_pitch
svga_bpp
svga_dispbpp
bank_base0
bank_base1
bank_limit0
bank_limit1
hw_cursor
Exit
switched to %u x %u x %u
cannot draw 4bpp SVGA
cannot get svga tile info
Changing timer interval to %d
bank offset %08x is invalid
SVGA read: io_len != 1
SVGA Cirrus PCI
memory.standard.vgarom.path
CLVGA
CL-GD5446 PCI initialized
CL-GD5430 ISA initialized
svga_cirrus: COLOR EXPAND
svga_cirrus: PATTERN COPY
svga_cirrus: BITBLT
BLT: SOLIDFILL
unknown ROP %02x
unknown pixel width
SVGA write: io_len != 1
mem_read 0x%08x
16bx_svga_cirrus_c
cmos
get_reg
%s called in %s stub. you must not have loaded the %s plugin
set_reg
VGA Core State
vgacore
misc_output
color_emulation
enable_ram
select_high_bank
horiz_sync_pol
vert_sync_pol
CRTC
write_protect
attribute_ctrl
flip_flop
video_enabled
palette_reg
overscan_color
color_plane_enable
horiz_pel_panning
color_select
mode_ctrl
graphics_alpha
display_type
enable_line_graphics
blink_intensity
pixel_panning_compat
pixel_clock_select
internal_palette_size
write_data_register
write_data_cycle
read_data_register
read_data_cycle
dac_state
pel_data
graphics_ctrl
enable_set_reset
color_compare
data_rotate
raster_op
read_map_select
write_mode
read_mode
chain_odd_even
shift_reg
memory_mapping
color_dont_care
bitmask
latch0
latch1
latch2
latch3
map_mask
reset1
reset2
char_map_select
extended_mem
chain_four
line_offset
line_compare
vertical_display_end
charmap_address
x_dotclockdiv2
y_doublescan
plane_shift
plane_offset
dac_shift
last_xres
last_yres
last_bpp
last_msl
vga_override
memory
display.vga_update_frequency
none
bochs
display.displaylib_options
unknown display extension: %s
vga video
interval=%u
io read from 03cd
io read from vga port 0x%04x
8-bit write to %04x = %02x
16-bit write to %04x = %04x
Weird VGA write size
io write 3c4: value > 4
io write to 0x3cd = 0x%02x
io write: 0x3ce: value > 8
update: select_high_bank != 1
update: shift_reg == %u
vga_mem_write: write mode 0: op = %u
vga_mem_write: write mode %u ?
too many parameters, max is 16
hfreq = %.1f kHz / vfreq = %d Hz
io read: 0x3c0: flip_flop != 0
io read: 0x3c1: unknown register 0x%02x
io read 0x3c2: input status #0: ignoring
io read 0x3c5: sequencer reset
io read 0x3c5: sequencer clocking mode
io read 0x3c5: index %u unhandled
io read 0x3cf: reg 05 = 0x%02x
io read: 0x3cf: index %u unhandled
io read: invalid CRTC register 0x%02x
8-bit read from 0x%04x = 0x%02x
16-bit read from 0x%04x = 0x%04x
io write 0x3c0: address mode reg=0x%02x
io write 0x3c0: data-write mode 0x%02x
char map select: map #2 in block #%d unused
io write 0x3c5: index 0x%02x unhandled
io write 0x3c6: PEL mask=0x%02x != 0xFF
io write: 0x3cf: mode reg: value = 0x%02x
io write: 0x3cf: index %u unhandled
write: invalid CRTC register 0x%02x selected
write: invalid CRTC register 0x%02x ignored
io write: 3da: ignoring: feature ctrl & vert sync
unsupported io write to port 0x%04x, val=0x%02x
update(): text mode: out of memory
12logfunctions
13bx_devmodel_c
20bx_pci_device_stub_c
13bx_vga_stub_c
12bx_vgacore_c
;*3$"
zPLR
libbx_svga_cirrus.so.0.0.0.debug
7zXZ
x>"z
>xDlP"
Z9PI
zb(fU
bVCDh
P9g)
B.;U
j/h*
w~*ZS
-N:"
HONT2
3zkm
}&w`
7FZe
tvpc
35GRO91!1!
Q8]<
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.init
.plt
.plt.got
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.gcc_except_table
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.data
.bss
.gnu_debuglink
.gnu_debugdata
