/lib64/ld-linux-x86-64.so.2
libgcc_s.so.1
__gmon_start__
_Jv_RegisterClasses
_Unwind_Resume
__gcc_personality_v0
libc.so.6
socket
exit
execl
readdir
fopen
strrchr
regexec
__strdup
perror
connect
closedir
ftell
signal
puts
fork
sigprocmask
regfree
time
__stack_chk_fail
unlink
listen
select
getpid
chmod
strtol
feof
fgets
strlen
sigemptyset
openlog
memset
glob
__errno_location
bind
chdir
getsockopt
dup2
poll
__fprintf_chk
sigaddset
getgrnam
stdout
fputc
regerror
memcpy
fclose
setsockopt
malloc
umask
strcasecmp
opendir
__ctype_b_loc
sscanf
regcomp
optarg
stderr
ioctl
inotify_init
__snprintf_chk
getopt_long
__strncat_chk
sendmsg
chown
fwrite
fread
waitpid
__fread_chk
getsockname
sendto
__vfprintf_chk
fdopen
accept
__vsyslog_chk
inotify_add_watch
__strcpy_chk
__cxa_finalize
setsid
fcntl
__sprintf_chk
__xstat
__strcat_chk
recvmsg
strerror
__libc_start_main
ferror
globfree
snprintf
sysconf
_edata
__bss_start
_end
__libc_csu_fini
eventfile
progname
acpid_debug
socketgroup
logevents
socketfile
__libc_csu_init
socketmode
clientmax
non_root_clients
GCC_3.0
GCC_3.3.1
GLIBC_2.3
GLIBC_2.7
GLIBC_2.14
GLIBC_2.4
GLIBC_2.2.5
GLIBC_2.3.4
a_&	
AUATUH
l$ L
=L} 
ATSubH
=(} 
%lv 
[A\]
=(v 
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
D$ H
ffff.
-Hw 
=/} 
5h| 
ffffff.
=I| 
=9| 
=(| 
AWAVA
|Sti
[]A\A]A^A_
fffff.
AWAVAUATUSH
T$,H
[]A\A]A^A_
T$0L
D$HL
T$ L
T$ H
D$ H
T$ H
T$ H
tP<%H
T$ H
T$ H
ffffff.
=ar 
=Jq 
[]A\
AVAUI
ATUSH
%<f 
[]A\A]A^A_
t$0H
t$<1
%=a 
#tof9
AVAUA
ATE1
-8] 
t$ L
[]A\A]A^A_
d$ H
ffffff.
P[]A\
[A\]
/dev/inpH
[]A\
[]A\
fff.
fff.
D$`H
T$Pf
t$dA
D$@Hc
D$X1
D$pH
D$@A
L$`f
AWAVAUM
ATUH
t$ H
d$pdH
D$`L
T$`H
U A9W
[]A\A]A^A_
D$P uQ
#w*H
AUATUS
t$`f
\$tH
T$xdH
D$hH
D$ H
D$ H
D$`H
D$0A
t$ 1
T$`A
t$ 1
|$pA
,$A9
ua;\$tu
A9T$
A;T$
D$P 
[]A\A]A^A_
D$P u
AVAUI
\$`H
D$PH
D$ H
D$pH
D$PA
|$pD9
[]A\A]A^A_
D$@ uN
D$@ 
AWAVI
ATUSH
d$ H
[]A\A]A^A_
l$ H
vdD9
vIA9
[]A\A]
[]A\A]
vjE9
vPE9
[]A\A]A^
[]A\A]A^
ATUSH
|$ L
t$ H
D$ H
D$`L
d$`H
D$xH
[]A\A]
-qE 
D$P 
D$P t!H
D$0H
AUATE1
[]A\A]A^
[]A\A]A^
[]A\A]A^
8 t[
fffff.
D$H1
|$ L
D$HdH3
fff.
fffff.
=aC 
[]A\
[]A\
[]A\
D$x1
T$xdH3
D$x1
T$xdH3
l$ L
t$(L
|$0H
exiting
netlink and the input layer
proc fs
Run in the foreground.
Log all event activity.
Use the specified PID file.
Print version information.
Print this message.
c:C:de:flg:m:s:Sp:L:nvh
acpid-2.0.11
Usage: %s [OPTIONS]
  -%c, --%s
  %s
fork: %s
setsid: %s
chdir("/"): %s
/dev/null
can't open /dev/null: %s
dup2() stdin: %s
dup2() stdout: %s
dup2() stderr: %s
starting up with %s
can't create pidfile %s: %s
select(): %s
confdir
clientmax
debug
eventfile
foreground
logevents
socketgroup
socketmode
socketfile
nosocket
pidfile
lockfile
version
help
reloading configuration
/etc/acpi/events
/var/run/acpid.pid
/var/lock/acpid
Set the configuration directory.
Set the limit on non-root socket connections.
Increase debugging level (implies -f).
Use the specified file for events.
Set the group on the socket file.
Set the permissions on the socket file.
Use the specified socket file.
Do not listen on a UNIX socket (overrides -s).
Use the specified lockfile to stop processing.
Force netlink/input layer mode. (overrides -e)
waiting for events: event logging is %s
acpi_event
acpi_mc_group
%s: cannot open generic netlink socket
%s: error talking to the kernel via netlink
%s: netlink CTRL_CMD_GETFAMILY response, wrong controller message len: %d
%s: not a netlink controller message, nlmsg_len=%d nlmsg_type=0x%x
%s: unknown netlink controller command %d
%s: failed to get acpi_event netlink multicast group
Too many connections.
blocking signals for rule lock
unblocking signals for rule lock
unknown option '%s' in %s at line %d
safe_write() timed out
malloc(): %s
opendir(%s): %s
^[a-zA-Z0-9_-]+$
regcomp(): %d
skipping conf file %s/%s
stat(%s): %s
skipping non-file %s
parsing conf file %s
fopen(%s): %s
strdup(): %s
%63[^=
]=%255[^
can't parse %s at line %d
    key="%s" val="%s"
regcomp(): %s
action
invalid escape at EOL
invalid escape "%%%c"
can't load file %s
skipping incomplete file %s
%d rule%s loaded
cleaning up rules
client connected from %s
%d client rule%s loaded
poll(): %s
client %s has disconnected
rule from %s matched
fork(): %s
expanded "%s" -> "%s"
executing action "%s"
BEGIN HANDLER MESSAGES
/bin/sh
execl(): %s
END HANDLER MESSAGES
action exited with status %d
action exited on signal %d
notifying client %s
unknown rule type: %d
rule from %s did not match
%d total rule%s matched
input layer connection closed
/dev/input/event*
cannot open input layer
button/lid LID close
button/lid LID open
input device has been disconnected
input layer read error: %s (%d)
too many errors reading input layer - aborting
input layer unexpected length: %d   expected: %d
lockfile present, not processing input layer event "%s"
received input layer event "%s"
completed input layer event "%s"
input layer %s opened successfully
button/power PBTN 00000080 00000000
button/suspend SUSP 00000080 00000000
button/prog1 PROG1 00000080 00000000
button/vendor VNDR 00000080 00000000
button/fnf1 FNF1 00000080 00000000
button/fnf2 FNF2 00000080 00000000
button/battery BAT 00000080 00000000
button/screenlock SCRNLCK 00000080 00000000
button/coffee CFEE 00000080 00000000
button/sleep SBTN 00000080 00000000
button/wlan WLAN 00000080 00000000
button/fnf6 FNF6 00000080 00000000
video/switchmode VMOD 00000080 00000000
button/fnf9 FNF9 00000080 00000000
button/fnf10 FF10 00000080 00000000
button/fnf11 FF11 00000080 00000000
button/f24 F24 00000080 00000000
button/zoom ZOOM 00000080 00000000
video/brightnessdown BRTDN 00000087 00000000
video/brightnessup BRTUP 00000086 00000000
button/kbdillumtoggle KBILLUM 00000080 00000000
button/volumedown VOLDN 00000080 00000000
button/volumeup VOLUP 00000080 00000000
button/mute MUTE 00000080 00000000
cd/next CDNEXT 00000080 00000000
cd/prev CDPREV 00000080 00000000
cd/play CDPLAY 00000080 00000000
cd/stop CDSTOP 00000080 00000000
video/next NEXT 00000083 00000000
video/prev PREV 00000084 00000000
video/brightnesscycle BCYC 00000085 00000000
video/brightnesszero BZRO 00000088 00000000
video/displayoff DOFF 00000089 00000000
inotify read bytes: %d
inotify fd eof encountered
inotify read error: %s (%d)
disconnecting from inotify
inotify name len: %d
inotify about to open: %s
inotify fd: %d
/dev/input
inotify wd: %d
inotify_init() failed: %s (%d)
inotify_add_watch() failed: %s (%d)
Cannot open netlink socket
SO_SNDBUF
SO_RCVBUF
Cannot bind netlink socket
Cannot getsockname
Wrong address length %d
Wrong address family %d
OVERRUN
EOF on netlink
ERROR truncated
RTNETLINK answers
Message truncated
!!!Remnant of size %d
Cannot talk to rtnetlink
sender address length == %d
Truncated message
!!!malformed message: len=%d
RTNETLINK1 answers
Unexpected reply!!!
Sender address length == %d
rtnl_from_file: fread
!!!Deficit %d, rta_len=%d
!!!malformed message: len=%d @%lu
rtnl-from_file: truncated message
addattr32: Error! max allowed bound %d exceeded
addattr_l ERROR: message exceeded bound of %d
addraw_l ERROR: message exceeded bound of %d
rta_addattr32: Error! max allowed bound %d exceeded
rta_addattr_l: Error! max allowed bound %d exceeded
netlink read error: %s (%d)
netlink connection closed
netlink msg truncated (1)
wrong netlink family ID.
%s %s %08x %08x
received netlink event "%s"
completed netlink event "%s"
netlink msg truncated (2)
netlink remnant of size %d
Unexpected group number %d
netlink opened successfully
too many errors reading via netlink - aborting
netlink unexpected length: %d   expected: %d
malformed netlink msg, length %d
wrong netlink controller message len: %d
lockfile present, not processing netlink event "%s"
cannot open generic netlink socket
read(): %s
procfs received event "%s"
procfs completed event "%s"
events file connection closed
can't open %s: %s (%d)
proc fs opened successfully
/proc/acpi/event
lockfile present, not processing event "%s"
too many errors reading events file - aborting
Deprecated %s was not found.  Trying netlink and the input layer...
can't accept client: %s
giving up
too many non-root clients
%d[%d:%d]
can't open socket %s: %s
chmod() on socket %s: %s
group %s does not exist
can't stat %s: %s
can't chown %s: %s
/var/run/acpid.socket
fcntl() on client for FD_CLOEXEC: %s
fcntl() on client for O_NONBLOCK: %s
fcntl() on socket %s for FD_CLOEXEC: %s
fcntl() on socket %s for O_NONBLOCK: %s
;*3$"
zPLR
acpid.debug
.data
.rodata
.shstrtab
.dynamic
.note.gnu.build-id
.gcc_except_table
.eh_frame
.note.ABI-tag
.gnu.hash
.fini
.gnu_debuglink
.dynsym
.gnu.version
.rela.dyn
.data.rel.ro
.interp
.gnu.version_r
.jcr
.eh_frame_hdr
.dynstr
.ctors
.dtors
.bss
.init
.rela.plt
.got.plt
.got
.text
