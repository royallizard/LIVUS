tdp1
td@A
/lib/ld-linux.so.2
libsvn_repos-1.so.0
apr_array_make
_ITM_deregisterTMCloneTable
svn_fs_file_contents
svn_utf_cstring_to_utf8
svn_fs_open_txn
svn_pool_create_ex
__gmon_start__
svn_error_clear
svn_error_createf
svn_stringbuf_create
svn_fs_txn_root
apr_array_push
apr_pool_destroy
svn_error_quick_wrap
svn_fspath__canonicalize
svn_dirent_basename
_Jv_RegisterClasses
svn_path_is_url
_ITM_registerTMCloneTable
svn_fs_check_path
svn_error_create
svn_repos_fs
svn_repos_open2
svn_repos_authz_read2
svn_repos_authz_check_access
_fini
svn_repos_authz_parse
libsvn_fs-1.so.0
svn_fs_initialize
svn_fs_print_modules
libsvn_fs_fs-1.so.0
libsvn_fs_base-1.so.0
libsvn_delta-1.so.0
libsvn_fs_util-1.so.0
libsvn_subr-1.so.0
svn_cmdline_printf
svn_opt_get_canonical_subcommand2
svn_opt_print_help4
svn_uri_canonicalize
svn_opt_get_option_from_code2
svn_opt_format_option
svn_cmdline_fprintf
svn_opt_subcommand_takes_option3
svn_cmdline_fflush
svn_path_is_repos_relative_url
svn_handle_error2
svn_cmdline_init
svn_cmdline__getopt_init
svn_dirent_internal_style
libaprutil-1.so.0
libcrypt.so.1
libdb-5.3.so
libexpat.so.1
libz.so.1
libsqlite3.so.0
libmagic.so.1
libapr-1.so.0
apr_getopt_long
libpthread.so.0
libdl.so.2
libc.so.6
_IO_stdin_used
strncmp
stdout
stderr
__cxa_finalize
__libc_start_main
__stack_chk_fail
_edata
__bss_start
_end
GLIBC_2.1.3
GLIBC_2.4
GLIBC_2.0
D$l1
T$,t 
L$le3
[^_]
T$(t
D$8=
T$ u
d$0[^_
d$0[^_
D$,1
L$,e3
d$<[^_]
D$<1
|$`tL
L$<e3
d$L[^_]
UWVS
|$xe
D$L1
L$Le3
d$\[^_]
<wt 
|$<1
T$8e
[^_]
The following repository back-end (FS) modules are available:
general usage: svnauthz SUBCOMMAND TARGET [ARGS & OPTIONS ...]
               svnauthz-validate TARGET
If the command name starts with 'svnauthz-validate', runs in
pre-1.8 compatibility mode: run the 'validate' subcommand on TARGET.
Type 'svnauthz help <subcommand>' for help on a specific subcommand.
Type 'svnauthz --version' to see the program version.
Available subcommands:
Error parsing authz file: '%s':
--recursive not valid without --path
'%s' is not a valid argument for --is
'%s' is a repository relative URL when it should be a local path or file:// URL
'%s' is a URL when it should be a repository-relative path
Repository and authz file arguments required
Subcommand '%s' doesn't accept option '%s'
Type 'svnauthz help %s' for usage.
Try 'svnauthz help' for more info
usage: svnauthz help [SUBCOMMAND...]
Describe the usage of this program or its subcommands.
Checks the syntax of an authz file.
usage: 1. svnauthz validate TARGET
       2. svnauthz validate --transaction TXN REPOS_PATH FILE_PATH
  1. Loads and validates the syntax of the authz file at TARGET.
     TARGET can be a path to a file or an absolute file:// URL to an authz
     file in a repository, but cannot be a repository relative URL (^/).
  2. Loads and validates the syntax of the authz file at FILE_PATH in the
     transaction TXN in the repository at REPOS_PATH.
Returns:
    0   when syntax is OK.
    1   when syntax is invalid.
    2   operational error
Print or test the permissions set by an authz file.
usage: 1. svnauthz accessof TARGET
       2. svnauthz accessof -t TXN REPOS_PATH FILE_PATH
  1. Prints the access of USER to PATH based on authorization file at TARGET.
     TARGET can be a path to a file or an absolute file:// URL to an authz
     file in a repository, but cannot be a repository relative URL (^/).
  2. Prints the access of USER to PATH based on authz file at FILE_PATH in the
     transaction TXN in the repository at REPOS_PATH.
  USER is the argument to the --username option; if that option is not
  provided, then access of an anonymous user will be printed or tested.
  PATH is the argument to the --path option; if that option is not provided,
  the maximal access to any path in the repository will be considered.
Outputs one of the following:
     rw    write access (which also implies read)
      r    read access
     no    no access
Returns:
    0   when syntax is OK and '--is' argument (if any) matches.
    1   when syntax is invalid.
    2   operational error
    3   when '--is' argument doesn't match
show program version information
path within repository to check access of
instead of outputting, test if the access is
                             exactly ARG
                             ARG can be one of the following values:
                                rw    write access (which also implies read)
                                 r    read-only access
                                no    no access
determine recursive access to PATH
svnauthz
Path '%s' is not a file
Repository
%s is '%s', not writable
%s is '%s', not read only
%s is '%s', not no access
svnauthz: 
svnauthz-validate
help
subcommand argument required
Unknown subcommand: '%s'
Authz file argument required
--version
accessof
show help on a subcommand
username
username to check access of
path
repository
repository authz name
transaction
transaction id
groups-file
use the groups from file ARG
recursive
;*2$"D
svnauthz.debug
7zXZ
-xP8
_:+c
1Lumg
%`Gw
PoN.
><o#{O
n;2juN/Bw
8"Sh
L|}!<d
9D;3
IYK;
I^P92?
IJS)
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.data
.bss
.gnu_debuglink
.gnu_debugdata
