/lib64/ld-linux-x86-64.so.2
libsvn_repos-1.so.0
svn_error_purge_tracing
svn_stringbuf_from_file2
svn_stream_printf
__gmon_start__
_Jv_RegisterClasses
svn_error_createf
svn_sort_compare_items_lexically
svn_fs_youngest_rev
apr_hash_next
apr_array_push
svn_cstring_split
svn_fs_abort_txn
svn_error__malfunction
svn_dirent_join
_ITM_deregisterTMCloneTable
svn_stream_puts
svn_dirent_local_style
_ITM_registerTMCloneTable
apr_pool_destroy
svn_fs_get_lock
svn_stringbuf_create
svn_error_quick_wrap
apr_hash_this_val
svn_error_create
svn_err_best_message
svn_fs_get_uuid
svn_error_dup
svn_error_clear
svn_fs_open_txn
svn_sort__hash
apr_hash_set
apr_pool_clear
apr_psprintf
apr_palloc
svn_fs_verify_root
svn_fs_deltify_revision
svn_fs_change_txn_prop
svn_error_compose_create
svn_path_is_url
apr_hash_first
apr_pstrdup
svn_fs_set_uuid
svn_error_wrap_apr
svn_fs_txn_root
apr_hash_make
svn_pool_create_ex
apr_array_make
apr_hash_this_key
svn_utf_cstring_to_utf8
svn_repos_db_logfiles
svn_repos_fs_unlock
svn_repos_verify_fs3
svn_repos_fs
svn_repos_open3
svn_repos_fs_pack2
svn_repos_fs_change_rev_prop4
svn_repos_create
svn_repos_hotcopy3
svn_repos_fs_get_locks2
svn_repos_freeze
svn_repos_upgrade2
svn_repos_recover4
svn_repos_fs_lock
svn_repos_dump_fs3
_fini
svn_repos_info_format
svn_repos_version
svn_repos_dated_revision
svn_repos_capabilities
svn_repos_load_fs5
svn_repos_path
libsvn_fs-1.so.0
svn_handle_error2
apr_pool_cleanup_register
svn_uuid_generate
apr_pool_cleanup_null
svn_ver_equal
svn_fs_unlock
svn_fs_lock
svn_fs_create_access
svn_fs_list_transactions
svn_fs_info_format
svn_fs_initialize
svn_fs_set_warning_func
svn_fs_purge_txn
svn_fs_info
svn_fs_version
svn_fs_info_config_files
svn_fs_print_modules
svn_fs_set_access
libsvn_fs_fs-1.so.0
svn_delta_version
svn_stream_set_write
svn_subr_version
svn_stream_create
svn_ver_check_list2
libsvn_fs_x-1.so.0
libsvn_fs_base-1.so.0
libsvn_delta-1.so.0
apr_file_open_stdout
libsvn_fs_util-1.so.0
svn_version__parse_version_string
libsvn_subr-1.so.0
apr_strtoi64
apr_file_open_stdin
apr_file_open_stderr
apr_allocator_owner_get
svn_opt__args_to_target_array
svn_cmdline_printf
svn_opt_parse_revision
svn_opt_get_canonical_subcommand2
svn_pool_create_allocator
svn_cstring_count_newlines
svn_opt_print_help4
svn_opt_get_option_from_code2
svn_opt_format_option
svn_cmdline_fprintf
svn_error_set_malfunction_handler
svn_subst_translate_string2
svn_opt_subcommand_takes_option3
svn_cmdline_fflush
svn_cmdline_init
svn_opt_parse_all_args
svn_cmdline_fputs
svn_stream_for_stdout
svn_cache_config_get
svn_cache_config_set
svn_user_get_name
svn_cmdline_handle_exit_error
svn_cmdline__getopt_init
svn_dirent_internal_style
svn_version__at_least
svn_string_create_empty
svn_dirent_canonicalize
svn_handle_warning2
svn_stream_for_stdin
svn_time_to_human_cstring
svn_io_run_cmd
libz.so.1
libsqlite3.so.0
libmagic.so.1
libaprutil-1.so.0
libcrypt.so.1
libexpat.so.1
libdb-5.3.so
libapr-1.so.0
apr_getopt_long
apr_signal
libpthread.so.0
libdl.so.2
libc.so.6
exit
dcngettext
dcgettext
__stack_chk_fail
abort
__cxa_finalize
strcmp
__libc_start_main
_edata
__bss_start
_end
GLIBC_2.4
GLIBC_2.2.5
ATUH
[]A\
fffff.
fffff.
fffff.
ffff.
ATUI
[]A\
ATUH
L$(1
\$(dH3
0[]A\
ffff.
AUATH
[]A\A]
[]A\A]
[]A\A]
AWAVA
AUATA
n$D+n
x	E9
x	E9
C$9C
[]A\A]A^A_
C$9C
[]A\A]A^A_
AVAUI
ATUH
[]A\A]A^
fffff.
AUATI
[]A\A]
ATUI
[]A\
tI=/q
fff.
AWAVH
AUATI
L$(1
L$(dH3
8[]A\A]A^A_
|$ H
t$ tFL
ATUH
 []A\
AUATI
([]A\A]
T$8H
D$\H
t$ Uj
D$XPL
L$8H
fffff.
ATUH
 []A\
ffff.
AWAVAUATI
D$81
|$(L
L$8dH3
H[]A\A]A^A_
L$ E1
|$0H
D$(A
T$0H
t$0H
|$ H
fff.
AWAVAUATI
D$81
L$8dH3
H[]A\A]A^A_
|$ L
L$0E1
|$(H
D$ A
T$(H
D$0H
t$(I
D$0H
L$ E1
L$ H
AWAVAUATI
D$(1
L$(dH3
8[]A\A]A^A_
|$(UH
t$ H
AWAVH
AUATI
L$81
L$8dH3
H[]A\A]A^A_
|$ H
|$(H
|$0txSj
D$@H
T$HL
D$@H
T$HH
t$ L
fffff.
ATUH
 []A\
U`E1
UlSj
t$0H
AVAUI
ATUH
[]A\A]A^
8fuK
fff.
AVAUI
[]A\A]A^
L$`A
T$DH
0[]A\A]A^
AWAVI
AUATI
[]A\A]A^A_
|$HH
T$XH
|$HH
D$DH
|$PH
T$ H
T$`L
t$(I
|$HH
D$D=	
t$PH
|$`H
|$P1
t$PH
t$`H
D$PH
T$PH
t$PH
|$`H
\$`H
t$PH
|$ H
D$d	
|$X1
D$XH
D$XH
t$PH
|$0H
t$PH
|$(H
T$8L
T$HHcB
5"d 
|$`H9
A9L$
t$Dt
|$DH
T$HH
;B$|4H
|$`L
|$`H
|$HA
|$`H
|$`H
AUATI
D$(1
L$(dH3
8[]A\A]
T$ H
t$(I
T$0H
|$ H
D$TPA
D$PPH
L$hH
T$`H
t$pH
AWAVI
AUATI
[]A\A]A^A_
[]A\A]A^A_
ffffff.
AWAVI
AUAT1
[]A\A]A^A_
|$ H
|$(H
|$0H
t$0H
|$8H
|$8H
D$ H
L$(H
|$0I
D$ H
L$(H
|$8I
D$0H
D$8E1
D$HH
M|Sj
D$XPH
PAVH
T$hH
t$`H
H=?B
L$`I
D$HH
D$HH
ATUI
D$(1
L$(dH3
0[]A\
|$ H
L$ H
L$ H
H;D$
EHQPRH
L$HH
T$@H
t$8H
D$ H
AUATI
D$(1
L$(dH3
8[]A\A]
|$ H
L$ H
L$ H
D$ H
H9\$
ATUI
[]A\
ATUI
 []A\
ffffff.
AUATH
[]A\A]
ffff.
AWAVI
AUAT1
D$81
L$8dH3
H[]A\A]A^A_
t$ H
d$ H
l$(H
d$0H
D$0H
T$(H
|$0H
D$(H
l$(H
D$09h
D$0H
ffff.
ATUI
[]A\
[]A\
AWAVA
AUATL
[]A\A]A^A_
Caught signal
subversion
Path '%s' is not a local path
No program provided
Can't open stdin
Can't open stdout
Can't open stderr
WARNING 0x%04x: %s
* Dumped revision %ld.
* Verified revision %ld.
     * editing path : %s ...
     * deleting path : %s ...
     * adding path : %s ...
 done.
COPIED...
 removing '\r' from %s ...
svn:mergeinfo
* Copied revision %ld.
args
Not enough arguments
Too many arguments
fsfs-cache-deltas
fsfs-cache-fulltexts
fsfs-cache-revprops
fsfs-cache-namespace
fsfs-block-read
svnadmin: 
Upgrade completed.
'%s' unlocked by user '%s'.
Missing revision
Only one revision allowed
svn:log
Transaction '%s' removed.
administrator
No paths to unlock provided
Path '%s' isn't locked.
Removed lock on '%s'.
Recovery completed.
Too many arguments given
Path: %s
UUID Token: %s
Owner: %s
Created: %s
Expires: %s
Comment (%i lines):
Comment (%i line):
'%s' locked by user '%s'.
bdb-txn-nosync
bdb-log-autoremove
fsfs
fs-type
pre-1.4-compatible
pre-1.5-compatible
pre-1.6-compatible
pre-1.8-compatible
%d.%d.%d%s%s
compatible-version
svnadmin
1.9.2
help
subcommand argument required
Unknown subcommand: '%s'
Repository argument required
Invalid revision specifier
r%ld
%s: E%06d: %s
Deltifying revision %ld...
UUID: %s
Repository Format: %d
repos_version->patch == 0
fs_version->patch == 0
Repository Capability: %s
Filesystem Type: %s
Filesystem Format: %d
FSFS Sharded: yes
FSFS Sharded: no
FSFS Shard Size: %d
FSFS Shards Packed: %ld/%ld
FSFS Logical Addressing: yes
FSFS Logical Addressing: no
Configuration File: %s
svn_subr
svn_repos
svn_fs
svn_delta
--version
crashtest
create
delrevprop
deltify
dump
freeze
hotcopy
list-dblogs
list-unused-dblogs
load
lslocks
lstxns
pack
recover
rmlocks
rmtxns
setlog
setrevprop
setuuid
unlock
upgrade
verify
show help on a subcommand
transaction
specify transaction name ARG
incremental
dump or hotcopy incrementally
use deltas in dump output
bypass-hooks
bypass-prop-validation
ignore-dates
quiet
ignore-uuid
force-uuid
parent-dir
bdb-log-keep
config-dir
clean-logs
use-pre-commit-hook
use-post-commit-hook
use-pre-revprop-change-hook
use-post-revprop-change-hook
wait
keep-going
memory-cache-size
file
check-normalization
metadata-only
* Verifying repository metadata ...
* Verifying metadata at revision %ld ...
Packing revisions in shard %s...
Packing revprops in shard %s...
------- Committed revision %ld >>>
------- Committed new rev %ld (loaded from original rev %ld) >>>
     * replacing path : %s ...
<<< Started new transaction, based on original revision %ld
<<< Skipped original revision %ld
Repository lock acquired.
Please wait; recovering the repository may take some time...
Repository lock acquired.
Please wait; upgrading the repository may take some time...
Packed revision properties in shard %s
Removed non-packed revision properties in shard %s
Bumped repository format to %ld
* Copied revisions from %ld to %ld.
subversion/svnadmin/svnadmin.c
Failed to get exclusive repository access; perhaps another process
such as httpd, svnserve or svn has it open?
Waiting on repository lock; perhaps another process has it open?
Upgrade of this repository's underlying versioned filesystem is not supported; consider dumping and loading the data elsewhere
Upgrade of this repository is not supported; consider dumping and loading the data elsewhere
--revision (-r) and --transaction (-t) are mutually exclusive
Calling hooks is incompatible with --transaction (-t)
The latest repos revision is %ld.
%swarning: The "%s" repository back-end is deprecated, consider using "%s" instead.
Repositories compatible with 1.0.x must use --fs-type=bdb
Repositories compatible with 1.8.x or earlier cannot use --fs-type=%s
general usage: svnadmin SUBCOMMAND REPOS_PATH  [ARGS & OPTIONS ...]
Subversion repository administration tool.
Type 'svnadmin help <subcommand>' for help on a specific subcommand.
Type 'svnadmin --version' to see the program version and FS modules.
Available subcommands:
The following repository back-end (FS) modules are available:
Multiple revision arguments encountered; try '-r N:M' instead of '-r N -r M'
Syntax error in revision argument '%s'
Cannot create pre-1.0-compatible repositories
Cannot guarantee compatibility beyond the current running version (%s)
'%s' is a URL when it should be a local path
Subcommand '%s' doesn't accept option '%s'
Type 'svnadmin help %s' for usage.
Try 'svnadmin help' for more info
Invalid revision number (%ld) specified
Non-numeric revision specified
First revision cannot be higher than second
Invalid property value found in dumpstream; consider repairing the source or using --bypass-prop-validation while loading.
* Error verifying repository metadata.
* Error verifying revision %ld.
Revisions must not be greater than the youngest revision (%ld)
-----Summary of corrupt revisions-----
Failed to verify repository '%s'
repos_version->major == SVN_VER_MAJOR
fs_version->major == SVN_VER_MAJOR
Compatible With Version: %d.%d.0
Successfully opened repository '%s'.
Will now crash to simulate a crashing server process.
usage: svnadmin crashtest REPOS_PATH
Open the repository at REPOS_PATH, then abort, thus simulating
a process that crashes while holding an open repository handle.
usage: svnadmin create REPOS_PATH
Create a new, empty repository at REPOS_PATH.
usage: 1. svnadmin delrevprop REPOS_PATH -r REVISION NAME
                   2. svnadmin delrevprop REPO_PATH -t TXN NAME
1. Delete the property NAME on revision REVISION.
Use --use-pre-revprop-change-hook/--use-post-revprop-change-hook to
trigger the revision property-related hooks (for example, if you want
an email notification sent from your post-revprop-change hook).
NOTE: Revision properties are not versioned, so this command will
irreversibly destroy the previous value of the property.
2. Delete the property NAME on transaction TXN.
usage: svnadmin deltify [-r LOWER[:UPPER]] REPOS_PATH
Run over the requested revision range, performing predecessor delti-
fication on the paths changed in those revisions.  Deltification in
essence compresses the repository by only storing the differences or
delta from the preceding revision.  If no revisions are specified,
this will simply deltify the HEAD revision.
usage: svnadmin dump REPOS_PATH [-r LOWER[:UPPER] [--incremental]]
Dump the contents of filesystem to stdout in a 'dumpfile'
portable format, sending feedback to stderr.  Dump revisions
LOWER rev through UPPER rev.  If no revisions are given, dump all
revision trees.  If only LOWER is given, dump that one revision tree.
If --incremental is passed, the first revision dumped will describe
only the paths changed in that revision; otherwise it will describe
every path present in the repository as of that revision.  (In either
case, the second and subsequent revisions, if any, describe only paths
changed in those revisions.)
usage: 1. svnadmin freeze REPOS_PATH PROGRAM [ARG...]
               2. svnadmin freeze -F FILE PROGRAM [ARG...]
1. Run PROGRAM passing ARGS while holding a write-lock on REPOS_PATH.
2. Like 1 except all repositories listed in FILE are locked. The file
   format is repository paths separated by newlines.  Repositories are
   locked in the same order as they are listed in the file.
usage: svnadmin help [SUBCOMMAND...]
Describe the usage of this program or its subcommands.
usage: svnadmin hotcopy REPOS_PATH NEW_REPOS_PATH
Make a hot copy of a repository.
If --incremental is passed, data which already exists at the destination
is not copied again.  Incremental mode is implemented for FSFS repositories.
usage: svnadmin info REPOS_PATH
Print information about the repository at REPOS_PATH.
usage: svnadmin list-dblogs REPOS_PATH
List all Berkeley DB log files.
WARNING: Modifying or deleting logfiles which are still in use
will cause your repository to be corrupted.
usage: svnadmin list-unused-dblogs REPOS_PATH
List unused Berkeley DB log files.
usage: svnadmin load REPOS_PATH
Read a 'dumpfile'-formatted stream from stdin, committing
new revisions into the repository's filesystem.  If the repository
was previously empty, its UUID will, by default, be changed to the
one specified in the stream.  Progress feedback is sent to stdout.
If --revision is specified, limit the loaded revisions to only those
in the dump stream whose revision numbers match the specified range.
usage: svnadmin lock REPOS_PATH PATH USERNAME COMMENT-FILE [TOKEN]
Lock PATH by USERNAME setting comments from COMMENT-FILE.
If provided, use TOKEN as lock token.  Use --bypass-hooks to avoid
triggering the pre-lock and post-lock hook scripts.
usage: svnadmin lslocks REPOS_PATH [PATH-IN-REPOS]
Print descriptions of all locks on or under PATH-IN-REPOS (which,
if not provided, is the root of the repository).
usage: svnadmin lstxns REPOS_PATH
Print the names of all uncommitted transactions.
usage: svnadmin pack REPOS_PATH
Possibly compact the repository into a more efficient storage model.
This may not apply to all repositories, in which case, exit.
usage: svnadmin recover REPOS_PATH
Run the recovery procedure on a repository.  Do this if you've
been getting errors indicating that recovery ought to be run.
Berkeley DB recovery requires exclusive access and will
exit if the repository is in use by another process.
usage: svnadmin rmlocks REPOS_PATH LOCKED_PATH...
Unconditionally remove lock from each LOCKED_PATH.
usage: svnadmin rmtxns REPOS_PATH TXN_NAME...
Delete the named transaction(s).
usage: svnadmin setlog REPOS_PATH -r REVISION FILE
Set the log-message on revision REVISION to the contents of FILE.  Use
--bypass-hooks to avoid triggering the revision-property-related hooks
(for example, if you do not want an email notification sent
from your post-revprop-change hook, or because the modification of
revision properties has not been enabled in the pre-revprop-change
hook).
NOTE: Revision properties are not versioned, so this command will
overwrite the previous log message.
usage: 1. svnadmin setrevprop REPOS_PATH -r REVISION NAME FILE
                   2. svnadmin setrevprop REPOS_PATH -t TXN NAME FILE
1. Set the property NAME on revision REVISION to the contents of FILE.
Use --use-pre-revprop-change-hook/--use-post-revprop-change-hook to
trigger the revision property-related hooks (for example, if you want
an email notification sent from your post-revprop-change hook).
NOTE: Revision properties are not versioned, so this command will
overwrite the previous value of the property.
2. Set the property NAME on transaction TXN to the contents of FILE.
usage: svnadmin setuuid REPOS_PATH [NEW_UUID]
Reset the repository UUID for the repository located at REPOS_PATH.  If
NEW_UUID is provided, use that as the new repository UUID; otherwise,
generate a brand new UUID for the repository.
usage: svnadmin unlock REPOS_PATH LOCKED_PATH USERNAME TOKEN
Unlock LOCKED_PATH (as USERNAME) after verifying that the token
associated with the lock matches TOKEN.  Use --bypass-hooks to avoid
triggering the pre-unlock and post-unlock hook scripts.
usage: svnadmin upgrade REPOS_PATH
Upgrade the repository located at REPOS_PATH to the latest supported
schema version.
This functionality is provided as a convenience for repository
administrators who wish to make use of new Subversion functionality
without having to undertake a potentially costly full repository dump
and load operation.  As such, the upgrade performs only the minimum
amount of work needed to accomplish this while still maintaining the
integrity of the repository.  It does not guarantee the most optimized
repository state as a dump and subsequent load would.
usage: svnadmin verify REPOS_PATH
Verify the data stored in the repository.
show program version information
specify revision number ARG (or X:Y range)
bypass the repository hook system
bypass property validation logic
ignore revision datestamps found in the stream
no progress (only errors to stderr)
ignore any repos UUID found in the stream
set repos UUID to that found in stream, if any
type of repository:
                             'fsfs' (default), 'bdb' or 'fsx'
                             CAUTION: FSX is for EXPERIMENTAL use only!
load at specified directory in repository
disable fsync at transaction commit [Berkeley DB]
disable automatic log file removal [Berkeley DB]
read user configuration files from directory ARG
remove redundant Berkeley DB log files
                             from source repository [Berkeley DB]
call pre-commit hook before committing revisions
call post-commit hook after committing revisions
call hook before changing revision property
call hook after changing revision property
wait instead of exit if the repository is in
                             use by another process
deprecated; see --compatible-version
continue verification after detecting a corruption
size of the extra in-memory cache in MB used to
                             minimize redundant operations. Default: 16.
                             [used for FSFS repositories only]
use repository format compatible with Subversion
                             version ARG ("1.5.5", "1.7", etc.)
read repository paths from file ARG
report any names within the same directory or
                             svn:mergeinfo property value that differ only
                             in character representation, but are otherwise
                             identical
verify metadata only (ignored for BDB),
                             checking against external corruption in
                             Subversion 1.9+ format repositories.
;*3$"
svnadmin.debug
7zXZ
.<-|
lSRU
tQ4w9O_
g[il
9~!W
[8NPt
>vU9
#QpLv
!CwJ^
y#gA
:/f(
eWfZ
{~B<
C\5J
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.data
.bss
.gnu_debuglink
.gnu_debugdata
