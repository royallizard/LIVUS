zU(V!
__gmon_start__
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
value_new_float
gnm_matrix_from_value
value_new_error_VALUE
gnm_matrix_free
g_free
gnm_matrix_is_empty
gnm_matrix_new
g_malloc0_n
gnm_matrix_eigen
g_malloc_n
qsort
value_new_array_non_init
value_new_error_NUM
value_get_as_float
value_new_array
value_release
value_new_int
go_matrix_determinant
go_linear_solve_multiple
go_matrix_pseudo_inverse
gnm_matrix_to_value
go_matrix_invert
gnm_matrix_multiply
go_pow10
go_fake_trunc
go_tanpi
float_range_function2
go_range_sumsq
float_range_function
go_range_sum
gnm_range_product
gnm_range_multinomial
gnm_range_hypot
workbook_date_conv
gnm_rangeref_normalize
parse_criteria
sheet_foreach_cell_in_range
free_criteria
value_new_error_DIV0
gnm_cell_eval
value_new_empty
sheet_cell_get
go_sinpi
collect_floats_value
go_finite
go_fake_floor
go_fake_ceil
go_fake_round
strstr
value_new_string
pochhammer
fmod
log10
log2
value_get_as_checked_bool
go_complex_init
complex_igamma
atan
lgamma
gnm_gamma
combin
gnm_fact
go_pow2
expm1
gnm_coth
go_cotpi
gnm_cot
go_cospi
gnm_lbeta3
gnm_beta
asinh
asin
value_peek_string
strlen
g_utf8_prev_char
gnm_acoth
gnm_acot
acos
gnm_expr_eval
value_area_get_width
value_area_get_height
value_area_fetch_x_y
go_accumulator_start
go_accumulator_new
go_accumulator_value
go_accumulator_free
go_accumulator_end
value_dup
go_quad_init
go_quad_mul
go_accumulator_add_quad
sqrt
atanh
log1p
acosh
gnm_trunc
atan2
math_functions
go_plugin_header
go_plugin_depends
libm.so.6
libc.so.6
__stack_chk_fail
_edata
__bss_start
plugin.so
GLIBC_2.1.3
GLIBC_2.4
GLIBC_2.0
GLIBC_2.1
z6u4
[^_]
UWVS
D$<1
|$<e3=
d$L[^_]
t$ ~
UWVS
d$,[^_]
[^_]
d$ [^_
UWVS
l$Te
D$,1
L$,e3
d$<[^_]
|$Pe
D$<1
T$<e3
D$8u1
d$@[^_
d$ [^_
UWVS
|$Te
D$,1
L$,e3
D$(uf
d$<[^_]
d$$[^
d$$[^
d$$[^
d$$[^
d$([
d$([
d$([
d$([
d$([
d$([
d$([
d$([
d$([
d$([
UWVS
D$|1
L$,t.
L$|e3
[^_]
L$,9D$8u
D$<9D$d
D$P+D$@
D$T+D$D
UWVS
t$de
D$<1
L$<e3
d$L[^_]
T$$t
UWVS
D$|1
L$,t.
L$|e3
[^_]
L$,9D$8u
D$<9D$d
D$P+D$@
D$T+D$D
UWVS
[^_]
[^_]
D$<1
D$8%
\$<e3
d$D[^
|$`e
D$L1
L$Le3
d$P[^_
z=uB
D$(u)
d$$[^
d$$[^
d$$[^
d$$[^
d$$[^
d$$[^
d$$[^
d$$[^
UWVS
D$8%
D$8%
gfff
gfff
z}u{
[^_]
d$$[^
|$Pe
D$<1
D$8%
z.u4
L$<e3
d$@[^_
D$<1
D$8%
z4u2
D$ w6
T$<e3
d$H[
d$4[^
d$4[^
d$4[^
UWVS
d$<[1
[^_]
D$<1
D$8%
z4u2
D$ w6
T$<e3
d$H[
d$$[^
d$$[^
D$|1
L$|e3
[^_]
D$,1
D$(%
T$,e3
d$4[^
D$(%
|$@e
D$,1
D$(%
D$(%
T$,e3
d$0[^_
|$@e
D$,1
D$(%
D$(%
T$,e3
d$0[^_
D$<1
D$8%
L$<e3
d$D[^
t$Te
D$<1
T$<e3
d$D[^
d$$[^
UWV1
[^_]
T$|1
L$<9
T$H9
L$09D$(u
D$,9D$
T$|e3
[^_]
D$ 9D$(
UWVS
D$<1
\$<e3
d$L[^_]
>9l$,
UWVS
d$,[1
[^_]
d$4[^
d$4[^
D$,1
D$(%
L$,e3
d$4[^
d$ [^_
d$ [^_
d$$[^
d$$[^
d$$[^
d$$[^
d$4[^
d$4[^
d$4[^
d$4[^
CMVC
CDXC
CDVC
CMXC
XCIX
XLIX
CDIC
LMVL
CMIC
XDIX
XMIX
VDIV
VMIV
acos
acosh
acot
acoth
arabic
asin
asinh
atan
atanh
atan2
beta
betaln
cholesky
cospi
cotpi
countif
ceil
ceiling
even
expm1
fact
factdouble
combin
combina
csch
floor
gammaln
hypot
igamma
ff|bbb
ln1p
log2
log10
mround
multinomial
power
ff|f
pochhammer
g_product
quotient
roman
rounddown
roundup
sech
seriessum
fffA
sign
sinpi
sqrt
sqrtpi
suma
sumif
rS|r
averageif
odf.sumproduct
sumsq
sumx2my2
sumx2py2
sumxmy2
tanpi
trunc
mmult
minverse
mpseudoinverse
linsolve
mdeterm
munit
eigen
matrix:a symmetric matrix
matrix:a square matrix
MMULT,MINVERSE
A:a matrix
B:a matrix
mat1:a matrix
mat2:a matrix
TRANSPOSE,MINVERSE
n:size of the matrix
MMULT,MDETERM,MINVERSE
MINVERSE,MMULT,MDETERM
matrix:a matrix
MMULT,MDETERM,LINSOLVE
m:increment to each exponent
COUNT,SUM
array0:first cell area
array1:second cell area
SUMSQ,SUMX2MY2,SUMX2PY2
SUMSQ,SUMX2MY2
SUMSQ,SUMX2PY2
n:non-negative integer
=ROMAN(999)
=ROMAN(999,1)
=ROMAN(999,2)
=ROMAN(999,3)
=ROMAN(999,4)
roman:Roman numeral
=ARABIC("I")
=ARABIC("CDLII")
=ARABIC("MCDXC")
=ARABIC("MDCCCXCIX")
=ARABIC("MCMXCIX")
=ARABIC("mmmcmxcix")
=ARABIC("MIM")
=ARABIC("IVM")
ROMAN
x:number
m:number
=MROUND(1.7,0.2)
=MROUND(321.123,0.12)
ROUNDDOWN,ROUND,ROUNDUP
d:integer, defaults to 0
=ROUNDUP(5.5)
=ROUNDUP(-3.3)
=ROUNDUP(1501.15,1)
=ROUNDUP(1501.15,-2)
ROUND,ROUNDDOWN,INT
ROUND:rounded @{x}
=ROUND(5.5)
=ROUND(-3.3)
=ROUND(1501.15,1)
=ROUND(1501.15,-2)
ROUNDDOWN,ROUNDUP
=ROUNDDOWN(5.5)
=ROUNDDOWN(-3.3)
=ROUNDDOWN(1501.15,1)
=ROUNDDOWN(1501.15,-2)
x:non-negative number
=SQRTPI(2)
SIGN:sign of @{x}
=SIGN(3)
=SIGN(-3)
=SIGN(0)
numerator:integer
denominator:non-zero integer
=QUOTIENT(23,5)
FIB:Fibonacci numbers
n:positive integer
=FIB(23)
FACTDOUBLE:double factorial
x:non-negative integer
=FACTDOUBLE(5)
FACT
=ODD(5.4)
=ODD(-5.4)
EVEN
=EVEN(5.4)
=EVEN(-5.4)
=TRUNC(35.12)
=TRUNC(43.15,1)
PI:the constant 
=PI()
SQRTPI
=TANH(2)
TAN,SIN,SINH,COS,COSH
TANPI:the tangent of Pi*@{x}
x:number of half turns
=TANPI(1)
=TANPI(0.25)
TAN:the tangent of @{x}
x:angle in radians
=TAN(3)
x1:number
x2:number
=G_PRODUCT(2,5,9)
x1:first number
x2:second number
xn:nth number
=MULTINOMIAL(2,3,4)
COMBIN,SUM
wiki:en:Multinomial_theorem
area0:first cell area
area1:second cell area
=SUMSQ(11,TRUE,FALSE,12)
=SUMA(11,TRUE,FALSE,12)
AVERAGE,SUM,COUNT
SQRT:square root of @{x}
=SQRT(2)
POWER
=SINH(0.1)
=SINH(-0.1)
SIN,COSH,ASINH
=SECH(0.5)
wolfram:HyperbolicSecant.html
wiki:en:Hyperbolic_function
SEC:Secant
=SEC(0.5)
wolfram:Secant.html
=CSCH(0.5)
CSC:the cosecant of @{x}
=CSC(0.5)
wolfram:Cosecant.html
SINPI:the sine of Pi*@{x}
=SINPI(0.5)
=SINPI(1)
SIN:the sine of @{x}
=SIN(0.5)
wolfram:Sine.html
x:angle in degrees
=RADIANS(180)
PI,DEGREES
x:integer
n:integer
=MOD(23,7)
=MOD(23,-7)
x:positive number
=LOG10(1024)
EXP,LOG2,LOG
=LOG2(1024)
EXP,LOG10,LOG
n:number
=POCHHAMMER(1,5)
=POCHHAMMER(6,0.5)
y:number
z:number
@{z} defaults to 1
=POWER(2,7)
=POWER(3,3.141)
LN1P:LN(1+@{x})
=LN1P(0.01)
EXP,LN,EXPM1
=LN(7)
EXP,LOG2,LOG10
=LOG(2)
=LOG(8192,2)
LN,LOG2,LOG10
=INT(7.2)
=INT(-5.5)
CEIL,CEILING,FLOOR,ABS,MOD
=FLOOR(0.5)
=FLOOR(5,2)
=FLOOR(-5,-2)
=FLOOR(-5,2)
CEIL,CEILING,ABS,INT,MOD
k:non-negative integer
=COMBINA(5,3)
=COMBINA(6,3)
=COMBINA(42,3)
wiki:en:Multiset
COMBIN
COMBIN:binomial coefficient
=COMBIN(8,6)
=COMBIN(6,2)
wiki:en:Binomial_coefficient
=BETALN(2,3)
=BETALN(-0.5,0.5)
BETA,GAMMALN
wiki:en:Beta_function
BETA:Euler beta function
=BETA(2,3)
=BETA(-0.5,0.5)
BETALN,GAMMALN
a:number
GAMMA,IMIGAMMA
=GAMMALN(23)
GAMMA:the Gamma function
=GAMMA(-1.8)
=GAMMA(2.4)
=FACT(3)
=FACT(9)
EXPM1:EXP(@{x})-1
=EXPM1(0.01)
EXP,LN1P
=EXP(2)
LOG,LOG2,LOG10
=DEGREES(2.5)
RADIANS,PI
=COTH(0.12)
TANH,ACOTH
=COTPI(0.5)
=COTPI(0.25)
COT:the cotangent of @{x}
=COT(0.12)
TAN,ACOT
wolfram:Cotangent.html
=COSH(0.5)
=COSH(1)
SIN,TAN,SINH,COSH,TANH
COSPI:the cosine of Pi*@{x}
=COSPI(0.5)
=COSPI(1)
COS:the cosine of @{x}
wolfram:Cosine.html
=COS(0.5)
=COS(1)
=CEILING(2.43,1)
=CEILING(123.123,3)
=CEILING(-2.43,-1)
CEIL,FLOOR,ABS,INT,MOD
range:cell area
SUMIF,COUNTIF
SUM,COUNTIF
COUNT,SUMIF
=CEIL(0.4)
=CEIL(-1.1)
=CEIL(-2.9)
CEILING,FLOOR,ABS,INT,MOD
x:x-coordinate
y:y-coordinate
=ATAN2(0.5,1.0)
=ATAN2(-0.5,2.0)
ATAN,ATANH,COS,SIN
=ATANH(0.5)
=ATANH(0.9)
ATAN,COS,SIN
ATAN:the arc tangent of @{x}
=ATAN(0.5)
=ATAN(1)
TAN,COS,SIN,DEGREES,RADIANS
=ASINH(0.5)
=ASINH(1)
ASIN,ACOSH,SIN,COS
ASIN:the arc sine of @{x}
=ASIN(0.5)
=ASIN(1)
SIN,COS,ASINH,DEGREES,RADIANS
=ACOTH(2.2)
COTH,TANH
x:value
=ACOT(0.2)
COT,TAN
wolfram:InverseCotangent.html
=ACOSH(1.1)
=ACOSH(6.1)
ACOS,ASINH
ACOS:the arc cosine of @{x}
=ACOS(0.1)
=ACOS(-0.1)
ABS:absolute value
=ABS(7)
=ABS(-3.14)
CEIL,CEILING,FLOOR,INT,MOD
n0:number
n1:number
=HYPOT(3,4)
MIN,MAX
GD:Gudermannian function
=GD(0.5)
TAN,TANH
wolfram:Gudermannian.html
wiki:en:Gudermannian_function
LCM:the least common multiple
n0:positive integer
n1:positive integer
=LCM(2,13)
=LCM(4,7,5)
=GCD(470,770)
=GCD(470,770,1495)
goffice
gnumeric
1.12.23
MDCLXVI
munG
EIGEN:eigenvalues and eigenvectors of the symmetric @{matrix}
If @{matrix} is not symmetric, EIGEN returns #NUM!
If @{matrix} does not contain an equal number of columns and rows, EIGEN returns #VALUE!
ODF.SUMPRODUCT:multiplies components and adds the results
Multiplies corresponding data entries in the given arrays or ranges, and then returns the sum of those products.
If an entry is not numeric or logical, the value zero is used instead.
If arrays or range arguments do not have the same dimensions, return #VALUE! error.
This function differs from SUMPRODUCT by considering booleans.
This function is not Excel compatible. Use SUMPRODUCT instead.
This function is OpenFormula compatible.
SUMPRODUCT,SUM,PRODUCT,G_PRODUCT
If an entry is not numeric, the value zero is used instead.
This function ignores logicals, so using SUMPRODUCT(A1:A5>0) will not work.  Instead use SUMPRODUCT(--(A1:A5>0))
This function is Excel compatible.
This function is not OpenFormula compatible. Use ODF.SUMPRODUCT instead.
SUM,PRODUCT,G_PRODUCT,ODF.SUMPRODUCT
MDETERM:the determinant of the matrix @{matrix}
Let us assume that A1,...,A4 contain numbers 2, 3, 7, and 3; B1,..., B4 4, 2, 4, and 1; C1,...,C4 9, 4, 3; and 2; and D1,...,D4 7, 3, 6, and 5. Then MDETERM(A1:D4) yields 148.
LINSOLVE:solve linear equation
Solves the equation @{A}*X=@{B} and returns X.
If the matrix @{A} is singular, #VALUE! is returned.
MMULT:the matrix product of @{mat1} and @{mat2}
The number of columns in @{mat1} must equal the number of rows in @{mat2}; otherwise #VALUE! is returned.  The result of MMULT is an array, in which the number of rows is the same as in @{mat1}), and the number of columns is the same as in (@{mat2}).
MUNIT:the @{n} by @{n} identity matrix
CHOLESKY:the Cholesky decomposition of the symmetric positive-definite @{matrix}
matrix:a symmetric positive definite matrix
If the Cholesky-Banachiewicz algorithm applied to @{matrix} fails, Cholesky returns #NUM!
If @{matrix} does not contain an equal number of columns and rows, CHOLESKY returns #VALUE!
MPSEUDOINVERSE:the pseudo-inverse matrix of @{matrix}
threshold:a relative size threshold for discarding eigenvalues
MINVERSE:the inverse matrix of @{matrix}
If @{matrix} is not invertible, MINVERSE returns #NUM!
If @{matrix} does not contain an equal number of columns and rows, MINVERSE returns #VALUE!
SERIESSUM:sum of a power series at @{x}
x:number where to evaluate the power series
n:non-negative integer, exponent of the lowest term of the series
coeff:coefficients of the power series
Let us assume that the cells A1, A2, ..., A5 contain numbers 1.23, 2.32, 2.98, 3.42, and 4.33.
Then SERIESSUM(2,1,2.23,A1:A5) evaluates as 5056.37439843926
SUMXMY2:sum of the squares of differences
SUMXMY2 function returns the sum of the squares of the differences of corresponding values in two arrays. The equation of SUMXMY2 is SUM((x-y)^2).
If @{array0} and @{array1} have different number of data points, SUMXMY2 returns #N/A.
Strings and empty cells are simply ignored.
Let us assume that the cells A1, A2, ..., A5 contain numbers 11, 15, 17, 21, and 43 and the cells B1, B2, ..., B5 hold numbers 13, 22, 31, 33, and 39.
Then SUMXMY2(A1:A5,B1:B5) yields 409.
SUMX2PY2:sum of the sum of squares
SUMX2PY2 function returns the sum of the sum of squares of corresponding values in two arrays. The equation of SUMX2PY2 is SUM(x^2+y^2).
If @{array0} and @{array1} have different number of data points, SUMX2PY2 returns #N/A.
Strings and empty cells are simply ignored.
Then SUMX2PY2(A1:A5,B1:B5) yields 7149.
SUMX2MY2:sum of the difference of squares
SUMX2MY2 function returns the sum of the difference of squares of corresponding values in two arrays. The equation of SUMX2MY2 is SUM(x^2-y^2).
Then SUMX2MY2(A1:A5,B1:B5) yields -1299.
ROMAN:@{n} as a roman numeral text
type:0,1,2,3,or 4, defaults to 0
ROMAN returns the arabic number @{n} as a roman numeral text.
If @{type} is 0 or it is omitted, ROMAN returns classic roman numbers.
Type 1 is more concise than classic type, type 2 is more concise than type 1, and type 3 is more concise than type 2. Type 4 is a simplified type.
ARABIC:the Roman numeral @{roman} as number
Any Roman symbol to the left of a larger symbol (directly or indirectly) reduces the final value by the symbol amount, otherwise, it increases the final amount by the symbol's amount.
MROUND:@{x} rounded to a multiple of @{m}
If @{x} and @{m} have different sign, MROUND returns #NUM!
ROUNDUP:@{x} rounded away from 0
If @{d} is greater than zero, @{x} is rounded away from 0 to the given number of digits.
If @{d} is zero, @{x} is rounded away from 0 to the next integer.
If @{d} is less than zero, @{x} is rounded away from 0 to the left of the decimal point
If @{d} is greater than zero, @{x} is rounded to the given number of digits.
If @{d} is zero, @{x} is rounded to the next integer.
If @{d} is less than zero, @{x} is rounded to the left of the decimal point
ROUNDDOWN:@{x} rounded towards 0
If @{d} is greater than zero, @{x} is rounded toward 0 to the given number of digits.
If @{d} is zero, @{x} is rounded toward 0 to the next integer.
If @{d} is less than zero, @{x} is rounded toward 0 to the left of the decimal point
SQRTPI:the square root of @{x} times 
SIGN returns 1 if the @{x} is positive and it returns -1 if @{x} is negative.
QUOTIENT:integer portion of a division
QUOTIENT yields the integer portion of the division @{numerator}/@{denominator}.
QUOTIENT (@{numerator},@{denominator})
@{denominator}+MOD(@{numerator},@{denominator})=@{numerator}
FIB(@{n}) is the @{n}th Fibonacci number.
If @{n} is not an integer, it is truncated. If it is negative or zero FIB returns #NUM!
FACTDOUBLE function returns the double factorial @{x}!!
If @{x} is not an integer, it is truncated. If @{x} is negative, FACTDOUBLE returns #NUM!
ODD:@{x} rounded away from 0 to the next odd integer
EVEN:@{x} rounded away from 0 to the next even integer
TRUNC:@{x} truncated to @{d} digits
d:non-negative integer, defaults to 0
If @{d} is omitted or negative then it defaults to zero. If it is not an integer then it is truncated to an integer.
This function is Excel compatible, but it returns 
 with a better precision.
TANH:the hyperbolic tangent of @{x}
TANH,COS,COSH,SIN,SINH,DEGREES,RADIANS
G_PRODUCT:product of all the values and cells referenced
Empty cells are ignored and the empty product is 1.
MULTINOMIAL:multinomial coefficient (@{x1}+
+@{xn}) choose (@{x1},
,@{xn})
SUMSQ:sum of the squares of all values and cells referenced
SUMA:sum of all values and cells referenced
Numbers, text and logical values are included in the calculation too. If the cell contains text or the argument evaluates to FALSE, it is counted as value zero (0). If the argument evaluates to TRUE, it is counted as one (1).
If @{x} is negative, SQRT returns #NUM!
SINH:the hyperbolic sine of @{x}
SECH:the hyperbolic secant of @{x}
This function is not Excel compatible.
SECH(@{x}) is exported to OpenFormula as 1/COSH(@{x}).
SIN,COS,TAN,CSC,SEC,SINH,COSH,TANH
SEC(@{x}) is exported to OpenFormula as 1/COS(@{x}).
SIN,COS,TAN,CSC,SINH,COSH,TANH,RADIANS,DEGREES
wiki:en:Trigonometric_functions
CSCH:the hyperbolic cosecant of @{x}
wolfram:HyperbolicCosecant.html
SIN,COS,TAN,SEC,SINH,COSH,TANH,RADIANS,DEGREES
COS,TAN,CSC,SEC,SINH,COSH,TANH,RADIANS,DEGREES
RADIANS:the number of radians equivalent to @{x} degrees
MOD:the remainder of @{x} under division by @{n}
MOD function returns the remainder when @{x} is divided by @{n}.
If @{n} is 0, MOD returns #DIV/0!
CEIL,CEILING,FLOOR,ABS,INT,ABS
LOG10:the base-10 logarithm of @{x}
If @{x} 
 0, LOG10 returns #NUM!
LOG2:the base-2 logarithm of @{x}
If @{x} 
 0, LOG2 returns #NUM!
POCHHAMMER:the value of GAMMA(@{x}+@{n})/GAMMA(@{x})
POWER:the value of @{x} raised to the power @{y} raised to the power of 1/@{z}
If both @{x} and @{y} equal 0, POWER returns #NUM!
If @{x} = 0 and @{y} < 0, POWER returns #DIV/0!
If @{x} < 0 and @{y} is not an integer, POWER returns #NUM!
If @{z} is not a positive integer, POWER returns #NUM!
If @{x} < 0, @{y} is odd, and @{z} is even, POWER returns #NUM!
LN1P calculates LN(1+@{x}) but yielding a higher precision than evaluating LN(1+@{x}).
If @{x} 
 -1, LN returns #NUM! error.
LN:the natural logarithm of @{x}
If @{x} 
 0, LN returns #NUM! error.
LOG:logarithm of @{x} with base @{base}
base:base of the logarithm, defaults to 10
@{base} must be positive and not equal to 1.
If @{x} 
 0, LOG returns #NUM! error.
INT:largest integer not larger than @{x}
FLOOR:nearest multiple of @{significance} whose absolute value is at most ABS(@{x})
significance:base multiple (defaults to 1 for @{x} > 0 and -1 for @{x} <0)
FLOOR(@{x},@{significance}) is the nearest multiple of @{significance} whose absolute value is at most ABS(@{x})
FLOOR(@{x}) is exported to ODF as FLOOR(@{x},SIGN(@{x}),1). FLOOR(@{x},@{significance}) is the OpenFormula function FLOOR(@{x},@{significance},1).
COMBINA:the number of @{k}-combinations of an @{n}-element set with repetition
COMBIN returns the binomial coefficient "@{n} choose @{k}", the number of @{k}-combinations of an @{n}-element set without repetition.
If @{n} is less than @{k} COMBIN returns #NUM!
BETALN:natural logarithm of the absolute value of the Euler beta function
BETALN function returns the natural logarithm of the absolute value of the Euler beta function extended to all real numbers except 0 and negative integers.
If @{x}, @{y}, or (@{x} + @{y}) are non-positive integers, BETALN returns #NUM!
BETA function returns the value of the Euler beta function extended to all real numbers except 0 and negative integers.
If @{x}, @{y}, or (@{x} + @{y}) are non-positive integers, BETA returns #NUM!
IGAMMA:the incomplete Gamma function
lower:if true (the default), the lower incomplete gamma function, otherwise the upper incomplete gamma function
regularize:if true (the default), the regularized version of the incomplete gamma function
real:if true (the default), the real part of the result, otherwise the imaginary part
The regularized incomplete gamma function is the unregularized incomplete gamma function divided by gamma(@{a})
This is a real valued function as long as neither @{a} nor @{z} are negative.
=IGAMMA(2.5,-1.8,TRUE,TRUE,TRUE)
=IGAMMA(2.5,-1.8,TRUE,TRUE,FALSE)
GAMMALN:natural logarithm of the Gamma function
FACT:the factorial of @{x}, i.e. @{x}!
The domain of this function has been extended using the GAMMA function.
This function has a higher resulting precision than evaluating EXP(@{x})-1.
EXP:e raised to the power of @{x}
e is the base of the natural logarithm.
DEGREES:equivalent degrees to @{x} radians
COTH:the hyperbolic cotangent of @{x}
wolfram:HyperbolicCotangent.html
COTPI:the cotangent of Pi*@{x}
COSH:the hyperbolic cosine of @{x}
SIN,TAN,SINH,COSH,TANH,RADIANS,DEGREES
CEILING:nearest multiple of @{significance} whose absolute value is at least ABS(@{x})
CEILING(@{x},@{significance}) is the nearest multiple of @{significance} whose absolute value is at least ABS(@{x}).
If @{x} or @{significance} is non-numeric, CEILING returns a #VALUE! error.
If @{x} and @{significance} have different signs, CEILING returns a #NUM! error.
CEILING(@{x}) is exported to ODF as CEILING(@{x},SIGN(@{x}),1). CEILING(@{x},@{significance}) is the OpenFormula function CEILING(@{x},@{significance},1).
AVERAGEIF:average of the cells in @{actual range} for which the corresponding cells in the range meet the given @{criteria}
criteria:condition for a cell to be included
actual_range:cell area, defaults to @{range}
SUMIF:sum of the cells in @{actual_range} for which the corresponding cells in the range meet the given @{criteria}
criteria:condition for a cell to be summed
If the @{actual_range} has a size that differs from the size of @{range}, @{actual_range} is resized (retaining the top-left corner) to match the size of @{range}.
COUNTIF:count of the cells meeting the given @{criteria}
criteria:condition for a cell to be counted
CEIL:smallest integer larger than or equal to @{x}
CEIL(@{x}) is the smallest integer that is at least as large as @{x}.
This function is the OpenFormula function CEILING(@{x}).
ATAN2:the arc tangent of the ratio @{y}/@{x}
ATAN2 calculates the direction from the origin to the point (@{x},@{y}) as an angle from the x-axis in radians.
The result will be between 
 and +
The order of the arguments may be unexpected.
ATANH:the inverse hyperbolic tangent of @{x}
ATANH calculates the inverse hyperbolic tangent of @{x}; that is the value whose hyperbolic tangent is @{x}.
If the absolute value of @{x} is greater than 1.0, ATANH returns #NUM!
ATAN calculates the arc tangent of @{x}; that is the value whose tangent is @{x}.
The result will be between 
/2 and +
ASINH:the inverse hyperbolic sine of @{x}
ASINH calculates the inverse hyperbolic sine of @{x}; that is the value whose hyperbolic sine is @{x}.
ASIN calculates the arc sine of @{x}; that is the value whose sine is @{x}.
If @{x} falls outside the range -1 to 1, ASIN returns #NUM!
ACOTH:the inverse hyperbolic cotangent of @{x}
wolfram:InverseHyperbolicCotangent.html
wiki:en:Inverse_hyperbolic_function
ACOT:inverse cotangent of @{x}
ACOSH:the hyperbolic arc cosine of @{x}
ABS gives the absolute value of @{x}, i.e. the non-negative number of the same magnitude as @{x}.
HYPOT:the square root of the sum of the squares of the arguments
LCM calculates the least common multiple of the given numbers @{n0},@{n1},..., the smallest integer that is a multiple of each argument.
If any of the arguments is not an integer, it is truncated.
GCD:the greatest common divisor
GCD calculates the greatest common divisor of the given numbers @{n0},@{n1},..., the greatest integer that is a divisor of each argument.
;*2$"
plugin.so.debug
7zXZ
"g 7
4*^>
bg['
2t,xN
QHVE
Ubj~
9FQ[~
,Oy[H
{n^sn
2P>W
y4DZ
^&e5
QB.,8
rfGO
Ci Q
,pLo
z4Ry
H8ksV
e8e%U
{F\@
IP@yr
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.bss
.gnu_debuglink
.gnu_debugdata
