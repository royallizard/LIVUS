/lib64/ld-linux-x86-64.so.2
?]Sf
librrd_th.so.4
g_tree_new_full
__gmon_start__
_Jv_RegisterClasses
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
g_tree_lookup
rrd_free
rrd_info_r
rrd_random
rrd_add_strdup_chunk
rrd_get_error
rrd_create_r2
rrd_clear_error
rrd_mkdir_p
rrd_init
rrd_first_r
rrd_strtodbl
rrd_close
rrd_add_strdup
rrd_fetch_r
rrd_scaled_duration
rrd_freemem
rrd_info_free
rrd_strerror
rrd_update_r
rrd_free_ptrs
rrd_add_ptr
rrd_open
libpthread.so.0
pthread_cond_init
read
pthread_sigmask
pthread_cond_wait
pthread_cond_destroy
__errno_location
pthread_mutex_lock
pthread_cond_signal
pthread_cond_timedwait
accept
pthread_create
pthread_join
pthread_attr_init
pthread_cond_broadcast
pthread_detach
pthread_attr_destroy
pthread_mutex_unlock
pthread_attr_setdetachstate
lseek
libm.so.6
libdbi.so.1
_fini
libdl.so.2
libpangocairo-1.0.so.0
libpango-1.0.so.0
libgobject-2.0.so.0
libglib-2.0.so.0
g_tree_replace
g_tree_foreach
g_tree_destroy
g_tree_height
g_tree_remove
g_tree_nnodes
libcairo.so.2
libxml2.so.2
libc.so.6
setuid
socket
__printf_chk
exit
readdir
fopen
gai_strerror
strncmp
ftruncate
__strdup
__isnan
getpwuid
closedir
getgrgid
ftell
strncpy
fork
sigfillset
time
__stack_chk_fail
unlink
listen
realloc
abort
sigwaitinfo
memchr
getpid
kill
chmod
__assert_fail
strtol
feof
fgets
getpwnam
calloc
strlen
openlog
getaddrinfo
dirname
strstr
bind
chdir
__syslog_chk
getopt
poll
__fprintf_chk
getgrnam
fputc
memcpy
fclose
__vsnprintf_chk
strtoul
setsockopt
malloc
strcasecmp
__strncpy_chk
opendir
getenv
optarg
stderr
__snprintf_chk
getuid
getegid
__realpath_chk
chown
fwrite
gettimeofday
rename
geteuid
strchr
getsockname
rindex
__strtok_r
fdopen
qsort
__cxa_finalize
freeaddrinfo
setsid
__xstat
memmove
access
setgid
strcmp
__libc_start_main
closelog
_edata
__bss_start
_end
GLIBC_2.2.5
GLIBC_2.3.2
GLIBC_2.4
GLIBC_2.14
GLIBC_2.3.4
AWAVAUATUSH
[]A\A]A^A_
l$8H
D$8D
D$8n
\$,H
D$4H
D$ H
D$@H
s4Ii
fffff.
fffff.
fffff.
fffff.
ATUH
[]A\
ATUSI
[]A\A]
]A\A]
fff.
H;E0H
AVAUH
ATUI
]A\A]A^
ffff.
AUATUSH
[]A\A]
AUAT1
[]A\A]
AUATUSH
8/t/H
+XZH
fffff.
D$(1
~|H)
H9\$
L$(dH3
AVAU1
ATUSH
D$(1
HiD$
L$(dH3
0[]A\A]A^
HiD$
H;D$
uxH9=q
Wht#H
ffff.
H+N Hc5
|>H;8umH
H9^ ~
AWAVH
AUATUSH
([]A\A]A^A_
AUATUSH
[]A\A]
l$ L
AVAUI
t$ L
[]A\A]A^
fffff.
ATUH
d$ L
[]A\
ffff.
ATUI
[]A\
t$ H
AVAUH
ATUSH
L$(1
T$ H
l$ L
L$(dH3
0[]A\A]A^
l$ L
fff.
AWAVAUATUSH
]A\H
AXAYH
t$ 1
9t$<L
D$8E1
9t$<
[]A\A]A^A_
AWAVAUATI
([]A\A]A^A_
AWAVH
AUATUSH
HcT$
[]A\A]A^A_
AVAUATUS
]A\A]A^
]A\A]A^
AWAVAUATI
l$@L
d$HH
L$HL
D$@L
[]A\A]A^A_
|$PL
L$PH
D$XH
D$XH
L$PH
L$PH
T$8H
D$XH
D$ H
tfH=
D$`M
D$$PL
T$0H
t$8H
ATUI
[]A\
t$ H
ATUI
[]A\
T$ 1
D$8%
AUATI
[]A\A]
T$8H
T$ L
,X(H
AVAUATUI
[]A\A]A^
t$ H
ffffff.
AUATUSH
d$(H
[]A\A]
t$0L
|$(H
|$(L
L$(H
L$(H
fffff.
uCUSH
ffff.
AWAVAUATUSH
D$8H
t$ H
t$0H
T$8L
L$0H
[]A\A]A^A_
t$`H
t$ H
d$HH
D$X1
L$HH9L$X
d$PM
D$X1
L$PH9L$X
K0PH
D$XH
D$(H
T$(H
k0I9
l$XA
s8E1
sPt$D;>t61
L$XH
|$ H
|$ H
|$ H
H;SHH
L$XH
AWAVH
AUATL
D$ H
4$dH
dH34%(
[]A\A]A^A_
T$0H
T$8H
T$@H
l$h1
D$pL
t$XE1
|$@M
|$0H
L9|$8L
L9t$h
D$PL
L9t$h
t$@H
H9D$8
ffff.
AWAVI
AUATUSH
L$(L
D$ t'H
t$(I
|$0L
d$ L
l$(L
[]A\A]A^A_
=Iv 
==v 
|$0H
=(w 
t$0H
=Ow 
D$8E1
D$@H
D$HH
T$8H
L+s Hc
=9u 
L$8H
T$PH
t$0H
L$0H
D$h%
L$0H
L$0H
L$0H
L$0H
=Hr 
t$0H
ffff.
AWAV
AUATI
\$PH
l$ H
d$P1
D$  
[]A\A]A^A_
d$QE
D$ !
AWAVAUATUSH
D$x1
/t;H
T$xdH3
[]A\A]A^A_
=m| 
AVAUH
ATUL
D$X1
\$XdH3
`[]A\A]A^
T$ H
T$HH
|$ L
T$PD
\$0H
T$@N
t$(A
D$@H
ZYtEI
L9l$H
D$HH
D$PN
AWAVA
AUATI
=A` 
=i^ 
=P] 
[]A\A]A^A_
=Q\ 
=!\ 
	5lr 
=w^ 
8/u	H;
={] 
=}] 
=5] 
AWAVA
AUATL
%nN 
-nN 
[]A\A]A^A_
rrd_daemon.c
/var/run/rrdcached.pid
rrdcached: strdup(): %s
cannot close journal: %s
journal_dir != ((void *)0)
journal_cur != ((void *)0)
%s/%s.%010d.%06d
rrd.journal
started new journal %s
%s %s
removing old journal %s
caught SIG%s
Lock failed.
status: %d
Unlock failed.
Signal wait failed.
%s: %s
errno: %d
TERM
USR1
USR2
stats_queue_length > 0
tmp != ((void *)0)
%s/%s
removing journals
goodbye
status == (!(0))
flushing old values
rotating journals
ci->next == ((void *)0)
ci->prev == ((void *)0)
(char *) key == ci->file
ci->values != ((void *)0)
ci->values_num > 0
wrote
sock != ((void *)0)
add_to_wbuf: realloc failed
PONG
Command overview
Help for %s
Usage: %s
in queue.
Syntax error.
Usage: %s
updates pending
Received FLUSHALL
Started flush.
BATCH
Unknown command: %s
QUIT
HELP
i < 32
Can't use '%s' here.
Permission denied.
stat error
unknown error
not a regular file
not owned by daemon user
checking for journal files
rrd.journal.old
rrd.journal.0000
rrd.journal.0001
journal_replay: %s : %s (%s)
replaying from journal: %s
journal processing complete
QueueLength: %lu
UpdatesReceived: %lu
FlushesReceived: %lu
UpdatesWritten: %lu
DataSetsWritten: %lu
TreeNodesNumber: %lu
TreeDepth: %lu
JournalBytes: %lu
JournalRotate: %lu
Statistics follow
file != ((void *)0)
Cannot read: %s
rrdcreate request for %s
Cannot create: %s
Cannot allocate memory
RRA:
RRD created OK
RRD Error: %s
forget
Gone!
Successfully flushed %s.
Nothing to flush: %s.
No such file: %s.
Internal error.
Failed with status %i.
Invalid index specified (%d)
%s %d NaN
%s %d %0.10e
%s %d %lu
%s %d %d
%s %d %s
Info for %s follows
sock->batch_start
errors
Already in BATCH
rrd_fetch_r failed: %s
field %s not found in %s
field %s already used
FlushVersion: %lu
Start: %lu
End: %lu
Step: %lu
DSCount: %lu
DSName: %s
parsed.step > 0
%10lu:
 %0.17e
No such file: %s
stat failed with error %i.
Not a regular file: %s
Cannot read/write %s: %s
update
No values updated.
42217
unix:
Failed memory allocation
%i Success
DSName-
%s%s: BinaryData %i %i %s
LITTLE
read_options: malloc failed.
Invalid write jitter %s: %s
Invalid thread count: -t %s
read_options: strdup failed.
Invalid allocation size: %s
1.5.3
Invalid base directory: %s
/tmp
create
open
LISTEN_PID
LISTEN_FDS
unix:/tmp/rrdcached.sock
daemonize: fork(2) failed.
/dev/null
faild to run dup.
rrdcached
starting up
daemonize: g_tree_new failed.
setgid(%u) succeeded
setuid(%u) succeeded
Signal mask could not be set.
listening for connections
starting shutdown
UPDATE
WROTE
FLUSH
FLUSH <filename>
FLUSHALL
PENDING
PENDING <filename>
FORGET
FORGET <filename>
QUEUE
QUEUE
STATS
STATS
HELP [<command>]
PING
PING
PING given, PONG returned
FETCH
FETCHBIN
INFO
INFO <filename>
FIRST
FIRST <filename> <rra index>
LAST
LAST <filename>
CREATE
QUIT
Disconnect from rrdcached.
buffer[buffer_size - 1] == '\0'
Failed to create pidfile directory '%s': %s
rrdcached: can't %s pid file '%s' (%s)
JOURNALING DISABLED: Error while trying to create %s : %s
JOURNALING DISABLED: All values will be flushed at shutdown
%s: Signal %d was received from process %u.
filename != ((void *)0) && *filename != ((void *)0)
cache_queue_head == ((void *)0)
clean shutdown; all RRDs flushed
expedited shutdown; journals will be used at next startup
journal_rotate: malloc(journal_set) failed
flush_thread_main: pthread_cond_timedwait returned %i.
tree_callback_flush: rrd_add_ptrs failed.
queue_thread_main: pthread_cond_wait returned %i.
queue_thread_main: strdup failed.
queue_thread_main: rrd_update_r (%s) failed with status %i. (%s)
add_response_info: vnsprintf failed
send_response: could not write status message
send_response: could not write results
handle_request: Unable parse command.
must not be user/group writable
journal_init: opendir(%s) failed
journal_init: cannot add journal file %s!
journal_replay: cannot open journal file: '%s' (%s)
Malformed journal entry at line %lu
Replayed %d entries (%d failures)
connection_thread_main: cannot malloc read buffer
connection_thread_main: poll(2) failed.
connection_thread_main: poll(2) returned something unexpected: %#04hx
connection_thread_main: read() failed.
Cannot create: empty argument.
No permission to recursively create: %s
Did you pass -R to the daemon?
The first entry must be after 1980.
Error: rrdcached: Invalid timestamp returned
Go ahead.  End with dot '.' on its own line.
flush_file (%s) failed with status %i.
Cannot parse start time `%s': Only simple integers are allowed.
Cannot parse end time `%s': Only simple integers are allowed.
too many fields given - duplicates!
handle_request_update: stat (%s) failed.
handle_request_update: malloc failed.
handle_request_update: strdup failed.
handle_request_update: Error reading field.
Cannot find timestamp in '%s'!
illegal attempt to update using time %lf when last update time is %lf (minimum one second step)
handle_request_update: rrd_add_strdup failed.
errors, enqueued %i value(s).
rrdcached: Malformed address: %s
rrdcached: Garbage after address: %s
rrdcached: getaddrinfo(%s) failed: %s
rrdcached: open_listen_socket_network: realloc failed.
rrdcached: network socket(2) failed: %s.
rrdcached: bind(%s) failed: %s.
rrdcached: listen(%s) failed: %s
Failed to create socket directory '%s': %s
rrdcached: open_listen_socket_unix: realloc failed.
rrdcached: unix socket(2) failed: %s
rrdcached: failed to set socket group permissions (%s)
rrdcached: failed to set socket file permissions (%o): %s
rrdcached: listen(%s) failed: %s.
read_options: couldn't map "%s" to a group, Sorry
read_options: couldn't map "%s" to a user, Sorry
read_options: rrd_add_ptr failed.
read_options: Invalid file mode "%s".
Invalid flush interval %s: %s
Invalid write interval %s: %s
Failed to create base directory '%s': %s
Failed to canonicalize the base directory '%s': %s
Base directory (-b) resolved via file system links!
Please consult rrdcached '-b' documentation!
Consider specifying the real directory (%s)
Failed to create journal directory '%s': %s
Must specify a writable directory with -j! (%s)
Unable to resolve journal path (%s,%s)
RRDCacheD %s
Copyright (C) 2008,2009 Florian octo Forster and Kevin Brintnall
Usage: rrdcached [options]
Valid options are:
  -a <size>     Memory allocation chunk size. Default is 1.
  -B            Restrict file access to paths within -b <dir>
  -b <dir>      Base directory to change to.
  -F            Always flush all updates at shutdown
  -f <seconds>  Interval in which to flush dead data.
  -G <group>    Unprivileged group used when running.
  -g            Do not fork and run in the foreground.
  -j <dir>      Directory in which to create the journal files.
  -L            Open sockets on all INET interfaces using default port.
  -l <address>  Socket address to listen to.
                Default: unix:/tmp/rrdcached.sock
  -m <mode>     File permissions (octal) of all following UNIX sockets
  -O            Do not allow CREATE commands to overwrite existing
                files, even if asked to.
  -P <perms>    Sets the permissions to assign to all following sockets
  -p <file>     Location of the PID-file.
  -R            Allow recursive directory creation within -b <dir>
  -s <id|name>  Group owner of all following UNIX sockets
                (the socket will also have read/write permissions for that group)
  -t <threads>  Number of write threads.
  -U <user>     Unprivileged user account used when running.
  -w <seconds>  Interval in which to write data.
  -z <delay>    Delay writes up to <delay> seconds to spread load
For more information and a detailed description of all options please refer
to the rrdcached(1) manual page.
?a:Bb:Ff:gG:hj:Ll:m:OP:p:Rs:t:U:w:z:
WARNING: flush interval (-f) should be at least 2x write interval (-w) !
WARNING: write delay (-z) should NOT be larger than write interval (-w) !
WARNING: -B does not make sense without -b!
  Consult the rrdcached documentation
WARNING: -R does not make sense without -B!
  Consult the rrdcached documentation
read_options: Adding permission "%s" to socket failed. Most likely, this permission doesn't exist. Check your command line.
FATAL: Another rrdcached daemon is running?? (pid %d)
FATAL: Faild to truncate stale PID file. (pid %d)
rrdcached: removed stale PID file (no rrdcached on pid %d)
rrdcached: starting normally.
rrdcached: open_listen_socket_systemd: realloc failed.
open_listen_sockets_systemd: problem getting fd %d: %s
rrdcached: FATAL: cannot open any listen sockets
daemonize: chdir (%s) failed.
write_pidfile: fdopen() failed.
daemonize: failed to setgid(%u)
daemonize: failed to setuid(%u)
Signal set could not be initialised.
A thread could not be created.
A thread could not be detached.
FATAL: cannot calloc queue threads
FATAL: cannot create queue thread
FATAL: cannot create flush thread
listen_thread_main: no listen_fds !
listen_thread_main: malloc failed.
listen_thread_main: poll(2) failed.
listen_thread_main: poll(2) returned something unexpected for listen FD #%i.
listen_thread_main: accept(2) failed.
listen_thread_main: pthread_create failed.
rrdcached: daemonize failed, exiting.
UPDATE <filename> <values> [<values> ...]
Adds the given file to the internal cache if it is not yet known and
appends the given value(s) to the entry. See the rrdcached(1) manpage
for details.
Each <values> has the following form:
  <values> = <time>:<value>[:<value>[...]]
See the rrdupdate(1) manpage for details.
Adds the given filename to the head of the update queue and returns
after it has been dequeued.
Triggers writing of all pending updates.  Returns immediately.
Shows any 'pending' updates for a file, in order.
The updates shown have not yet been written to the underlying RRD file.
Removes the file completely from the cache.
Any pending updates for the file will be lost.
Shows all files in the output queue.
The output is zero or more lines in the following format:
(where <num_vals> is the number of values to be written)
<num_vals> <filename>
Returns some performance counters, see the rrdcached(1) manpage for
a description of the values.
The 'BATCH' command permits the client to initiate a bulk load
   of commands to rrdcached.
Usage:
    client: BATCH
    server: 0 Go ahead.  End with dot '.' on its own line.
    client: command #1
    client: command #2
    client: ... and so on
    client: .
    server: 2 errors
    server: 7 message for command #7
    server: 9 message for command #9
For more information, consult the rrdcached(1) documentation.
FETCH <file> <CF> [<start> [<end>] [<column>...]]
The 'FETCH' can be used by the client to retrieve values from an RRD file.
FETCHBIN <file> <CF> [<start> [<end>] [<column>...]]
The 'FETCHBIN' can be used by the client to retrieve values from an RRD file.
The INFO command retrieves information about a specified RRD file.
This is returned in standard rrdinfo format, a sequence of lines
with the format <keyname> = <value>
Note that this is the data as of the last update of the RRD file itself,
not the last time data was received via rrdcached, so there may be pending
updates in the queue.  If this bothers you, then first run a FLUSH.
The FIRST command retrieves the first data time for a specified RRA in
an RRD file.
The LAST command retrieves the last update time for a specified RRD file.
Note that this is the time of the last update of the RRD file itself, not
the last time data was received via rrdcached, so there may be pending
updates in the queue.  If this bothers you, then first run a FLUSH.
CREATE <filename> [-b start] [-s step] [-O] <DS definitions> <RRA definitions>
The CREATE command will create an RRD file, overwriting any existing file
unless the -O option is given or rrdcached was started with the -O option.
The start parameter needs to be in seconds since 1/1/70 (AT-style syntax is
not acceptable) and the step is in seconds (default is 300).
The DS and RRA definitions are as for the 'rrdtool create' command.
cleanup
socket_permission_check
handle_request
signal_receiver
open_listen_socket
batch_done
handle_request_fetch
handle_request_fetchbin
add_to_wbuf
buffer_get_field
check_file_access
get_abs_path
socket_permission_add
queue_thread_main
remove_from_queue
enqueue_cache_item
tree_callback_flush
flush_old_values
journal_new_file
;*3$"
rrdcached.debug
7zXZ
K=bO
n0w!s
c6'Q
zqQk
@PHT<8O
lyEa
0/Sb|
UvV1a
~!p+
:!3Q
<,VK
^,*G
:D~.;L
e"/H1
]5Yo
C: 6
BO8z/
C{$sh
.TBY2
l!`>
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.data
.bss
.gnu_debuglink
.gnu_debugdata
