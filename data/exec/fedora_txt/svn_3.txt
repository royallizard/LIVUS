/lib64/ld-linux-x86-64.so.2
#t2CE
libsvn_client-1.so.0
apr_hash_get
svn_error_find_cause
svn_hash_from_cstring_keys
svn_hash_keys
svn_path_cstring_from_utf8
svn_string_create
svn_opt_parse_path
svn_diff_file_options_parse
svn_dirent_split
__gmon_start__
_Jv_RegisterClasses
svn_wc_get_actual_target2
svn_io_check_path
svn_error_createf
svn_io_remove_file2
svn_sort_compare_items_lexically
svn_path_url_add_component2
svn_dirent_is_child
svn_config_get
svn_wc_read_kind
apr_hash_next
apr_array_push
svn_io_open_uniquely_named
svn_cstring_split
svn_io_temp_dir
svn_diff_file_output_unified3
apr_array_pop
svn_error__malfunction
svn_dirent_join
_ITM_deregisterTMCloneTable
svn_mime_type_is_binary
svn_relpath_canonicalize
svn_dirent_local_style
_ITM_registerTMCloneTable
svn_dirent_get_absolute
svn_stringbuf_appendbyte
apr_pool_destroy
svn_stringbuf_create
svn_error_quick_wrap
svn_error_create
apr_hash_count
svn_wc_create_conflict_result
svn_uri_basename
svn_error_clear
svn_stringbuf_dup
svn_dirent_internal_style
svn_depth_to_word
svn_sort__hash
apr_hash_set
apr_pool_clear
svn_diff_file_diff_2
svn_ctype_table
svn_checksum_to_cstring
apr_psprintf
svn_time_from_cstring
apr_palloc
svn_wc__get_tree_conflict
svn_stringbuf__morph_into_string
svn_dirent_basename
svn_diff_file_options_create
svn_dirent_condense_targets
svn__apr_hash_index_val
svn_stringbuf_appendcstr
svn_error_compose_create
svn_wc_conflicted_p3
svn_path_uri_decode
svn_path_is_url
svn_depth_from_word
svn_utf_cstring_from_utf8_ex2
apr_hash_first
apr_pstrdup
svn_dirent_is_absolute
svn_subst_translate_cstring2
svn_string_dup
svn_opt__split_arg_at_peg_revision
svn_stream_write
apr_hash_make
svn_sort_compare_items_as_paths
svn_error_compose
svn_string_compare
svn_prop_name_is_valid
apr_pstrcat
svn_dirent_skip_ancestor
svn_config_get_bool
svn__apr_hash_index_key
svn_dirent_dirname
svn_pool_create_ex
apr_array_make
svn_prop_get_value
svn_utf_cstring_to_utf8
svn_client__assert_homogeneous_target_type
svn_client_relocate2
svn_client_proplist3
svn_client_merge_peg4
svn_client_get_wc_root
svn_client_revprop_set2
svn_client_remove_from_changelists
svn_client_delete4
svn_client_cleanup
svn_client_patch
svn_client_mkdir4
svn_client_cat2
svn_client_propset_remote
svn_client_log5
svn_client_add4
svn_client_resolve
svn_client_import4
svn_client_args_to_target_array2
svn_client_upgrade
svn_client_revert2
svn_client_status5
svn_client_status_dup
svn_client_revprop_list
svn_client_merge4
svn_client_update4
svn_client_diff_peg5
svn_client_propset_local
svn_client_diff_summarize_peg2
svn_client_move6
svn_client_get_changelists
svn_client_merge_reintegrate
svn_client_diff5
svn_client_diff_summarize2
svn_client_create_context
svn_client_add_to_changelist
svn_client_mergeinfo_log
svn_client_propget4
svn_client_copy6
svn_client_info3
svn_client_switch3
svn_client_unlock
svn_client_commit5
svn_client_blame5
svn_client_checkout3
svn_client_lock
svn_client_version
svn_client_export5
svn_client_url_from_path2
svn_client_list2
svn_client_revprop_get
_fini
libsvn_wc-1.so.0
svn_stringbuf_strip_whitespace
svn_string_ncreate
svn_stringbuf_create_from_string
svn_error_wrap_apr
svn_stringbuf_from_file2
svn_prop_is_boolean
svn_token__to_word
svn_string_create_from_buf
svn_diff_file_output_merge2
svn_diff_file_diff3_2
svn_stringbuf_set
svn_wc_version
svn_wc__node_get_pre_ng_status_data
libsvn_ra-1.so.0
svn_stream_printf
apr_file_open_stderr
svn_ra_version
svn_ra_print_modules
svn_ra_initialize
libsvn_diff-1.so.0
apr_time_exp_lt
apr_strftime
svn_utf_cstring_from_utf8
svn_stringbuf_setempty
apr_getopt_long
svn_diff_version
libsvn_ra_local-1.so.0
svn_ver_check_list
svn_delta_version
svn_subr_version
libsvn_repos-1.so.0
svn_cstring_atoi
svn_time_to_cstring
svn_prop_needs_translation
apr_file_close
libsvn_fs-1.so.0
libsvn_fs_fs-1.so.0
apr_time_now
libsvn_fs_base-1.so.0
libsvn_fs_util-1.so.0
libsvn_ra_svn-1.so.0
apr_file_open_stdout
libsasl2.so.3
libsvn_ra_neon-1.so.0
apr_file_write_full
apr_ltoa
svn_xml_escape_cdata_cstring
libsvn_delta-1.so.0
libsvn_subr-1.so.0
apr_allocator_owner_set
apr_env_get
apr_allocator_create
apr_allocator_max_free_set
apr_file_mtime_set
apr_stat
svn_config_set_bool
svn_cmdline_printf
svn_subst_detranslate_string
svn_compat_log_revprops_out
svn_opt_get_canonical_subcommand2
svn_xml_make_header2
svn_cmdline__parse_config_option
svn_xml_make_close_tag
svn_cstring_count_newlines
svn_opt_print_help3
svn_tristate__to_word
svn_opt_get_option_from_code2
svn_opt_format_option
svn_cmdline_fprintf
svn_config_get_config
svn_utf_stringbuf_to_utf8
svn_subst_translate_string2
svn_opt_subcommand_takes_option3
svn_opt_parse_revprop
svn_opt_parse_revision_to_range
svn_config_ensure
svn_cmdline_fflush
svn_cmdline__apply_config_options
svn_handle_error2
svn_cmdline_create_auth_baton
svn_cmdline_init
svn_cmdline_fputs
svn_xml_fuzzy_escape
svn_compat_log_revprops_clear
svn_opt_push_implicit_dot_target
svn_stream_for_stdout
svn_cmdline_cstring_from_utf8
svn_cmdline__print_xml_prop
svn_cmdline_handle_exit_error
svn_xml_make_open_tag_hash
svn_cmdline__getopt_init
svn_cmdline_prompt_user2
svn_cmdline_output_encoding
svn_handle_warning2
svn_opt_parse_num_args
svn_time_to_human_cstring
svn_io_parse_mimetypes_file
svn_xml_make_open_tag
svn_config_set
svn_io_run_cmd
libz.so.1
libsqlite3.so.0
libmagic.so.1
libaprutil-1.so.0
libcrypt.so.1
libexpat.so.1
libdb-5.3.so
libapr-1.so.0
apr_filepath_set
apr_signal
apr_filepath_get
libpthread.so.0
system
__errno_location
libdl.so.2
libneon.so.27
libc.so.6
__printf_chk
dcngettext
dcgettext
__stack_chk_fail
abort
__assert_fail
strtol
strlen
strstr
getenv
__ctype_tolower_loc
__cxa_finalize
strcmp
__libc_start_main
_edata
__bss_start
_end
svn_cl__diff
svn_cl__move
svn_cl__propedit
svn_cl__mkdir
svn_cl__import
svn_cl__add
svn_cl__propset
svn_cl__status
svn_cl__merge
svn_cl__delete
svn_cl__revert
svn_cl__commit
svn_cl__log
svn_cl__lock
svn_cl__blame
svn_cl__copy
GLIBC_2.2.5
GLIBC_2.4
GLIBC_2.3
GLIBC_2.3.4
%z	#
%r	#
%j	#
%b	#
%Z	#
%R	#
%J	#
%B	#
%:	#
%2	#
%*	#
%"	#
u.H9\$
ATUSH
[]A\A]A^A_
T$pH
T$XH
T$xH
5'S"
D$HH
\$HH
t$@H
A9L$
L$0u
|$XH
|$xH
|$0H
|$XH
D$HH
D$HH
D$HH
|$0H
|$XH
|$XH
D$HH
|$XH
D$HH
l$8L
D$WA
t$0L
~ZL9
l$8L
l$8H
l$8L
t+H;
t)H;
t H;
u?H;
l$ H
l$8L
=IG"
|$hH
t$`H
=2@"
fffff.
AVAUI
ATUSH
([]A\A]A^A_
A9\$
T$`H
\$hI
gfffffff
([]A\A]A^A_
AWAVM
|$pH
L$xL
txM9
D$(H
L$ L
L$ L
8[]A\A]A^A_
]A\A]A^A_1
D$ E
D$ H
fff.
AVAUM
L$pL
|$hH
|$hH
t$`H
([]A\A]A^A_
AWAVAUI
ATUH
|$pE1
[]A\A]A^A_
D$pD
L$xE1
t$XH
l$hH
L$@H
L$(H
L$HH
|$ L
D$XH
L$HH
T$PH
t$(H
D$0H
D$0H
D$pA
t$@H
|$(L
t$<E
L$xH
t$hL
t$hI
|$xL
l$hL
t$01
AUATUSH
|$8E1
h[]A\A]A^A_
|$@L
L$HE1
L$ H
L$PH
L$(f
t$ H
L$(M
t$HI
D$8A
AWAVAUI
ATUH
([]A\A]A^A_
AVAUATI
|$8L
x[]A\A]A^A_
D$8HcP
L$HE1
|$`H
L$ H
L$PH
t$`H
|$hH
t$PH
|$XD
D$(H
D$8A
T$XH
t$ L
|$HL
|$@L
t$@H
|$`L
|$@L
AWE1
AVAUATUH
8[]A\A]A^A_
L$ E1
t$ H
|$(H
[]A\
fff.
AVE1
AUATUSH
l$@H
[]A\A]A^
|$@H
t$@H
T$@H
t$HH
|$PI
D$HH
L$PH
t$`H
|$XI
|$(H
t$<H
L$(H
T$PI
|$xI
D$@H
D$`I
D$hH
D$@H
D$`I
D$H1
\$ L
T$<H
|$@H
|$xH
t$XH
[]A\A]
fffff.
AUATUSH
[]A\A]A^
AVAUATI
[]A\A]A^A_
H9C0
D$xL
D$(H
l$@H
D$0H
D$xH
D$HH
D$pH
D$PL
t$(H
|$0L
l$@H
|$xH
|$xL
D$xH
|$pL
|$PI
t$pL
|$xL
|$PM
t$pH
|$xE1
l$@H
AWE1
AVAUATUSH
L$PH
L$@L
h[]A\A]A^A_
t$PH
D$X1
D$(I
t$(H
D$XH
|$0M
D$8I
|$@H
D$PH
|$PA
D$HH
|$HM
|$0H
D$HH
D$HH
D$HH
AUE1
([]A\A]
ATUH
t![]A\
]A\H
AVAUATUH
D$8L
D$8H
@[]A\A]A^
AWAVI
AUATL
L$hH
L$hH
T$xH
T$pH
D$hD
l$ L
D$pE
t$xH
|$pL
l$ L
t$pA
[]A\A]A^A_
L$hH
l$XH
D$0L
L$PH
t$HH
T$8H
L$hH
l$XL
t$8H
D$0L
L$PH
T$@H
T$pH
ATUSH
|$@L
[]A\A]
l$PH
t$HH
T$@D
t$H1
T$`I
T$HH
T$hH
T$@H
T$`I
T$HH
\$(L
d$ H
T$pH
D$8H
|$Ht
AUATI
SubversiH
D$0H
on is a H
D$8H
tool forH
D$@H
 version
D$HH
 controlH
D$PH
For adH
D$XH
ditional
D$`H
 informa
D$hH
tion, seH
D$pH
e http:/H
D$xH
/subversH
ion.apacf
he.org/
[]A\A]A^
t$0H
\$ M
AUATI
|$(L
0[]A\A]A^
AWAVI
AUATI
D$8H
|$8H
D$8H
H[]A\A]A^A_
AWAVAUI
8[]A\A]A^A_
D$PH
D$PH
D$PL
D$PL
l$@M
l$0M
D$PH
D$PE1
L$(H
L$(H
D$PI
P@D9j
L$HH
L$HH
L$HH
D$HH
D$PH
T$PH
|$8H
T$HH
T$HH
AWAVI
AUATUSH
|$XE1
[]A\A]A^A_
|$XH
|$`H
L$h1
\$HE1
L$8H
L$pH
L$(H
|$pE
l$ L
T$@H
t$(H
D$0H
|$hH
D$XA
t$8H
|$(L
t$hH
|$8L
\$HL
 []A\A]A^
L$(H
|$ H
 []A\A]A^
D$x1
\$xdH3
[]A\A]A^A_
t$0H
t$ M
|$(L
AWAVI
AUATUH
|$XE1
[]A\A]A^A_
|$XH
D$XD
L$`E1
l$@H
L$(H
L$hH
L$HH
L$pH
shE1
D$<H
|$`L
D$ H
D$ H
D$XA
t$(L
l$@H
D$hH
D$`L
|$HL
D$hH
l$@H
|$HH
D$hH
l$@L
D$ 1
AWE1
AVAUATUSH
t$ H
8[]A\A]A^A_
D$(L
|$(E1
D$(H
t$ H
|$ L
AUATUSH
|$xH
[]A\A]A^A_
D$(H
D$hH
t$`L
T$pH
L$@H
D$ H
D$HH
t$8L
L$0H
L$XH
t$hH
T$`H
L$XH
L$ H
t$(H
D$xH
D$xH
AWAVAUATI
[]A\A]A^A_
5^x"
T$pL
L$hx?H
T$pH
L$hH
L$xI
D$`A
L$`L
L$hH
{8E1
S8E1
5$u"
51t"
L$hL
D$`L
L$hH
l$8L
D$@L
L$PL
d$XE1
AWAVAUATUH
[]A\A]A^A_
D$HH
|$HH
D$HH
t$XH
|$`H
D$PH
D$8L
t$`E
D$HH
T$XL
/t'H
D$HA
D$xH
D$8D
l$(L
d$ H
|$HH
D$8D
l$(L
d$ H
|$HH
ffff.
AVAUATUSH
|$XE1
[]A\A]A^A_
t$`H
t$hH
T$pH
|$xH
|$`H
|$`I
L$@E
|$`L
|$hA
D$pH
D$xH
D$ H
\$0L
l$(A
|$`A
T$`H
t$hH
t$TH
D$(H
\$8H
l$0H
t$pA
T$hM
D$ A
D$HL
L$@I
L$@A
D$HL
|$`H
|$hH
|$HH
|$HH
t$TH
Dt$H
AUATI
|$8L
p[]A\A]A^
t$PH
t$@L
D$H1
L$@H
t$HH
T$`L
d$(L
l$ H
L$@H
t$HH
T$`L
d$(L
l$ H
t$HH
|$`L
AUE1
([]A\A]
AUATI
l$(H
0[]A\A]A^
|$(HcG
t$(L
C\E1
|$(L
AWAVAUI
ATUH
fPdH
D$H1
D$@    
-u]"
D$ H
D$ H
D$HdH3
X[]A\A]A^A_
L$ H
L$ 1
\$8L
L$0L
D$(M
\$8L
L$0H
D$(H
L$ L
T$@A
|$A 
T$@L
D$@EA
T$@L
T$@A
L$ L
L$01
D$(H
L$0L
D$(H
L$ L
D$@C
|$A 
|$B 
L$(L
L$(L
D$ H
D$BB
D$AC
D$@C
D$AC
D$AC
D$@C
D$AG
D$AG
D$AU
D$@U
D$@U
L$ H
D$AU
D$@G
L$ 1
L$(H
L$ H
D$@G
L$ L
L$01
L$ H
ffffff.
AVAUATI
[]A\A]A^1
[]A\A]A^
[]A\A]A^
tY[]A\A]A^
ffffff.
AUE1
ATUSH
l$8H
X[]A\A]
t$8H
|$@H
|$HH
t$HH
|$@H
\$ L
AVAUATUH
|$0H
X[]A\A]A^A_
D$0H
|$(H
|$8E1
|$8H
t$8H
L$4E1
T$8H
|$(1
t$8I
T$HI
L$HH
|$(L
L$@H
ATUSH
[]A\A]
[]A\A]1
AVAUI
ATUSH
|$pL
[]A\A]A^A_
D$pH
|$hH
t$xE1
t$xI
\$hH
\$hH
|$xH
t$xH
|$hH
|$hH
L$(H
D$(H
|$hM
l$hH
D$hH
\$PH
D$0H
D$8H
D$@H
D$HH
L$(9H
L$(L
|$0L
L$8H
L$@M
t$hH
|$HL
l$ L
|$d1
|$hH
L$XH
D$(L
|$hH
|$hL
L$(I
|$x1
|$hH
|$xH
T$PH
T$XH
|$hL
AWAVAUATUH
[]A\A]A^A_
L$hH
L$pH
L$P9H
L$PL
t$hH
|$pL
|$hL
d$ L
L$pH
l$8A
\$HI
L$@H
L$@L
T$8H
t$0H
D$@1
D$|H
5w5"
D$`H
t$XH
|$01
L$H9H
HkD$H
L$`H
|$0H
|$0H
|$0H
[]A\A]
[]A\A]
([]A\A]
([]A\A]
AWAVAUI
|$XE1
[]A\A]A^A_
|$XL
D$@H
D$XD
L$hH
|$(E1
d$HH
L$ H
t$0H
t$pI
t$ L
D$xH
D$8L
T$0H
|$hD
t$(E1
D$XA
|$(L
d$HH
t$XH
T$hM
t$hH
L$`H
|$pM
T$`H
t$pL
l$`H
t$pL
AWAVI
AUATUSH
5"+"
T$$H
D$8E1
D$(H
D$@H
D$HH
t$8H
|$(H
T$@H
l$@H
D$8H
X[]A\A]A^A_
[]A\A]A^A_
ffffff.
AVAUI
ATUSH
D$ A
A9l$
D$ u
t$ H
T$ H
t$(L
A9l$
8[]A\A]A^A_
[]A\
[]A\
AWAVAUATI
|$0L
X[]A\A]A^A_
D$0H
|$ H
D$(H
L$(H
|$(E1
D$8H
|$8H
t$8H
D$(H
\$ H
D$0H
t$(H
|$ H
L$(H
|$ H
t$8H
T$HI
L$HM
t$(H
|$ 1
AVAUATUSH
[]A\A]A^A_
0u	L
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
AVE1
AUATUH
[]A\A]A^
AVE1
AUATI
[]A\A]A^
L$ H
fff.
AVAUATI
A\A]A^
 []A\A]A^
ffff.
AVAUATUSH
[]A\A]A^A_
|$xH
t$xL
D$xD
l$`H
\$hH
L$XH
L$@H
L$HH
D$xA
|$XL
D$PD
|$8H
L$@H
D$0H
|$HH
D$(H
|$XL
|$XH
l$`H
\$hL
|$HH
L$@M
|$@L
|$@H
|$HL
fffff.
D$(L
T$$1
8[]A\A]
D$(H
8[]A\A]
AWAVAUATUSH
|$xL
[]A\A]A^A_
\$PH
\$PH
L$HI
\$\H
L$PL
L$HH
L$PD
\$\L
L$ A
L$@H
d$8L
t$0D
\$\H
L$PL
L$HH
L$PD
L$ L
d$(A
|$dH
T$lH
t$hM
\$HH
D$hA
t$xH
T$pH
AVAUI
ATUSH
|$@L
[]A\A]A^A_
t$PH
t$HL
D$@L
T$@L
T$`I
T$HH
T$hH
T$@H
T$`I
T$HL
l$(L
D$4~jI
L$4H
t$8I
\$HH
L$4H
t$8H
|$hL
[]A\A]1
=$_!
AUATI
[]A\A]A^
[]A\A]I
ffffff.
AUATI
=(^!
[]A\A]
AUE1
ATUSH
[]A\A]
AWE1
AVAUATUSH
l$@H
[]A\A]A^A_
|$@H
t$@H
L$4H
t$@H
D$`I
D$hH
D$`I
\$ L
L$4E1
l$@L
t$HA
|$PH
D$XH
D$8A;m
D$0A;F
t$XH
|$PL
T$0H
|$hH
t$XH
|$8L
AVE1
AUATUSH
[]A\A]A^
ATUH
[]A\
t'H9
[]A\
ffff.
AUATI
[]A\A]
[]A\A]H
fff.
8[]A\A]
|$(H
D$ H
|$(H
|$ H
\$@H
L$(H
L$(tB1
D$@H
[]A\A]A^A_
\$P1
T$@H
|$HH
l$XL
d$`L
l$hL
T$PL
T$(L
t$pL
|$xH
T$(H
L$<E1
AWAVAUM
|$(H
[]A\A]A^A_
D$PH
D$0L
|$8L
L$XH
t$8H
|$81
l$8H
\$pH
\$8H
|$HH
t$HH
t$8H
L$@H
T$(H
t$81
t$HH
t$8H
l$8H
AWAVAUI
ATUL
[]A\A]A^A_
[]A\A]A^A_
ffffff.
AUATI
|$hH
t$@L
L$xH
|$xM
[]A\A]A^A_
D$xH
L$h1
D$HH
D$pH
D$PH
D$xH
D$XH
l$8H
|$`H
D$0H
T$8L
D$(H
D$,H
t$0L
D$pH
D$8I
t$HH
|$PH
L$@H
|$pH
L$8H
|$X1
\$xH
\$8I
D$@H
D$h1
D$hH
T$81
D$@I
fff.
[]A\1
[]A\
L$8L
D$@L
D$ H
X[]A\A]
[]A\A]
AUATI
[]A\L
[]A\A]
ffff.
[]A\A]H
|$(H
|$0H
[]A\
[]A\
=W?!
=W>!
AWAVI
AUATI
L$ H
H[]A\A]A^A_
T$ H
|$8L
T$ H
t$8H
D$(L
[]A\A]A^A_
ffffff.
AVAUI
uhI9
]A\A]A^
AUATI
[]A\M
[]A\A]H
AWAVAUI
A9l$
([]A\A]A^A_
[]A\A]A^A_
([]A\A]A^A_
fff.
fff.
A9l$
[]A\
%x.!
-x.!
[]A\A]A^A_
Could not add all targets because some targets don't exist
Could not add all targets because some targets are already versioned
subversion
                                           -
'verbose' option invalid in XML mode
'incremental' option only valid in XML mode
Could not perform blame on all targets because some targets don't exist
         -
%*ld
%s %10s %s 
%-14s 
%s %10.10s 
%s%s
svn:date
svn:author
line-number
merged
blame
Skipping binary file: '%s'
svn: 
Could not cat all targets because some targets don't exist
Could not cat all targets because some targets are not versioned
Could not cat all targets because some targets are directories
Could not set changelists on all targets because some targets don't exist
Could not set changelists on all targets because some targets are not versioned
'%s' does not appear to be a URL
Working copy locked; try running 'svn cleanup' on the root of the working copy ('%s') instead.
svn: The depth of this commit is '%s', but copies are always performed recursively in the repository.
Commit targets must be local paths
config
no-unlock
miscellany
base
working
mine-conflict
theirs-conflict
mine-full
theirs-full
launch
Conflict discovered in '%s'.
Select: (p) postpone
, (df) diff-full, (e) edit
, (r) resolved
        
(s) show all options: 
||||||| ORIGINAL
=======
No editor found.
Error running editor.
No merge tool found.
Error running merge tool.
Invalid option.
No editor found; leaving all conflicts.
Error running editor; leaving all conflicts.
No merge tool found; leaving all conflicts.
Error running merge tool; leaving all conflicts.
Conflict for property '%s' discovered on '%s'.
They want to delete the property, you want to change the value to '%s'.
They want to change the property value to '%s', you want to delete the property.
        (mc) mine-conflict, (tc) theirs-conflict
        (mf) mine-full, (tf) theirs-full
  (e)  edit             - change merged file in an editor
  (df) diff-full        - show all changes made to merged file
  (r)  resolved         - accept merged version of file
  (dc) display-conflict - show all conflicts (ignoring merged version)
  (mc) mine-conflict    - accept my version for all conflicts (same)
  (tc) theirs-conflict  - accept their version for all conflicts (same)
  (mf) mine-full        - accept my version of entire file (even non-conflicts)
  (tf) theirs-full      - accept their version of entire file (same)
  (p)  postpone         - mark the conflict to be resolved later
  (l)  launch           - launch external tool to resolve conflict
  (s)  show all         - show this list
Invalid option; cannot choose based on conflicts in a binary file.
Invalid option; cannot choose based on conflicts for properties.
Invalid option; cannot display conflicts for a binary file.
Invalid option; cannot display conflicts for properties.
Invalid option; original files not available.
>>>>>>> THEIRS (select with 'tc')
<<<<<<< MINE (select with 'mc')
Invalid option; there's no merged version to diff.
Invalid option; there's no merged version to edit.
Invalid option; cannot resolve property conflicts with an external merge tool.
Conflict discovered when trying to add '%s'.
An object of the same name already exists.
Select: (p) postpone, (mf) mine-full, (tf) theirs-full, (h) help:
  (p)  postpone    - resolve the conflict later
  (mf) mine-full   - accept pre-existing item (ignore upstream addition)
  (tf) theirs-full - accept incoming item (overwrite pre-existing item)
  (h)  help        - show this help
Local, non-commit operations do not take a log message or revision properties
%c%c      %s
modified
none
added
kind
item
Can't open stdout
Can't open stderr
paths
'--xml' option only valid with '--summarize' option
'--new' option only valid with '--old' option
Path '%s' not relative to base URLs
Destination directory exists; please remove the directory or use --force to overwrite
Failure occurred processing one or more externals definitions
1.7.10
The following repository access (RA) modules are available:
usage: svn <subcommand> [options] [args]
Subversion command-line client, version %s.
Type 'svn help <subcommand>' for help on a specific subcommand.
Type 'svn --version' to see the program version and RA modules
  or 'svn --version --quiet' to see just the version number.
Most subcommands take file and/or directory arguments, recursing
on the directories.  If no arguments are supplied to such a
command, it recurses on the current directory (inclusive) by default.
Available subcommands:
Invalid URL '%s'
Repository URL required when importing
Too many arguments to import command
normal
delete
replace
revision
repository
root
uuid
wc-info
wcroot-abspath
schedule
copy-from-url
copy-from-rev
text-updated
checksum
changelist
prev-base-file
prev-wc-file
cur-base-file
prop-file
Name: %s
Working Copy Root Path: %s
Repository Root: %s
Repository UUID: %s
Revision: %ld
Node Kind: file
Node Kind: directory
Node Kind: none
Node Kind: unknown
Schedule: normal
Schedule: add
Schedule: delete
Schedule: replace
Depth: empty
Depth: files
Depth: immediates
Depth: exclude
Depth: INVALID
Copied From URL: %s
Copied From Rev: %ld
Last Changed Author: %s
Last Changed Rev: %ld
Last Changed Date
Text Last Updated
Checksum: %s
Conflict Properties File: %s
Tree conflict
Source  left
  %s: %s
Source right
Lock Token: %s
Lock Owner: %s
Lock Created
Lock Expires
Lock Comment (%i lines):
Lock Comment (%i line):
Changelist: %s
Resource is not under version control.
Conflict Previous Base File: %s
Conflict Previous Working File: %s
Conflict Current Base File: %s
Could not display info for all targets because some targets don't exist
size
token
owner
comment
created
expires
%b %d %H:%M
%b %d  %Y
%7ld %-8.8s %c %10s %12s %s%s
Could not list all targets because some targets don't exist
Lock comment contains a zero byte
logentry
action
prop-mods
text-mods
copyfrom-rev
copyfrom-path
(no author)
(no date)
 | %d lines
 | %d line
Changed paths:
 (from %s:%ld)
   %c %s%s
Reverse merged via:
Merged via:
 r%ld%c
svn:log
------------------------------------------------------------------------
r%ld | %s | %s
'with-all-revprops' option only valid in XML mode
'with-no-revprops' option only valid in XML mode
'with-revprop' option only valid in XML mode
'diff' option is not supported in XML mode
'quiet' and 'diff' options are mutually exclusive
'diff-cmd' option requires 'diff' option
'internal-diff' option requires 'diff' option
'extensions' option requires 'diff' option
'depth' option requires 'diff' option
-c and -r are mutually exclusive
Only relative paths can be specified after a URL for 'svn log', but '%s' is not a relative path
cannot assign with 'with-revprop' option (drop the '=')
------------------------------------------------------------------------
Caught signal
Can't specify -c with --old
There is no change 0
CRLF
Invalid strip count '%s'
help
Subcommand argument required
Unknown command: '%s'
--config-option
diff-cmd
helpers
diff3-cmd
mime-types-file
enable-auto-props
interactive-conflicts
Try 'svn help' for more info
svn_subr
svn_client
svn_wc
svn_ra
svn_delta
svn_diff
--version
add intermediate parents
praise
annotate
checkout
cleanup
remove
export
import
specify lock comment ARG
merge
mergeinfo
mkdir
rename
patch
propdel
propedit
propget
proplist
propset
relocate
resolve
revert
stat
don't print unversioned items
switch
update
upgrade
force
force operation to run
force-log
show help on a subcommand
message
specify log message ARG
quiet
non-recursive
change
incremental
verbose
print extra information
show-updates
display update information
username
specify a username ARG
password
specify a password ARG
extensions
set-depth
output in XML
strict
use strict semantics
stop-on-copy
no-ignore
no-auth-cache
trust-server-cert
non-interactive
do no interactive prompting
dry-run
no-diff-deleted
notice-ancestry
ignore-ancestry
ignore-externals
ignore externals definitions
use ARG as diff command
use ARG as merge command
editor-cmd
use ARG as external editor
record-only
use ARG as the older target
use ARG as the newer target
relocate via URL-rewriting
config-dir
enable automatic properties
no-auto-props
disable automatic properties
native-eol
limit
maximum number of log entries
don't unlock the targets
summarize
show a summary of the results
remove changelist association
keep-changelists
keep-local
keep path in working copy
with-all-revprops
with-no-revprops
with-revprop
make intermediate directories
use-merge-history
accept
show-revs
reintegrate
strip
show-copies-as-adds
ignore-keywords
don't expand keywords
reverse-diff
apply the unidiff in reverse
ignore-whitespace
produce diff output
internal-diff
allow-mixed-revisions
Non-numeric limit argument given
Argument to --limit must be positive
Negative number in range (%s) not supported with -c
Non-numeric change argument (%s) given to -c
Syntax error in revision argument '%s'
Error converting depth from locale to UTF-8
'%s' is not a valid depth; try 'empty', 'files', 'immediates', or 'infinity'
'%s' is not a valid depth; try 'exclude', 'empty', 'files', 'immediates', or 'infinity'
Syntax error in native-eol argument '%s'
Changelist names must not be empty
'%s' is not a valid --accept value
'%s' is not a valid --show-revs value
Argument to --strip must be positive
Subcommand '%s' doesn't accept option '%s'
Type 'svn help %s' for usage.
Multiple revision arguments encountered; can't specify -c twice, or both -c and -r
--depth and --set-depth are mutually exclusive
--with-all-revprops and --with-no-revprops are mutually exclusive
--with-revprop and --with-no-revprops are mutually exclusive
--message (-m) and --file (-F) are mutually exclusive
--trust-server-cert requires --non-interactive
--diff-cmd and --internal-diff are mutually exclusive
Log message file is a versioned file; use '--force-log' to override
Lock comment file is a versioned file; use '--force-log' to override
The log message is a pathname (was -F intended?); use '--force-log' to override
The lock comment is a pathname (was -F intended?); use '--force-log' to override
--relocate and --depth are mutually exclusive
--relocate and --non-recursive (-N) are mutually exclusive
--auto-props and --no-auto-props are mutually exclusive
--reintegrate cannot be used with --ignore-ancestry or --record-only
--reintegrate cannot be used with --ignore-ancestry
--reintegrate cannot be used with --record-only
--accept=%s incompatible with --non-interactive
Please see the 'svn upgrade' command
svn: run 'svn cleanup' to remove locks (type 'svn help cleanup' for details)
Put files and directories under version control, scheduling
them for addition to repository.  They will be added in next commit.
usage: add PATH...
Output the content of specified files or
URLs with revision and author information in-line.
usage: blame TARGET[@REV]...
  If specified, REV determines in which revision the target is first
  looked up.
Output the content of specified files or URLs.
usage: cat TARGET[@REV]...
  If specified, REV determines in which revision the target is first
  looked up.
Associate (or dissociate) changelist CLNAME with the named files.
usage: 1. changelist CLNAME PATH...
       2. changelist --remove PATH...
Check out a working copy from a repository.
usage: checkout URL[@REV]... [PATH]
  If specified, REV determines in which revision the URL is first
  looked up.
  If PATH is omitted, the basename of the URL will be used as
  the destination. If multiple URLs are given each will be checked
  out into a sub-directory of PATH, with the name of the sub-directory
  being the basename of the URL.
  If --force is used, unversioned obstructing paths in the working
  copy destination do not automatically cause the check out to fail.
  If the obstructing path is the same type (file or directory) as the
  corresponding path in the repository it becomes versioned but its
  contents are left 'as-is' in the working copy.  This means that an
  obstructing directory's unversioned children may also obstruct and
  become versioned.  For files, any content differences between the
  obstruction and the repository are treated like a local modification
  to the working copy.  All properties from the repository are applied
  to the obstructing path.
  See also 'svn help update' for a list of possible characters
  reporting the action taken.
Recursively clean up the working copy, removing locks, resuming
unfinished operations, etc.
usage: cleanup [WCPATH...]
Send changes from your working copy to the repository.
usage: commit [PATH...]
  A log message must be provided, but it can be empty.  If it is not
  given by a --message or --file option, an editor will be started.
  If any targets are (or contain) locked items, those will be
  unlocked after a successful commit.
Duplicate something in working copy or repository, remembering
history.
usage: copy SRC[@REV]... DST
When copying multiple sources, they will be added as children of DST,
which must be a directory.
  SRC and DST can each be either a working copy (WC) path or URL:
    WC  -> WC:   copy and schedule for addition (with history)
    WC  -> URL:  immediately commit a copy of WC to URL
    URL -> WC:   check out URL into WC, schedule for addition
    URL -> URL:  complete server-side copy;  used to branch and tag
  All the SRCs must be of the same type.
WARNING: For compatibility with previous versions of Subversion,
copies performed using two working copy paths (WC -> WC) will not
contact the repository.  As such, they may not, by default, be able
to propagate merge tracking information from the source of the copy
to the destination.
Remove files and directories from version control.
usage: 1. delete PATH...
       2. delete URL...
  1. Each item specified by a PATH is scheduled for deletion upon
    the next commit.  Files, and directories that have not been
    committed, are immediately removed from the working copy
    unless the --keep-local option is given.
    PATHs that are, or contain, unversioned or modified items will
    not be removed unless the --force or --keep-local option is given.
  2. Each item specified by a URL is deleted from the repository
    via an immediate commit.
Display the differences between two revisions or paths.
usage: 1. diff [-c M | -r N[:M]] [TARGET[@REV]...]
       2. diff [-r N[:M]] --old=OLD-TGT[@OLDREV] [--new=NEW-TGT[@NEWREV]] \
               [PATH...]
       3. diff OLD-URL[@OLDREV] NEW-URL[@NEWREV]
  1. Display the changes made to TARGETs as they are seen in REV between
     two revisions.  TARGETs may be all working copy paths or all URLs.
     If TARGETs are working copy paths, N defaults to BASE and M to the
     working copy; if URLs, N must be specified and M defaults to HEAD.
     The '-c M' option is equivalent to '-r N:M' where N = M-1.
     Using '-c -M' does the reverse: '-r M:N' where N = M-1.
  2. Display the differences between OLD-TGT as it was seen in OLDREV and
     NEW-TGT as it was seen in NEWREV.  PATHs, if given, are relative to
     OLD-TGT and NEW-TGT and restrict the output to differences for those
     paths.  OLD-TGT and NEW-TGT may be working copy paths or URL[@REV].
     NEW-TGT defaults to OLD-TGT if not specified.  -r N makes OLDREV default
     to N, -r N:M makes OLDREV default to N and NEWREV default to M.
  3. Shorthand for 'svn diff --old=OLD-URL[@OLDREV] --new=NEW-URL[@NEWREV]'
  Use just 'svn diff' to display local modifications in a working copy.
Create an unversioned copy of a tree.
usage: 1. export [-r REV] URL[@PEGREV] [PATH]
       2. export [-r REV] PATH1[@PEGREV] [PATH2]
  1. Exports a clean directory tree from the repository specified by
     URL, at revision REV if it is given, otherwise at HEAD, into
     PATH. If PATH is omitted, the last component of the URL is used
     for the local directory name.
  2. Exports a clean directory tree from the working copy specified by
     PATH1, at revision REV if it is given, otherwise at WORKING, into
     PATH2.  If PATH2 is omitted, the last component of the PATH1 is used
     for the local directory name. If REV is not specified, all local
     changes will be preserved.  Files not under version control will
     not be copied.
  If specified, PEGREV determines in which revision the target is first
  looked up.
Describe the usage of this program or its subcommands.
usage: help [SUBCOMMAND...]
Commit an unversioned file or tree into the repository.
usage: import [PATH] URL
  Recursively commit a copy of PATH to URL.
  If PATH is omitted '.' is assumed.
  Parent directories are created as necessary in the repository.
  If PATH is a directory, the contents of the directory are added
  directly under URL.
  Unversionable items such as device files and pipes are ignored
  if --force is specified.
Display information about a local or remote item.
usage: info [TARGET[@REV]...]
  Print information about each TARGET (default: '.').
  TARGET may be either a working-copy path or URL.  If specified, REV
  determines in which revision the target is first looked up.
List directory entries in the repository.
usage: list [TARGET[@REV]...]
  List each TARGET file and the contents of each TARGET directory as
  they exist in the repository.  If TARGET is a working copy path, the
  corresponding repository URL will be used. If specified, REV determines
  in which revision the target is first looked up.
  The default TARGET is '.', meaning the repository URL of the current
  working directory.
  With --verbose, the following fields will be shown for each item:
    Revision number of the last commit
    Author of the last commit
    If locked, the letter 'O'.  (Use 'svn info URL' to see details)
    Size (in bytes)
    Date and time of the last commit
Lock working copy paths or URLs in the repository, so that
no other user can commit changes to them.
usage: lock TARGET...
  Use --force to steal the lock from another user or working copy.
read lock comment from file ARG
force validity of lock comment source
Show the log messages for a set of revision(s) and/or path(s).
usage: 1. log [PATH][@REV]
       2. log URL[@REV] [PATH...]
  1. Print the log messages for the URL corresponding to PATH
     (default: '.'). If specified, REV is the revision in which the
     URL is first looked up, and the default revision range is REV:1.
     If REV is not specified, the default revision range is BASE:1,
     since the URL might not exist in the HEAD revision.
  2. Print the log messages for the PATHs (default: '.') under URL.
     If specified, REV is the revision in which the URL is first
     looked up, and the default revision range is REV:1; otherwise,
     the URL is looked up in HEAD, and the default revision range is
     HEAD:1.
  Multiple '-c' or '-r' options may be specified (but not a
  combination of '-c' and '-r' options), and mixing of forward and
  reverse ranges is allowed.
  With -v, also print all affected paths with each log message.
  With -q, don't print the log message body itself (note that this is
  compatible with -v).
  Each log message is printed just once, even if more than one of the
  affected paths for that revision were explicitly requested.  Logs
  follow copy history by default.  Use --stop-on-copy to disable this
  behavior, which can be useful for determining branchpoints.
  The --depth option is only valid in combination with the --diff option
  and limits the scope of the displayed diff to the specified depth.
  Examples:
    svn log
    svn log foo.c
    svn log bar.c@42
    svn log http://www.example.com/repo/project/foo.c
    svn log http://www.example.com/repo/project foo.c bar.c
    svn log http://www.example.com/repo/project@50 foo.c bar.c
retrieve revision property ARG
the change made in revision ARG
Merge changes into a working copy.
usage: 1. merge SOURCE[@REV] [TARGET_WCPATH]
          (the 'sync' merge)
       2. merge [-c M[,N...] | -r N:M ...] SOURCE[@REV] [TARGET_WCPATH]
          (the 'cherry-pick' merge)
       3. merge --reintegrate SOURCE[@REV] [TARGET_WCPATH]
          (the 'reintegrate' merge)
       4. merge SOURCE1[@N] SOURCE2[@M] [TARGET_WCPATH]
          (the '2-URL' merge)
  1. This form is called a 'sync' (or 'catch-up') merge:
       svn merge SOURCE[@REV] [TARGET_WCPATH]
     A sync merge is used to fetch all the latest changes made on a parent
     branch. In other words, the target branch has originally been created
     by copying the source branch, and any changes committed on the source
     branch since branching are applied to the target branch. This uses
     merge tracking to skip all those revisions that have already been
     merged, so a sync merge can be repeated periodically to stay up-to-
     date with the source branch.
     SOURCE specifies the branch from where the changes will be pulled, and
     TARGET_WCPATH specifies a working copy of the target branch to which
     the changes will be applied. Normally SOURCE and TARGET_WCPATH should
     each correspond to the root of a branch. (If you want to merge only a
     subtree, then the subtree path must be included in both SOURCE and
     TARGET_WCPATH; this is discouraged, to avoid subtree mergeinfo.)
     SOURCE is usually a URL. The optional '@REV' specifies both the peg
     revision of the URL and the latest revision that will be considered
     for merging; if REV is not specified, the HEAD revision is assumed. If
     SOURCE is a working copy path, the corresponding URL of the path is
     used, and the default value of 'REV' is the base revision (usually the
     revision last updated to).
     TARGET_WCPATH is a working copy path; if omitted, '.' is assumed.
       - Sync Merge Example -
     A feature is being developed on a branch called 'feature', which has
     originally been a copy of trunk. The feature branch has been regularly
     synced with trunk to keep up with the changes made there. The previous
     sync merges are not shown on this diagram, and the last of them was
     done when HEAD was r100. Currently, HEAD is r200.
                feature  +------------------------o-----
                        /                         ^
                       /            ............  |
                      /            .            . /
         trunk ------+------------L--------------R------
                                r100           r200
     Subversion will locate all the changes on 'trunk' that have not yet
     been merged into the 'feature' branch. In this case that is a single
     range, r100:200. In the diagram above, L marks the left side
     (trunk@100) and R marks the right side (trunk@200) of the merge. The
     difference between L and R will be applied to the target working copy
     path. In this case, the working copy is a clean checkout of the entire
     'feature' branch.
     To perform this sync merge, have a clean working copy of the feature
     branch and run the following command in its top-level directory:
         svn merge ^/trunk
     Note that the merge is now only in your local working copy and still
     needs to be committed to the repository so that it can be seen by
     others. You can review the changes and you may have to resolve
     conflicts before you commit the merge.
  2. This form is called a 'cherry-pick' merge:
       svn merge [-c M[,N...] | -r N:M ...] SOURCE[@REV] [TARGET_WCPATH]
     A cherry-pick merge is used to merge specific revisions (or revision
     ranges) from one branch to another. By default, this uses merge
     tracking to automatically skip any revisions that have already been
     merged to the target; you can use the --ignore-ancestry option to
     disable such skipping.
     SOURCE is usually a URL. The optional '@REV' specifies only the peg
     revision of the URL and does not affect the merge range; if REV is not
     specified, the HEAD revision is assumed. If SOURCE is a working copy
     path, the corresponding URL of the path is used, and the default value
     of 'REV' is the base revision (usually the revision last updated to).
     TARGET_WCPATH is a working copy path; if omitted, '.' is assumed.
     The revision ranges to be merged are specified by the '-r' and/or '-c'
     options. '-r N:M' refers to the difference in the history of the
     source branch between revisions N and M. You can use '-c M' to merge
     single revisions: '-c M' is equivalent to '-r <M-1>:M'. Each such
     difference is applied to TARGET_WCPATH.
     If the mergeinfo in TARGET_WCPATH indicates that revisions within the
     range were already merged, changes made in those revisions are not
     merged again. If needed, the range is broken into multiple sub-ranges,
     and each sub-range is merged separately.
     A 'reverse range' can be used to undo changes. For example, when
     source and target refer to the same branch, a previously committed
     revision can be 'undone'. In a reverse range, N is greater than M in
     '-r N:M', or the '-c' option is used with a negative number: '-c -M'
     is equivalent to '-r M:<M-1>'.
     Multiple '-c' and/or '-r' options may be specified and mixing of
     forward and reverse ranges is allowed.
       - Cherry-pick Merge Example -
     A bug has been fixed on trunk in revision 50. This fix needs to
     be merged from trunk onto the release branch.
            1.x-release  +-----------------------o-----
                        /                        ^
                       /                         |
                      /                          |
         trunk ------+--------------------------LR-----
                                                r50
     In the above diagram, L marks the left side (trunk@49) and R marks the
     right side (trunk@50) of the merge. The difference between the left
     and right side is applied to the target working copy path.
     Note that the difference between revision 49 and 50 is exactly those
     changes that were committed in revision 50, not including changes
     committed in revision 49.
     To perform the merge, have a clean working copy of the release branch
     and run the following command in its top-level directory; remember
     that the default target is '.':
         svn merge -c50 ^/trunk
     You can also cherry-pick several revisions and/or revision ranges:
         svn merge -c50,54,60 -r65:68 ^/trunk
  3. This form is called a 'reintegrate merge':
       svn merge --reintegrate SOURCE[@REV] [TARGET_WCPATH]
     In a reintegrate merge, an (e.g. feature) branch is merged back to its
     originating branch. In other words, the source branch has originally
     been created by copying the target branch, development has concluded
     on the source branch and it should now be merged back into the target
     branch.
     
     SOURCE is the URL of a branch to be merged back. If REV is specified,
     it is used as the peg revision for SOURCE; if REV is not specified,
     the HEAD revision is assumed.
     TARGET_WCPATH is a working copy of the branch the changes will be
     applied to.
       - Reintegrate Merge Example -
     A feature has been developed on a branch called 'feature'. The feature
     branch started as a copy of trunk@W. Work on the feature has completed
     and it should be merged back into the trunk.
     The feature branch was last synced with trunk up to revision X. So the
     difference between trunk@X and feature@HEAD contains the complete set
     of changes that implement the feature, and no other changes. These
     changes are applied to trunk.
                feature  +--------------------------------R
                        /                                . \
                       /                    .............   \
                      /                    .                 v
         trunk ------+--------------------L------------------o
                    rW                   rX
     In the diagram above, L marks the left side (trunk@X) and R marks the
     right side (feature@HEAD) of the merge. The difference between the
     left and right side is merged into trunk, the target.
     To perform the merge, have a clean working copy of trunk and run the
     following command in its top-level directory:
         svn merge --reintegrate ^/feature
     To prevent unnecessary merge conflicts, a reintegrate merge requires
     that TARGET_WCPATH is not a mixed-revision working copy, has no local
     modifications, and has no switched subtrees.
     A reintegrate merge also requires that the source branch is coherently
     synced with the target -- in the above example, this means that all
     revisions between the branch point W and the last merged revision X
     are merged to the feature branch, so that there are no unmerged
     revisions in-between.
     After the reintegrate merge, the feature branch cannot be synced to
     the trunk again without merge conflicts. If further work must be done
     on the feature branch, it should be deleted and then re-created.
  4. This form is called a '2-URL merge':
       svn merge SOURCE1[@N] SOURCE2[@M] [TARGET_WCPATH]
     Two source URLs are specified, together with two revisions N and M.
     The two sources are compared at the specified revisions, and the
     difference is applied to TARGET_WCPATH, which is a path to a working
     copy of another branch. The three branches involved can be completely
     unrelated.
     You should use this merge variant only if the other variants do not
     apply to your situation, as this variant can be quite complex to
     master.
     If TARGET_WCPATH is omitted, a default value of '.' is assumed.
     However, in the special case where both sources refer to a file node
     with the same basename and a similarly named file is also found within
     '.', the differences will be applied to that local file.  The source
     revisions default to HEAD if omitted.
     The sources can also be specified as working copy paths, in which case
     the URLs of the merge sources are derived from the working copies.
       - 2-URL Merge Example -
     Two features have been developed on separate branches called 'foo' and
     'bar'. It has since become clear that 'bar' should be combined with
     the 'foo' branch for further development before reintegration.
     Although both feature branches originate from trunk, they are not
     directly related -- one is not a direct copy of the other. A 2-URL
     merge is necessary.
     The 'bar' branch has been synced with trunk up to revision 500.
     (If this revision number is not known, it can be located using the
     'svn log' and/or 'svn mergeinfo' commands.)
     The difference between trunk@500 and bar@HEAD contains the complete
     set of changes related to feature 'bar', and no other changes. These
     changes are applied to the 'foo' branch.
                           foo  +-----------------------------------o
                               /                                    ^
                              /                                    /
                             /              r500                  /
         trunk ------+------+-----------------L--------->        /
                      \                        .                /
                       \                        ............   /
                        \                                   . /
                    bar  +-----------------------------------R
     In the diagram above, L marks the left side (trunk@500) and R marks
     the right side (bar@HEAD) of the merge. The difference between the
     left and right side is applied to the target working copy path, in
     this case a working copy of the 'foo' branch.
     To perform the merge, have a clean working copy of the 'foo' branch
     and run the following command in its top-level directory:
         svn merge ^/trunk@500 ^/bar
     The exact changes applied by a 2-URL merge can be previewed with svn's
     diff command, which is a good idea to verify if you do not have the
     luxury of a clean working copy to merge to. In this case:
         svn diff ^/trunk@500 ^/bar@HEAD
  The following applies to all types of merges:
  To prevent unnecessary merge conflicts, svn merge requires that
  TARGET_WCPATH is not a mixed-revision working copy. Running 'svn update'
  before starting a merge ensures that all items in the working copy are
  based on the same revision.
  If possible, you should have no local modifications in the merge's target
  working copy prior to the merge, to keep things simpler. It will be
  easier to revert the merge and to understand the branch's history.
  Switched sub-paths should also be avoided during merging, as they may
  cause incomplete merges and create subtree mergeinfo.
  For each merged item a line will be printed with characters reporting the
  action taken. These characters have the following meaning:
    A  Added
    D  Deleted
    U  Updated
    C  Conflict
    G  Merged
    E  Existed
    R  Replaced
  Characters in the first column report about the item itself.
  Characters in the second column report about properties of the item.
  A 'C' in the third column indicates a tree conflict, while a 'C' in
  the first and second columns indicate textual conflicts in files
  and in property values, respectively.
    - Merge Tracking -
  Subversion uses the svn:mergeinfo property to track merge history. This
  property is considered at the start of a merge to determine what to merge
  and it is updated at the conclusion of the merge to describe the merge
  that took place. Mergeinfo is used only if the two sources are on the
  same line of history -- if the first source is an ancestor of the second,
  or vice-versa (i.e. if one has originally been created by copying the
  other). This is verified and enforced when using sync merges and
  reintegrate merges.
  The --ignore-ancestry option prevents merge tracking and thus ignores
  mergeinfo, neither considering it nor recording it.
    - Merging from foreign repositories -
  Subversion does support merging from foreign repositories.
  While all merge source URLs must point to the same repository, the merge
  target working copy may come from a different repository than the source.
  However, there are some caveats. Most notably, copies made in the
  merge source will be transformed into plain additions in the merge
  target. Also, merge-tracking is not supported for merges from foreign
  repositories.
Display merge-related information.
usage: mergeinfo SOURCE[@REV] [TARGET[@REV]]
  Display information related to merges (or potential merges) between
  SOURCE and TARGET (default: '.').  Display the type of information
  specified by the --show-revs option.  If --show-revs isn't passed,
  it defaults to --show-revs='merged'.
  The depth can be 'empty' or 'infinity'; the default is 'empty'.
Create a new directory under version control.
usage: 1. mkdir PATH...
       2. mkdir URL...
  Create version controlled directories.
  1. Each directory specified by a working copy PATH is created locally
    and scheduled for addition upon the next commit.
  2. Each directory specified by a URL is created in the repository via
    an immediate commit.
  In both cases, all the intermediate directories must already exist,
  unless the --parents option is given.
Move and/or rename something in working copy or repository.
usage: move SRC... DST
When moving multiple sources, they will be added as children of DST,
which must be a directory.
  Note:  this subcommand is equivalent to a 'copy' and 'delete'.
  Note:  the --revision option has no use and is deprecated.
  SRC and DST can both be working copy (WC) paths or URLs:
    WC  -> WC:   move and schedule for addition (with history)
    URL -> URL:  complete server-side rename.
  All the SRCs must be of the same type.
Apply a patch to a working copy.
usage: patch PATCHFILE [WCPATH]
  Apply a unidiff patch in PATCHFILE to the working copy WCPATH.
  If WCPATH is omitted, '.' is assumed.
  A unidiff patch suitable for application to a working copy can be
  produced with the 'svn diff' command or third-party diffing tools.
  Any non-unidiff content of PATCHFILE is ignored.
  Changes listed in the patch will either be applied or rejected.
  If a change does not match at its exact line offset, it may be applied
  earlier or later in the file if a match is found elsewhere for the
  surrounding lines of context provided by the patch.
  A change may also be applied with fuzz, which means that one
  or more lines of context are ignored when matching the change.
  If no matching context can be found for a change, the change conflicts
  and will be written to a reject file with the extension .svnpatch.rej.
  For each patched file a line will be printed with characters reporting
  the action taken. These characters have the following meaning:
    A  Added
    D  Deleted
    U  Updated
    C  Conflict
    G  Merged (with local uncommitted changes)
  Changes applied with an offset or fuzz are reported on lines starting
  with the '>' symbol. You should review such changes carefully.
  If the patch removes all content from a file, that file is scheduled
  for deletion. If the patch creates a new file, that file is scheduled
  for addition. Use 'svn revert' to undo deletions and additions you
  do not agree with.
  Hint: If the patch file was created with Subversion, it will contain
        the number of a revision N the patch will cleanly apply to
        (look for lines like "--- foo/bar.txt        (revision N)").
        To avoid rejects, first update to the revision N using 
        'svn update -r N', apply the patch, and then update back to the
        HEAD revision. This way, conflicts can be resolved interactively.
Remove a property from files, dirs, or revisions.
usage: 1. propdel PROPNAME [PATH...]
       2. propdel PROPNAME --revprop -r REV [TARGET]
  1. Removes versioned props in working copy.
  2. Removes unversioned remote prop on repos revision.
     TARGET only determines which repository to access.
Edit a property with an external editor.
usage: 1. propedit PROPNAME TARGET...
       2. propedit PROPNAME --revprop -r REV [TARGET]
  1. Edits versioned prop in working copy or repository.
  2. Edits unversioned remote prop on repos revision.
     TARGET only determines which repository to access.
See 'svn help propset' for more on setting properties.
Print the value of a property on files, dirs, or revisions.
usage: 1. propget PROPNAME [TARGET[@REV]...]
       2. propget PROPNAME --revprop -r REV [TARGET]
  1. Prints versioned props. If specified, REV determines in which
     revision the target is first looked up.
  2. Prints unversioned remote prop on repos revision.
     TARGET only determines which repository to access.
  By default, this subcommand will add an extra newline to the end
  of the property values so that the output looks pretty.  Also,
  whenever there are multiple paths involved, each property value
  is prefixed with the path with which it is associated.  Use the
  --strict option to disable these beautifications (useful when
  redirecting a binary property value to a file, but available only
  if you supply a single TARGET to a non-recursive propget operation).
List all properties on files, dirs, or revisions.
usage: 1. proplist [TARGET[@REV]...]
       2. proplist --revprop -r REV [TARGET]
  1. Lists versioned props. If specified, REV determines in which
     revision the target is first looked up.
  2. Lists unversioned remote props on repos revision.
     TARGET only determines which repository to access.
Set the value of a property on files, dirs, or revisions.
usage: 1. propset PROPNAME PROPVAL PATH...
       2. propset PROPNAME --revprop -r REV PROPVAL [TARGET]
  1. Changes a versioned file or directory property in a working copy.
  2. Changes an unversioned property on a repository revision.
     (TARGET only determines which repository to access.)
  The value may be provided with the --file option instead of PROPVAL.
  Note: svn recognizes the following special versioned properties
  but will store any arbitrary properties set:
    svn:ignore     - A newline separated list of file glob patterns to ignore.
    svn:keywords   - Keywords to be expanded.  Valid keywords are:
      URL, HeadURL             - The URL for the head version of the object.
      Author, LastChangedBy    - The last person to modify the file.
      Date, LastChangedDate    - The date/time the object was last modified.
      Rev, Revision,           - The last revision the object changed.
      LastChangedRevision
      Id                       - A compressed summary of the previous
                                   4 keywords.
      Header                   - Similar to Id but includes the full URL.
    svn:executable - If present, make the file executable.  Use
      'svn propdel svn:executable PATH...' to clear.
    svn:eol-style  - One of 'native', 'LF', 'CR', 'CRLF'.
    svn:mime-type  - The mimetype of the file.  Used to determine
      whether to merge the file, and how to serve it from Apache.
      A mimetype beginning with 'text/' (or an absent mimetype) is
      treated as text.  Anything else is treated as binary.
    svn:externals  - A newline separated list of module specifiers,
      each of which consists of a URL and a relative directory path,
      similar to the syntax of the 'svn checkout' command:
        http://example.com/repos/zig foo/bar
      A revision to check out can optionally be specified to pin the
      external to a known revision:
        -r25 http://example.com/repos/zig foo/bar
      To unambiguously identify an element at a path which has been
      deleted (possibly even deleted multiple times in its history),
      an optional peg revision can be appended to the URL:
        -r25 http://example.com/repos/zig@42 foo/bar
      Relative URLs are indicated by starting the URL with one
      of the following strings:
        ../  to the parent directory of the extracted external
        ^/   to the repository root
        //   to the scheme
        /    to the server root
      The ambiguous format 'relative_path relative_path' is taken as
      'relative_url relative_path' with peg revision support.
      Lines in externals definitions starting with the '#' character
      are considered comments and are ignored.
      Subversion 1.4 and earlier only support the following formats
      where peg revisions can only be specified using a -r modifier
      and where URLs cannot be relative:
        foo             http://example.com/repos/zig
        foo/bar -r 1234 http://example.com/repos/zag
      Use of these formats is discouraged. They should only be used if
      interoperability with 1.4 clients is desired.
    svn:needs-lock - If present, indicates that the file should be locked
      before it is modified.  Makes the working copy file read-only
      when it is not locked.  Use 'svn propdel svn:needs-lock PATH...'
      to clear.
  The svn:keywords, svn:executable, svn:eol-style, svn:mime-type and
  svn:needs-lock properties cannot be set on a directory.  A non-recursive
  attempt will fail, and a recursive attempt will set the property
  only on the file children of the directory.
read property value from file ARG
Relocate the working copy to point to a different repository root URL.
usage: 1. relocate FROM-PREFIX TO-PREFIX [PATH...]
       2. relocate TO-URL [PATH]
  Rewrite working copy URL metadata to reflect a syntactic change only.
  This is used when a repository's root URL changes (such as a scheme
  or hostname change) but your working copy still reflects the same
  directory within the same repository.
  1. FROM-PREFIX and TO-PREFIX are initial substrings of the working
     copy's current and new URLs, respectively.  (You may specify the
     complete old and new URLs if you wish.)  Use 'svn info' to determine
     the current working copy URL.
  2. TO-URL is the (complete) new repository URL to use for PATH.
  Examples:
    svn relocate http:// svn:// project1 project2
    svn relocate http://www.example.com/repo/project \
                 svn://svn.example.com/repo/project
Resolve conflicts on working copy files or directories.
usage: resolve --accept=ARG [PATH...]
  Note:  the --accept option is currently required.
specify automatic conflict resolution source
                             ('base', 'working', 'mine-conflict',
                             'theirs-conflict', 'mine-full', 'theirs-full')
Remove 'conflicted' state on working copy files or directories.
usage: resolved PATH...
  Note:  this subcommand does not semantically resolve conflicts or
  remove conflict markers; it merely removes the conflict-related
  artifact files and allows PATH to be committed again.  It has been
  deprecated in favor of running 'svn resolve --accept working'.
Restore pristine working copy file (undo most local edits).
usage: revert PATH...
  Note:  this subcommand does not require network access, and resolves
  any conflicted states.
Print the status of working copy files and directories.
usage: status [PATH...]
  With no args, print only locally modified items (no network access).
  With -q, print only summary information about locally modified items.
  With -u, add working revision and server out-of-date information.
  With -v, print full revision information on every item.
  The first seven columns in the output are each one character wide:
    First column: Says if item was added, deleted, or otherwise changed
      ' ' no modifications
      'A' Added
      'C' Conflicted
      'D' Deleted
      'I' Ignored
      'M' Modified
      'R' Replaced
      'X' an unversioned directory created by an externals definition
      '?' item is not under version control
      '!' item is missing (removed by non-svn command) or incomplete
      '~' versioned item obstructed by some item of a different kind
    Second column: Modifications of a file's or directory's properties
      ' ' no modifications
      'C' Conflicted
      'M' Modified
    Third column: Whether the working copy directory is locked
      ' ' not locked
      'L' locked
    Fourth column: Scheduled commit will contain addition-with-history
      ' ' no history scheduled with commit
      '+' history scheduled with commit
    Fifth column: Whether the item is switched or a file external
      ' ' normal
      'S' the item has a Switched URL relative to the parent
      'X' a versioned file created by an eXternals definition
    Sixth column: Repository lock token
      (without -u)
      ' ' no lock token
      'K' lock token present
      (with -u)
      ' ' not locked in repository, no lock token
      'K' locked in repository, lock toKen present
      'O' locked in repository, lock token in some Other working copy
      'T' locked in repository, lock token present but sTolen
      'B' not locked in repository, lock token present but Broken
    Seventh column: Whether the item is the victim of a tree conflict
      ' ' normal
      'C' tree-Conflicted
    If the item is a tree conflict victim, an additional line is printed
    after the item's status line, explaining the nature of the conflict.
  The out-of-date information appears in the ninth column (with -u):
      '*' a newer revision exists on the server
      ' ' the working copy is up to date
  Remaining fields are variable width and delimited by spaces:
    The working revision (with -u or -v; '-' if the item is copied)
    The last committed revision and last committed author (with -v)
    The working copy path is always the final field, so it can
      include spaces.
  The presence of a question mark ('?') where a working revision, last
  committed revision, or last committed author was expected indicates
  that the information is unknown or irrelevant given the state of the
  item (for example, when the item is the result of a copy operation).
  The question mark serves as a visual placeholder to facilitate parsing.
  Example output:
    svn status wc
     M      wc/bar.c
    A  +    wc/qax.c
    svn status -u wc
     M             965   wc/bar.c
            *      965   wc/foo.c
    A  +             -   wc/qax.c
    Status against revision:   981
    svn status --show-updates --verbose wc
     M             965      938 kfogel       wc/bar.c
            *      965      922 sussman      wc/foo.c
    A  +             -      687 joe          wc/qax.c
                   965      687 joe          wc/zig.c
    Status against revision:   981
    svn status
     M      wc/bar.c
    !     C wc/qaz.c
          >   local missing, incoming edit upon update
    D       wc/qax.c
Update the working copy to a different URL within the same repository.
usage: 1. switch URL[@PEGREV] [PATH]
       2. switch --relocate FROM-PREFIX TO-PREFIX [PATH...]
  1. Update the working copy to mirror a new URL within the repository.
     This behavior is similar to 'svn update', and is the way to
     move a working copy to a branch or tag within the same repository.
     If specified, PEGREV determines in which revision the target is first
     looked up.
     If --force is used, unversioned obstructing paths in the working
     copy do not automatically cause a failure if the switch attempts to
     add the same path.  If the obstructing path is the same type (file
     or directory) as the corresponding path in the repository it becomes
     versioned but its contents are left 'as-is' in the working copy.
     This means that an obstructing directory's unversioned children may
     also obstruct and become versioned.  For files, any content differences
     between the obstruction and the repository are treated like a local
     modification to the working copy.  All properties from the repository
     are applied to the obstructing path.
     Use the --set-depth option to set a new working copy depth on the
     targets of this operation.
     By default, Subversion will refuse to switch a working copy path to
     a new URL with which it shares no common version control ancestry.
     Use the '--ignore-ancestry' option to override this sanity check.
  2. The '--relocate' option is deprecated. This syntax is equivalent to
     'svn relocate FROM-PREFIX TO-PREFIX [PATH]'.
  See also 'svn help update' for a list of possible characters
  reporting the action taken.
  Examples:
    svn switch ^/branches/1.x-release
    svn switch --relocate http:// svn://
    svn switch --relocate http://www.example.com/repo/project \
                          svn://svn.example.com/repo/project
Unlock working copy paths or URLs.
usage: unlock TARGET...
  Use --force to break the lock.
Bring changes from the repository into the working copy.
usage: update [PATH...]
  If no revision is given, bring working copy up-to-date with HEAD rev.
  Else synchronize working copy to revision given by -r.
  For each updated item a line will be printed with characters reporting
  the action taken. These characters have the following meaning:
    A  Added
    D  Deleted
    U  Updated
    C  Conflict
    G  Merged
    E  Existed
    R  Replaced
  Characters in the first column report about the item itself.
  Characters in the second column report about properties of the item.
  A 'B' in the third column signifies that the lock for the file has
  been broken or stolen.
  A 'C' in the fourth column indicates a tree conflict, while a 'C' in
  the first and second columns indicate textual conflicts in files
  and in property values, respectively.
  If --force is used, unversioned obstructing paths in the working
  copy do not automatically cause a failure if the update attempts to
  add the same path.  If the obstructing path is the same type (file
  or directory) as the corresponding path in the repository it becomes
  versioned but its contents are left 'as-is' in the working copy.
  This means that an obstructing directory's unversioned children may
  also obstruct and become versioned.  For files, any content differences
  between the obstruction and the repository are treated like a local
  modification to the working copy.  All properties from the repository
  are applied to the obstructing path.  Obstructing paths are reported
  in the first column with code 'E'.
  If the specified update target is missing from the working copy but its
  immediate parent directory is present, checkout the target into its
  parent directory at the specified depth.  If --parents is specified,
  create any missing parent directories of the target by checking them
  out, too, at depth=empty.
  Use the --set-depth option to set a new working copy depth on the
  targets of this operation.
Upgrade the metadata storage format for a working copy.
usage: upgrade [WCPATH...]
  Local modifications are preserved.
force validity of log message source
print nothing, or only summary information
descend recursively, same as --depth=infinity
obsolete; try --depth=files or --depth=immediates
the change made by revision ARG (like -r ARG-1:ARG)
                             If ARG is negative this is like -r ARG:ARG-1
ARG (some commands also take ARG1:ARG2 range)
                             A revision argument can be one of:
                                NUMBER       revision number
                                '{' DATE '}' revision at start of the date
                                'HEAD'       latest in repository
                                'BASE'       base rev of item's working copy
                                'COMMITTED'  last commit at or before BASE
                                'PREV'       revision just before COMMITTED
read log message from file ARG
give output suitable for concatenation
treat value as being in charset encoding ARG
show program version information
Default: '-u'. When Subversion is invoking an
                             external diff program, ARG is simply passed along
                             to the program. But when Subversion is using its
                             default internal diff implementation, or when
                             Subversion is displaying blame annotations, ARG
                             could be any of the following:
                                -u (--unified):
                                   Output 3 lines of unified context.
                                -b (--ignore-space-change):
                                   Ignore changes in the amount of white space.
                                -w (--ignore-all-space):
                                   Ignore all white space.
                                --ignore-eol-style:
                                   Ignore changes in EOL style.
                                -p (--show-c-function):
                                   Show C function name in diff output.
pass contents of file ARG as additional args
limit operation by depth ARG ('empty', 'files',
                             'immediates', or 'infinity')
set new working copy depth to ARG ('exclude',
                             'empty', 'files', 'immediates', or 'infinity')
do not cross copies while traversing history
disregard default and svn:ignore property ignores
do not cache authentication tokens
accept SSL server certificates from unknown
                             certificate authorities without prompting (but only
                             with '--non-interactive')
try operation but make no changes
do not print differences for deleted files
notice ancestry when calculating differences
ignore ancestry when calculating merges
merge only mergeinfo differences
operate on a revision property (use with -r)
read user configuration files from directory ARG
set user configuration option in the format:
                                 FILE:SECTION:OPTION=[VALUE]
                             For example:
                                 servers:global:http-library=serf
use a different EOL marker than the standard
                             system marker for files with the svn:eol-style
                             property set to 'native'.
                             ARG may be one of 'LF', 'CR', 'CRLF'
operate only on members of changelist ARG
don't delete changelists after commit
retrieve all revision properties
retrieve no revision properties
set revision property ARG in new revision
                             using the name[=value] format
use/display additional information from merge
                             history
specify automatic conflict resolution action
                             ('postpone', 'working', 'base', 'mine-conflict',
                             'theirs-conflict', 'mine-full', 'theirs-full',
                             'edit', 'launch')
                             (shorthand: 'p', 'mc', 'tc', 'mf', 'tf', 'e', 'l')
specify which collection of revisions to display
                             ('merged', 'eligible')
merge a branch back into its parent branch
number of leading path components to strip from
                             paths parsed from the patch file. --strip 0
                             is the default and leaves paths unmodified.
                             --strip 1 would change the path
                             'doc/fudge/crunchy.html' to 'fudge/crunchy.html'.
                             --strip 2 would leave just 'crunchy.html'
                             The expected component separator is '/' on all
                             platforms. A leading '/' counts as one component.
don't diff copied or moved files with their source
ignore whitespace during pattern matching
override diff-cmd specified in config file
use git's extended diff format
Allow merge into mixed-revision working copy.
                             Use of this option is not recommended!
                             Please run 'svn update' instead.
Merge source required
Second revision required
Too many arguments given
-r and -c can't be used with --reintegrate
Cannot specify a revision range with two URLs
A working copy merge source needs an explicit revision
--depth cannot be used with --reintegrate
--force cannot be used with --reintegrate
--reintegrate can only be used with a single merge source
--allow-mixed-revisions cannot be used with --reintegrate
Merge sources must both be either paths or URLs
Merge tracking not possible, use --ignore-ancestry or
fix invalid mergeinfo in target with 'svn propset'
r%ld*
r%ld
Not enough arguments given
Try 'svn add' or 'svn add --non-recursive' instead?
Try 'svn mkdir --parents' instead?
Cannot specify revisions (except HEAD) with move operations
Skipped missing target: '%s'
Skipped '%s'
D    %s
Removed external '%s': %s
Removed external '%s'
R    %s
C    %s
A    %s
%s %s
Restored '%s'
Reverted '%s'
A  (bin)  %s
A         %s
D         %s
%s      %s
%lu and fuzz %lu (%s)
%lu and fuzz %lu
Updating '%s':
Exported revision %ld.
Checked out revision %ld.
Updated to revision %ld.
External at revision %ld.
At revision %ld.
External export complete.
Export complete.
External checkout complete.
Checkout complete.
External update complete.
Update complete.
Sending copy of       %s
Sending        %s
Adding copy of (bin)  %s
Adding  (bin)  %s
Adding copy of        %s
Adding         %s
Deleting copy of      %s
Deleting       %s
Replacing copy of     %s
Replacing      %s
Transmitting file data 
'%s' locked by user '%s'.
'%s' unlocked.
A [%s] %s
D [%s] %s
--- Merging r%ld into '%s':
   C %s
   A %s
   U %s
   D %s
property '%s' set on '%s'
Upgraded '%s'
Redirecting to URL '%s':
Summary of conflicts:
  Text conflicts: %u
  Property conflicts: %u
  Tree conflicts: %u
  Skipped paths: %u
Skipped target: '%s' -- copy-source is missing
Skipped '%s' -- An obstructing working copy was found
Skipped '%s' -- Has no versioned parent
Skipped '%s' -- Access denied
Skipped '%s' -- Node remains in conflict
Failed to revert '%s' -- try updating instead.
Resolved conflicted state of '%s'
>         applied hunk ## -%lu,%lu +%lu,%lu ## with offset %s
>         applied hunk @@ -%lu,%lu +%lu,%lu @@ with offset %s
>         applied hunk ## -%lu,%lu +%lu,%lu ## with fuzz %lu (%s)
>         applied hunk @@ -%lu,%lu +%lu,%lu @@ with fuzz %lu
>         rejected hunk ## -%lu,%lu +%lu,%lu ## (%s)
>         rejected hunk @@ -%lu,%lu +%lu,%lu @@
>         hunk ## -%lu,%lu +%lu,%lu ## already applied (%s)
>         hunk @@ -%lu,%lu +%lu,%lu @@ already applied
Fetching external item into '%s':
Error handling externals definition for '%s':
Exported external at revision %ld.
Checked out external at revision %ld.
Updated external to revision %ld.
Performing status on external item at '%s':
Status against revision: %6ld
--- Merging differences between repository URLs into '%s':
--- Reverse-merging r%ld into '%s':
--- Merging r%ld through r%ld into '%s':
--- Reverse-merging r%ld through r%ld into '%s':
--- Recording mergeinfo for merge between repository URLs into '%s':
--- Recording mergeinfo for merge of r%ld into '%s':
--- Recording mergeinfo for reverse merge of r%ld into '%s':
--- Recording mergeinfo for merge of r%ld through r%ld into '%s':
--- Recording mergeinfo for reverse merge of r%ld through r%ld into '%s':
--- Eliding mergeinfo from '%s':
--- Merging differences between foreign repository URLs into '%s':
--- Merging (from foreign repository) r%ld into '%s':
--- Reverse-merging (from foreign repository) r%ld into '%s':
--- Merging (from foreign repository) r%ld through r%ld into '%s':
--- Reverse-merging (from foreign repository) r%ld through r%ld into '%s':
property '%s' deleted from '%s'.
Attempting to delete nonexistent property '%s' on '%s'
property '%s' set on repository revision %ld
property '%s' deleted from repository revision %ld
'%s' is not under version control
Cannot specify revision for deleting versioned property '%s'
Set new value for property '%s' on '%s'
'%s' is not a valid Subversion property name
--encoding option applies only to textual Subversion-controlled properties
Set new value for property '%s' on revision %ld
No changes to property '%s' on revision %ld
Cannot specify revision for editing versioned property '%s'
Explicit target argument required
'%s' does not appear to be a working copy path
No changes to property '%s' on '%s'
svn-prop
Error writing to stream
%s - 
Properties on '%s':
--verbose cannot be used with --revprop or --strict or --xml
Strict output of property values only available for single-target, non-recursive propget operations
Unversioned properties on revision %ld:
Could not display properties of all targets because some targets don't exist
Could not display properties of all targets because some targets are not versioned
Must specify the revision as a number, a date or 'HEAD' when operating on a revision property
Wrong number of targets specified
Either a URL or versioned item is required
To turn off the %s property, use 'svn propdel';
setting the property to '%s' will not turn it off.
property
false
Cannot specify revision for setting versioned property '%s'
Explicit target required ('%s' interpreted as prop value)
missing --accept option
invalid 'accept' ARG
Try 'svn revert --depth infinity' instead?
against
--- Changelist '%s':
missing
incomplete
replaced
obstructed
ignored
unversioned
subversion/svn/status.c
true
wc-locked
copied
switched
file-external
tree-conflicted
wc-status
repos-status
tree_conflict != NULL
      >   %s
%c%c%c%c%c%c%c %s%s
 ? A!DRM?CI~X!
%c%c%c%c%c%c%c %c   %6s   %6s %-12s %s%s
%c%c%c%c%c%c%c %c   %6s   %s%s
'%s' to '%s' is not a valid relocation
Path '%s' does not share common version control ancestry with the requested switch location.  Use --ignore-ancestry to disable this check.
side
repos-url
path-in-repos
local %s, incoming %s upon %s
action && reason
victim
operation
tree-conflict
source-left
source-right
obstruction
subversion/svn/tree-conflicts.c
Summary of updates:
! svn_path_is_url(path)
subversion/svn/update-cmd.c
  Updated '%s' to r%ld.
SVN_EDITOR
VISUAL
subversion/svn/util.c
buffer && prefix
Committed revision %ld%s.
Warning: %s
Can't get working directory
%s %s
system('%s') returned %d
SVN_MERGE
merge-tool-cmd
.tmp
Can't write to '%s'
Can't stat '%s'
log-encoding
   '%s'
svn-commit
Write error
UTF-8
svn: Skipping argument: 
eligible
(invalid date)
(%s)
(%s) %s@%ld
true_targets_p
'%s' is not a local path
None of the environment variables SVN_EDITOR, VISUAL or EDITOR are set, and no 'editor-cmd' run-time configuration option was found
The EDITOR, SVN_EDITOR or VISUAL environment variable or 'editor-cmd' run-time configuration option is empty or consists solely of whitespace. Expected a shell command.
SVN_I_LOVE_PANGALACTIC_GARGLE_BLASTERS
 (the answer to life, the universe, and everything)
Can't change working directory to '%s'
Can't restore working directory
The environment variable SVN_MERGE and the merge-tool-cmd run-time configuration option were not set.
The external merge tool exited with exit code %d
The SVN_MERGE environment variable is empty or consists solely of whitespace. Expected a shell command.
Error normalizing edited contents to internal format
Log message contains a zero byte
Your commit message was left in a temporary file:
--This line, and those below, will be ignored--
Error normalizing log message to internal format
Cannot invoke editor to get log message when non-interactive
Could not use external editor to fetch log message; consider setting the $SVN_EDITOR environment variable or using the --message (-m) or --file (-F) options
Log message unchanged or not specified
(a)bort, (c)ontinue, (e)dit:
Use --force to override this restriction (local modifications may be lost)
Cannot mix repository and working copy targets
truncate_buffer_at_prefix
;*3$"
svn.debug
7zXZ
0"OVMB
?@VqW
^Y`^
B|M8
} CO
.W7i
{Y98L
ETEB
FDb2
h=,R 
Pr#?
Lk}rn
3NHT@
IWBD
4nS?
%C&fx
g$C0"Jr
BE7g
	fzM
wC"c
NSY6
TXOr'
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.data
.bss
.gnu_debuglink
.gnu_debugdata
