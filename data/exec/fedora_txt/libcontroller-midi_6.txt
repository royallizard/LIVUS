__gmon_start__
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
g_type_class_peek_parent
gimp_controller_get_type
g_type_check_class_cast
dcgettext
g_strconcat
g_param_spec_string
g_object_class_install_property
g_free
g_param_spec_int
g_strdup_printf
g_source_remove
g_io_channel_unref
g_strdup
g_object_set
snd_seq_close
g_ascii_strcasecmp
snd_seq_open
snd_strerror
g_io_channel_unix_new
g_io_channel_set_close_on_unref
g_io_channel_set_encoding
g_io_add_watch
snd_seq_set_client_name
snd_seq_create_simple_port
snd_seq_client_id
g_source_new
g_source_attach
g_source_unref
__errno_location
g_strerror
g_type_check_instance_cast
g_value_init
g_value_set_double
gimp_controller_event
g_value_unset
controller_midi_get_type
g_type_name
g_log
g_value_get_string
g_value_get_int
snd_seq_event_input_pending
snd_seq_event_input
snd_seq_client_info_sizeof
memset
snd_seq_port_info_sizeof
snd_seq_get_any_client_info
snd_seq_get_any_port_info
__stack_chk_fail
g_io_channel_read_chars
g_clear_error
g_print
g_value_set_string
g_value_set_int
gimp_module_query
gimp_module_register
g_type_module_register_type
libgimpmodule-2.0.so.0
libgimpwidgets-2.0.so.0
libgtk-x11-2.0.so.0
libgdk-x11-2.0.so.0
libatk-1.0.so.0
libgio-2.0.so.0
libpangoft2-1.0.so.0
libpangocairo-1.0.so.0
libgdk_pixbuf-2.0.so.0
libcairo.so.2
libpango-1.0.so.0
libfreetype.so.6
libfontconfig.so.1
libgobject-2.0.so.0
libgthread-2.0.so.0
librt.so.1
libglib-2.0.so.0
libasound.so.2
libm.so.6
libdl.so.2
libpthread.so.0
libc.so.6
_edata
__bss_start
_end
libcontroller-midi.so
/usr/lib64
GLIBC_2.2.5
GLIBC_2.4
ALSA_0.9
%z( 
%r( 
%j( 
%b( 
%Z( 
%R( 
%J( 
%B( 
%:( 
%2( 
%*( 
%"( 
%z' 
%r' 
%j' 
%b' 
=b' 
=2' 
=	' 
=b! 
fffff.
fffff.
ATUH
[]A\
ffff.
-n$ 
HSHc
ATUH
\$@H
l$HL
d$PH
l$ H
\$ H
l$(L
d$0L
l$8L
t$@H
\$ H
l$(L
d$0L
l$8H
t$@H
AUATSH
[A\A]]
AUATUH
D$(1
T$(dH3
8[]A\A]
C`Ic
CdIc
ShIc
KdIc
ffff.
\$(H
l$0L
d$8L
l$@H
\$(H
l$0L
d$8L
l$@H
\$(H
l$0L
d$8L
l$@H
D$ H
D$0p
D$8H
Enter 'alsa' to use the ALSA sequencer.
The name of the device to read MIDI events from.
The MIDI channel to read events from. Set to -1 for reading from all MIDI channels.
%s: invalid %s id %u for "%s" of type `%s' in `%s'
MIDI: undefined system message
MIDI (ch %02d): note on  (%02x vel %02x)
MIDI (ch %02d): note off (%02x vel %02x)
MIDI (ch %02d): polyphonic aftertouch (%02x pressure %02x)
MIDI (ch %02d): controller %d (value %d)
MIDI (ch %02d): program change (%d)
MIDI (ch %02d): channel aftertouch (%d)
Michael Natterer <mitch@gimp.org>
(c) 2004-2007, released under the GPL
gimp20-libgimp
Device:
device
Channel:
channel
MIDI
gimp-controller-midi
Note %02x on
Note %02x off
Controller %03d
note-on-%02x
note-off-%02x
controller-%03d
MIDI Events
name
alsa
default
GIMP
GIMP MIDI Input Controller
Device not available: %s
state
ALSA (%d:%d)
Reading from %s
No device configured
property
controller-midi.c:287
End of file
MIDI: sysex start
MIDI: time code
MIDI: song position
MIDI: song select
MIDI: tune request
MIDI: sysex end
MIDI (ch %02d): pitch (%d)
controller-midi.c:309
ControllerMidi
MIDI event controller
v0.2
2004-2007
;*3$"
libcontroller-midi.so.debug
.data
.rodata
.shstrtab
.dynamic
.note.gnu.build-id
.eh_frame
.gnu.hash
.fini
.gnu_debuglink
.dynsym
.gnu.version
.rela.dyn
.data.rel.ro
.gnu.version_r
.jcr
.eh_frame_hdr
.dynstr
.bss
.init
.rela.plt
.got.plt
.got
.text
.fini_array
.init_array
