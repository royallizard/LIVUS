/lib64/ld-linux-x86-64.so.2
|fUa
libotr.so.5
_ITM_deregisterTMCloneTable
__gmon_start__
_Jv_RegisterClasses
_ITM_registerTMCloneTable
otrl_proto_message_type
otrl_base64_encode
_fini
_init
otrl_base64_decode
libgcrypt.so.20
gcry_mpi_powm
gcry_mpi_release
gcry_md_close
gcry_mpi_scan
gcry_md_hash_buffer
gcry_mpi_copy
gcry_mpi_cmp
gcry_mpi_print
gcry_md_read
gcry_md_reset
gcry_mpi_snew
gcry_md_write
gcry_md_open
gcry_strerror
libdl.so.2
libgpg-error.so.0
libc.so.6
fflush
__printf_chk
exit
puts
__stack_chk_fail
realloc
stdin
fgetc
calloc
strlen
strstr
memcmp
__fprintf_chk
stdout
fputc
memcpy
malloc
stderr
fwrite
strchr
__cxa_finalize
memmove
__libc_start_main
free
_edata
__bss_start
_end
GLIBC_2.3.4
GLIBC_2.14
GLIBC_2.4
GLIBC_2.2.5
GCRYPT_1.6
5J^ 
%L^ 
%J^ 
%B^ 
%:^ 
%2^ 
%*^ 
%"^ 
%z] 
%r] 
%j] 
%b] 
%Z] 
%R] 
%J] 
%B] 
%:] 
%2] 
%*] 
%"] 
=r] 
AVAU
ATUI
D$H1
l$0L
=a[ 
L$HdH3
P[]A\A]A^
=	Z 
fffff.
fffff.
=WY 
fffff.
=qU 
ATUH
[]A\
AUATUSH
D$81
D$0?OTRf
D$4H
t%Hc
T$01
L$8dH3
H[]A\A]
AWAVI
AUATH
|$(H
D$X1
|$0E1
L$(H
t$0L
L$(L
L$8I
T$8H
D$8A
D$@E
D$HI
D$PA
D$8L
D$@H
T$HH
D$8L
D$@H
T$HI
D$XdH3
/uYH
[]A\A]A^A_
D$8L
D$@H
T$HH
ffff.
AWAV
AUAT
5Ud 
=2t 
[]A\A]A^A_
AWAVAUATUSH
D$(1
|$(dH3<%(
8[]A\A]A^A_
5RN 
5o] 
A H1
A(L9
59\ 
A H3A
A(H3A
A0H1
A8L9
AWAVL
AUATH
w0M3
o(K3,
gHN3
W@H3
wXO34
O`J3
_hM3
wxO34
J H3
J(H3
J0J3
R8L3
([]A\A]A^A_
AWAVL
AUATH
5?f 
J H3
J(H3
J0J3
R8L3
([]A\A]A^A_
AWAVI
AUATI
[]A\A]A^A_
AVAUATUI
tfH)
[]A\A]A^
<	v=
fff.
AUATI
$+dH
[]A\A]
AVAUI
ATUI
[]A\A]A^
ffff.
AUATUSH
} E1
}(E1
}8E1
]XL)
$vJH
}@E1
}HE1
[]A\A]
ffff.
ffff.
AVAUATUSH
t$ L
t$0L
D$(t
[]A\A]A^
AUATUSH
[]A\A]
fff.
ffff.
AVAUATUSH
t$ L
t!I9
t$0L
D$(u
|$8H
[]A\A]A^
AVAUATUSH
t$ L
|$(H
[]A\A]A^
AWAV1
AUATI
D$hA
D$pH
T$ H
D$(L
l$@I
T$0I
t$8J
T$pH
\$xM)
l$hA
D$XH
T$HI
?OTR
dH3<%(
([]A\A]A^A_
fffff.
AVAUATUSH
}(E1
E8u	E
t!M9
]xvzH
$vZD
[]A\A]A^
AWAVA
AUATA
t$81
E8u	H
t$(H
t$ L
L$8dH3
H[]A\A]A^A_
ffffff.
AWAVAUATI
L$(1
D$(dH3
8[]A\A]A^A_
D$(dH3
[]A\A]A^A_1
D$(dH3
D$(dH3
[]A\A]A^A_
AVAUI
ATUI
l$0H
\$pdH
L$0H
L$pf.
[]A\A]A^
AWAVA
AUATL
[]A\A]A^A_
Usage: %s aeskey [new_message]
Read an OTR Data Message from stdin.  Use the given AES key to
verify its MAC and decrypt the message to stdout.  If new_message
is given, output a new OTR Data Message with the same fields as the
original, but with the message replaced by new_message
The AES key must be 32 hex chars long.
No OTR Data Message found on stdin.
OTR Non-Data Message found on stdin.
Invalid OTR Data Message found on stdin.
MAC does not verify: wrong AES key?
Out of memory!
Plaintext: ``%s''
0xFFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD129024E088A67CC74020BBEA63B139B22514A08798E3404DDEF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7EDEE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3DC2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F83655D23DCA3AD961C62F356208552BB9ED529077096966D670C354E4ABC9804F1746C08CA237327FFFFFFFFFFFFFFFF
0x02
?OTR:
%s: %u
%s: 
%02x
Error creating OTR Data Message.
Argument ``%s'' must have even length.
Illegal hex char in argument ``%s''.
Error: %s
;*3$"
otr_readforge.debug
7zXZ
wpVo
:S4<E
FVn A
M?V|c
ob%q
fUqB
tF8T
=n;f_4`
&oE?
=H6P
Mx3?
su|O]
XfY1
|tqIG
(JP_
Ex3s
HxT*
j)N0s2<
{&sj
<yf]
];*"^
w,4y
jy5j
G+^W
aWR*
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.data
.bss
.gnu_debuglink
.gnu_debugdata
