__gmon_start__
_fini
__cxa_finalize
_Jv_RegisterClasses
__getBerkeleyDBInfo
Perl_Gthr_key_ptr
pthread_getspecific
Perl_get_sv
db_version
Perl_croak_nocontext
__sprintf_chk
Perl_sv_setpv
Perl_sv_setiv
boot_DB_File
Perl_Istack_sp_ptr
Perl_Imarkstack_ptr_ptr
Perl_Istack_base_ptr
Perl_newSVpv
Perl_new_version
Perl_sv_derived_from
Perl_vcmp
XS_DB_File_constant
Perl_newXS
XS_DB_File_DoTie_
XS_DB_File_DESTROY
XS_DB_File_DELETE
XS_DB_File_EXISTS
XS_DB_File_FETCH
XS_DB_File_STORE
XS_DB_File_FIRSTKEY
XS_DB_File_NEXTKEY
XS_DB_File_unshift
XS_DB_File_pop
XS_DB_File_shift
XS_DB_File_push
XS_DB_File_length
XS_DB_File_del
XS_DB_File_get
XS_DB_File_put
XS_DB_File_fd
XS_DB_File_sync
XS_DB_File_seq
XS_DB_File_filter_fetch_key
XS_DB_File_filter_store_key
XS_DB_File_filter_fetch_value
XS_DB_File_filter_store_value
Perl_my_cxt_init
Perl_Iunitcheckav_ptr
Perl_Iscopestack_ix_ptr
Perl_call_list
Perl_Isv_yes_ptr
Perl_form
Perl_sv_2pv_flags
Perl_vstringify
Perl_croak
Perl_Isv_undef_ptr
Perl_sv_2iv_flags
Perl_sv_mortalcopy
Perl_sv_setsv_flags
Perl_newSVsv
Perl_sv_free2
Perl_sv_free
Perl_Imy_cxt_list_ptr
Perl_Iop_ptr
Perl_sv_newmortal
Perl_mg_set
Perl_pad_sv
Perl_sv_2uv_flags
Perl_Itmps_floor_ptr
Perl_save_int
Perl_Itmps_ix_ptr
Perl_Idefgv_ptr
Perl_save_sptr
Perl_Imarkstack_max_ptr
Perl_call_sv
Perl_Idebug_ptr
Perl_pop_scope
Perl_sv_2mortal
Perl_sv_2pvbyte
Perl_push_scope
Perl_deb
Perl_free_tmps
Perl_gv_SVadd
Perl_markstack_grow
Perl_safesysfree
Perl_safesysmalloc
db_create
Perl_sv_setref_pv
Perl_hv_common_key_len
Perl_sv_isa
Perl_Istack_max_ptr
Perl_newSVpvn
Perl_stack_grow
Perl_sv_setpvf_nocontext
Perl_newSVpvf_nocontext
Perl_sv_setpvn
Perl_Itainted_ptr
Perl_Itainting_ptr
Perl_mg_get
Perl_sv_magic
Perl_Ina_ptr
libdb-4.7.so
libc.so.6
__stack_chk_fail
_edata
__bss_start
_end
GLIBC_2.1.3
GLIBC_2.3.4
GLIBC_2.4
l[^_]
L[^_]
,[^_]
,[^_]
,[^_]
,[^_]
,[^_]
<[^_]
[^_]
,[^_]
l[^_]
<[^_]
<[^_]
,[^_]
B	<N
<[^_]
,[^_]
|[^_]
|[^_]
l[^_]
l[^_]
[^_]
[^_]
[^_]
[^_]
l[^_]
[^_]
[^_]
|[^_]
l[^_]
DB_File::db_version
DB_File::db_ver
DB_File::db_185_compat
%d.%d
%d.%03d%03d
DB_File needs compatible versions of libdb & db.h
	you have db.h version %d.%d.%d and libdb version %d.%d.%d
XS_VERSION
%s::%s
1.816_1
bootstrap parameter
DB_File.c
DB_File::constant
DB_File::DoTie_
DB_File::DESTROY
DB_File::DELETE
DB_File::EXISTS
DB_File::FETCH
DB_File::STORE
DB_File::FIRSTKEY
DB_File::NEXTKEY
DB_File::UNSHIFT
DB_File::unshift
DB_File::POP
DB_File::pop
DB_File::SHIFT
DB_File::shift
DB_File::push
DB_File::PUSH
DB_File::length
DB_File::FETCHSIZE
DB_File::del
DB_File::get
DB_File::put
DB_File::fd
DB_File::sync
DB_File::seq
DB_File::filter_fetch_key
DB_File::filter_store_key
DB_File::filter_fetch_value
DB_File::filter_store_value
DB_File::Error
db, code
Usage: %s(%s)
DB_File
%s: %s is not of type %s
db, flags=0
db, ...
recursion detected in %s
DB_File.xs
ENTER
%s scope %ld at %s:%d
LEAVE
%s: %s is not a reference
DB_File::HASHINFO
internal error
hash
ffactor
nelem
bsize
cachesize
lorder
DB_File::BTREEINFO
compare
prefix
psize
DB_File::RECNOINFO
bval
reclen
bfname
%s: %s
R_DUP
R_LAST
R_NEXT
R_PREV
DB_TXN
R_FIRST
DB_LOCK
R_NOKEY
DB_SHMEM
R_CURSOR
R_IAFTER
HASHMAGIC
RET_ERROR
R_IBEFORE
R_FIXEDLEN
BTREEMAGIC
__R_UNUSED
R_SNAPSHOT
R_RECNOSYN
RET_SPECIA
HASHVERSIO
R_SETCURSO
RET_SUCCES
BTREEVERSION
R_NOOVERWRITE
MAX_REC_NUMBER
MAX_PAGE_NUMBER
MAX_PAGE_OFFSET
db, key
db, key, flags=0
db, key, value, flags
db, key, value, flags=0
((svtype)((_svi)->sv_flags & 0xff)) >= SVt_RV
Assertion %s failed: file "DB_File.c", line %d
%s object version %-p does not match %s%s%s%s %-p
((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVAV
((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVHV
((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVCV
((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVFM
!((((_svi)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svi)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svi)->sv_flags & 0xff)) == SVt_PVLV))
((svtype)((_svi)->sv_flags & 0xff)) == SVt_IV || ((svtype)((_svi)->sv_flags & 0xff)) >= SVt_PVIV
((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))
((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV
!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 2287), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (((XPVCV*)(cv)->sv_any)->xcv_gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 2287), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 2287), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 2287), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"DB_File.c\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 2287), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 2287), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 2303), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (((XPVCV*)(cv)->sv_any)->xcv_gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 2303), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 2303), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 2303), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"DB_File.c\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 2303), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 2303), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
((svtype)((shplep)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((shplep)->sv_flags & 0xff)) == SVt_PVLV
Assertion %s failed: file "DB_File.xs", line %d
((((shplep)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((shplep)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((shplep)->sv_flags & 0xff)) == SVt_PVLV))
((svtype)((_svi)->sv_flags & 0xff)) >= SVt_PV
isHASH, dbtype, name=undef, flags=O_CREAT|O_RDWR, mode=0666, type=DB_HASH
type parameter is not a reference
DB_File can only tie an associative array to a DB_HASH database
DB_File can only tie an associative array to a DB_BTREE database
DB_File can only tie an array to a DB_RECNO database
type is not of type DB_File::HASHINFO, DB_File::BTREEINFO or DB_File::RECNOINFO
DB_File btree_prefix: recursion detected
DB_File btree_prefix: expected 1 return value from prefix sub, got %d
DB_File btree_compare: recursion detected
DB_File btree_compare: expected 1 return value from compare sub, got %d
DB_File hash callback: recursion detected
DB_File hash_cb: expected 1 return value from hash sub, got %d
%s is not a valid DB_File macro
Your vendor has not defined DB_File macro %s, used
Modification of non-creatable array value attempted, subscript %ld
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 2358), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (((XPVCV*)(cv)->sv_any)->xcv_gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 2358), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 2358), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 2358), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"DB_File.c\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 2358), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 2358), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 2374), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (((XPVCV*)(cv)->sv_any)->xcv_gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 2374), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 2374), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 2374), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"DB_File.c\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 2374), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 2374), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 2231), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (((XPVCV*)(cv)->sv_any)->xcv_gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 2231), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 2231), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 2231), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"DB_File.c\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 2231), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 2231), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 2248), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (((XPVCV*)(cv)->sv_any)->xcv_gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 2248), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 2248), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 2248), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"DB_File.c\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 2248), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 2248), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 2174), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (((XPVCV*)(cv)->sv_any)->xcv_gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 2174), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 2174), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 2174), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"DB_File.c\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 2174), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 2174), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 2191), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (((XPVCV*)(cv)->sv_any)->xcv_gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 2191), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 2191), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 2191), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"DB_File.c\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 2191), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 2191), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 2104), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (((XPVCV*)(cv)->sv_any)->xcv_gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 2104), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 2104), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 2104), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"DB_File.c\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 2104), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 2104), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 2120), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (((XPVCV*)(cv)->sv_any)->xcv_gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 2120), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 2120), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 2120), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "DB_File.c" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"DB_File.c\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 2120), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 2120), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
DB_File.so.debug
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.ctors
.dtors
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.data
.bss
.gnu_debuglink
