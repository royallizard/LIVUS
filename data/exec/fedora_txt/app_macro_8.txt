__gmon_start__
_init
_fini
__cxa_finalize
_Jv_RegisterClasses
pbx_builtin_setvar_helper
__snprintf_chk
pbx_builtin_getvar_helper
__stack_chk_fail
ast_module_unregister
ast_unregister_application
ast_register_application2
ast_walk_context_extensions
ast_get_extension_name
ast_extension_match
ast_get_extension_matchcid
ast_walk_extension_priorities
ast_get_extension_priority
ast_get_extension_cidmatch
ast_walk_context_includes
ast_walk_contexts
ast_get_include_name
ast_get_context_name
strcmp
macro_ds_info
ast_channel_datastore_find
pthread_mutex_lock
sscanf
pthread_mutex_unlock
strlen
memcpy
strchr
ast_log
ast_exists_extension
option_debug
ast_options
ast_autoservice_start
ast_context_lockmacro
ast_autoservice_stop
__strdup
strcasecmp
ast_check_hangup
ast_rdlock_contexts
ast_unlock_contexts
ast_spawn_extension
ast_context_find
ast_rdlock_context
ast_debug_get_by_file
pbx_substitute_variables_helper
pbx_checkcondition
ast_get_extension_app
ast_get_extension_app_data
ast_unlock_context
strncasecmp
free
ast_context_unlockmacro
ast_datastore_alloc
ast_channel_datastore_add
option_verbose
ast_verbose_get_by_file
__ast_verbose
ast_module_register
ast_unregister_file_version
ast_register_file_version
libpthread.so.0
libc.so.6
_edata
__bss_start
_end
GLIBC_2.2.5
GLIBC_2.3.4
GLIBC_2.4
%z; 
%r; 
%j; 
%b; 
%Z; 
%R; 
%J; 
%B; 
%:; 
%2; 
%*; 
%"; 
%z: 
%r: 
%j: 
%b: 
%Z: 
%R: 
%J: 
%B: 
%:: 
%2: 
%*: 
%": 
ATSubH
='6 
=W5 
=?5 
 []A\
=i8 
=	4 
=w3 
=e3 
=13 
ATUH
[]A\A]A^A_
AWAVAUATI
D$/H
[A\A]A^A_
%;* 
MACRO_DEPTH
MACRO_CONTEXT
MACRO_EXTEN
MACRO_PRIORITY
MACRO_OFFSET
ARG%d
app_macro.c
MACRO_RECURSION
MACRO_IN_HANGUP
Invalid macro name specified
Locking macrolock for '%s'
Failed to lock contexts list
Unable to lock context?
Executed application: %s
GOSUB
Incrementing gosub_level
GOSUBIF
RETURN
Decrementing gosub_level
STACKPOP
EXEC
EXECIF
Last app: %s
Unlocking macrolock for '%s'
macro-%s
Invalid Syntax.
$Revision: 166730 $
MACRO
app_macro
Extension Macros
MacroIf
MacroExit
MacroExclusive
Exit From Macro
Macro Implementation
Macro() requires arguments. See "core show application macro" for help.
Unable to allocate new datastore.
Macro():  possible infinite loop detected.  Returning early.
No such context '%s' for macro '%s'
Context '%s' for macro '%s' lacks 's' extension, priority 1
Failed to lock macro '%s' as in-use
Memory Allocation Failure in function %s at line %d of %s
/builddir/build/BUILD/asterisk-1.6.1-rc1/include/asterisk/utils.h
Oooh, got something to jump out with ('%c')!
Spawn extension (%s,%s,%d) exited non-zero on '%s' in macro '%s'
  == Spawn extension (%s, %s, %d) exited non-zero on '%s' in macro '%s'
  == Channel '%s' jumping out of macro '%s'
Extension %s, macroexten %s, priority %d returned normally even though call was hung up
Failed to unlock macro '%s' - that isn't good
This paragraph is copyright (c) 2006 by Digium, Inc. In order for your module to load, it must return this key via a function called "key".  Any code which includes this paragraph must be licensed under the GNU General Public License version 2 or later (at your option).  In addition to Digium's general reservations of rights, Digium expressly reserves the right to allow other parties to license this paragraph under different terms. Any use of Digium, Inc. trademarks or logos (including "Asterisk" or "Digium") without express written permission of Digium, Inc. is prohibited.
  MacroExit():
Causes the currently running macro to exit as if it had
ended normally by running out of priorities to execute.
If used outside a macro, will likely cause unexpected
behavior.
  MacroIf(<expr>?macroname_a[,arg1][:macroname_b[,arg1]])
Executes macro defined in <macroname_a> if <expr> is true
(otherwise <macroname_b> if provided)
Arguments and return values as in application Macro()
Conditional Macro Implementation
  MacroExclusive(macroname,arg1,arg2...):
Executes macro defined in the context 'macro-macroname'
Only one call at a time may run the macro.
(we'll wait if another call is busy executing in the Macro)
Arguments and return values as in application Macro()
Exclusive Macro Implementation
  Macro(macroname,arg1,arg2...): Executes a macro using the context
'macro-<macroname>', jumping to the 's' extension of that context and
executing each step, then returning when the steps end. 
The calling extension, context, and priority are stored in ${MACRO_EXTEN}, 
${MACRO_CONTEXT} and ${MACRO_PRIORITY} respectively.  Arguments become
${ARG1}, ${ARG2}, etc in the macro context.
If you Goto out of the Macro context, the Macro will terminate and control
will be returned at the location of the Goto.
If ${MACRO_OFFSET} is set at termination, Macro will attempt to continue
at priority MACRO_OFFSET + N + 1 if such a step exists, and N + 1 otherwise.
Extensions: While a macro is being executed, it becomes the current context.
            This means that if a hangup occurs, for instance, that the macro
            will be searched for an 'h' extension, NOT the context from which
            the macro was called. So, make sure to define all appropriate
            extensions in your macro! (Note: AEL does not use macros)
WARNING: Because of the way Macro is implemented (it executes the priorities
         contained within it via sub-engine), and a fixed per-thread
         memory stack allowance, macros are limited to 7 levels
         of nesting (macro calling macro calling macro, etc.); It
         may be possible that stack-intensive applications in deeply nested macros
         could cause asterisk to crash earlier than this limit. It is advised that
         if you need to deeply nest macro calls, that you use the Gosub application
         (now allows arguments like a Macro) with explict Return() calls instead.
_macro_exec
_ast_strdup
macroif_exec
a9c98e5d177805051735cb5b0b16b0a0
app_macro.so.debug
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.ctors
.dtors
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.data
.bss
.gnu_debuglink
