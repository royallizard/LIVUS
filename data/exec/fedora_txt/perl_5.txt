,*T(-
/Tly
__gmon_start__
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
PL_thr_key
pthread_getspecific
boot_DynaLoader
Perl_newXS
Perl_get_hv
Perl_newSViv
Perl_newCONSTSUB
exit
xchat_print
Perl_sv_2uv_flags
xchat_plugingui_remove
Perl_sv_2pv_flags
xchat_nickcmp
Perl_sv_2mortal
malloc
xchat_send_modes
Perl_av_len
Perl_av_fetch
Perl_sv_2iv_flags
xchat_emit_print
xchat_get_prefs
Perl_newSVpv
Perl_stack_grow
__stack_chk_fail
xchat_get_context
xchat_find_context
Perl_sv_2bool_flags
Perl_newSV_type
xchat_list_time
Perl_newSVnv
Perl_hv_common_key_len
xchat_list_int
Perl_newSVuv
xchat_list_str
Perl_newSVpvn
Perl_newRV_noinc
xchat_list_get
xchat_list_next
xchat_list_free
xchat_list_fields
Perl_block_gimme
xchat_get_info
Perl_markstack_grow
xchat_set_context
xchat_command
Perl_sv_mortalcopy_flags
xchat_hook_timer
xchat_hook_command
xchat_unhook
Perl_sv_free2
xchat_hook_fd
Perl_push_scope
Perl_save_strlen
Perl_call_sv
Perl_free_tmps
Perl_pop_scope
xchat_printf
Perl_call_pv
Perl_gv_add_by_type
setlocale
Perl_sys_init3
perl_alloc
perl_construct
perl_parse
Perl_eval_pv
opendir
readdir64
strcasecmp
__sprintf_chk
closedir
memcpy
xchat_hook_print
Perl_av_push
xchat_hook_server
xchat_plugingui_add
strchr
strncasecmp
xchat_plugin_get_info
xchat_plugin_init
xchat_plugin_deinit
perl_destruct
perl_free
Perl_sys_term
libnsl.so.1
libperl.so.5.22
libpthread.so.0
libresolv.so.2
libdl.so.2
libm.so.6
libcrypt.so.1
libutil.so.1
libc.so.6
libX11.so.6
libssl.so.10
libcrypto.so.10
libglib-2.0.so.0
libntlm.so.0
_edata
__bss_start
_end
perl.so
GLIBC_2.2.5
GLIBC_2.4
GLIBC_2.14
GLIBC_2.3.4
ATUSH
]A\H
AUATUSH
HxLc"
[]A\A]
AUATUSH
HxLc"
=`	!
[]A\A]
AVAUATUSH
t#[]A\A]A^H
,$[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATUSH
HxLc"
$/Mc
[]A\A]A^A_
[]A\A]A^A_
D( L
AUATUSH
([]A\A]
@ L)
Lcl$
AUATUSH
[]A\A]
[]A\A]
AVAUATUSH
HxLc*
[]A\A]A^
AWAVI
AUATUS1
<iu7H
[]A\A]A^A_
AVAUATUH
t"[]A\A]A^H
+[]A\A]A^
@ H)
[]A\A]A^
AUATUSH
HxHc*
@ L)
[]A\A]
AVAUATUSH
[]A\A]A^H
[]A\A]A^
@ L)
AUATUSH
[]A\A]
[]A\A]
AUATUSH
HxLc"
[]A\A]
AWAVAUATUSH
[]A\A]A^A_
D$ t
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
AVAUATUSH
HxHc*
[]A\A]A^
@ L)
[]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
AVAUI
ATUSH
t$XH
@ H)
H;hX~
]A\A]A^
@ L)
AWAVAUATI
t$XH
@ H)
H;hX~
[]A\A]A^A_
@ L)
@ H)
AVAUI
ATUI
t$XH
@ H)
H;hX~
]A\A]A^
ATUH
D$H1
L$HdH3
P[]A\
d$ H
L$(H
T$8H
D$ H
AVAUI
ATUL
]A\A]A^
[]A\A]A^
/pluginsL
tVUSH
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATI
t$XH
D$XA
E(E1
[]A\A]A^A_
@ L)
@ H)
H;hX
AVAUI
]A\A]A^
AWAVI
AUATI
t$XH
E(E1
[]A\A]A^A_
@ L)
@ L)
@ L)
H;hX
AWAVI
AUATI
t$XH
E(E1
[]A\A]A^A_
@ L)
@ L)
@ L)
H;hX
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_1
[]A\A]A^A_
ATUI
~WHc
[]A\
[]A\
ATUS
ATUS
ATUSH
perl.c
DynaLoader::boot_DynaLoader
Xchat::Internal::register
Xchat::Internal::hook_server
Xchat::Internal::hook_command
Xchat::Internal::hook_print
Xchat::Internal::hook_timer
Xchat::Internal::hook_fd
Xchat::Internal::unhook
Xchat::Internal::print
Xchat::Internal::command
Xchat::Internal::set_context
Xchat::Internal::get_info
Xchat::Internal::context_info
Xchat::Internal::get_list
Xchat::find_context
Xchat::get_context
Xchat::get_prefs
Xchat::emit_print
Xchat::send_modes
Xchat::nickcmp
Xchat::
PRI_HIGHEST
PRI_HIGH
PRI_NORM
PRI_LOW
PRI_LOWEST
EAT_NONE
EAT_XCHAT
EAT_PLUGIN
EAT_ALL
FD_READ
FD_WRITE
FD_EXCEPTION
FD_NOTSOCKET
KEEP
REMOVE
Usage: Xchat::nickcmp(s1, s2)
Usage: Xchat::get_prefs(name)
Usage: Xchat::get_context()
Usage: Xchat::get_list(name)
channels
Usage: Xchat::get_info(id)
win_ptr
libdirfs
xchatdirfs
Usage: Xchat::unhook(hook)
Error in fd callback %s
Xchat::unhook
Error in timer callback %s
perl_warnings
Xchat::Embed::load
%s/%s
xchatdir
Xchat::Embed::reload_all
Xchat::Embed::unload_all
Error in print callback %s
Error in command callback %s
Error in server callback %s
Xchat::Embed::reload
Xchat::Embed::unload
Perl
Perl scripting interface
2.8.8
pl_reload
unloadall
reloadall
Perl interface loaded
Perl interface unloaded
Xchat::Embed::plugingui_remove
Usage: Xchat::Embed::plugingui_remove(handle)
Usage: Xchat::Internal::print(text)
Usage: Xchat::send_modes( targets, sign, mode, modes_per_line)
Usage: Xchat::emit_print(event_name, ...)
Usage: Xchat::find_context ([channel, [server]])
Usage: Xchat::Internal::context_info()
Usage: Xchat::set_context(ctx)
Usage: Xchat::Internal::command(command)
Usage: Xchat::Internal::hook_timer(timeout, callback, userdata, package)
Usage: Xchat::Internal::hook_command(name, priority, callback, help_text, userdata)
Usage: Xchat::Internal::hook_fd(fd, callback, flags, userdata)
Fd handler should only return 1 value.
Timer handler should only return 1 value.
Perl error: expected 1 value from %s, got: %d
Usage: Xchat::Internal::hook_print(name, priority, callback, userdata)
Print handler should only return 1 value.
Command handler should only return 1 value.
Server handler should only return 1 value.
Usage: Xchat::Internal::hook_server(name, priority, callback, userdata)
Usage: Xchat::Internal::register(scriptname, version, desc, filename)
Perl interface already loaded
#line 1 "IRC.pm"
package IRC;
sub IRC::register {
my ($script_name, $version, $callback) = @_;
my $package = caller;
$callback = Xchat::Embed::fix_callback( $package, $callback) if $callback;
Xchat::register( $script_name, $version, undef, $callback );
sub IRC::add_command_handler {
my ($command, $callback) = @_;
my $package = caller;
$callback = Xchat::Embed::fix_callback( $package, $callback );
my $start_index = $command ? 1 : 0;
Xchat::hook_command( $command,
sub {
no strict 'refs';
return &{$callback}($_[1][$start_index]);
return;
sub IRC::add_message_handler {
my ($message, $callback) = @_;
my $package = caller;
$callback = Xchat::Embed::fix_callback( $package, $callback );
Xchat::hook_server( $message,
sub {
no strict 'refs';
return &{$callback}( $_[1][0] );
return;
sub IRC::add_print_handler {
my ($event, $callback) = @_;
my $package = caller;
$callback = Xchat::Embed::fix_callback( $package, $callback );
Xchat::hook_print( $event,
sub {
my @word = @{$_[0]};
no strict 'refs';
return &{$callback}( join( ' ', @word[0..3] ), @word );
return;
sub IRC::add_timeout_handler {
my ($timeout, $callback) = @_;
my $package = caller;
$callback = Xchat::Embed::fix_callback( $package, $callback );
Xchat::hook_timer( $timeout,
sub {
no strict 'refs';
&{$callback};
return 0;
return;
sub IRC::command {
my $command = shift;
if( $command =~ m{^/} ) {
$command =~ s{^/}{};
Xchat::command( $command );
} else {
Xchat::command( qq[say $command] );
sub IRC::command_with_channel {
my ($command, $channel, $server) = @_;
my $old_ctx = Xchat::get_context;
my $ctx = Xchat::find_context( $channel, $server );
if( $ctx ) {
Xchat::set_context( $ctx );
IRC::command( $command );
Xchat::set_context( $ctx );
sub IRC::command_with_server {
my ($command, $server) = @_;
my $old_ctx = Xchat::get_context;
my $ctx = Xchat::find_context( undef, $server );
if( $ctx ) {
Xchat::set_context( $ctx );
IRC::command( $command );
Xchat::set_context( $ctx );
sub IRC::dcc_list {
my @dccs;
for my $dcc ( Xchat::get_list( 'dcc' ) ) {
push @dccs, $dcc->{nick};
push @dccs, $dcc->{file} ? $dcc->{file} : '';
push @dccs, @{$dcc}{qw(type status cps size)};
push @dccs, $dcc->{type} == 0 ? $dcc->{pos} : $dcc->{resume};
push @dccs, $dcc->{address32};
push @dccs, $dcc->{destfile} ? $dcc->{destfile} : '';
return @dccs;
sub IRC::channel_list {
my @channels;
for my $channel ( Xchat::get_list( 'channels' ) ) {
push @channels, @{$channel}{qw(channel server)},
Xchat::context_info( $channel->{context} )->{nick};
return @channels;
sub IRC::get_info {
my $id = shift;
my @ids = qw(version nick channel server xchatdir away network host topic);
if( $id >= 0 && $id <= 8 && $id != 5 ) {
my $info = Xchat::get_info($ids[$id]);
return defined $info ? $info : '';
} else {
if( $id == 5 ) {
return Xchat::get_info( 'away' ) ? 1 : 0;
} else {
return 'Error2';
sub IRC::get_prefs {
return 'Unknown variable' unless defined $_[0];
my $result = Xchat::get_prefs(shift);
return defined $result ? $result : 'Unknown variable';
sub IRC::ignore_list {
my @ignores;
for my $ignore ( Xchat::get_list( 'ignore' ) ) {
push @ignores, $ignore->{mask};
my $flags = $ignore->{flags};
push @ignores, $flags & 1, $flags & 2, $flags & 4, $flags & 8, $flags & 16,
$flags & 32, ':';
return @ignores;
sub IRC::print {
Xchat::print( $_ ) for @_;
return;
sub IRC::print_with_channel {
Xchat::print( @_ );
sub IRC::send_raw {
Xchat::commandf( qq[quote %s], shift );
sub IRC::server_list {
my @servers;
for my $channel ( Xchat::get_list( 'channels' ) ) {
push @servers, $channel->{server} if $channel->{server};
return @servers;
sub IRC::user_info {
my $user;
if( @_ > 0 ) {
$user = Xchat::user_info( shift );
} else {
$user = Xchat::user_info();
my @info;
if( $user ) {
push @info, $user->{nick};
if( $user->{host} ) {
push @info, $user->{host};
} else {
push @info, 'FETCHING';
push @info, $user->{prefix} eq '@' ? 1 : 0;
push @info, $user->{prefix} eq '+' ? 1 : 0;
return @info;
sub IRC::user_list {
my ($channel, $server) = @_;
my $ctx = Xchat::find_context( $channel, $server );
my $old_ctx = Xchat::get_context;
if( $ctx ) {
Xchat::set_context( $ctx );
my @users;
for my $user ( Xchat::get_list( 'users' ) ) {
push @users, $user->{nick};
if( $user->{host} ) {
push @users, $user->{host};
} else {
push @users, 'FETCHING';
push @users, $user->{prefix} eq '@' ? 1 : 0;
push @users, $user->{prefix} eq '+' ? 1 : 0;
push @users, ':';
Xchat::set_context( $old_ctx );
return @users;
} else {
return;
sub IRC::user_list_short {
my ($channel, $server) = @_;
my $ctx = Xchat::find_context( $channel, $server );
my $old_ctx = Xchat::get_context;
if( $ctx ) {
Xchat::set_context( $ctx );
my @users;
for my $user ( Xchat::get_list( 'users' ) ) {
my $nick = $user->{nick};
my $host = $user->{host} || 'FETCHING';
push @users, $nick, $host;
Xchat::set_context( $old_ctx );
return @users;
} else {
return;
sub IRC::add_user_list {}
sub IRC::sub_user_list {}
sub IRC::clear_user_list {}
sub IRC::notify_list {}
sub IRC::perl_script_list {}
#line 1 "Xchat.pm"
BEGIN {
$INC{'Xchat.pm'} = 'DUMMY';
$SIG{__WARN__} = sub {
my $message = shift @_;
my ($package) = caller;
my $message_levels =	qr/ERROR|CRITICAL|WARNING|MESSAGE|INFO|DEBUG/;
if( $message =~ /^(?:Gtk|GLib|Gdk)(?:-\w+)?-$message_levels/i ) {
print STDERR $message;
} else {
if( defined &Xchat::Internal::print ) {
Xchat::print( $message );
} else {
warn $message;
use File::Spec ();
use File::Basename ();
use File::Glob ();
use List::Util ();
use Symbol();
use Time::HiRes ();
use Carp ();
package Xchat;
use base qw(Exporter);
use strict;
use warnings;
sub PRI_HIGHEST ();
sub PRI_HIGH ();
sub PRI_NORM ();
sub PRI_LOW ();
sub PRI_LOWEST ();
sub EAT_NONE ();
sub EAT_XCHAT ();
sub EAT_PLUIN ();
sub EAT_ALL ();
sub KEEP ();
sub REMOVE ();
sub FD_READ ();
sub FD_WRITE ();
sub FD_EXCEPTION ();
sub FD_NOTSOCKET ();
sub get_context;
sub Xchat::Internal::context_info;
sub Xchat::Internal::print;
our %EXPORT_TAGS = (
constants => [
qw(PRI_HIGHEST PRI_HIGH PRI_NORM PRI_LOW PRI_LOWEST), # priorities
qw(EAT_NONE EAT_XCHAT EAT_PLUGIN EAT_ALL), # callback return values
qw(FD_READ FD_WRITE FD_EXCEPTION FD_NOTSOCKET), # fd flags
qw(KEEP REMOVE), # timers
hooks => [
qw(hook_server hook_command hook_print hook_timer hook_fd unhook),
util => [
qw(register nickcmp strip_code send_modes), # misc
qw(print prnt printf prntf command commandf emit_print), # output
qw(find_context get_context set_context), # context
qw(get_info get_prefs get_list context_info user_info), # input
$EXPORT_TAGS{all} = [ map { @{$_} } @EXPORT_TAGS{qw(constants hooks util)}];
our @EXPORT = @{$EXPORT_TAGS{constants}};
our @EXPORT_OK = @{$EXPORT_TAGS{all}};
sub register {
my $package = Xchat::Embed::find_pkg();
my $pkg_info = Xchat::Embed::pkg_info( $package );
my $filename = $pkg_info->{filename};
my ($name, $version, $description, $callback) = @_;
if( defined $pkg_info->{gui_entry} ) {
Xchat::print( "Xchat::register called more than once in "
. $pkg_info->{filename} );
return ();
$description = "" unless defined $description;
$pkg_info->{shutdown} = $callback;
unless( $name && $name =~ /[[:print:]\w]/ ) {
$name = "Not supplied";
unless( $version && $version =~ /\d+(?:\.\d+)?/ ) {
$version = "NaN";
$pkg_info->{gui_entry} =
Xchat::Internal::register( $name, $version, $description, $filename );
return ();
sub hook_server {
return undef unless @_ >= 2;
my $message = shift;
my $callback = shift;
my $options = shift;
my $package = Xchat::Embed::find_pkg();
$callback = Xchat::Embed::fix_callback( $package, $callback );
my ($priority, $data) = ( Xchat::PRI_NORM, undef );
if( ref( $options ) eq 'HASH' ) {
if( exists( $options->{priority} ) && defined( $options->{priority} ) ) {
$priority = $options->{priority};
if( exists( $options->{data} ) && defined( $options->{data} ) ) {
$data = $options->{data};
my $pkg_info = Xchat::Embed::pkg_info( $package );
my $hook = Xchat::Internal::hook_server(
$message, $priority, $callback, $data
push @{$pkg_info->{hooks}}, $hook if defined $hook;
return $hook;
sub hook_command {
return undef unless @_ >= 2;
my $command = shift;
my $callback = shift;
my $options = shift;
my $package = Xchat::Embed::find_pkg();
$callback = Xchat::Embed::fix_callback( $package, $callback );
my ($priority, $help_text, $data) = ( Xchat::PRI_NORM, undef, undef );
if( ref( $options ) eq 'HASH' ) {
if( exists( $options->{priority} ) && defined( $options->{priority} ) ) {
$priority = $options->{priority};
exists( $options->{help_text} )
&& defined( $options->{help_text} )
$help_text = $options->{help_text};
if ( exists( $options->{data} ) && defined( $options->{data} ) ) {
$data = $options->{data};
my $pkg_info = Xchat::Embed::pkg_info( $package );
my $hook = Xchat::Internal::hook_command(
$command, $priority, $callback, $help_text, $data
push @{$pkg_info->{hooks}}, $hook if defined $hook;
return $hook;
sub hook_print {
return undef unless @_ >= 2;
my $event = shift;
my $callback = shift;
my $options = shift;
my $package = Xchat::Embed::find_pkg();
$callback = Xchat::Embed::fix_callback( $package, $callback );
my ($priority, $data) = ( Xchat::PRI_NORM, undef );
if ( ref( $options ) eq 'HASH' ) {
if ( exists( $options->{priority} ) && defined( $options->{priority} ) ) {
$priority = $options->{priority};
if ( exists( $options->{data} ) && defined( $options->{data} ) ) {
$data = $options->{data};
my $pkg_info = Xchat::Embed::pkg_info( $package );
my $hook = Xchat::Internal::hook_print(
$event, $priority, $callback, $data
push @{$pkg_info->{hooks}}, $hook if defined $hook;
return $hook;
sub hook_timer {
return undef unless @_ >= 2;
my ($timeout, $callback, $data) = @_;
my $package = Xchat::Embed::find_pkg();
$callback = Xchat::Embed::fix_callback( $package, $callback );
ref( $data ) eq 'HASH' && exists( $data->{data} )
&& defined( $data->{data} )
$data = $data->{data};
my $pkg_info = Xchat::Embed::pkg_info( $package );
my $hook = Xchat::Internal::hook_timer( $timeout, $callback, $data, $package );
push @{$pkg_info->{hooks}}, $hook if defined $hook;
return $hook;
sub hook_fd {
return undef unless @_ >= 2;
my ($fd, $callback, $options) = @_;
return undef unless defined $fd && defined $callback;
my $fileno = fileno $fd;
return undef unless defined $fileno; # no underlying fd for this handle
my ($package) = Xchat::Embed::find_pkg();
$callback = Xchat::Embed::fix_callback( $package, $callback );
my ($flags, $data) = (Xchat::FD_READ, undef);
if( ref( $options ) eq 'HASH' ) {
if( exists( $options->{flags} ) && defined( $options->{flags} ) ) {
$flags = $options->{flags};
if ( exists( $options->{data} ) && defined( $options->{data} ) ) {
$data = $options->{data};
my $cb = sub {
my $userdata = shift;
return $userdata->{CB}->(
$userdata->{FD}, $userdata->{FLAGS}, $userdata->{DATA},
my $pkg_info = Xchat::Embed::pkg_info( $package );
my $hook = Xchat::Internal::hook_fd(
$fileno, $cb, $flags, {
DATA => $data, FD => $fd, CB => $callback, FLAGS => $flags,
push @{$pkg_info->{hooks}}, $hook if defined $hook;
return $hook;
sub unhook {
my $hook = shift @_;
my $package = shift @_;
($package) = caller unless $package;
my $pkg_info = Xchat::Embed::pkg_info( $package );
if( defined( $hook )
&& $hook =~ /^\d+$/
&& grep { $_ == $hook } @{$pkg_info->{hooks}} ) {
$pkg_info->{hooks} = [grep { $_ != $hook } @{$pkg_info->{hooks}}];
return Xchat::Internal::unhook( $hook );
return ();
sub _do_for_each {
my ($cb, $channels, $servers) = @_;
if( @_ == 3 && !($channels || $servers) ) { 
$channels = [ undef ];
$servers = [ undef ];
} elsif( !($channels || $servers) ) {
$cb->();
return 1;
$channels = [ $channels ] unless ref( $channels ) eq 'ARRAY';
if( $servers ) {
$servers = [ $servers ] unless ref( $servers ) eq 'ARRAY';
} else {
$servers = [ undef ];
my $num_done;
my $old_ctx = Xchat::get_context();
for my $server ( @$servers ) {
for my $channel ( @$channels ) {
if( Xchat::set_context( $channel, $server ) ) {
$cb->();
$num_done++
Xchat::set_context( $old_ctx );
return $num_done;
sub print {
my $text = shift @_;
return "" unless defined $text;
if( ref( $text ) eq 'ARRAY' ) {
if( $, ) {
$text = join $, , @$text;
} else {
$text = join "", @$text;
return _do_for_each(
sub { Xchat::Internal::print( $text ); },
sub printf {
my $format = shift;
Xchat::print( sprintf( $format, @_ ) );
sub prnt {
goto &Xchat::print;
sub prntf {
goto &Xchat::printf;
sub command {
my $command = shift;
return "" unless defined $command;
my @commands;
if( ref( $command ) eq 'ARRAY' ) {
@commands = @$command;
} else {
@commands = ($command);
return _do_for_each(
sub { Xchat::Internal::command( $_ ) foreach @commands },
sub commandf {
my $format = shift;
Xchat::command( sprintf( $format, @_ ) );
sub set_context {
my $context;
if( @_ == 2 ) {
my ($channel, $server) = @_;
$context = Xchat::find_context( $channel, $server );
} elsif( @_ == 1 ) {
if( defined $_[0] && $_[0] =~ /^\d+$/ ) {
$context = $_[0];
} else {
$context = Xchat::find_context( $_[0] );
} elsif( @_ == 0 ) {
$context = Xchat::find_context();
return $context ? Xchat::Internal::set_context( $context ) : 0;
sub get_info {
my $id = shift;
my $info;
if( defined( $id ) ) {
if( grep { $id eq $_ } qw(state_cursor id) ) {
$info = Xchat::get_prefs( $id );
} else {
$info = Xchat::Internal::get_info( $id );
return $info;
sub user_info {
my $nick = Xchat::strip_code(shift @_ || Xchat::get_info( "nick" ));
my $user;
for (Xchat::get_list( "users" ) ) {
if ( Xchat::nickcmp( $_->{nick}, $nick ) == 0 ) {
$user = $_;
last;
return $user;
sub context_info {
my $ctx = shift @_ || Xchat::get_context;
my $old_ctx = Xchat::get_context;
my @fields = (
qw(away channel charset host id inputbox libdirfs modes network),
qw(nick nickserv server topic version win_ptr win_status),
qw(xchatdir xchatdirfs state_cursor),
if( Xchat::set_context( $ctx ) ) {
my %info;
for my $field ( @fields ) {
$info{$field} = Xchat::get_info( $field );
my $ctx_info = Xchat::Internal::context_info;
@info{keys %$ctx_info} = values %$ctx_info;
Xchat::set_context( $old_ctx );
return %info if wantarray;
return \%info;
} else {
return undef;
sub get_list {
unless( grep { $_[0] eq $_ } qw(channels dcc ignore notify users networks) ) {
Carp::carp( "'$_[0]' does not appear to be a valid list name" );
if( $_[0] eq 'networks' ) {
return Xchat::List::Network->get();
} else {
return Xchat::Internal::get_list( $_[0] );
sub strip_code {
my $pattern = qr<
\cB| #Bold
\cC\d{0,2}(?:,\d{1,2})?| #Color
\e\[(?:\d{1,2}(?:;\d{1,2})*)?m| # ANSI color code
\cG| #Beep
\cO| #Reset
\cV| #Reverse
\c_  #Underline
if( defined wantarray ) {
my $msg = shift;
$msg =~ s/$pattern//g;
return $msg;
} else {
$_[0] =~ s/$pattern//g if defined $_[0];
} # end of Xchat package
package Xchat::Embed;
use strict;
use warnings;
our %scripts;
sub load {
my $file = expand_homedir( shift @_ );
my $package = file2pkg( $file );
if( exists $scripts{$package} ) {
my $pkg_info = pkg_info( $package );
my $filename = File::Basename::basename( $pkg_info->{filename} );
Xchat::printf(
qq{'%s' already loaded from '%s'.\n},
$filename, $pkg_info->{filename}
Xchat::print(
'If this is a different script then it rename and try '.
'loading it again.'
return 2;
if( open my $source_handle, $file ) {
my $source = do {local $/; <$source_handle>};
close $source_handle;
$source =~ s/^__END__.*//ms;
my @replacements = $source =~
m/^\s*package ((?:[^\W:]+(?:::)?)+)\s*?;/mg
if ( @replacements > 1 ) {
Xchat::print(
"Too many package defintions, only 1 is allowed\n"
return 1;
my $original_package = shift @replacements;
$source =~ s/^(package $original_package\s*;)/#$1/m;
$source =~ s/${original_package}:://g;
$scripts{$package}{filename} = $file;
$scripts{$package}{loaded_at} = Time::HiRes::time();
my $full_path = File::Spec->rel2abs( $file );
$source =~ s/^/#line 1 "$full_path"\n\x7Bpackage $package;/;
if( $source =~ /^#.*\Z/m ) {
$source =~ s/^(?=#.*\Z)/\x7D/m;
} else {
$source =~ s/\Z/\x7D/;
_do_eval( $source );
unless( exists $scripts{$package}{gui_entry} ) {
$scripts{$package}{gui_entry} =
Xchat::Internal::register(
"", "unknown", "", $file
if( $@ ) {
$@ =~ s/\(eval \d+\)/$file/g;
Xchat::print( "Error loading '$file':\n$@\n" );
unload( $scripts{$package}{filename} );
return 1;
} else {
Xchat::print( "Error opening '$file': $!\n" );
return 2;
return 0;
sub _do_eval {
no strict;
no warnings;
eval $_[0];
sub unload {
my $file = shift @_;
my $package = file2pkg( $file );
my $pkg_info = pkg_info( $package );
if( $pkg_info ) {	
if( exists $pkg_info->{shutdown} ) {
eval {
if( ref $pkg_info->{shutdown} eq 'CODE' ) {
$pkg_info->{shutdown}->();
} elsif ( $pkg_info->{shutdown} ) {
no strict 'refs';
&{$pkg_info->{shutdown}};
if( exists $pkg_info->{hooks} ) {
for my $hook ( @{$pkg_info->{hooks}} ) {
Xchat::unhook( $hook, $package );
if( exists $pkg_info->{gui_entry} ) {
plugingui_remove( $pkg_info->{gui_entry} );
Symbol::delete_package( $package );
delete $scripts{$package};
return Xchat::EAT_ALL;
} else {
Xchat::print( qq{"$file" is not loaded.\n} );
return Xchat::EAT_NONE;
sub unload_all {
for my $package ( keys %scripts ) {
unload( $scripts{$package}->{filename} );
return Xchat::EAT_ALL;
sub reload {
my $file = shift @_;
my $package = file2pkg( $file );
my $pkg_info = pkg_info( $package );
my $fullpath = $file;
if( $pkg_info ) {
$fullpath = $pkg_info->{filename};
unload( $file );
load( $fullpath );
return Xchat::EAT_ALL;
sub reload_all {
my @dirs = Xchat::get_info( "xchatdirfs" ) || Xchat::get_info( "xchatdir" );
push @dirs, File::Spec->catdir( $dirs[0], "plugins" );
for my $dir ( @dirs ) {
my $auto_load_glob = File::Spec->catfile( $dir, "*.pl" );
my @scripts = map { $_->{filename} }
sort { $a->{loaded_at} <=> $b->{loaded_at} } values %scripts;
push @scripts, File::Glob::bsd_glob( $auto_load_glob );
my %seen;
@scripts = grep { !$seen{ $_ }++ } @scripts;
unload_all();
for my $script ( @scripts ) {
if( !pkg_info( file2pkg( $script ) ) ) {
load( $script );
sub expand_homedir {
my $file = shift @_;
if ( $^O eq "MSWin32" ) {
$file =~ s/^~/$ENV{USERPROFILE}/;
} else {
$file =~ s{^~}{
(getpwuid($>))[7] ||  $ENV{HOME} || $ENV{LOGDIR}
}ex;
return $file;
sub file2pkg {
my $string = File::Basename::basename( shift @_ );
$string =~ s/\.pl$//i;
$string =~ s|([^A-Za-z0-9/])|'_'.unpack("H*",$1)|eg;
return "Xchat::Script::" . $string;
sub pkg_info {
my $package = shift @_;
return $scripts{$package};
sub find_external_pkg {
my $level = 1;
while( my @frame = caller( $level ) ) {
return @frame if $frame[0] !~ /^Xchat/;
$level++;
sub find_pkg {
my $level = 1;
while( my ($package, $file, $line) = caller( $level ) ) {
return $package if $package =~ /^Xchat::Script::/;
$level++;
my @frame = find_external_pkg();
my $location;
if( $frame[0] or $frame[1] ) {
$location = $frame[1] ? $frame[1] : "package $frame[0]";
$location .= " line $frame[2]";
} else {
$location = "unknown location";
die "Unable to determine which script this hook belongs to. at $location\n";
sub fix_callback {
my ($package, $callback) = @_;
unless( ref $callback ) {
$callback =~ s/^.*:://;
$callback = qq[${package}::$callback];
no strict 'subs';
$callback = \&{$callback};
return $callback;
} # end of Xchat::Embed package
package Xchat::List::Network;
use strict;
use warnings;
use Storable qw(dclone);
my $last_modified;
my @servers;
sub get {
my $server_file = Xchat::get_info( "xchatdirfs" ) . "/servlist_.conf";
if( -f $server_file && 
(!defined $last_modified || $last_modified != -M $server_file ) ) {
$last_modified = -M _;
if( open my $fh, "<", $server_file ) {
local $/ = "\n\n";
while( my $record = <$fh> ) {
chomp $record;
next if $record =~ /^v=/; # skip the version line
push @servers, Xchat::List::Network::Entry::parse( $record );
} else {
warn "Unable to open '$server_file': $!";
my $clone = dclone( \@servers );
return @$clone;
} # end of Xchat::List::Network
package Xchat::List::Network::Entry;
use strict;
use warnings;
my %key_for = (
I => "irc_nick1",
i => "irc_nick2",
U => "irc_user_name",
R => "irc_real_name",
P => "server_password",
B => "nickserv_password",
N => "network",
D => "selected",
E => "encoding",
my $letter_key_re = join "|", keys %key_for;
sub parse {
my $data  = shift;
my $entry = {
irc_nick1       => undef,
irc_nick2       => undef,
irc_user_name   => undef,
irc_real_name   => undef,
server_password => undef,
autojoins         => Xchat::List::Network::AutoJoin->new( '' ),
connect_commands   => [],
flags             => {},
selected          => undef,
encoding          => undef,
servers           => [],
nickserv_password => undef,
network           => undef,
my @fields = split /\n/, $data;
chomp @fields;
for my $field ( @fields ) {
SWITCH: for ( $field ) {
/^($letter_key_re)=(.*)/ && do {
$entry->{ $key_for{ $1 } } = $2;
last SWITCH;
/^J.(.*)/ && do {
$entry->{ autojoins } =
Xchat::List::Network::AutoJoin->new( $1 );
/^F.(.*)/ && do {
$entry->{ flags } = parse_flags( $1 );
/^S.(.+)/ && do {
push @{$entry->{servers}}, parse_server( $1 );
/^C.(.+)/ && do {
push @{$entry->{connect_commands}}, $1;
return $entry;
sub parse_flags {
my $value = shift || 0;
my %flags;
$flags{ "cycle" }         = $value & 1  ? 1 : 0;
$flags{ "use_global" }    = $value & 2  ? 1 : 0;
$flags{ "use_ssl" }       = $value & 4  ? 1 : 0;
$flags{ "autoconnect" }   = $value & 8  ? 1 : 0;
$flags{ "use_proxy" }     = $value & 16 ? 1 : 0;
$flags{ "allow_invalid" } = $value & 32 ? 1 : 0;
return \%flags;
sub parse_server {
my $data = shift;
if( $data ) {
my ($host, $port) = split /\//, $data;
unless( $port ) {
my @parts = split /:/, $host;
if( @parts == 2 ) {
$port = $parts[1];
$port ||= 6667;
return { host => $host, port => $port };
} # end of Xchat::List::Network::Entry
package Xchat::List::Network::AutoJoin;
use strict;
use warnings;
use overload
'""'   => 'as_string',
'0+'   => 'as_bool';
sub new {
my $class = shift;
my $line = shift;
my @autojoins;
if ( $line ) {
my ( $channels, $keys ) = split / /, $line, 2;
my @channels = split /,/, $channels;
my @keys     = split /,/, ($keys || '');
for my $channel ( @channels ) {
my $key = shift @keys;
$key = '' unless defined $key;
push @autojoins, {
channel => $channel,
key     => $key,
return bless \@autojoins, $class;
sub channels {
my $self = shift;
if( wantarray ) {
return map { $_->{channel} } @$self;
} else {
return scalar @$self;
sub keys {
my $self = shift;
return map { $_->{key} } @$self  ;
sub pairs {
my $self = shift;
my @channels = $self->channels;
my @keys = $self->keys;
my @pairs = map { $_ => shift @keys } @channels;
sub as_hash {
my $self = shift;
return +{ $self->pairs };
sub as_string {
my $self = shift;
return join " ",
join( ",", $self->channels ),
join( ",", $self->keys );
sub as_array {
my $self = shift;
return [ map { \%$_ } @$self ];
sub as_bool {
my $self = shift;
return $self->channels ? 1 : "";
} # end of Xchat::Server::AutoJoin
;*3$"
perl.so.debug
7zXZ
dpl&
+[@O
"}WA
A=u=
A3L}
63@|{h1
<[0(L
][?	>
K&e+
'*e=
j 7s'
|{^u
=`1 
My7q
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.init
.plt
.plt.got
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.bss
.gnu_debuglink
.gnu_debugdata
