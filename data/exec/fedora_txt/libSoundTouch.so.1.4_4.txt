tz)8
45P?
~C4Q
	yYQ6>t
b9n?
~)8*aw
s5bF
A1-R
CKQa
XvBt
{L(-
?m`r
8TudF
__gmon_start__
_init
_fini
__cxa_finalize
_Jv_RegisterClasses
_ZN10soundtouch8AAFilterD2Ev
_ZN10soundtouch8AAFilterD1Ev
_ZNK10soundtouch8AAFilter9getLengthEv
_ZNK10soundtouch9FIRFilter9getLengthEv
_ZNK10soundtouch8AAFilter8evaluateEPfPKfjj
_ZNK10soundtouch9FIRFilter8evaluateEPfPKfjj
_ZN10soundtouch8AAFilter15calculateCoeffsEv
_Znam
_ZdaPv
__assert_fail
_ZN10soundtouch8AAFilter9setLengthEj
_ZN10soundtouch8AAFilter13setCutoffFreqEd
_ZN10soundtouch8AAFilterC1Ej
_ZN10soundtouch9FIRFilter11newInstanceEv
_ZN10soundtouch8AAFilterC2Ej
__gxx_personality_v0
_ZN10soundtouch9FIRFilterC2Ev
_ZTVN10soundtouch9FIRFilterE
_ZN10soundtouch9FIRFilterC1Ev
_Unwind_Resume
_Z19detectCPUextensionsv
_Znwm
_ZdlPv
_ZNK10soundtouch9FIRFilter18evaluateFilterMonoEPfPKfj
_ZNK10soundtouch9FIRFilter20evaluateFilterStereoEPfPKfj
_ZN10soundtouch9FIRFilterD0Ev
_ZN10soundtouch9FIRFilterD1Ev
_ZN10soundtouch9FIRFilterD2Ev
_ZN10soundtouch9FIRFilter15setCoefficientsEPKfjj
memcpy
_ZNSsC1EPKcRKSaIcE
__cxa_allocate_exception
_ZNSt13runtime_errorC1ERKSs
_ZNSs4_Rep20_S_empty_rep_storageE
_ZNSt13runtime_errorD1Ev
_ZTISt13runtime_error
__cxa_throw
_ZNSs4_Rep10_M_destroyERKSaIcE
__cxa_free_exception
_ZNSsD1Ev
_ZSt9terminatev
_ZN10soundtouch9FIRFilternwEm
_ZTIN10soundtouch9FIRFilterE
_ZTSN10soundtouch9FIRFilterE
_ZTVN10__cxxabiv117__class_type_infoE
pthread_cancel
_ZNK10soundtouch16FIFOSampleBuffer8ptrBeginEv
_ZNK10soundtouch16FIFOSampleBuffer11getCapacityEv
_ZNK10soundtouch16FIFOSampleBuffer10numSamplesEv
_ZN10soundtouch16FIFOSampleBuffer14receiveSamplesEj
_ZNK10soundtouch16FIFOSampleBuffer7isEmptyEv
_ZN10soundtouch16FIFOSampleBuffer5clearEv
_ZN10soundtouch16FIFOSampleBuffer14receiveSamplesEPfj
_ZN10soundtouch16FIFOSampleBuffer11setChannelsEi
_ZN10soundtouch16FIFOSampleBufferC1Ei
_ZTVN10soundtouch16FIFOSampleBufferE
_ZN10soundtouch16FIFOSampleBufferC2Ei
_ZN10soundtouch16FIFOSampleBufferD1Ev
_ZN10soundtouch16FIFOSampleBufferD2Ev
_ZN10soundtouch16FIFOSampleBuffer6rewindEv
memmove
_ZN10soundtouch16FIFOSampleBuffer14ensureCapacityEj
_ZN10soundtouch16FIFOSampleBuffer6ptrEndEj
_ZN10soundtouch16FIFOSampleBuffer10putSamplesEPKfj
_ZN10soundtouch16FIFOSampleBuffer10putSamplesEj
_ZTIN10soundtouch16FIFOSampleBufferE
_ZTSN10soundtouch16FIFOSampleBufferE
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTIN10soundtouch14FIFOSamplePipeE
_ZTSN10soundtouch14FIFOSamplePipeE
_ZTVN10soundtouch14FIFOSamplePipeE
__cxa_pure_virtual
_ZN10soundtouch13FIFOProcessorD1Ev
_ZTVN10soundtouch13FIFOProcessorE
_ZNK10soundtouch13FIFOProcessor8ptrBeginEv
_ZN10soundtouch13FIFOProcessor14receiveSamplesEPfj
_ZN10soundtouch13FIFOProcessor14receiveSamplesEj
_ZNK10soundtouch13FIFOProcessor10numSamplesEv
_ZNK10soundtouch13FIFOProcessor7isEmptyEv
_ZN10soundtouch14RateTransposer14enableAAFilterEi
_ZNK10soundtouch14RateTransposer17isAAFilterEnabledEv
_ZNK10soundtouch14RateTransposer11getAAFilterEv
_ZN21RateTransposerInteger14resetRegistersEv
_ZN21RateTransposerInteger13transposeMonoEPfPKfj
_ZN21RateTransposerInteger15transposeStereoEPfPKfj
_ZN19RateTransposerFloat14resetRegistersEv
_ZN19RateTransposerFloat13transposeMonoEPfPKfj
_ZN19RateTransposerFloat15transposeStereoEPfPKfj
_ZN10soundtouch13FIFOProcessorD0Ev
_ZN10soundtouch14RateTransposer5clearEv
_ZN10soundtouch14RateTransposer11setChannelsEi
_ZN10soundtouch14RateTransposer7setRateEf
_ZN21RateTransposerInteger7setRateEf
_ZN10soundtouch14RateTransposerD0Ev
_ZTVN10soundtouch14RateTransposerE
_ZN10soundtouch14RateTransposerD1Ev
_ZN10soundtouch14RateTransposerD2Ev
_ZN19RateTransposerFloatD0Ev
_ZTV19RateTransposerFloat
_ZN19RateTransposerFloatD1Ev
_ZN19RateTransposerFloatD2Ev
_ZN21RateTransposerIntegerD0Ev
_ZTV21RateTransposerInteger
_ZN21RateTransposerIntegerD1Ev
_ZN21RateTransposerIntegerD2Ev
_ZN10soundtouch14RateTransposerC1Ev
_ZN10soundtouch14RateTransposerC2Ev
_ZN19RateTransposerFloatC1Ev
_ZN10soundtouch14RateTransposer11newInstanceEv
_ZN19RateTransposerFloatC2Ev
_ZN21RateTransposerIntegerC1Ev
_ZN21RateTransposerIntegerC2Ev
_ZNK10soundtouch14RateTransposer7isEmptyEv
_ZN10soundtouch14RateTransposernwEm
_ZN10soundtouch14RateTransposer8upsampleEPKfj
_ZN10soundtouch14RateTransposer10downsampleEPKfj
_ZN10soundtouch14RateTransposer14processSamplesEPKfj
_ZN10soundtouch14RateTransposer10putSamplesEPKfj
_ZTI19RateTransposerFloat
_ZTI21RateTransposerInteger
_ZTIN10soundtouch14RateTransposerE
_ZTS19RateTransposerFloat
_ZTS21RateTransposerInteger
_ZTSN10soundtouch14RateTransposerE
_ZTIN10soundtouch13FIFOProcessorE
_ZTSN10soundtouch13FIFOProcessorE
_ZN10soundtouch10SoundTouchD2Ev
_ZTVN10soundtouch10SoundTouchE
_ZN10soundtouch10SoundTouchD1Ev
_ZN10soundtouch10SoundTouch16getVersionStringEv
_ZN10soundtouch10SoundTouch12getVersionIdEv
_ZN10soundtouch10SoundTouch5clearEv
_ZNK10soundtouch10SoundTouch21numUnprocessedSamplesEv
_ZNK10soundtouch10SoundTouch10getSettingEi
_ZNK10soundtouch9TDStretch13getParametersEPiS1_S1_S1_
_ZNK10soundtouch9TDStretch18isQuickSeekEnabledEv
_ZN10soundtouch10SoundTouch10setSettingEii
_ZN10soundtouch9TDStretch13setParametersEiiii
_ZN10soundtouch9TDStretch15enableQuickSeekEi
_ZN10soundtouch10SoundTouch13setSampleRateEj
_ZN10soundtouch13FIFOProcessor10setOutPipeEPNS_14FIFOSamplePipeE
_ZN10soundtouch10SoundTouchD0Ev
soundtouch_ac_test
__printf_chk
_ZN10soundtouch10SoundTouch5flushEv
_ZN10soundtouch9TDStretch10clearInputEv
_ZN10soundtouch10SoundTouch11setChannelsEj
_ZN10soundtouch9TDStretch11setChannelsEi
_ZN10soundtouch10SoundTouch25calcEffectiveRateAndTempoEv
_ZN10soundtouch9TDStretch8setTempoEf
_ZN10soundtouch10SoundTouch8setPitchEf
_ZN10soundtouch10SoundTouch14setTempoChangeEf
_ZN10soundtouch10SoundTouch8setTempoEf
_ZN10soundtouch10SoundTouch13setRateChangeEf
_ZN10soundtouch10SoundTouch7setRateEf
_ZN10soundtouch10SoundTouch15setPitchOctavesEf
_ZN10soundtouch10SoundTouch17setPitchSemiTonesEf
_ZN10soundtouch10SoundTouch17setPitchSemiTonesEi
_ZN10soundtouch10SoundTouchC1Ev
_ZN10soundtouch9TDStretch11newInstanceEv
_ZN10soundtouch10SoundTouchC2Ev
_ZN10soundtouch10SoundTouch10putSamplesEPKfj
_ZTIN10soundtouch10SoundTouchE
_ZTSN10soundtouch10SoundTouchE
_ZNK10soundtouch9TDStretch11overlapMonoEPfPKf
_ZN10soundtouch9TDStretch23seekBestOverlapPositionEPKf
_ZN10soundtouch9TDStretch19clearCrossCorrStateEv
_ZN10soundtouch9TDStretch17calcSeqParametersEv
_ZN10soundtouch9TDStretch26precalcCorrReferenceStereoEv
_ZN10soundtouch9TDStretch34seekBestOverlapPositionStereoQuickEPKf
_ZN10soundtouch9TDStretch29seekBestOverlapPositionStereoEPKf
_ZN10soundtouch9TDStretch24precalcCorrReferenceMonoEv
_ZN10soundtouch9TDStretch32seekBestOverlapPositionMonoQuickEPKf
_ZN10soundtouch9TDStretch27seekBestOverlapPositionMonoEPKf
_ZNK10soundtouch9TDStretch13overlapStereoEPfPKf
_ZNK10soundtouch9TDStretch17calcCrossCorrMonoEPKfS2_
_ZNK10soundtouch9TDStretch19calcCrossCorrStereoEPKfS2_
_ZN10soundtouch9TDStretch14processSamplesEv
_ZN10soundtouch9TDStretch10putSamplesEPKfj
_ZN10soundtouch9TDStretch14clearMidBufferEv
memset
_ZN10soundtouch9TDStretch22acceptNewOverlapLengthEi
_ZN10soundtouch9TDStretch22calculateOverlapLengthEi
_ZN10soundtouch9TDStretch5clearEv
_ZN10soundtouch9TDStretchD0Ev
_ZTVN10soundtouch9TDStretchE
_ZN10soundtouch9TDStretchD1Ev
_ZN10soundtouch9TDStretchD2Ev
_ZN10soundtouch9TDStretchC1Ev
_ZN10soundtouch9TDStretchC2Ev
_ZN10soundtouch9TDStretchnwEm
_ZTIN10soundtouch9TDStretchE
_ZTSN10soundtouch9TDStretchE
_Z17disableExtensionsj
_ZN10soundtouch9BPMDetect6getBpmEv
_ZN10soundtouch10PeakFinderC1Ev
_ZN10soundtouch10PeakFinder10detectPeakEPKfii
_ZN10soundtouch9BPMDetect11updateXCorrEi
_ZN10soundtouch9BPMDetect8decimateEPfPKfi
_ZN10soundtouch9BPMDetect4initEii
_ZN10soundtouch9BPMDetect12calcEnvelopeEPfi
sqrtf
_ZN10soundtouch9BPMDetect12inputSamplesEPfi
_ZN10soundtouch9BPMDetectD0Ev
_ZTVN10soundtouch9BPMDetectE
_ZN10soundtouch9BPMDetectD1Ev
_ZN10soundtouch9BPMDetectD2Ev
_ZN10soundtouch9BPMDetectC1Eii
_ZN10soundtouch9BPMDetectC2Eii
_ZTIN10soundtouch9BPMDetectE
_ZTSN10soundtouch9BPMDetectE
_ZN10soundtouch10PeakFinderC2Ev
_ZNK10soundtouch10PeakFinder10findGroundEPKfii
_ZNK10soundtouch10PeakFinder14calcMassCenterEPKfii
_ZNK10soundtouch10PeakFinder17findCrossingLevelEPKffii
_ZN10soundtouch10PeakFinder13getPeakCenterEPKfi
libstdc++.so.6
libm.so.6
libc.so.6
libgcc_s.so.1
_edata
__bss_start
_end
libSoundTouch.so.1
GCC_3.0
CXXABI_1.3
GLIBCXX_3.4
GLIBC_2.3.4
GLIBC_2.2.5
ATSubH
AWAVAUATI
T$8I
D$Pf
\L$P
D$@A
XD$8I
^d$8
[]A\A]A^A_
h[]A\A]A^A_
fffff.
fffff.
fff.
fff.
fff.
AWAVAUATUSH
[]A\A]A^A_
AVAUATUSH
[]A\A]A^
fff.
fffff.
fffff.
d$ H
fff.
fff.
l$ H
fffff.
fffff.
fffff.
fffff.
l$ L
d$(L
l$0H
5Ux 
=Rx 
l$ H
ATUS
[]A\A]
~J9w
fff.
fff.
fff.
fff.
fff.
fff.
fff.
fff.
l$ L
t$(L
|$0H
l$ L
t$(L
|$0H
fff.
fffff.
fff.
fff.
fff.
fffff.
5Rh 
=Zh 
fffff.
l$ L
t$(L
|$0H
fff.
l$ L
d$(L
t$8L
|$@H
fff.
d$ H
d$ H
d$ H
fff.
fffff.
d$ H
fffff.
AUE1
ATUSH
P A9
[]A\A]
d$ H
\$(H
l$0L
d$8L
l$@L
t$HL
|$PH
fffff.
wqzoH
\$(H
l$0L
d$8L
l$@H
H;=/X 
=_W 
fff.
fffff.
fffff.
zJsH
fffff.
fffff.
AWE1
AUE1
ATUSH
9k<~`HcD$
;k<}0H
[]A\A]A^A_
AUE1
[]A\A]
fff.
AWE1
AUE1
ATUSH
9k<~]HcD$
;k<}-H
[]A\A]A^A_
AUE1
[]A\A]
fff.
AWAVAUATUH
HcC8H
{ D+c8D
XCPH
[]A\A]A^A_
~29w
HcW8H
fffff.
d$ H
fff.
d$ H
ffff.
{8;{,
9{,f
C8~]Hc
HcS,H
{@[H
ATUSH
8[]A\A]
ATUSH
P ;C,~%H
+k,H
[]A\
fffff.
fffff.
l$ H
l$ H
fffff.
fffff.
rIHc
s&z$f
l$ L
d$(L
l$0H
d$(L
l$0H
fff.
AUHc
[]A\A]
AAFilter.cpp
length >= 2
length % 4 == 0
cutoffFreq >= 0
cutoffFreq <= 0.5
sum > 0
work[length/2] > 0
work[length/2 + 1] > -1e-6
work[length/2 - 1] > -1e-6
temp >= -32768 && temp <= 32767
void soundtouch::AAFilter::calculateCoeffs()
!	@O
@FIRFilter.cpp
length > 0
lengthDiv8 * 8 == length
length != 0
src != __null
dest != __null
filterCoeffs != __null
newLength > 0
length == newLength
numChannels == 1 || numChannels == 2
FIR filter length not divisible by 8
Error in FIRFilter::new: Don't use 'new FIRFilter', use 'newInstance' member instead!
N10soundtouch9FIRFilterE
uint soundtouch::FIRFilter::evaluate(soundtouch::SAMPLETYPE*, const soundtouch::SAMPLETYPE*, uint, uint) const
virtual void soundtouch::FIRFilter::setCoefficients(const soundtouch::SAMPLETYPE*, uint, uint)
virtual uint soundtouch::FIRFilter::evaluateFilterMono(soundtouch::SAMPLETYPE*, const soundtouch::SAMPLETYPE*, uint) const
virtual uint soundtouch::FIRFilter::evaluateFilterStereo(soundtouch::SAMPLETYPE*, const soundtouch::SAMPLETYPE*, uint) const
@FIFOSampleBuffer.cpp
numChannels > 0
Couldn't allocate memory!
N10soundtouch16FIFOSampleBufferE
N10soundtouch14FIFOSamplePipeE
void soundtouch::FIFOSampleBuffer::setChannels(int)
soundtouch::FIFOSampleBuffer::FIFOSampleBuffer(int)
RateTransposer.cpp
nChannels > 0
tempBuffer.isEmpty()
pAAFilter
nChannels == 1 || nChannels == 2
Error in RateTransoser::new: don't use "new TDStretch" directly, use "newInstance" to create a new instance instead!
19RateTransposerFloat
21RateTransposerInteger
N10soundtouch14RateTransposerE
N10soundtouch13FIFOProcessorE
void soundtouch::RateTransposer::setChannels(int)
void soundtouch::RateTransposer::processSamples(const soundtouch::SAMPLETYPE*, uint)
void soundtouch::RateTransposer::downsample(const soundtouch::SAMPLETYPE*, uint)
virtual void soundtouch::SoundTouch::putSamples(const soundtouch::SAMPLETYPE*, uint)
void soundtouch::SoundTouch::calcEffectiveRateAndTempo()
void soundtouch::FIFOProcessor::setOutPipe(soundtouch::FIFOSamplePipe*)
../../include/FIFOSamplePipe.h
SoundTouch : Sample rate not defined
SoundTouch : Number of channels not defined
output == __null
pOutput != __null
1.4.0
SoundTouch Version: %s
Illegal number of channels
SoundTouch.cpp
output == pTDStretch
output == pRateTransposer
rate > 1.0f
N10soundtouch10SoundTouchE
@ATDStretch.cpp
newOverlapLength >= 0
overlapInMsec >= 0
offset + seekWindowLength <= (int)inputBuffer.numSamples()
Error in TDStretch::new: Don't use 'new TDStretch' directly, use 'newInstance' member instead!
N10soundtouch9TDStretchE
void soundtouch::TDStretch::calculateOverlapLength(int)
void soundtouch::TDStretch::acceptNewOverlapLength(int)
void soundtouch::TDStretch::processSamples()
void soundtouch::TDStretch::setChannels(int)
UUUUUU<@
BPMDetect.cpp
decimateBy != 0
decimateBy > 0
2048 < decimateBy * 256
windowLen > windowStart
buffer->numSamples() >= (uint)(process_samples + windowLen)
N10soundtouch9BPMDetectE
float soundtouch::BPMDetect::getBpm()
void soundtouch::BPMDetect::init(int, int)
void soundtouch::BPMDetect::updateXCorr(int)
int soundtouch::BPMDetect::decimate(soundtouch::SAMPLETYPE*, const soundtouch::SAMPLETYPE*, int)
333?
>PeakFinder.cpp
peaklevel >= level
int soundtouch::PeakFinder::findCrossingLevel(const float*, float, int, int) const
zPLR
libSoundTouch.so.1.4.0.debug
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.gcc_except_table
.ctors
.dtors
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.data
.bss
.gnu_debuglink
