Ogtsy*
I;ZC
t6H#Z
__gmon_start__
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
dbus_message_iter_get_basic
pa_hashmap_get
pa_dbusiface_card_profile_get_profile
pa_card_set_profile
pa_dbus_send_empty_reply
pa_dbus_send_error
pa_log_level_meta
abort
__stack_chk_fail
pa_dbusiface_card_profile_get_path
pa_dbus_send_basic_variant_reply
pa_dbusiface_core_get_module_path
dbus_message_get_args
pa_dbus_send_basic_value_reply
pa_proplist_equal
pa_proplist_update
dbus_message_new_signal
dbus_message_iter_init_append
pa_dbus_append_proplist
pa_dbus_protocol_send_signal
dbus_message_unref
dbus_message_append_args
pa_dbusiface_card_profile_new
pa_dbusiface_card_profile_get_name
pa_hashmap_put
pa_dbus_send_proplist_variant_reply
pa_idxset_size
pa_xmalloc
pa_idxset_first
pa_dbusiface_core_get_sink_path
pa_idxset_next
__assert_fail
pa_dbus_send_basic_array_variant_reply
pa_xfree
pa_hashmap_size
pa_hashmap_iterate
pa_dbusiface_core_get_source_path
dbus_message_new_method_return
dbus_message_iter_open_container
pa_dbus_append_basic_variant_dict_entry
pa_dbus_append_basic_array_variant_dict_entry
pa_dbus_append_proplist_variant_dict_entry
dbus_message_iter_close_container
dbus_connection_send
pa_dbusiface_card_new
pa_xmalloc0
pa_sprintf_malloc
pa_dbusiface_card_profile_free
pa_idxset_string_compare_func
pa_idxset_string_hash_func
pa_hashmap_new_full
pa_proplist_copy
pa_dbus_protocol_get
pa_dbus_protocol_add_interface
pa_hook_connect
pa_dbusiface_card_free
pa_dbus_protocol_remove_interface
pa_hook_slot_free
pa_hashmap_free
pa_proplist_free
pa_dbus_protocol_unref
pa_dbusiface_card_get_path
pa_dbus_protocol_get_client
pa_proplist_unset
dbus_free_string_array
pa_hook_fire
pa_subscription_post
dbus_message_iter_init
pa_dbus_get_proplist_arg
pa_client_update_proplist
dbus_connection_ref
pa_client_kill
dbus_connection_unref
pa_dbusiface_core_get_playback_stream_path
pa_dbusiface_core_get_record_stream_path
pa_dbusiface_client_new
pa_dbusiface_client_free
pa_dbusiface_client_get_path
pa_dbus_protocol_get_extensions
pa_dbusiface_device_get_path
pa_dbusiface_device_get_source
pa_core_set_configured_default_source
pa_dbusiface_device_get_sink
pa_core_set_configured_default_sink
pa_sample_rate_valid
pa_sample_format_valid
pa_channel_map_init
dbus_message_iter_recurse
dbus_message_iter_get_fixed_array
pa_dbus_protocol_remove_signal_listener
pa_dbus_protocol_add_signal_listener
pa_core_exit
pa_strbuf_new
dbus_message_iter_next
dbus_message_iter_get_arg_type
pa_strbuf_isempty
pa_ascii_valid
__ctype_b_loc
pa_strbuf_free
pa_escape
pa_strbuf_printf
pa_strbuf_putc
pa_strbuf_to_string
pa_module_load
pa_dbusiface_module_get_path
pa_sample_spec_valid
pa_frame_aligned
pa_memblock_new
pa_memblock_acquire
memcpy
pa_memblock_release
pa_scache_add_item
pa_idxset_get_by_index
pa_dbusiface_sample_new
pa_dbusiface_sample_get_path
pa_memblock_unref
pa_sample_spec_snprint
pa_namereg_get
pa_dbusiface_device_new_source
pa_dbusiface_device_new_sink
pa_dbusiface_stream_new_record
pa_dbusiface_stream_get_path
pa_dbusiface_stream_new_playback
pa_hashmap_remove
pa_dbusiface_device_free
pa_dbusiface_stream_free
pa_dbusiface_sample_free
pa_dbusiface_module_free
pa_dbusiface_module_new
dbus_connection_get_socket
pa_socket_is_local
pa_get_host_name_malloc
pa_get_user_name_malloc
pa_object_type_id
pa_object_unref
pa_object_ref
pa_dbusiface_core_new
pa_idxset_trivial_hash_func
pa_idxset_trivial_compare_func
pa_hashmap_new
pa_dbus_protocol_hook_connect
pa_dbusiface_memstats_new
pa_dbusiface_core_free
pa_dbusiface_memstats_free
pa_dbusiface_core_get_card_path
pa_dbusiface_core_get_client_path
pa_dbusiface_core_get_sink
pa_dbusiface_core_get_source
pa_dbusiface_device_port_get_path
strcmp
pa_dbusiface_device_port_get_name
pa_sink_set_port
pa_source_set_port
pa_hashmap_isempty
pa_sink_get_latency
pa_source_get_latency
pa_source_get_requested_latency
pa_sink_get_requested_latency
pa_source_set_mute
pa_sink_set_mute
pa_cvolume_init
pa_source_set_volume
pa_sink_set_volume
pa_source_suspend
pa_sink_suspend
pa_source_get_mute
pa_sink_get_mute
pa_sink_get_volume
pa_cvolume_equal
pa_source_get_volume
pa_dbusiface_device_port_free
pa_dbusiface_device_port_new
pa_mempool_get_stat
pa_scache_total_size
pa_dbusiface_memstats_get_path
pa_modargs_new
pa_modargs_iterate
pa_modargs_get_value
dbus_message_iter_append_basic
pa_modargs_free
pa_module_unload_request
pa_bytes_to_usec
pa_scache_remove_item
pa_scache_play_item
pa_source_output_get_latency
pa_resample_method_to_string
pa_sink_input_get_latency
pa_sink_input_set_mute
pa_source_output_kill
pa_sink_input_kill
pa_source_output_move_to
pa_sink_input_move_to
pa_sink_input_set_volume
pa_sink_input_get_volume
pa_sink_input_is_volume_readable
dbus_timeout_get_data
dbus_timeout_get_enabled
pa_gettimeofday
dbus_timeout_get_interval
pa_timeval_add
dbus_watch_get_unix_fd
dbus_watch_get_enabled
dbus_watch_handle
dbus_message_is_signal
pa_dbus_wrap_connection_get
pa_client_new_data_init
pa_proplist_sets
pa_client_new
pa_client_new_data_done
pa_dbus_wrap_connection_new_from_existing
dbus_connection_add_filter
pa_idxset_put
pa_dbus_protocol_register_connection
dbus_connection_set_unix_user_function
dbus_connection_set_allow_anonymous
dbus_connection_close
pa_dbus_protocol_unregister_connection
pa_client_free
pa_dbus_wrap_connection_free
dbus_connection_get_is_connected
pa_idxset_remove_by_data
dbus_timeout_set_data
dbus_timeout_handle
dbus_watch_get_data
dbus_watch_get_flags
dbus_watch_set_data
dbus_server_disconnect
dbus_server_unref
dbus_error_init
dbus_server_listen
dbus_error_is_set
dbus_server_set_new_connection_function
dbus_server_set_watch_functions
dbus_server_set_timeout_functions
dbus_error_free
module_dbus_protocol_LTX_pa__get_description
module_dbus_protocol_LTX_pa__get_usage
module_dbus_protocol_LTX_pa__load_once
module_dbus_protocol_LTX_pa__get_author
module_dbus_protocol_LTX_pa__get_version
module_dbus_protocol_LTX_pa__done
pa_idxset_free
module_dbus_protocol_LTX_pa__init
pa_modargs_get_value_u32
pa_xstrdup
pa_idxset_new
pa_get_dbus_address_from_server_type
libpulsecore-12.2.so
libltdl.so.7
liborc-0.4.so.0
libtdb.so.1
libspeexdsp.so.1
libsoxr.so.0
libpulse.so.0
libpulsecommon-12.2.so
libX11-xcb.so.1
libX11.so.6
libxcb.so.1
libICE.so.6
libSM.so.6
libXtst.so.6
libsystemd.so.0
libsndfile.so.1
libasyncns.so.0
libdbus-1.so.3
libcap.so.2
libpthread.so.0
librt.so.1
libdl.so.2
libm.so.6
libc.so.6
_edata
__bss_start
_end
module-dbus-protocol.so
GLIBC_2.14
GLIBC_2.4
GLIBC_2.3
GLIBC_2.2.5
PULSE_0
LIBDBUS_1_3
/usr/lib64/pulseaudio
u+UH
ATUSH
[]A\
ATUSH
 []A\
ATUSH
D$H1
D$HdH3
P[]A\
AVAUATUSH
[]A\A]A^
ATUSH
[]A\
AVAUATUSH
[]A\A]A^
ATUSH
[]A\
AVAUATUSH
[]A\A]A^
AWAVAUATUSH
D$ H
l$0H
L$(H
[]A\A]A^A_
ATUSH
[]A\
AUATUSH
[]A\A]
AVAUATUSH
\$`L
[]A\A]A^
AVAUATUSH
[]A\A]A^
AVAUATUSH
 []A\A]A^
D9l$
AVAUATUSH
D$X1
D$XdH3
`[]A\A]A^
ATUSH
[]A\
ATUSH
D$H1
L$HdH3
P[]A\
AVAUATUSH
[]A\A]A^
ATUSH
[]A\
AVAUATUSH
[]A\A]A^
AWAVAUATUSH
D$(H
t$ H
t$$H
l$0H
D$ L
D$$H
[]A\A]A^A_
ATUSH
[]A\
ATUSH
[]A\
ATUSH
[]A\
ATUSH
[]A\
ATUSH
[]A\
AUATUSH
[]A\A]
AUATUSH
[]A\A]
AUATUSH
[]A\A]
AWAVAUATUSH
\$`L
|$`D
oD$`f
oL$pf
[]A\A]A^A_
ATUSH
[]A\
ATUSH
D$(P1
 []A\
AWAVAUATUSH
4$dH
\$PH
D$0H
D$8H
t$0E
[]A\A]A^A_
|$8H
T$0H
T$(I
|$@H
D$@I
AWAVAUATUSH
T$(H
T$,H
T$0H
|$$D
D$(H
T$@A
L$,E
t	E9
\$dH
\$dH
D$lD
HcL$
HcT$0H
t$PH
D$pH
D$<H
t$HL
t$4H
|$H1
t$4I
L$XH
|$pH
[]A\A]A^A_
D$0H
ATUSH
 []A\
ATUSH
 []A\
ATUSH
 []A\
ATUSH
 []A\
t$(H
[]A\
t$(H
[]A\
ATUSH
[]A\
ATUSH
[]A\
ATUSH
[]A\
ATUSH
[]A\
ATUSH
[]A\
ATUSH
[]A\
ATUSH
[]A\
ATUSH
[]A\
ATUSH
[]A\
ATUSH
[]A\
ATUSH
[]A\
ATUSH
[]A\
ATUSH
[]A\
ATUSH
[]A\
AVAUATUSH
[]A\A]A^
ATUSH
[]A\
ATUSH
[]A\
AVAUATUSH
[]A\A]A^
ATUSH
[]A\
AVAUATUSH
[]A\A]A^
ATUSH
[]A\
AVAUATUSH
[]A\A]A^
ATUSH
[]A\
AVAUATUSH
[]A\A]A^
ATUSH
[]A\
AVAUATUSH
[]A\A]A^
ATUSH
[]A\
AVAUATUSH
[]A\A]A^
ATUSH
[]A\
AVAUATUSH
[]A\A]A^
ATUSH
[]A\
AWAVAUATUSH
t$TH
t$dH
t$hH
t$lH
t$pH
t$tH
t$xH
t$|H
L$PH
D$TL
L$XH
L$\H
L$`H
D$dL
D$hH
D$lH
D$pH
D$tH
D$xH
L$ H
D$|H
L$(H
L$0H
L$8H
[]A\A]A^A_
ATUSH
[]A\
ATUSH
[]A\
AWAVAUATUSH
[]A\A]A^A_
AUATUSH
l$`L
[]A\A]
AWAVAUATUSH
([]A\A]A^A_
ATUSH
[]A\
AVAUATUSH
d$`L
[]A\A]A^
ATUSH
 []A\
ATUSH
[]A\
ATUSH
D$H1
L$HdH3
P[]A\
C E1
u	H9
AUATUSH
l$`L
[]A\A]
AVAUATUSH
[]A\A]A^
ATUSH
[]A\
AVAUATUSH
\$ E
T$XL
D$`L
T$8D
|$<D
D$PH
D$hH
t$TL
L$XH
L$`H
L$(H
L$,H
L$0H
L$4H
L$8H
L$<H
L$@H
L$xH
L$DH
L$HH
L$LH
L$PH
D$TL
[]A\A]A^A_
T$8D
|$<D
AUATUSH
[]A\A]
AUATUSH
[]A\A]
AVAUATUSH
l$`L
[]A\A]A^
AVAUATUSH
[]A\A]A^
AUATUSH
l$ H
\$pL
[]A\A]
AWAVAUATUSH
l$0H
D$ H
L$ H
L$(H
D$(H
D$ H
[]A\A]A^A_
AWAVAUATUSH
D$ L
\$pI
[]A\A]A^A_
AUATUSH
D$H1
D$HdH3
X[]A\A]
ATUSH
[]A\
ATUSH
D$H1
H92t'1
L$HdH3
P[]A\
AVAUATUSH
t$ H
\$pL
[]A\A]A^
ATUSH
AUATUSH
D$X1
D$XdH3
h[]A\A]
AUATUSH
D$X1
D$XdH3
h[]A\A]
ATUSH
D$H1
L$HdH3
P[]A\
ATUSH
[]A\
AWAVAUATUSH
t$ I
L$ H
D$$H
D$PH
D$HI
D$XM
D$0H
D$8A
D$`H
L$$H
L$(H
L$XH
[]A\A]A^A_
L$ H
D$$H
D$PH
D$HI
D$,H
ATUSH
[]A\
ATUSH
[]A\
AUATUSH
[]A\A]
;G(u
ATUSH
D$H1
L$HdH3
P[]A\
AUATUSH
D$X1
L$XdH3
h[]A\A]
ATUSH
[]A\
ATUSH
[]A\
ATUSH
[]A\
AVAUATUSH
[]A\A]A^
t	E9
l$`L
ATUSH
[]A\
C,E1
ATUSH
u.H9
[]A\
c I9
c I9
c I9
ATUSH
[]A\
ATUSH
[]A\
AUATUSH
T$0H
([]A\A]
[]A\A]
[]A\A]
AUATUSH
L$X1
D$XdH3
h[]A\A]
AVAUATUSH
 []A\A]A^
ATUH
z(dH
[]A\A]
ATUSH
 []A\
T$(1
([]A\A]
ATUSH
AUATUSH
[]A\A]
AVAUATUSH
D$(1
L$(dH3
0[]A\A]A^
AVAUATUSH
[]A\A]A^
conn
modules/dbus/iface-card.c
iter
%s: No such profile.
org.PulseAudio.Core1.Card
./pulse/xmalloc.h
n < INT_MAX/k
{sv}
card
/org/pulseaudio/core1
%s/%s%u
ActiveProfileUpdated
NewProfile
ProfileAvailableChanged
PropertyListUpdated
property_list
a{say}
profile
available
GetProfileByName
Index
Driver
OwnerModule
Sinks
Sources
Profiles
ActiveProfile
PropertyList
Assertion '%s' failed at %s:%u, function %s(). Aborting.
org.PulseAudio.Core1.NotFoundError
Internal error in PulseAudio: pa_card_set_profile() failed with error code %i.
org.freedesktop.DBus.Error.Failed
Card %s doesn't have an owner module.
org.PulseAudio.Core1.NoSuchPropertyError
dbus_message_get_args(msg, NULL, DBUS_TYPE_STRING, &profile_name, DBUS_TYPE_INVALID)
%s: No such profile on card %s.
signal_msg = dbus_message_new_signal(c->path, PA_DBUSIFACE_CARD_INTERFACE, signals[SIGNAL_PROPERTY_LIST_UPDATED].name)
signal_msg = dbus_message_new_signal(dbus_card->path, PA_DBUSIFACE_CARD_INTERFACE, signals[SIGNAL_ACTIVE_PROFILE_UPDATED].name)
dbus_message_append_args(signal_msg, DBUS_TYPE_OBJECT_PATH, &object_path, DBUS_TYPE_INVALID)
(p = pa_hashmap_get(c->profiles, profile->name))
signal_msg = dbus_message_new_signal(c->path, PA_DBUSIFACE_CARD_INTERFACE, signals[SIGNAL_PROFILE_AVAILABLE_CHANGED].name)
dbus_message_append_args(signal_msg, DBUS_TYPE_OBJECT_PATH, &object_path, DBUS_TYPE_BOOLEAN, &available, DBUS_TYPE_INVALID)
pa_hashmap_put(c->profiles, (char *) pa_dbusiface_card_profile_get_name(p), p) >= 0
signal_msg = dbus_message_new_signal(c->path, PA_DBUSIFACE_CARD_INTERFACE, signals[SIGNAL_NEW_PROFILE].name)
(reply = dbus_message_new_method_return(msg))
dbus_message_iter_open_container(&msg_iter, DBUS_TYPE_ARRAY, "{sv}", &dict_iter)
dbus_message_iter_close_container(&msg_iter, &dict_iter)
dbus_connection_send(conn, reply, NULL)
pa_dbus_protocol_add_interface(c->dbus_protocol, c->path, &card_interface_info, c) >= 0
pa_dbus_protocol_remove_interface(c->dbus_protocol, c->path, card_interface_info.name) >= 0
pa_dbusiface_card_get_path
pa_dbusiface_card_get_path
pa_dbusiface_card_free
pa_dbusiface_card_free
handle_get_profile_by_name
handle_get_profile_by_name
handle_get_index
handle_get_index
handle_get_name
handle_get_name
handle_get_driver
handle_get_driver
handle_get_owner_module
handle_get_owner_module
handle_get_sinks
handle_get_sinks
handle_get_sources
handle_get_sources
handle_get_profiles
handle_get_profiles
handle_get_active_profile
handle_get_active_profile
handle_set_active_profile
handle_set_active_profile
handle_get_property_list
handle_get_property_list
get_profiles
get_profiles
get_sources
get_sources
_pa_xnew_internal
get_sinks
get_sinks
handle_get_all
handle_get_all
card_profile_changed_cb
card_profile_changed_cb
card_profile_added_cb
card_profile_added_cb
check_card_proplist
check_card_proplist
card_profile_available_changed_cb
card_profile_available_changed_cb
pa_dbusiface_card_new
pa_dbusiface_card_new
Description
Priority
Available
modules/dbus/iface-card-profile.c
pa_dbus_protocol_add_interface(p->dbus_protocol, p->path, &profile_interface_info, p) >= 0
pa_dbus_protocol_remove_interface(p->dbus_protocol, p->path, profile_interface_info.name) >= 0
org.PulseAudio.Core1.CardProfile
pa_dbusiface_card_profile_get_profile
pa_dbusiface_card_profile_get_profile
pa_dbusiface_card_profile_get_name
pa_dbusiface_card_profile_get_name
pa_dbusiface_card_profile_get_path
pa_dbusiface_card_profile_get_path
pa_dbusiface_card_profile_free
pa_dbusiface_card_profile_free
handle_get_index
handle_get_index
handle_get_name
handle_get_name
handle_get_description
handle_get_description
handle_get_sinks
handle_get_sinks
handle_get_sources
handle_get_sources
handle_get_priority
handle_get_priority
handle_get_available
handle_get_available
handle_get_all
handle_get_all
pa_dbusiface_card_profile_new
pa_dbusiface_card_profile_new
modules/dbus/iface-client.c
Invalid update mode: %u
org.PulseAudio.Core1.Client
ClientEvent
Kill
UpdateProperties
RemoveProperties
keys
update_mode
PlaybackStreams
RecordStreams
Client %d doesn't have an owner module.
Client tried to modify the property list of another client.
org.freedesktop.DBus.Error.AccessDenied
dbus_message_get_args(msg, NULL, DBUS_TYPE_ARRAY, DBUS_TYPE_STRING, &keys, &n_keys, DBUS_TYPE_INVALID)
dbus_message_iter_init(msg, &msg_iter)
org.freedesktop.DBus.Error.InvalidArgs
signal_msg = dbus_message_new_signal(c->path, PA_DBUSIFACE_CLIENT_INTERFACE, signals[SIGNAL_PROPERTY_LIST_UPDATED].name)
pa_dbus_protocol_add_interface(c->dbus_protocol, c->path, &client_interface_info, c) >= 0
pa_dbus_protocol_remove_interface(c->dbus_protocol, c->path, client_interface_info.name) >= 0
pa_dbusiface_client_get_path
pa_dbusiface_client_get_path
pa_dbusiface_client_free
pa_dbusiface_client_free
_pa_xnew_internal
client_proplist_changed_cb
client_proplist_changed_cb
handle_kill
handle_kill
handle_update_properties
handle_update_properties
handle_remove_properties
handle_remove_properties
handle_get_index
handle_get_index
handle_get_driver
handle_get_driver
handle_get_owner_module
handle_get_owner_module
handle_get_playback_streams
handle_get_playback_streams
handle_get_record_streams
handle_get_record_streams
handle_get_property_list
handle_get_property_list
get_record_streams
get_record_streams
get_playback_streams
get_playback_streams
handle_get_all
handle_get_all
pa_dbusiface_client_new
pa_dbusiface_client_new
modules/dbus/iface-core.c
%s: No such source.
%s: No such sink.
Invalid sample rate.
Invalid sample format.
Empty channel array.
Invalid channel position: %u.
%s="%s"
Failed to load module.
Empty channel map.
Invalid channel position.
Invalid volume: %u.
Empty data.
pa_sample_spec_valid(&ss)
Adding the sample failed.
No such sample.
No such card.
ext_name
org.PulseAudio.Core1
source_output
sink_input
sample
module
module-dbus-protocol
12.2-rebootstrapped
pulseaudio
./pulsecore/object.h
sink
source
object_path
NewCard
CardRemoved
NewSink
SinkRemoved
FallbackSinkUpdated
FallbackSinkUnset
NewSource
SourceRemoved
FallbackSourceUpdated
FallbackSourceUnset
NewPlaybackStream
PlaybackStreamRemoved
NewRecordStream
RecordStreamRemoved
NewSample
SampleRemoved
NewModule
ModuleRemoved
NewClient
ClientRemoved
NewExtension
ExtensionRemoved
extension
record_stream
playback_stream
GetCardByName
GetSinkByName
GetSourceByName
GetSampleByName
UploadSample
LoadModule
Exit
ListenForSignal
StopListeningForSignal
signal
objects
arguments
a{ss}
sample_format
sample_rate
channels
default_volume
InterfaceRevision
Version
IsLocal
Username
Hostname
DefaultChannels
DefaultSampleFormat
DefaultSampleRate
AlternateSampleRate
Cards
FallbackSink
FallbackSource
Samples
Modules
Clients
MyClient
Extensions
(my_client = pa_dbus_protocol_get_client(c->dbus_protocol, conn))
There are no sources, and therefore no fallback source either.
(fallback_source = pa_hashmap_get(c->sources_by_index, PA_UINT32_TO_PTR(c->fallback_source->index)))
There are no sinks, and therefore no fallback sink either.
(fallback_sink = pa_hashmap_get(c->sinks_by_index, PA_UINT32_TO_PTR(c->fallback_sink->index)))
Too many channels: %i. The maximum number of channels is %u.
dbus_message_get_args(msg, NULL, DBUS_TYPE_STRING, &signal_str, DBUS_TYPE_INVALID)
dbus_message_get_args(msg, NULL, DBUS_TYPE_STRING, &signal_str, DBUS_TYPE_ARRAY, DBUS_TYPE_OBJECT_PATH, &objects, &n_objects, DBUS_TYPE_INVALID)
The server is configured to disallow exiting.
The server is configured to disallow module loading.
dbus_message_iter_next(&msg_iter)
Invalid module argument name: %s
dbus_message_iter_next(&dict_entry_iter)
Too many channels: %i. The maximum is %u.
The channels and default_volume arguments have different number of elements (%i and %i, resp).
Too big sample: %i bytes. The maximum sample length is %u bytes.
The sample length (%i bytes) doesn't align with the sample format and channels (%s).
sample = pa_idxset_get_by_index(c->core->scache, idx)
dbus_message_get_args(msg, NULL, DBUS_TYPE_STRING, &sample_name, DBUS_TYPE_INVALID)
(dbus_sample = pa_hashmap_get(c->samples, PA_UINT32_TO_PTR(sample->index)))
dbus_message_get_args(msg, NULL, DBUS_TYPE_STRING, &source_name, DBUS_TYPE_INVALID)
(dbus_source = pa_hashmap_get(c->sources_by_index, PA_UINT32_TO_PTR(source->index)))
dbus_message_get_args(msg, NULL, DBUS_TYPE_STRING, &sink_name, DBUS_TYPE_INVALID)
(dbus_sink = pa_hashmap_get(c->sinks_by_index, PA_UINT32_TO_PTR(sink->index)))
dbus_message_get_args(msg, NULL, DBUS_TYPE_STRING, &card_name, DBUS_TYPE_INVALID)
(dbus_card = pa_hashmap_get(c->cards, PA_UINT32_TO_PTR(card->index)))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_EXTENSION_REMOVED].name))
dbus_message_append_args(signal_msg, DBUS_TYPE_STRING, &ext_name, DBUS_TYPE_INVALID)
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_NEW_EXTENSION].name))
pa_hashmap_put(c->sources_by_index, PA_UINT32_TO_PTR(s->index), d) >= 0
pa_hashmap_put(c->sources_by_path, (char *) object_path, d) >= 0
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_NEW_SOURCE].name))
pa_hashmap_put(c->sinks_by_index, PA_UINT32_TO_PTR(s->index), d) >= 0
pa_hashmap_put(c->sinks_by_path, (char *) object_path, d) >= 0
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_NEW_SINK].name))
pa_hashmap_put(c->clients, PA_UINT32_TO_PTR(client->index), client_iface) >= 0
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_NEW_CLIENT].name))
pa_hashmap_put(c->record_streams, PA_UINT32_TO_PTR(source_output->index), stream_iface) >= 0
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_NEW_RECORD_STREAM].name))
pa_hashmap_put(c->playback_streams, PA_UINT32_TO_PTR(sink_input->index), stream_iface) >= 0
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_NEW_PLAYBACK_STREAM].name))
pa_hashmap_put(c->cards, PA_UINT32_TO_PTR(card->index), card_iface) >= 0
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_NEW_CARD].name))
pa_hashmap_put(c->samples, PA_UINT32_TO_PTR(sample->index), sample_iface) >= 0
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_NEW_SAMPLE].name))
d = pa_hashmap_remove(c->sources_by_index, PA_UINT32_TO_PTR(s->index))
pa_hashmap_remove(c->sources_by_path, object_path)
signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_SOURCE_REMOVED].name)
d = pa_hashmap_remove(c->sinks_by_index, PA_UINT32_TO_PTR(s->index))
pa_hashmap_remove(c->sinks_by_path, object_path)
signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_SINK_REMOVED].name)
(client_iface = pa_hashmap_remove(c->clients, PA_UINT32_TO_PTR(client->index)))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_CLIENT_REMOVED].name))
(stream_iface = pa_hashmap_remove(c->record_streams, PA_UINT32_TO_PTR(source_output->index)))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_RECORD_STREAM_REMOVED].name))
(stream_iface = pa_hashmap_remove(c->playback_streams, PA_UINT32_TO_PTR(sink_input->index)))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_PLAYBACK_STREAM_REMOVED].name))
(card_iface = pa_hashmap_remove(c->cards, PA_UINT32_TO_PTR(card->index)))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_CARD_REMOVED].name))
(sample_iface = pa_hashmap_remove(c->samples, PA_UINT32_TO_PTR(sample->index)))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_SAMPLE_REMOVED].name))
(module_iface = pa_hashmap_remove(c->modules, PA_UINT32_TO_PTR(module->index)))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_MODULE_REMOVED].name))
pa_hashmap_put(c->modules, PA_UINT32_TO_PTR(module->index), module_iface) >= 0
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_NEW_MODULE].name))
!obj || obj->check_type(pa_object_type_id)
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_FALLBACK_SOURCE_UPDATED].name))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_FALLBACK_SOURCE_UNSET].name))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_FALLBACK_SINK_UPDATED].name))
(signal_msg = dbus_message_new_signal(PA_DBUS_CORE_OBJECT_PATH, PA_DBUS_CORE_INTERFACE, signals[SIGNAL_FALLBACK_SINK_UNSET].name))
pa_dbus_protocol_add_interface(c->dbus_protocol, PA_DBUS_CORE_OBJECT_PATH, &core_interface_info, c) >= 0
pa_dbus_protocol_remove_interface(c->dbus_protocol, PA_DBUS_CORE_OBJECT_PATH, core_interface_info.name) >= 0
pa_dbusiface_core_get_source
pa_dbusiface_core_get_source
pa_dbusiface_core_get_sink
pa_dbusiface_core_get_sink
pa_dbusiface_core_get_client_path
pa_dbusiface_core_get_client_path
pa_dbusiface_core_get_module_path
pa_dbusiface_core_get_module_path
pa_dbusiface_core_get_record_stream_path
pa_dbusiface_core_get_record_stream_path
pa_dbusiface_core_get_playback_stream_path
pa_dbusiface_core_get_playback_stream_path
pa_dbusiface_core_get_source_path
pa_dbusiface_core_get_source_path
pa_dbusiface_core_get_sink_path
pa_dbusiface_core_get_sink_path
pa_dbusiface_core_get_card_path
pa_dbusiface_core_get_card_path
pa_dbusiface_core_free
pa_dbusiface_core_free
_pa_xnew_internal
default_sink_changed_cb
default_sink_changed_cb
pa_object_cast
pa_object_cast
default_source_changed_cb
default_source_changed_cb
module_new_cb
module_new_cb
module_removed_cb
module_removed_cb
sample_cache_new_cb
sample_cache_new_cb
sample_cache_removed_cb
sample_cache_removed_cb
card_put_cb
card_put_cb
card_unlink_cb
card_unlink_cb
sink_input_put_cb
sink_input_put_cb
sink_input_unlink_cb
sink_input_unlink_cb
source_output_put_cb
source_output_put_cb
source_output_unlink_cb
source_output_unlink_cb
client_put_cb
client_put_cb
client_unlink_cb
client_unlink_cb
create_dbus_object_for_sink
create_dbus_object_for_sink
sink_put_cb
sink_put_cb
sink_unlink_cb
sink_unlink_cb
create_dbus_object_for_source
create_dbus_object_for_source
source_put_cb
source_put_cb
source_unlink_cb
source_unlink_cb
extension_registered_cb
extension_registered_cb
extension_unregistered_cb
extension_unregistered_cb
handle_get_card_by_name
handle_get_card_by_name
handle_get_sink_by_name
handle_get_sink_by_name
handle_get_source_by_name
handle_get_source_by_name
handle_get_sample_by_name
handle_get_sample_by_name
handle_upload_sample
handle_upload_sample
handle_load_module
handle_load_module
handle_exit
handle_exit
handle_listen_for_signal
handle_listen_for_signal
handle_stop_listening_for_signal
handle_stop_listening_for_signal
handle_get_interface_revision
handle_get_interface_revision
handle_get_name
handle_get_name
handle_get_version
handle_get_version
handle_get_is_local
handle_get_is_local
handle_get_username
handle_get_username
handle_get_hostname
handle_get_hostname
handle_get_default_channels
handle_get_default_channels
handle_set_default_channels
handle_set_default_channels
handle_get_default_sample_format
handle_get_default_sample_format
handle_set_default_sample_format
handle_set_default_sample_format
handle_get_default_sample_rate
handle_get_default_sample_rate
handle_set_default_sample_rate
handle_set_default_sample_rate
handle_get_alternate_sample_rate
handle_get_alternate_sample_rate
handle_set_alternate_sample_rate
handle_set_alternate_sample_rate
handle_get_cards
handle_get_cards
handle_get_sinks
handle_get_sinks
handle_get_fallback_sink
handle_get_fallback_sink
handle_set_fallback_sink
handle_set_fallback_sink
handle_get_sources
handle_get_sources
handle_get_fallback_source
handle_get_fallback_source
handle_set_fallback_source
handle_set_fallback_source
handle_get_playback_streams
handle_get_playback_streams
handle_get_record_streams
handle_get_record_streams
handle_get_samples
handle_get_samples
handle_get_modules
handle_get_modules
handle_get_clients
handle_get_clients
handle_get_my_client
handle_get_my_client
handle_get_extensions
handle_get_extensions
get_my_client
get_my_client
get_clients
get_clients
get_modules
get_modules
get_samples
get_samples
get_record_streams
get_record_streams
get_playback_streams
get_playback_streams
get_sources
get_sources
get_sinks
get_sinks
get_cards
get_cards
get_default_channels
get_default_channels
get_is_local
get_is_local
handle_get_all
handle_get_all
pa_dbusiface_core_new
pa_dbusiface_core_new
modules/dbus/iface-device.c
pa_hashmap_isempty(d->ports)
No such port: %s
Too large volume value: %u
%s: No such port on sink %s.
Suspending
Resuming
org.PulseAudio.Core1.Device
org.PulseAudio.Core1.Source
org.PulseAudio.Core1.Sink
VolumeUpdated
MuteUpdated
StateUpdated
ActivePortUpdated
state
muted
Suspend
GetPortByName
suspend
MonitorOfSink
MonitorSource
HasFlatVolume
HasConvertibleToDecibelVolume
BaseVolume
VolumeSteps
HasHardwareVolume
HasHardwareMute
ConfiguredLatency
HasDynamicLatency
IsHardwareDevice
IsNetworkDevice
State
Ports
ActivePort
d->type == PA_DEVICE_TYPE_SINK
The sink %s has no ports, and therefore there's no active port either.
The source %s has no ports, and therefore there's no active port either.
Internal error in PulseAudio: pa_sink_set_port() failed with error code %i.
Internal error in PulseAudio: pa_source_set_port() failed with error code %i.
Sink %s doesn't support latency querying.
Source %s doesn't support latency querying.
Expected %u volume entries, got %i.
Sink %s doesn't belong to any card.
Source %s doesn't belong to any card.
Sink %s doesn't have an owner module.
Source %s doesn't have an owner module.
dbus_message_get_args(msg, NULL, DBUS_TYPE_STRING, &port_name, DBUS_TYPE_INVALID)
%s: No such port on source %s.
dbus_message_get_args(msg, NULL, DBUS_TYPE_BOOLEAN, &suspend, DBUS_TYPE_INVALID)
client = pa_dbus_protocol_get_client(d->dbus_protocol, conn)
%s sink %s requested by client %u.
Internal error in PulseAudio: pa_sink_suspend() failed.
%s source %s requested by client %u.
Internal error in PulseAudio: pa_source_suspend() failed.
signal_msg = dbus_message_new_signal(d->path, PA_DBUSIFACE_DEVICE_INTERFACE, signals[SIGNAL_PROPERTY_LIST_UPDATED].name)
signal_msg = dbus_message_new_signal(d->path, PA_DBUSIFACE_DEVICE_INTERFACE, signals[SIGNAL_ACTIVE_PORT_UPDATED].name)
signal_msg = dbus_message_new_signal(d->path, PA_DBUSIFACE_DEVICE_INTERFACE, signals[SIGNAL_STATE_UPDATED].name)
dbus_message_append_args(signal_msg, DBUS_TYPE_UINT32, &state, DBUS_TYPE_INVALID)
signal_msg = dbus_message_new_signal(d->path, PA_DBUSIFACE_DEVICE_INTERFACE, signals[SIGNAL_MUTE_UPDATED].name)
dbus_message_append_args(signal_msg, DBUS_TYPE_BOOLEAN, &d->mute, DBUS_TYPE_INVALID)
signal_msg = dbus_message_new_signal(d->path, PA_DBUSIFACE_DEVICE_INTERFACE, signals[SIGNAL_VOLUME_UPDATED].name)
dbus_message_append_args(signal_msg, DBUS_TYPE_ARRAY, DBUS_TYPE_UINT32, &volume_ptr, d->volume.channels, DBUS_TYPE_INVALID)
d->type == PA_DEVICE_TYPE_SOURCE
Source %s is not a monitor source.
pa_dbus_protocol_add_interface(d->dbus_protocol, d->path, &device_interface_info, d) >= 0
pa_dbus_protocol_add_interface(d->dbus_protocol, d->path, &sink_interface_info, d) >= 0
pa_dbus_protocol_add_interface(d->dbus_protocol, d->path, &source_interface_info, d) >= 0
pa_dbus_protocol_remove_interface(d->dbus_protocol, d->path, device_interface_info.name) >= 0
pa_dbus_protocol_remove_interface(d->dbus_protocol, d->path, sink_interface_info.name) >= 0
pa_dbus_protocol_remove_interface(d->dbus_protocol, d->path, source_interface_info.name) >= 0
pa_dbusiface_device_get_source
pa_dbusiface_device_get_source
pa_dbusiface_device_get_sink
pa_dbusiface_device_get_sink
pa_dbusiface_device_get_path
pa_dbusiface_device_get_path
pa_dbusiface_device_free
pa_dbusiface_device_free
handle_source_get_monitor_of_sink
handle_source_get_monitor_of_sink
handle_source_get_all
handle_source_get_all
pa_dbusiface_device_new_source
pa_dbusiface_device_new_source
pa_object_cast
pa_object_cast
volume_changed_cb
volume_changed_cb
mute_changed_cb
mute_changed_cb
state_changed_cb
state_changed_cb
port_changed_cb
port_changed_cb
proplist_changed_cb
proplist_changed_cb
handle_suspend
handle_suspend
handle_get_port_by_name
handle_get_port_by_name
handle_get_all
handle_get_all
handle_sink_get_monitor_source
handle_sink_get_monitor_source
handle_get_index
handle_get_index
handle_get_name
handle_get_name
handle_get_driver
handle_get_driver
handle_get_owner_module
handle_get_owner_module
handle_get_card
handle_get_card
handle_get_sample_format
handle_get_sample_format
handle_get_sample_rate
handle_get_sample_rate
handle_get_channels
handle_get_channels
handle_get_volume
handle_get_volume
handle_set_volume
handle_set_volume
handle_get_has_flat_volume
handle_get_has_flat_volume
handle_get_has_convertible_to_decibel_volume
handle_get_has_convertible_to_decibel_volume
handle_get_base_volume
handle_get_base_volume
handle_get_volume_steps
handle_get_volume_steps
handle_get_mute
handle_get_mute
handle_set_mute
handle_set_mute
handle_get_has_hardware_volume
handle_get_has_hardware_volume
handle_get_has_hardware_mute
handle_get_has_hardware_mute
handle_get_configured_latency
handle_get_configured_latency
handle_get_has_dynamic_latency
handle_get_has_dynamic_latency
handle_get_latency
handle_get_latency
handle_get_is_hardware_device
handle_get_is_hardware_device
handle_get_is_network_device
handle_get_is_network_device
handle_get_state
handle_get_state
_pa_xnew_internal
get_ports
get_ports
handle_get_ports
handle_get_ports
handle_get_active_port
handle_get_active_port
handle_set_active_port
handle_set_active_port
handle_get_property_list
handle_get_property_list
handle_sink_get_all
handle_sink_get_all
pa_dbusiface_device_new_sink
pa_dbusiface_device_new_sink
device
modules/dbus/iface-device-port.c
org.PulseAudio.Core1.DevicePort
signal_msg = dbus_message_new_signal(p->path, PA_DBUSIFACE_DEVICE_PORT_INTERFACE, signals[SIGNAL_AVAILABLE_CHANGED].name)
dbus_message_append_args(signal_msg, DBUS_TYPE_UINT32, &available, DBUS_TYPE_INVALID)
pa_dbus_protocol_add_interface(p->dbus_protocol, p->path, &port_interface_info, p) >= 0
pa_dbus_protocol_remove_interface(p->dbus_protocol, p->path, port_interface_info.name) >= 0
pa_dbusiface_device_port_get_name
pa_dbusiface_device_port_get_name
pa_dbusiface_device_port_get_path
pa_dbusiface_device_port_get_path
pa_dbusiface_device_port_free
pa_dbusiface_device_port_free
available_changed_cb
available_changed_cb
handle_get_index
handle_get_index
handle_get_name
handle_get_name
handle_get_description
handle_get_description
handle_get_priority
handle_get_priority
handle_get_available
handle_get_available
handle_get_all
handle_get_all
pa_dbusiface_device_port_new
pa_dbusiface_device_port_new
modules/dbus/iface-memstats.c
dbus_core
memstats
%s/%s
org.PulseAudio.Core1.Memstats
CurrentMemblocks
CurrentMemblocksSize
AccumulatedMemblocks
AccumulatedMemblocksSize
SampleCacheSize
pa_dbus_protocol_add_interface(m->dbus_protocol, m->path, &memstats_interface_info, m) >= 0
pa_dbus_protocol_remove_interface(m->dbus_protocol, m->path, memstats_interface_info.name) >= 0
pa_dbusiface_memstats_get_path
pa_dbusiface_memstats_get_path
pa_dbusiface_memstats_free
pa_dbusiface_memstats_free
handle_get_current_memblocks
handle_get_current_memblocks
handle_get_current_memblocks_size
handle_get_current_memblocks_size
handle_get_accumulated_memblocks
handle_get_accumulated_memblocks
handle_get_accumulated_memblocks_size
handle_get_accumulated_memblocks_size
handle_get_sample_cache_size
handle_get_sample_cache_size
handle_get_all
handle_get_all
pa_dbusiface_memstats_new
pa_dbusiface_memstats_new
modules/dbus/iface-module.c
module_iface
org.PulseAudio.Core1.Module
Unload
Arguments
UsageCounter
ma = pa_modargs_new(m->module->argument, NULL)
dbus_message_iter_open_container(iter, DBUS_TYPE_VARIANT, "a{ss}", &variant_iter)
dbus_message_iter_open_container(&variant_iter, DBUS_TYPE_ARRAY, "{ss}", &dict_iter)
value = pa_modargs_get_value(ma, key, NULL)
dbus_message_iter_open_container(&dict_iter, DBUS_TYPE_DICT_ENTRY, NULL, &dict_entry_iter)
dbus_message_iter_append_basic(&dict_entry_iter, DBUS_TYPE_STRING, &key)
dbus_message_iter_append_basic(&dict_entry_iter, DBUS_TYPE_STRING, &value)
dbus_message_iter_close_container(&dict_iter, &dict_entry_iter)
dbus_message_iter_close_container(&variant_iter, &dict_iter)
dbus_message_iter_close_container(iter, &variant_iter)
dbus_message_iter_append_basic(&dict_entry_iter, DBUS_TYPE_STRING, &property_handlers[PROPERTY_HANDLER_ARGUMENTS].property_name)
reply = dbus_message_new_method_return(msg)
Module %u (%s) doesn't have a usage counter.
The server is configured to disallow module unloading.
signal_msg = dbus_message_new_signal(module_iface->path, PA_DBUSIFACE_MODULE_INTERFACE, signals[SIGNAL_PROPERTY_LIST_UPDATED].name)
pa_dbus_protocol_add_interface(m->dbus_protocol, m->path, &module_interface_info, m) >= 0
pa_dbus_protocol_remove_interface(m->dbus_protocol, m->path, module_interface_info.name) >= 0
pa_dbusiface_module_get_path
pa_dbusiface_module_get_path
pa_dbusiface_module_free
pa_dbusiface_module_free
module_proplist_changed_cb
module_proplist_changed_cb
handle_unload
handle_unload
handle_get_index
handle_get_index
handle_get_name
handle_get_name
handle_get_arguments
handle_get_arguments
handle_get_usage_counter
handle_get_usage_counter
handle_get_property_list
handle_get_property_list
append_modargs_variant
append_modargs_variant
handle_get_all
handle_get_all
pa_dbusiface_module_new
pa_dbusiface_module_new
modules/dbus/iface-sample.c
Removing sample %s failed.
Invalid volume.
Playing sample %s failed.
sample_iface
org.PulseAudio.Core1.Sample
Play
PlayToSink
Remove
DefaultVolume
Duration
Bytes
Sample %s isn't loaded into memory yet, so its size is unknown.
Sample %s isn't loaded into memory yet, so its duration is unknown.
Sample %s isn't loaded into memory yet, so its sample rate is unknown.
Sample %s isn't loaded into memory yet, so its sample format is unknown.
Sample %s doesn't have default volume stored.
Sample %s isn't loaded into memory yet, so its channel map is unknown.
Can't play sample %s, because there are no sinks available.
signal_msg = dbus_message_new_signal(sample_iface->path, PA_DBUSIFACE_SAMPLE_INTERFACE, signals[SIGNAL_PROPERTY_LIST_UPDATED].name)
pa_dbus_protocol_add_interface(s->dbus_protocol, s->path, &sample_interface_info, s) >= 0
pa_dbus_protocol_remove_interface(s->dbus_protocol, s->path, sample_interface_info.name) >= 0
pa_dbusiface_sample_get_path
pa_dbusiface_sample_get_path
pa_dbusiface_sample_free
pa_dbusiface_sample_free
sample_cache_changed_cb
sample_cache_changed_cb
handle_play
handle_play
handle_play_to_sink
handle_play_to_sink
handle_remove
handle_remove
handle_get_index
handle_get_index
handle_get_name
handle_get_name
handle_get_sample_format
handle_get_sample_format
handle_get_sample_rate
handle_get_sample_rate
handle_get_channels
handle_get_channels
handle_get_default_volume
handle_get_default_volume
handle_get_duration
handle_get_duration
handle_get_bytes
handle_get_bytes
handle_get_property_list
handle_get_property_list
handle_get_all
handle_get_all
pa_dbusiface_sample_new
pa_dbusiface_sample_new
modules/dbus/iface-stream.c
org.PulseAudio.Core1.Stream
call_data
Playback stream %u
Record stream %u
%s doesn't have a driver.
%s doesn't have volume.
%s has read-only volume.
Invalid volume: %u
DeviceUpdated
SampleRateUpdated
StreamEvent
Move
BufferLatency
DeviceLatency
ResampleMethod
Record streams don't have mute.
dbus_message_get_args(msg, NULL, DBUS_TYPE_OBJECT_PATH, &device, DBUS_TYPE_INVALID)
Moving playback stream %u to sink %s failed.
Moving record stream %u to source %s failed.
signal_msg = dbus_message_new_signal(s->path, PA_DBUSIFACE_STREAM_INTERFACE, signals[SIGNAL_SAMPLE_RATE_UPDATED].name)
dbus_message_append_args(signal_msg, DBUS_TYPE_UINT32, &s->sample_rate, DBUS_TYPE_INVALID)
signal_msg = dbus_message_new_signal(s->path, PA_DBUSIFACE_STREAM_INTERFACE, signals[SIGNAL_PROPERTY_LIST_UPDATED].name)
signal_msg = dbus_message_new_signal(s->path, PA_DBUSIFACE_STREAM_INTERFACE, signals[SIGNAL_STREAM_EVENT].name)
dbus_message_iter_append_basic(&msg_iter, DBUS_TYPE_STRING, &name)
%s isn't associated to any client.
%s doesn't have an owner module.
Expected %u volume entries, got %u.
signal_msg = dbus_message_new_signal(s->path, PA_DBUSIFACE_STREAM_INTERFACE, signals[SIGNAL_MUTE_UPDATED].name)
dbus_message_append_args(signal_msg, DBUS_TYPE_BOOLEAN, &s->mute, DBUS_TYPE_INVALID)
signal_msg = dbus_message_new_signal(s->path, PA_DBUSIFACE_STREAM_INTERFACE, signals[SIGNAL_VOLUME_UPDATED].name)
dbus_message_append_args(signal_msg, DBUS_TYPE_ARRAY, DBUS_TYPE_UINT32, &volume_ptr, s->volume.channels, DBUS_TYPE_INVALID)
signal_msg = dbus_message_new_signal(s->path, PA_DBUSIFACE_STREAM_INTERFACE, signals[SIGNAL_DEVICE_UPDATED].name)
dbus_message_append_args(signal_msg, DBUS_TYPE_OBJECT_PATH, &new_device_path, DBUS_TYPE_INVALID)
pa_dbus_protocol_add_interface(s->dbus_protocol, s->path, &stream_interface_info, s) >= 0
pa_dbus_protocol_remove_interface(s->dbus_protocol, s->path, stream_interface_info.name) >= 0
pa_dbusiface_stream_get_path
pa_dbusiface_stream_get_path
pa_dbusiface_stream_free
pa_dbusiface_stream_free
pa_dbusiface_stream_new_record
pa_dbusiface_stream_new_record
send_event_cb
send_event_cb
pa_object_cast
pa_object_cast
move_finish_cb
move_finish_cb
volume_changed_cb
volume_changed_cb
mute_changed_cb
mute_changed_cb
proplist_changed_cb
proplist_changed_cb
check_and_signal_rate
check_and_signal_rate
state_changed_cb
state_changed_cb
handle_move
handle_move
handle_kill
handle_kill
handle_get_index
handle_get_index
handle_get_driver
handle_get_driver
handle_get_owner_module
handle_get_owner_module
handle_get_client
handle_get_client
handle_get_device
handle_get_device
handle_get_sample_format
handle_get_sample_format
handle_get_sample_rate
handle_get_sample_rate
handle_get_channels
handle_get_channels
handle_get_volume
handle_get_volume
handle_set_volume
handle_set_volume
handle_get_mute
handle_get_mute
handle_set_mute
handle_set_mute
handle_get_buffer_latency
handle_get_buffer_latency
handle_get_device_latency
handle_get_device_latency
handle_get_resample_method
handle_get_resample_method
handle_get_property_list
handle_get_property_list
handle_get_all
handle_get_all
pa_dbusiface_stream_new_playback
pa_dbusiface_stream_new_playback
Allowing connection by user %lu.
modules/dbus/module-dbus-protocol.c
ev = dbus_timeout_get_data(timeout)
fd == dbus_watch_get_unix_fd(watch)
Asked to handle disabled watch: %p %i
signal_msg = dbus_message_new_signal(pa_dbusiface_core_get_client_path(conn->server->userdata->core_iface, c), PA_DBUSIFACE_CLIENT_INTERFACE, "ClientEvent")
dbus_connection_send(pa_dbus_wrap_connection_get(conn->wrap_conn), signal_msg, NULL)
dbus_connection_add_filter(new_connection, disconnection_filter_cb, c, NULL)
pa_dbus_protocol_register_connection(s->userdata->dbus_protocol, new_connection, c->client) >= 0
pa_dbus_protocol_unregister_connection(c->server->userdata->dbus_protocol, pa_dbus_wrap_connection_get(c->wrap_conn)) >= 0
ev = dbus_watch_get_data(watch)
dbus_server_listen() failed: %s: %s
dbus_server_set_watch_functions() ran out of memory.
dbus_server_set_timeout_functions() ran out of memory.
access=local|remote|local,remote tcp_port=<port number> tcp_listen=<hostname>
Failed to parse module arguments.
Invalid tcp_port argument: '%s'
Starting the local D-Bus server failed.
Starting the D-Bus server for remote connections failed.
timeout
message
Disconnected
org.freedesktop.DBus.Local
c->userdata
new_connection
D-Bus client
application.name
Connection killed.
watch
address
D-Bus interface
Tanu Kaskinen
access
local
local,remote
Invalid access argument: '%s'
tcp_port
0.0.0.0
tcp_listen
tcp:host=%s,port=%u
module_dbus_protocol_LTX_pa__done
module_dbus_protocol_LTX_pa__done
server_free
server_free
user_check_cb
client_kill_cb
client_kill_cb
client_send_event_cb
client_send_event_cb
disconnection_filter_cb
disconnection_filter_cb
connection_new_cb
connection_new_cb
io_event_cb
io_event_cb
watch_add_cb
watch_add_cb
watch_remove_cb
watch_remove_cb
get_watch_flags
get_watch_flags
watch_toggled_cb
watch_toggled_cb
timeout_add_cb
timeout_add_cb
timeout_remove_cb
timeout_remove_cb
timeout_toggled_cb
timeout_toggled_cb
start_server
start_server
connection_free
connection_free
module_dbus_protocol_LTX_pa__init
module_dbus_protocol_LTX_pa__init
;*3$"
gcc 8.1.1 20180712
GA*GOW
GA+stack_clash
GA*cf_protection
GA+GLIBCXX_ASSERTIONS
GA*FORTIFY
GA!stack_realign
gcc 8.1.1 20180712
GA*GOW
GA+stack_clash
GA*cf_protection
GA+GLIBCXX_ASSERTIONS
GA*FORTIFY
GA!stack_realign
gcc 8.1.1 20180712
GA*GOW
GA+stack_clash
GA*cf_protection
GA+GLIBCXX_ASSERTIONS
GA*FORTIFY
GA!stack_realign
gcc 8.1.1 20180712
GA*GOW
GA+stack_clash
GA*cf_protection
GA+GLIBCXX_ASSERTIONS
GA*FORTIFY
GA!stack_realign
gcc 8.1.1 20180712
GA*GOW
GA+stack_clash
GA*cf_protection
GA+GLIBCXX_ASSERTIONS
GA*FORTIFY
GA!stack_realign
gcc 8.1.1 20180712
GA*GOW
GA+stack_clash
GA*cf_protection
GA+GLIBCXX_ASSERTIONS
GA*FORTIFY
GA!stack_realign
gcc 8.1.1 20180712
GA*GOW
GA+stack_clash
GA*cf_protection
GA+GLIBCXX_ASSERTIONS
GA*FORTIFY
GA!stack_realign
gcc 8.1.1 20180712
GA*GOW
GA+stack_clash
GA*cf_protection
GA+GLIBCXX_ASSERTIONS
GA*FORTIFY
GA!stack_realign
gcc 8.1.1 20180712
GA*GOW
GA+stack_clash
GA*cf_protection
GA+GLIBCXX_ASSERTIONS
GA*FORTIFY
GA!stack_realign
gcc 8.1.1 20180712
GA*GOW
GA+stack_clash
GA*cf_protection
GA+GLIBCXX_ASSERTIONS
GA*FORTIFY
GA!stack_realign
gcc 8.1.1 20180712
GA*GOW
GA+stack_clash
GA*cf_protection
GA+GLIBCXX_ASSERTIONS
GA*FORTIFY
GA!stack_realign
module-dbus-protocol.so-12.2-1.fc29.x86_64.debug
7zXZ
u7 C
8)GB
%r/@7
~/-f
K.1^~l<
PlU	
h3%\
,$4B]
$8`r
D!a	
'l@C
#1L1
"e	3
[Y?R
qbZ1
IkRk
BpE1
Uz1h
P\bU
ZZWc
t!4Un
pOK9
:;[1
1mu1
q)-2
aA! 
u~ZL
GWO~
Lkd^
@^e6&
4AG:
S@*H!
6tK 
Sq^9
-/+ 
(D^r
Ow$c
GUFY
,'BK
wY24
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.note.gnu.property
.init_array
.fini_array
.data.rel.ro
.dynamic
.got
.data
.bss
.gnu.build.attributes
.gnu_debuglink
.gnu_debugdata
