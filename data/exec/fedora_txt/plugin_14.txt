(T~BE
A6@Y
__gmon_start__
_init
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
workbook_date_conv
value_get_as_float
value_new_error_NUM
datetime_value_to_g
get_yieldmat
g_date_compare
yearfrac
value_new_float
goal_seek_initialize
goal_seek_newton
goal_seek_point
goal_seek_bisection
pow1p
g_date_valid
go_nan
g_date_get_month
g_date_get_year
gnm_date_add_months
g_date_get_day
g_date_is_last_of_month
gnm_date_add_days
go_coupdaybs
go_coupdaysnc
go_coupdays
pow1pm1
collect_floats_value
g_free
float_range_function2d
value_get_as_int
get_vdb
datetime_value_to_serial
value_new_error_DIV0
g_date_is_leap_year
annual_year_basis
value_is_zero
value_new_error_VALUE
float_range_function
log1p
go_finite
value_peek_string
go_pow10
go_fake_trunc
value_get_as_bool
log10
value_new_int
get_cumprinc
get_cumipmt
go_coup_cd
go_date_g_to_serial
get_amorlinc
get_amordegrc
g_return_if_fail_warning
get_mduration
get_duration
go_date_days_between_basis
ceil
value_get_as_checked_bool
go_format_default_date
value_set_fmt
financial_functions
go_plugin_header
go_plugin_depends
go_rint
libm.so.6
libc.so.6
__stack_chk_fail
_edata
__bss_start
_end
plugin.so
GLIBC_2.1.3
GLIBC_2.4
GLIBC_2.0
UWVS
D$l1
T$le3
d$|[^_]
D$<w
UWVS
t$te
D$L1
T$Le3
d$\[^_]
D$$w
UWVS
l$4e
[^_]
D$ =
UWVS
d$<[1
[^_]
UWVS
t$Pe
D$,1
D$,e3
d$<[^_]
\$ )
d$(1
l$pe
D$L1
L$ t5
|$Le3=
d$\[^_]
T$ u
D$@;D$Duh
9t$@
|$Pe
D$<1
D$(t%
L$<e3
D$4u?
d$@[^_
|$@e
D$,1
T$,e3
d$0[^_
d$t[^
d$t[^
UWVS
d$,[^_]
d$,[^_]
UWVS
d$,[^_]
d$,[^_]
UWVS
d$,[^_]
d$,[^_]
d$,[^_]
UWVS
T$L1
T$(+|$
|$()
T$$9T$ uYk
D$(t_
t$Le35
d$\[^_]
UWVS
d$L[^_]
d$L[^_]
UWVS
d$L[^_]
d$L[^_]
UWVS
d$L[^_]
d$L[^_]
UWVS
D$0ws
d$L[^_]
d$L[^_]
UWVS
d$L[^_]
d$L[^_]
UWVS
d$L[^_]
d$L[^_]
d$$[^
d$$[^
UWVS
D$\1
L$\e3
d$l[^_]
D$09
\$ ~B
D$09
UWVS
[^_]
l$Lt
|$`e
D$L1
D$H%
T$Le3
d$P[^_
UWVS
D$Le
\$pt
[^_]
d$([
z.u7
d$4[^
d$4[^
d$4[^
d$$[^
d$$[^
d$$[^
d$$[
|$@e
D$,1
L$,e3
d$0[^_
|$`e
D$L1
D$H%
D$H%
D$H%
z#u!
T$Le3
d$P[^_
|$`e
D$L1
D$H%
D$H%
D$H%
z#u!
T$Le3
d$P[^_
d$4[^
d$4[^
UWVS
d$L[^_]
d$L[^_]
UWVS
d$L[^_]
d$L[^_]
D$<1
D$<e3
D$,u
d$@[^_
D$<1
D$<e3
D$,u
d$@[^_
UWVS
D$|1
T$|e3
[^_]
D$Pw
UWVS
D$|1
T$|e3
[^_]
D$Pw
zUuS
d$D[^
d$D[^
d$([
UWVS
[^_]
UWVS
D$p1
[^_]
UWVS
D$l1
D$\1
L$le3
d$|[^_]
UWVS
D$l1
T$le3
d$|[^_]
UWVS
D$|1
L$|e3
[^_]
D$pw
UWVS
D$|1
D$l1
L$|e3
[^_]
T$,e
D$\1
D$\e3
d$l[^_]
UWVS
D$|1
[^_]
UWVS
D$|1
[^_]
\$Pe
D$|1
T$8f
[^_]
d$(1
UWVS
D$|1
[^_]
d$4[^
d$4[^
D$L1
D$<1
L$Le3
d$\[^_]
d$4[1
d$4[1
D$8z(u.
d$T[^
d$d[^
d$d[^
d$d[^
d$d[^
d$D[^
d$4[^
d$4[^
|$@e
D$,1
D$(%
T$,e3
d$0[^_
|$@e
D$,1
D$(%
T$,e3
d$0[^_
d$$[^
d$$[^
zUuS
d$D[^
d$8[
d$8[
\$he
T$pf
D$@w
[^_]
d$X[
d$0[^_
d$0[^_
d$0[^_
D$(9
d$4[^
d$4[^
d$4[^
UWVS
d$<[^_]
d$([
d$8[
UWVS
zjuq
d$\[^_]
UWVS
zdui
d$\[^_]
UWVS
[^_]
v != NULL
accrint
ffff|fffb
accrintm
amordegrc
amorlinc
coupdaybs
fff|fb
coupdays
coupdaysnc
coupncd
coupnum
couppcd
cumipmt
cumprinc
dollarde
dollarfr
effect
euro
euroconvert
fss|bf
fvschedule
g_duration
intrate
ispmt
mduration
mirr
nominal
nper
oddfprice
fffffffff
oddfyield
oddlprice
oddlyield
ppmt
ffffff|f
pricedisc
pricemat
fff|fff
received
tbilleq
tbillprice
tbillyield
fffff|ff
xirr
AA|f
xnpv
yielddisc
yieldmat
VDB:depreciation of an asset
cost:initial cost of asset
life:number of periods
DB,DDB
settlement:settlement date
maturity:maturity date
coupon:annual coupon rate
basis:calendar basis
DURATION,G_DURATION
CUMPRINC:cumulative principal
rate:interest rate per period
nper:number of periods
pv:present value
type:payment type
PPMT
IPMT
COUPNUM:number of coupons
eom:end-of-month flag
COUPNCD,COUPPCD
COUPNCD,COUPDAYS,COUPDAYBS
COUPPCD,COUPDAYS,COUPDAYBS
COUPDAYBS,COUPDAYSNC
COUPDAYS
period:subject period
rate:depreciation rate
AMORDEGRC
AMORLINC
price:price of security
YIELD,DURATION
issue:date of issue
ODDFPRICE,ODDLYIELD
ODDLPRICE,ODDFYIELD
YIELDMAT:yield of a security
YIELDDISC,YIELD
PRICE,DURATION
YIELD:yield of a security
PRICE:price of a security
n:amount
=EUROCONVERT(1,"DEM","ITL")
EURO
EURO:equivalent of 1 EUR
=EURO("DEM")
EUROCONVERT
FVSCHEDULE:future value
principal:initial value
fv:future value
=G_DURATION(0.08,1000,2000)
FV,PV,DURATION,MDURATION
MDURATION, G_DURATION
NPER:number of periods
pmt:payment at each period
=NPER(6%,0,-10000,20000,0)
PV,FV
per:period number
=PPMT(10%,4,10,1e6)
=IPMT(10%,4,10,1e6)
PMT:payment for annuity
PV,FV,RATE,ISPMT
FV:future value
=FV(10%,10,1000,20000,0)
XIRR:internal rate of return
values:cash flow
dates:dates of cash flow
XNPV:net present value
value1:cash flow for period 1
value2:cash flow for period 2
=NPV(10%,100,100,-250)
PV:present value
=PV(10%,10,1000,20000,0)
=IRR({100;100;200;-450})
p:number of periods
=RRI(12,5000,10000)
PV,FV,RATE
RATE:rate of investment
=RATE(10,-1500,10000,0)
price:price
TBILLEQ,TBILLPRICE
TBILLEQ,TBILLYIELD
TBILLPRICE,TBILLYIELD
IRR,XIRR
fraction:denominator
=DOLLARFR(0.25,8)
DOLLARDE
=DOLLARDE(0.03,16)
DOLLARFR
SYD:sum-of-years depreciation
=SYD(5000,200,5,2)
DB,DDB,SLN
SLN:depreciation of an asset
=SLN(10000,700,10)
DB,DDB,SYD
DDB:depreciation of an asset
DDB,SLN,SYD
=ISPMT(10%,4,10,1e6)
NOMINAL:nominal interest rate
=NOMINAL(10%,6)
EFFECT
=EFFECT(19%,12)
NOMINAL
DISC:discount rate
par:price per $100 face value
PRICEMAT
PRICEMAT:price at maturity
PRICEDISC
PRICEDISC:discounted price
INTRATE
INTRATE:interest rate
RECEIVED
ACCRINTM:accrued interest
par:par value
@{par} defaults to $1000.
ACCRINT
ACCRINT:accrued interest
ACCRINTM
goffice
gnumeric
1.12.29
value_get_freq
munG
salvage:value after depreciation
start_period:first period to accumulate for
end_period:last period to accumulate for
factor:factor at which the balance declines
no_switch:do not switch to straight-line depreciation
VDB calculates the depreciation of an asset for a given period range using the variable-rate declining balance method.
If @{no_switch} is FALSE, the calculation switches to straight-line depreciation when depreciation is greater than the declining balance calculation.
MDURATION:the modified (Macaulay) duration of a security
yield:annual yield of security
frequency:number of interest payments per year
MDURATION calculates the modified (Macaulay) duration of a security.
@{frequency} may be 1 (annual), 2 (semi-annual), or 4 (quarterly).
If @{basis} is 0, then the US 30/360 method is used.
If @{basis} is 1, then actual number of days is used.
If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days.
If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days.
If @{basis} is 4, then the European 30/360 method is used.
=MDURATION(TODAY(),TODAY()+365,0.05,0.08,4)
=MDURATION(TODAY(),TODAY()+366,0.05,0.08,4)
CUMPRINC calculates the cumulative principal paid on a loan from @{start_period} to @{end_period}.
If @{type} is 0, the default, payment is at the end of each period.  If @{type} is 1, payment is at the beginning of each period.
CUMIPMT:cumulative interest payment
CUMIPMT calculates the cumulative interest paid on a loan from @{start_period} to @{end_period}.
COUPNUM calculates the number of coupons to be paid between the settlement and maturity dates, rounded up.
=COUPNUM(DATE(2002,11,29),DATE(2004,2,29),4,0)
=COUPNUM(DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE)
COUPPCD:the last coupon date before settlement
COUPPCD calculates the coupon date preceding settlement.
=COUPPCD(DATE(2002,11,29),DATE(2004,2,29),4,0)
=COUPPCD(DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE)
COUPNCD:the next coupon date after settlement
COUPNCD calculates the coupon date following settlement.
=COUPNCD(DATE(2002,11,29),DATE(2004,2,29),4,0)
=COUPNCD(DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE)
COUPDAYSNC:number of days from the settlement date to the next coupon period
COUPDAYSNC calculates number of days from the settlement date to the next coupon period.
=COUPDAYSNC(DATE(2002,11,29),DATE(2004,2,29),4,0)
=COUPDAYSNC(DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE)
COUPDAYS:number of days in the coupon period of the settlement date
COUPDAYS calculates the number of days in the coupon period of the settlement date.
=COUPDAYS(DATE(2002,11,29),DATE(2004,2,29),4,0)
=COUPDAYS(DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE)
COUPDAYBS:number of days from coupon period to settlement
COUPDAYBS calculates the number of days from the beginning of the coupon period to the settlement date.
=COUPDAYBS(DATE(2002,11,29),DATE(2004,2,29),4,0)
=COUPDAYBS(DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE)
AMORLINC:depreciation of an asset using French accounting conventions
purchase_date:date of purchase
first_period:end of first period
AMORLINC calculates the depreciation of an asset using French accounting conventions. Assets purchased in the middle of a period take prorated depreciation into account. 
Named for AMORtissement LINeaire Comptabilite.
=AMORLINC(2400,DATE(1998,8,19),DATE(1998,12,30),300,1,0.14,1)
AMORDEGRC:depreciation of an asset using French accounting conventions
AMORDEGRC calculates the depreciation of an asset using French accounting conventions. Assets purchased in the middle of a period take prorated depreciation into account. This is similar to AMORLINC, except that a depreciation coefficient is applied in the calculation depending on the life of the assets.
The depreciation coefficient used is:
1.0 for an expected lifetime less than 3 years,
1.5 for an expected lifetime of at least 3 years but less than 5 years,
2.0 for an expected lifetime of at least 5 years but at most 6 years,
2.5 for an expected lifetime of more than 6 years.
Special depreciation rules are applied for the last two periods resulting in a possible total depreciation exceeding the difference of @{cost} - @{salvage}.
Named for AMORtissement DEGRessif Comptabilite.
=AMORDEGRC(2400,DATE(1998,8,19),DATE(1998,12,30),300,1,0.14,1)
ODDLYIELD:yield of a security that has an odd last period
last_interest:last interest date
rate:nominal annual interest rate
redemption:amount received at maturity
ODDLYIELD calculates the yield of a security that pays periodic interest, but has an odd last period.
ODDLPRICE:price of a security that has an odd last period
ODDLPRICE calculates the price per $100 face value of a security that pays periodic interest, but has an odd last period.
ODDFYIELD:yield of a security that has an odd first period
first_interest:first interest date
ODDFYIELD calculates the yield of a security that pays periodic interest, but has an odd first period.
ODDFPRICE:price of a security that has an odd first period
ODDFPRICE calculates the price per $100 face value of a security that pays periodic interest, but has an odd first period.
YIELDMAT calculates the yield of a security for which the interest is paid at maturity date.
YIELDDISC:yield of a discounted security
YIELDDISC calculates the yield of a discounted security.
YIELD calculates the yield of a security that pays periodic interest.
PRICE calculates the price per $100 face value of a security that pays periodic interest.
EUROCONVERT:pre-Euro amount from one currency to another
source:three-letter source currency code
target:three-letter target currency code
full_precision:whether to provide the full precision; defaults to false
triangulation_precision:number of digits (at least 3) to be rounded to after conversion of the source currency to euro; defaults to no rounding
EUROCONVERT converts @{n} units of currency @{source} to currency @{target}.  The rates used are the official ones used on the introduction of the Euro.
If @{full_precision} is true, the result is not rounded; if it false the result is rounded to 0 or 2 decimals depending on the target currency; defaults to false.
@{source} and @{target} must be one of the currencies listed for the EURO function.
This function is not likely to be useful anymore.
=EUROCONVERT(1,"DEM","ITL",FALSE)
=EUROCONVERT(1,"DEM","ITL",FALSE,3)
currency:three-letter currency code
EURO calculates the national currency amount corresponding to 1 EUR for any of the national currencies that were replaced by the Euro on its introduction.
@{currency} must be one of ATS (Austria), BEF (Belgium), CYP (Cyprus), DEM (Germany), EEK (Estonia), ESP (Spain), EUR (Euro), FIM (Finland), FRF (France), GRD (Greece), IEP (Ireland), ITL (Italy), LUF (Luxembourg), MTL (Malta), NLG (The Netherlands), PTE (Portugal), SIT (Slovenia), or SKK (Slovakia).
schedule:range of interest rates
FVSCHEDULE calculates the future value of @{principal} after applying a range of interest rates with compounding.
=FVSCHEDULE(1000,{0.1;0.02;0.1})
G_DURATION:the duration of a investment
rate:effective annual interest rate
G_DURATION calculates the number of periods needed for an investment to attain a desired value.
G_DURATION is the OpenFormula function PDURATION.
DURATION:the (Macaulay) duration of a security
DURATION calculates the (Macaulay) duration of a security.
=DURATION(TODAY(),TODAY()+365,0.05,0.08,4)
=DURATION(TODAY(),TODAY()+366,0.05,0.08,4)
NPER calculates the number of periods of an investment based on periodic constant payments and a constant interest rate.
PPMT:interest payment for period
PPMT calculates the principal part of an annuity's payment for period number @{per}.
IPMT:interest payment for period
IPMT calculates the interest part of an annuity's payment for period number @{per}.
PMT calculates the payment amount for an annuity.
rate:effective interest rate per period
FV calculates the future value of @{pv} moved @{nper} periods into the future, assuming a periodic payment of @{pmt} and an interest rate of @{rate} per period.
guess:an estimate of what the result should be
XIRR calculates the annualized internal rate of return of a cash flow at arbitrary points in time.  @{values} lists the payments (negative values) and receipts (positive values) with one value for each entry in @{dates}.
The optional @{guess} is needed because there can be more than one valid result.  It defaults to 10%.
XNPV calculates the net present value of a cash flow at irregular times
NPV calculates the net present value of a cash flow.
PV calculates the present value of @{fv} which is @{nper} periods into the future, assuming a periodic payment of @{pmt} and an interest rate of @{rate} per period.
IRR calculates the internal rate of return of a cash flow with periodic payments.  @{values} lists the payments (negative values) and receipts (positive values) for each period.
RRI:equivalent interest rate for an investment increasing in value
RRI determines an equivalent interest rate for an investment that increases in value. The interest is compounded after each complete period.
Note that @{p} need not be an integer but for fractional value the calculated rate is only approximate.
This function is OpenFormula compatible.
RATE calculates the rate of return.
TBILLYIELD:yield of a treasury bill
TBILLYIELD calculates the yield of a treasury bill.
TBILLPRICE:price of a treasury bill
discount:annual rate at which to discount
TBILLPRICE calculates the price per $100 face value for a treasury bill.
TBILLEQ:bond-equivalent yield for a treasury bill
TBILLEQ calculates the bond-equivalent yield for a treasury bill.
MIRR:modified internal rate of return
finance_rate:interest rate for financing cost
reinvest_rate:interest rate for reinvestments
MIRR calculates the modified internal rate of return of a periodic cash flow.
DOLLARFR:convert to dollar fraction
decimal_dollar:amount to convert
DOLLARFR converts a decimal dollar amount into a fractional amount which is represented as the digits after the decimal point.  For example, 2/8 would be represented as .2 while 3/16 would be represented as .03. This is the inverse of the DOLLARDE function.
DOLLARDE:convert to decimal dollar amount
fractional_dollar:amount to convert
DOLLARDE converts a fractional dollar amount into a decimal amount.  This is the inverse of the DOLLARFR function.
SYD calculates the depreciation of an asset using the sum-of-years method.
SLN calculates the depreciation of an asset using the straight-line method.
DDB calculates the depreciation of an asset for a given period using the double-declining balance method.
month:number of months in first year of depreciation
DB calculates the depreciation of an asset for a given period using the fixed-declining balance method.
ISPMT:interest payment for period
ISPMT calculates the interest payment for period number @{per}.
nper:number of periods used for compounding
NOMINAL calculates the nominal interest rate from the effective rate.
EFFECT:effective interest rate
EFFECT calculates the effective interest rate using the formula (1+@{rate}/@{nper})^@{nper}-1.
DISC calculates the discount rate for a security.
@{redemption} is the redemption value per $100 face value.
PRICEMAT calculates the price per $100 face value of a bond that pays interest at maturity.
PRICEDISC calculates the price per $100 face value of a bond that does not pay interest at maturity.
RECEIVED:amount to be received at maturity
investment:amount paid on settlement
RECEIVED calculates the amount to be received when a security matures.
=RECEIVED(DATE(2008,4,15),DATE(2008,9,30),100000,4%,1)
INTRATE calculates the interest of a fully vested security.
=INTRATE(DATE(2008,4,15),DATE(2008,9,30),100000,103525,1)
ACCRINTM calculates the accrued interest from @{issue} to @{maturity}.
first_interest:date of first interest payment
par:par value, defaults to $1000
basis:calendar basis, defaults to 0
calc_method:calculation method, defaults to TRUE
If @{first_interest} < @{settlement} and @{calc_method} is TRUE, then ACCRINT returns the sum of the interest accrued in all coupon periods from @{issue}  date until @{settlement} date.
If @{first_interest} < @{settlement} and @{calc_method} is FALSE, then ACCRINT returns the sum of the interest accrued in all coupon periods from @{first_interest}  date until @{settlement} date.
Otherwise ACCRINT returns the sum of the interest accrued in all coupon periods from @{issue}  date until @{settlement} date.
@{frequency} must be one of 1, 2 or 4, but the exact value does not affect the result.
@{issue} must precede both @{first_interest} and @{settlement}.
K/@cb
A >@
;*2$"<
plugin.so.debug
7zXZ
,:VQ`1!2z
9u~=S
RjMj
}`8T
cbe>l
/}uK
2T?`x_
RS3WH$
19Jv
OPm<
u7t3"
b@)$$
sG)t
{Z}A
.6vFWhP
U+S"Y
Y!#vKM/
%># @
p]?ad
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.init
.plt
.plt.got
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.bss
.gnu_debuglink
.gnu_debugdata
