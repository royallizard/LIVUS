d(rJ
__gmon_start__
_init
_fini
__cxa_finalize
_Jv_RegisterClasses
ClassProvider_Create_ClassMI
ClassProvider_Create_MethodMI
_sfcb_trace_mask
_sfcb_debug
_sfcb_format_trace
_sfcb_trace
free
strcasecmp
UtilFactory
sfcb_mem_namespaces
malloc
ClassRegisterFT
MRWInit
__strdup
ClVerifyObjImplLevel
CMPIConstClassFT
mlogf
isAbstract
pReg
ClClassGetQualifierCount
ClClassGetQualifierAt
ClClassAddQualifierSpecial
ClClassGetPropertyCount
ClClassGetPropertyAt
ClClassAddProperty
ClObjectGetClSection
ClClassGetPropQualifierCount
ClClassGetPropQualifierAt
ClClassAddPropertyQualifierSpecial
ClClassGetMethodCount
ClClassGetMethodAt
ClClassAddMethod
ClClassGetMethQualifierCount
ClClassGetMethQualifierAt
ClClassAddMethodQualifier
ClClassGetMethParameterCount
ClClassGetMethParameterAt
ClClassAddMethParameter
ClClassGetMethParamQualifierCount
ClClassGetMethParamQualifierAt
ClClassAddMethParamQualifier
ClClassNew
ClClassFreeClass
wUnLock
MWriteUnlock
rUnLock
MReadUnlock
wLock
MWriteLock
rLock
MReadLock
colorTrace
interop_classes
libsfcBrokerCore.so.0
libssl.so.10
libcurl.so.4
libdl.so.2
libpthread.so.0
libc.so.6
_edata
__bss_start
_end
libsfcClassProviderMem.so.0
/usr/lib64/sfcb
GLIBC_2.2.5
%zH 
%rH 
%jH 
%bH 
%ZH 
%RH 
%JH 
%BH 
%:H 
%2H 
%*H 
%"H 
ATSubH
%|C 
=8C 
ffff.
ffffff.
ATUH
[]A\A]
l$ H
ATUH
[]A\A]
fff.
AWAVAUATUSH
t$8H
D$0H
L$0H
x[]A\A]A^A_
x[]A\A]A^A_
D$@H
D$(H
T$hH
D$`H
T$PH
T$HH
t$PL
\$XL
t$PH
\$Hf
|$`H
|$`H
D$ H
T$ I
\$XH
T$@H
L$(H
|$@H
L$ H
D$(H
T$@H
L$ H
L$ H
L$ H
L$ H
AUATUSH
t$,H
[]A\A]
|$0H
[]A\A]
[]A\A]
[]A\A]
[]A\A]
5w9 
t$,H
\$0H
l$8L
d$@L
l$HL
t$PH
t$lL
|$ H
|$(L
D$Xt A
\$xH
D$XI
D$`H
t$XH
t$XH
D$XH
AWAVI
AUATI
t$|H
|$0H
D$81
D$hI
D$pH
|$hH
|$hH
|$hH
T$pL
[]A\A]A^A_
D$hH
t$ H
AWAVI
ATUH
[]A\A]A^A_
[]A\A]A^A_
ATUH
t^f.
[]A\A]A^A_
[]A\A]A^A_
AWAVM
ATUL
[]A\A]A^A_
|$`H
D$hH
l$@H
L$`H
|$`E
D$HH
D$hH
|$ H
D$(H
l$HM
T$hH
AWAVAUI
ATUSH
D$(H
D$@H
|$0H
D$(H
D$HH
D$`L
L$HL
D$`D
L$0H
T$(H
t$@L
D$0H
D9d$8
D$pH
D$`H
D$xH
D$(H
D$PL
D$`H
T$xL
t$\H
t$pA
\$8D
t$01
t$0L
D$Hf
T$0M
t$8L
t$HL
D$09D$@
D$\9D$l
[]A\A]A^A_
t$<L
\$HH
l$PL
d$XL
l$`L
t$hL
|$pH
T$(L
D$(H
getClass
Entering: %s
classProviderMem.c
--- classname %s cReg %p
Leaving: %s
DMY_
root/pg_interop
root/interop
ClassProviderDeleteClass
ClassProviderGetClass
--- ClassName="%s"
--- Class found
--- Class not found
ClassProviderEnumClasss
CMPIInvocationFlags
ClassProviderEnumClassNames
$ClassProvider$
repCandidate
cim_indicationfilter
cim_indicationsubscription
loopOnChildCount
loopOnChildChars
--- class %s
ClassProviderInvokeMethod
getchildren
class
--- getchildren %s
getallchildren
classignoreprov
--- getallchildren %s
--- count %d
--- loop %s
getassocs
ischild
_startup
ClassProviderCreateClass
methodClassProvider
ClassClassProvider
--- %s is in wrong endian format - namespace skipped
--- %s contains non-class record(s) - namespace skipped
--- %s contains unsupported object implementation format (%d) - namespace skipped
--- %s contains invalid record(s) - namespace skipped
--- ClassProvider for %s (%d.%d-%d) using %ld bytes
--- ClassProvider for %s (no-version) using %ld bytes
--- ClassProvider: Invalid invokeMethod request %s
CIM_ListenerDestination
__Namespace
CIM_ObjectManager
CIM_WBEMService
CIM_ListenerDestinationCIMXML
CIM_IndicationSubscription
CIM_ManagedSystemElement
CIM_ServiceAccessPoint
CIM_IndicationFilter
CIM_InstModification
CIM_RegisteredProfile
CIM_ProcessIndication
CIM_SubProfileRequiresProfile
CIM_InstIndication
CIM_EnabledLogicalElement
CIM_ManagedElement
CIM_InstCreation
CIM_IndicationHandler
CIM_Namespace
CIM_Indication
CIM_ReferencedProfile
CIM_Dependency
CIM_RegisteredSubProfile
CIM_IndicationHandlerCIMXML
CIM_LogicalElement
CIM_Service
CIM_ObjectManagerCommunicationMechanism
sfcb-rep
Thu Jan 11 13:17:06 2007
%%%%H
CIM_ListenerDestination
CIM_ManagedElement
Abstract
Version
2.8.0
Description
The description of a CIM Listener destination. A CIM_Listener is an entity capable of receiving CIM Export Messages (e.g., Indications or responses to an asynchronous CIM Operation).
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. \nNote that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties.
Description
Description
The Description property provides a textual description of the object.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
SystemCreationClassName
Description
A System's CreationClassName. A CIM Listener destination is defined in context of a CIM_System (e.g., the sending system.
MaxLen
SystemName
Description
A System's Name. A CIM Listener destination is defined in context of a CIM_System (e.g., the sending system.
MaxLen
CreationClassName
Description
Indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, it allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
Name
Description
Indicates the name of the CIM Listener destination.
MaxLen
PersistenceType
Description
Describes the Persistence Type of the destination defined by this instance. If the value of PersistenceType is not specified, the value of PersistenceType MUST be treated as 2 ("Permanent"). A value of 2 ("Permanent") declares that the destination is always expected to be available (e.g., system log file). Inability to access this destination MUST be treated as an error condition. A value of 3 ("Transient") indicates that the destination is short-lived. Inability to access the destination MAY be treated as a normal termination condition. Subscriptions with "Transient" destinations MAY be deleted when the destination terminates or is no longer available.
ValueMap
Values
Other
Permanent
Transient
ModelCorrespondence
CIM_ListenerDestination.OtherPersistenceType
OtherPersistenceType
Description
A string describing ("Other") values for PersistenceType. This value MUST be set to a non NULL value when the PersistenceType is 1 ("Other"). For all other values of PersistenceType, the value of OtherPersistenceType MUST be NULL.
ModelCorrespondence
CIM_ListenerDestination.PersistenceType
 user-friend
__Namespace
Name
CIM_ObjectManager
CIM_WBEMService
Version
2.8.0
Description
A type of CIM_Service that defines the capabilities of the CIM Server in which this ObjectManager class resides. Details related to communicating with the ObjectManager, and the Manager's basic capabilities, are stored in instances of the associated CommunicationMechanism class available through the CommMechanismForManager association. It is assumed that Basic Read operations must be supported by all ObjectManager's in order to retrieve any additional detail.
TimeOfLastStateChange
Description
The date/time when the element's EnabledState last changed. If the state of the element has not changed and this property is populated, then it MUST be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property MUST NOT be updated.
EnabledDefault
Write
Description
An enumerated value indicating an administrator's default/startup configuration for an element's Enabled State. By default, the element is "Enabled" (value=2).
ValueMap
8..32767
32768..65535
Values
Enabled
Disabled
Not Applicable
Enabled but Offline
No Default
DMTF Reserved
Vendor Reserved
RequestedState
Description
RequestedState is an integer enumeration indicating the last requested or desired state for the element. The actual state of the element is represented by EnabledState. This property is provided to compare the last requested and current enabled/disabled states. Note that when EnabledState is set to 5 ("Not Applicable"), then this property has no meaning. By default, the element's RequestedState is 5 ("No Change"). Refer to the EnabledState's property Description for explanations of the values in the RequestedState enumeration. \n\nIt should be noted that there are two new values in RequestedState that build on the statuses of EnabledState. These are "Reboot" (10) and "Reset" (11). The former, Reboot, refers to doing a "Shut Down" and then moving to an "Enabled" state. The latter, Reset, indicates that the element is first "Disabled" and then "Enabled". The distinction between requesting "Shut Down" and "Disabled" should also be noted. The former, Shut Down, requests an orderly transition to the Disabled state, and MAY involve removing power, to completely erase any existing state. The latter, the Disabled state, requests an immediate disabling of the element, such that it will not execute or accept any commands or processing requests. \n\nThis property is set as the result of a method invocation (such as Start or StopService on CIM_Service), or may be overridden and defined as WRITEable in a subclass. The method approach is considered superior to a WRITEable property, since it allows an explicit invocation of the operation and the return of a result code.
ValueMap
32768..65535
Values
Enabled
Disabled
Shut Down
No Change
Offline
Test
Deferred
Quiesce
Reboot
Reset
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
OtherEnabledState
Description
A string describing the element's enabled/disabled state when the EnabledState property is set to 1 ("Other"). This property MUST be set to NULL when EnabledState is any value other than 1.
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
EnabledState
Description
EnabledState is an integer enumeration that indicates the enabled/disabled states of an element. It can also indicate the transitions between these requested states. For example, shutting down (value = 4) and starting (value=10) are transient states between enabled and disabled. The following text briefly summarizes the various enabled/disabled states: \nEnabled (2) indicates that the element is/could be executing commands, will process any queued commands, and queues new requests. \nDisabled (3) indicates that the element will not execute commands and will drop any new requests. \nShutting Down (4) indicates that the element is in the process of going to a Disabled state. \nNot Applicable (5) indicates the element doesn't support being enabled/disabled. \nEnabled but Offline (6) indicates that the element may be completing commands, and will drop any new requests. \nTest (7) indicates that the element is in a test state. \nDeferred (8) indicates that the element may be completing commands, but will queue any new requests. \nQuiesce (9) indicates that the element is enabled but in a restricted mode. The element's behavior is similar to the Enabled state, but it only processes a restricted set of commands. All other requests are queued. \nStarting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.
ValueMap
11..32767
32768..65535
Values
Unknown
Other
Enabled
Disabled
Shutting Down
Not Applicable
Enabled but Offline
In Test
Deferred
Quiesce
Starting
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.OtherEnabledState
Status
Description
A string indicating the current status of the object. Various operational and non-operational statuses are defined. This property is deprecated in lieu of OperationalStatus, which includes the same semantics in its enumeration. This change is made for 3 reasons: 1) Status is more correctly defined as an array. This overcomes the limitation of describing status via a single value, when it is really a multi-valued property (for example, an element may be OK AND Stopped. 2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values. And, 3) The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, Status was grandfathered into the Schema. Use of the Deprecated qualifier allows the maintenance of the existing property, but also permits an improved definition using OperationalStatus.
ValueMap
Error
Degraded
Unknown
Pred Fail
Starting
Stopping
Service
Stressed
NonRecover
No Contact
Lost Comm
Stopped
MaxLen
StatusDescriptions
Description
Strings describing the various OperationalStatus array values. For example, if "Stopping" is the value assigned to OperationalStatus, then this property may contain an explanation as to why an object is being stopped. Note that entries in this array are correlated with those at the same array index in OperationalStatus.
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.OperationalStatus
OperationalStatus
Description
Indicates the current status(es) of the element. Various health and operational statuses are defined. Many of the enumeration's values are self- explanatory. However, a few are not and are described in more detail. \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, etc. \n"Predictive Failure" indicates that an element is functioning nominally but predicting a failure in the near future. \n"In Service" describes an element being configured, maintained, cleaned, or otherwise administered. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is currently unreachable. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the element's state and configuration may need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Supporting Entity in Error" describes that this element may be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower layer networking problems. \n"Completed" indicates the element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can till if the complete operation passed (Completed with OK), and failure (Completed with Error). Completed with Degraded would imply the operation finished, but did not complete OK or report an error. \n"Power Mode" indicates the element has additional power model information contained in the Associated PowerManagementService association. \nOperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent approach to enumerations, to address implementation needs for an array property, and to provide a migration path from today's environment to the future. This change was not made earlier since it required the DEPRECATED qualifier. Due to the widespread use of the existing Status property in management applications, it is strongly RECOMMENDED that providers/instrumentation provide BOTH the Status and OperationalStatus properties. Further, the first value of OperationalStatus SHOULD contain the primary status for the element. When instrumented, Status (since it is single-valued) SHOULD also provide the primary status of the element.
ValueMap
0x8000..
Values
Unknown
Other
Degraded
Stressed
Predictive Failure
Error
Non-Recoverable Error
Starting
Stopping
Stopped
In Service
No Contact
Lost Communication
Aborted
Dormant
Supporting Entity in Error
Completed
Power Mode
DMTF Reserved
Vendor Reserved
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.StatusDescriptions
InstallDate
Description
A datetime value indicating when the object was installed. A lack of a value does not indicate that the object is not installed.
MappingStrings
MIF.DMTF|ComponentID|001.5
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
SystemCreationClassName
Description
The scoping System's CreationClassName.
MaxLen
SystemName
Description
The scoping System's Name.
MaxLen
CreationClassName
Description
CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
PrimaryOwnerName
Write
Description
The name of the primary owner for the service, if one is defined. The primary owner is the initial support contact for the Service.
MaxLen
MappingStrings
MIF.DMTF|General Information|001.3
PrimaryOwnerContact
Write
Description
A string that provides information on how the primary owner of the Service can be reached (e.g. phone number, email address, ...).
MaxLen
MappingStrings
MIF.DMTF|General Information|001.4
StartMode
Description
StartMode is a string value indicating whether the Service is automatically started by a System, Operating System, etc. or only started upon request. This property is deprecated in lieu of the EnabledDefault property inherited from EnabledLogicalElement, which addresses the same semantics. The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, StartMode was grandfathered into the Schema. Use of the Deprecated qualifier allows the maintenance of the existing property, but also permits an improved, clarified definition using EnabledDefault.
ValueMap
Automatic
Manual
MaxLen
Started
Description
Started is a boolean indicating whether the Service has been started (TRUE), or stopped (FALSE).
GatherStatisticalData
Write
Description
The GatherStatisticalData property is used to control the gathering of statistical data made accessible through the CIM_CIMOMStatisticalData objects. If set to true, the data is gathered and can be accessed. If false, the CIM_CIMOMStatisticalData instance MAY exist but MUST show zero values for the counter properties.
Name
MaxLen
Override
Name
Description
The Name property is used to uniquely identify a CIM Server. The CIM Server MUST ensure that this value is globally unique. In order to ensure uniqueness, this value SHOULD be constructed in the following manner. <Vendor ID>:<Unique ID> \n<Vendor ID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity or a registered ID that is assigned to the business entity that is defining the Name. (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) The purpose of <Vendor ID> is to ensure that <ID> is truly unique across multiple vendor implementations. If such a name is not used, the defining entity MUST assure that the <ID> portion of the Instance ID is unique when compared with other instance providers. For DMTF defined instances, the <Vendor ID> is 'CIM'. \n<Unique ID> MUST include a vendor specified unique identifier. \nNote: Name is semantically the same as InstanceID. In the next major version of the CIM Schema, Name will be renamed to InstanceID and become the only key of this class.
ElementName
Override
ElementName
Description
The ElmentName property is used as a name of the CIM Server for human interfaces. For example, "ACME CIM Server"). This property is required to support the SLP discovery mechanism. In the next major release this property MAY include the required qualifier.
Description
Override
Description
Description
The description property is used as a description of the CIM Server for human interfaces. For example, " ACME CIM Server version 2.2"). This property is required to support the SLP discovery mechanism. In the next major release this property MAY include the required qualifier.
RequestStateChange
RequestedState
TimeoutPeriod
StartService
StopService
CIM_WBEMService
CIM_Service
Abstract
Version
2.6.0
Description
An abstract class for WBEM services such as the ObjectManager (CIM Server), Providers, protocol adapters, or other pluggable components. A type of CIM_Service that provides associated capabilities and details about the communication capabilities, namespaces, etc. for a specific WBEMService.
Started
Description
Started is a boolean indicating whether the Service has been started (TRUE), or stopped (FALSE).
StartMode
Description
StartMode is a string value indicating whether the Service is automatically started by a System, Operating System, etc. or only started upon request. This property is deprecated in lieu of the EnabledDefault property inherited from EnabledLogicalElement, which addresses the same semantics. The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, StartMode was grandfathered into the Schema. Use of the Deprecated qualifier allows the maintenance of the existing property, but also permits an improved, clarified definition using EnabledDefault.
ValueMap
Automatic
Manual
MaxLen
PrimaryOwnerContact
Write
Description
A string that provides information on how the primary owner of the Service can be reached (e.g. phone number, email address, ...).
MaxLen
MappingStrings
MIF.DMTF|General Information|001.4
PrimaryOwnerName
Write
Description
The name of the primary owner for the service, if one is defined. The primary owner is the initial support contact for the Service.
MaxLen
MappingStrings
MIF.DMTF|General Information|001.3
Name
Override
Name
Description
The Name property uniquely identifies the Service and provides an indication of the functionality that is managed. This functionality is described in more detail in the object's Description property.
MaxLen
CreationClassName
Description
CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
SystemName
Description
The scoping System's Name.
MaxLen
SystemCreationClassName
Description
The scoping System's CreationClassName.
MaxLen
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. \nNote that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties.
Description
Description
The Description property provides a textual description of the object.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
InstallDate
Description
A datetime value indicating when the object was installed. A lack of a value does not indicate that the object is not installed.
MappingStrings
MIF.DMTF|ComponentID|001.5
OperationalStatus
Description
Indicates the current status(es) of the element. Various health and operational statuses are defined. Many of the enumeration's values are self- explanatory. However, a few are not and are described in more detail. \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, etc. \n"Predictive Failure" indicates that an element is functioning nominally but predicting a failure in the near future. \n"In Service" describes an element being configured, maintained, cleaned, or otherwise administered. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is currently unreachable. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the element's state and configuration may need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Supporting Entity in Error" describes that this element may be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower layer networking problems. \n"Completed" indicates the element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can till if the complete operation passed (Completed with OK), and failure (Completed with Error). Completed with Degraded would imply the operation finished, but did not complete OK or report an error. \n"Power Mode" indicates the element has additional power model information contained in the Associated PowerManagementService association. \nOperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent approach to enumerations, to address implementation needs for an array property, and to provide a migration path from today's environment to the future. This change was not made earlier since it required the DEPRECATED qualifier. Due to the widespread use of the existing Status property in management applications, it is strongly RECOMMENDED that providers/instrumentation provide BOTH the Status and OperationalStatus properties. Further, the first value of OperationalStatus SHOULD contain the primary status for the element. When instrumented, Status (since it is single-valued) SHOULD also provide the primary status of the element.
ValueMap
0x8000..
Values
Unknown
Other
Degraded
Stressed
Predictive Failure
Error
Non-Recoverable Error
Starting
Stopping
Stopped
In Service
No Contact
Lost Communication
Aborted
Dormant
Supporting Entity in Error
Completed
Power Mode
DMTF Reserved
Vendor Reserved
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.StatusDescriptions
StatusDescriptions
Description
Strings describing the various OperationalStatus array values. For example, if "Stopping" is the value assigned to OperationalStatus, then this property may contain an explanation as to why an object is being stopped. Note that entries in this array are correlated with those at the same array index in OperationalStatus.
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.OperationalStatus
Status
Description
A string indicating the current status of the object. Various operational and non-operational statuses are defined. This property is deprecated in lieu of OperationalStatus, which includes the same semantics in its enumeration. This change is made for 3 reasons: 1) Status is more correctly defined as an array. This overcomes the limitation of describing status via a single value, when it is really a multi-valued property (for example, an element may be OK AND Stopped. 2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values. And, 3) The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, Status was grandfathered into the Schema. Use of the Deprecated qualifier allows the maintenance of the existing property, but also permits an improved definition using OperationalStatus.
ValueMap
Error
Degraded
Unknown
Pred Fail
Starting
Stopping
Service
Stressed
NonRecover
No Contact
Lost Comm
Stopped
MaxLen
EnabledState
Description
EnabledState is an integer enumeration that indicates the enabled/disabled states of an element. It can also indicate the transitions between these requested states. For example, shutting down (value = 4) and starting (value=10) are transient states between enabled and disabled. The following text briefly summarizes the various enabled/disabled states: \nEnabled (2) indicates that the element is/could be executing commands, will process any queued commands, and queues new requests. \nDisabled (3) indicates that the element will not execute commands and will drop any new requests. \nShutting Down (4) indicates that the element is in the process of going to a Disabled state. \nNot Applicable (5) indicates the element doesn't support being enabled/disabled. \nEnabled but Offline (6) indicates that the element may be completing commands, and will drop any new requests. \nTest (7) indicates that the element is in a test state. \nDeferred (8) indicates that the element may be completing commands, but will queue any new requests. \nQuiesce (9) indicates that the element is enabled but in a restricted mode. The element's behavior is similar to the Enabled state, but it only processes a restricted set of commands. All other requests are queued. \nStarting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.
ValueMap
11..32767
32768..65535
Values
Unknown
Other
Enabled
Disabled
Shutting Down
Not Applicable
Enabled but Offline
In Test
Deferred
Quiesce
Starting
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.OtherEnabledState
OtherEnabledState
Description
A string describing the element's enabled/disabled state when the EnabledState property is set to 1 ("Other"). This property MUST be set to NULL when EnabledState is any value other than 1.
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
RequestedState
Description
RequestedState is an integer enumeration indicating the last requested or desired state for the element. The actual state of the element is represented by EnabledState. This property is provided to compare the last requested and current enabled/disabled states. Note that when EnabledState is set to 5 ("Not Applicable"), then this property has no meaning. By default, the element's RequestedState is 5 ("No Change"). Refer to the EnabledState's property Description for explanations of the values in the RequestedState enumeration. \n\nIt should be noted that there are two new values in RequestedState that build on the statuses of EnabledState. These are "Reboot" (10) and "Reset" (11). The former, Reboot, refers to doing a "Shut Down" and then moving to an "Enabled" state. The latter, Reset, indicates that the element is first "Disabled" and then "Enabled". The distinction between requesting "Shut Down" and "Disabled" should also be noted. The former, Shut Down, requests an orderly transition to the Disabled state, and MAY involve removing power, to completely erase any existing state. The latter, the Disabled state, requests an immediate disabling of the element, such that it will not execute or accept any commands or processing requests. \n\nThis property is set as the result of a method invocation (such as Start or StopService on CIM_Service), or may be overridden and defined as WRITEable in a subclass. The method approach is considered superior to a WRITEable property, since it allows an explicit invocation of the operation and the return of a result code.
ValueMap
32768..65535
Values
Enabled
Disabled
Shut Down
No Change
Offline
Test
Deferred
Quiesce
Reboot
Reset
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
EnabledDefault
Write
Description
An enumerated value indicating an administrator's default/startup configuration for an element's Enabled State. By default, the element is "Enabled" (value=2).
ValueMap
8..32767
32768..65535
Values
Enabled
Disabled
Not Applicable
Enabled but Offline
No Default
DMTF Reserved
Vendor Reserved
TimeOfLastStateChange
Description
The date/time when the element's EnabledState last changed. If the state of the element has not changed and this property is populated, then it MUST be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property MUST NOT be updated.
StopService
StartService
RequestStateChange
RequestedState
TimeoutPeriod
rent status 
CIM_ListenerDestinationCIMXML
CIM_ListenerDestination
Version
2.8.0
Description
CIM_ListenerDestinationCIMXML describes the destination for CIM Export Messages to be delivered via CIM-XML.
OtherPersistenceType
Description
A string describing ("Other") values for PersistenceType. This value MUST be set to a non NULL value when the PersistenceType is 1 ("Other"). For all other values of PersistenceType, the value of OtherPersistenceType MUST be NULL.
ModelCorrespondence
CIM_ListenerDestination.PersistenceType
PersistenceType
Description
Describes the Persistence Type of the destination defined by this instance. If the value of PersistenceType is not specified, the value of PersistenceType MUST be treated as 2 ("Permanent"). A value of 2 ("Permanent") declares that the destination is always expected to be available (e.g., system log file). Inability to access this destination MUST be treated as an error condition. A value of 3 ("Transient") indicates that the destination is short-lived. Inability to access the destination MAY be treated as a normal termination condition. Subscriptions with "Transient" destinations MAY be deleted when the destination terminates or is no longer available.
ValueMap
Values
Other
Permanent
Transient
ModelCorrespondence
CIM_ListenerDestination.OtherPersistenceType
Name
Description
Indicates the name of the CIM Listener destination.
MaxLen
CreationClassName
Description
Indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, it allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
SystemName
Description
A System's Name. A CIM Listener destination is defined in context of a CIM_System (e.g., the sending system.
MaxLen
SystemCreationClassName
Description
A System's CreationClassName. A CIM Listener destination is defined in context of a CIM_System (e.g., the sending system.
MaxLen
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
Description
Description
The Description property provides a textual description of the object.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. \nNote that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties.
Destination
Required
Description
The destination URL to which CIM-XML Export Messages are to be delivered.The scheme prefix MUST be consistent with the DMTF CIM-XML specifications.If a scheme prefix is not specified, the scheme "http:" MUST be assumed.
line string)
CIM_ObjectManagerCommunicationMechanism
CIM_ServiceAccessPoint
Version
2.7.0
Description
The class, ObjectManagerCommunicationMechanism, describes access to an ObjectManager. It describes a protocol and data encoding that can be used for communication. When all instances of this class are enumerated for an ObjectManager (using the CommMechanismForManager association), all possible protocol and encoding schemes will be known. Also, specific capabilities (for example, basic read or query) that are supported in the protocol/encoding are described - using the ProfilesSupported property.
Name
Override
Name
Description
The Name property uniquely identifies the ServiceAccessPoint and provides an indication of the functionality that is managed. This functionality is described in more detail in the object's Description property.
MaxLen
CreationClassName
Description
CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
SystemName
Description
The scoping System's Name.
MaxLen
SystemCreationClassName
Description
The scoping System's CreationClassName.
MaxLen
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. \nNote that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties.
Description
Description
The Description property provides a textual description of the object.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
InstallDate
Description
A datetime value indicating when the object was installed. A lack of a value does not indicate that the object is not installed.
MappingStrings
MIF.DMTF|ComponentID|001.5
OperationalStatus
Description
Indicates the current status(es) of the element. Various health and operational statuses are defined. Many of the enumeration's values are self- explanatory. However, a few are not and are described in more detail. \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, etc. \n"Predictive Failure" indicates that an element is functioning nominally but predicting a failure in the near future. \n"In Service" describes an element being configured, maintained, cleaned, or otherwise administered. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is currently unreachable. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the element's state and configuration may need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Supporting Entity in Error" describes that this element may be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower layer networking problems. \n"Completed" indicates the element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can till if the complete operation passed (Completed with OK), and failure (Completed with Error). Completed with Degraded would imply the operation finished, but did not complete OK or report an error. \n"Power Mode" indicates the element has additional power model information contained in the Associated PowerManagementService association. \nOperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent approach to enumerations, to address implementation needs for an array property, and to provide a migration path from today's environment to the future. This change was not made earlier since it required the DEPRECATED qualifier. Due to the widespread use of the existing Status property in management applications, it is strongly RECOMMENDED that providers/instrumentation provide BOTH the Status and OperationalStatus properties. Further, the first value of OperationalStatus SHOULD contain the primary status for the element. When instrumented, Status (since it is single-valued) SHOULD also provide the primary status of the element.
ValueMap
0x8000..
Values
Unknown
Other
Degraded
Stressed
Predictive Failure
Error
Non-Recoverable Error
Starting
Stopping
Stopped
In Service
No Contact
Lost Communication
Aborted
Dormant
Supporting Entity in Error
Completed
Power Mode
DMTF Reserved
Vendor Reserved
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.StatusDescriptions
StatusDescriptions
Description
Strings describing the various OperationalStatus array values. For example, if "Stopping" is the value assigned to OperationalStatus, then this property may contain an explanation as to why an object is being stopped. Note that entries in this array are correlated with those at the same array index in OperationalStatus.
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.OperationalStatus
Status
Description
A string indicating the current status of the object. Various operational and non-operational statuses are defined. This property is deprecated in lieu of OperationalStatus, which includes the same semantics in its enumeration. This change is made for 3 reasons: 1) Status is more correctly defined as an array. This overcomes the limitation of describing status via a single value, when it is really a multi-valued property (for example, an element may be OK AND Stopped. 2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values. And, 3) The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, Status was grandfathered into the Schema. Use of the Deprecated qualifier allows the maintenance of the existing property, but also permits an improved definition using OperationalStatus.
ValueMap
Error
Degraded
Unknown
Pred Fail
Starting
Stopping
Service
Stressed
NonRecover
No Contact
Lost Comm
Stopped
MaxLen
EnabledState
Description
EnabledState is an integer enumeration that indicates the enabled/disabled states of an element. It can also indicate the transitions between these requested states. For example, shutting down (value = 4) and starting (value=10) are transient states between enabled and disabled. The following text briefly summarizes the various enabled/disabled states: \nEnabled (2) indicates that the element is/could be executing commands, will process any queued commands, and queues new requests. \nDisabled (3) indicates that the element will not execute commands and will drop any new requests. \nShutting Down (4) indicates that the element is in the process of going to a Disabled state. \nNot Applicable (5) indicates the element doesn't support being enabled/disabled. \nEnabled but Offline (6) indicates that the element may be completing commands, and will drop any new requests. \nTest (7) indicates that the element is in a test state. \nDeferred (8) indicates that the element may be completing commands, but will queue any new requests. \nQuiesce (9) indicates that the element is enabled but in a restricted mode. The element's behavior is similar to the Enabled state, but it only processes a restricted set of commands. All other requests are queued. \nStarting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.
ValueMap
11..32767
32768..65535
Values
Unknown
Other
Enabled
Disabled
Shutting Down
Not Applicable
Enabled but Offline
In Test
Deferred
Quiesce
Starting
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.OtherEnabledState
OtherEnabledState
Description
A string describing the element's enabled/disabled state when the EnabledState property is set to 1 ("Other"). This property MUST be set to NULL when EnabledState is any value other than 1.
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
RequestedState
Description
RequestedState is an integer enumeration indicating the last requested or desired state for the element. The actual state of the element is represented by EnabledState. This property is provided to compare the last requested and current enabled/disabled states. Note that when EnabledState is set to 5 ("Not Applicable"), then this property has no meaning. By default, the element's RequestedState is 5 ("No Change"). Refer to the EnabledState's property Description for explanations of the values in the RequestedState enumeration. \n\nIt should be noted that there are two new values in RequestedState that build on the statuses of EnabledState. These are "Reboot" (10) and "Reset" (11). The former, Reboot, refers to doing a "Shut Down" and then moving to an "Enabled" state. The latter, Reset, indicates that the element is first "Disabled" and then "Enabled". The distinction between requesting "Shut Down" and "Disabled" should also be noted. The former, Shut Down, requests an orderly transition to the Disabled state, and MAY involve removing power, to completely erase any existing state. The latter, the Disabled state, requests an immediate disabling of the element, such that it will not execute or accept any commands or processing requests. \n\nThis property is set as the result of a method invocation (such as Start or StopService on CIM_Service), or may be overridden and defined as WRITEable in a subclass. The method approach is considered superior to a WRITEable property, since it allows an explicit invocation of the operation and the return of a result code.
ValueMap
32768..65535
Values
Enabled
Disabled
Shut Down
No Change
Offline
Test
Deferred
Quiesce
Reboot
Reset
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
EnabledDefault
Write
Description
An enumerated value indicating an administrator's default/startup configuration for an element's Enabled State. By default, the element is "Enabled" (value=2).
ValueMap
8..32767
32768..65535
Values
Enabled
Disabled
Not Applicable
Enabled but Offline
No Default
DMTF Reserved
Vendor Reserved
TimeOfLastStateChange
Description
The date/time when the element's EnabledState last changed. If the state of the element has not changed and this property is populated, then it MUST be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property MUST NOT be updated.
CommunicationMechanism
Required
Description
CommunicationMechanism describes an encoding and protocol which can be used to communicate with the ObjectManager. At this time, only one encoding and protocol are standardized by the DMTF - "CIM-XML". If this is supported by an ObjectManager, the specified string should be indicated. Other 'standard' strings may be defined. In addition, a vendor specific encoding/protocol string may be used.
ValueMap
Values
Unknown
Other
CIM-XML
ModelCorrespondence
CIM_ObjectManagerCommunicationMechanism.OtherCommunicationMechanismDescription
OtherCommunicationMechanismDescription
Description
A free-form string providing a description of the supported protocols when 1, "Other", is specified in the CommunicationMechanism.
ModelCorrespondence
CIM_ObjectManagerCommunicationMechanism.CommunicationMechanism
FunctionalProfilesSupported
Required
Description
Enumerated array describing the types of operations supported by the ObjectManager, using this encoding/protocol. The enumeration is based on the Functional Profiles defined for conformance in the DMTF document, Specification for CIM Operations over HTTP.
ValueMap
Values
Unknown
Other
Basic Read
Basic Write
Schema Manipulation
Instance Manipulation
Association Traversal
Query Execution
Qualifier Declaration
Indications
ArrayType
Indexed
ModelCorrespondence
CIM_ObjectManagerCommunicationMechanism.FunctionalProfileDescriptions
FunctionalProfileDescriptions
Description
Free-form strings providing descriptions of the supported operations of the object manager. Entries in the array are correlated with those in the ProfilesSupported array. An entry in this Descriptions array MUST be provided when 1, "Other", is specified in the FunctionalProfilesSupported array.
ArrayType
Indexed
ModelCorrespondence
CIM_ObjectManagerCommunicationMechanism.FunctionalProfilesSupported
MultipleOperationsSupported
Required
Description
Boolean indicating whether the ObjectManager supports multiple operation requests (TRUE) or only simple requests (FALSE).
AuthenticationMechanismsSupported
Required
Description
Enumerated array describing the types of authentication supported by the ObjectManager, using the encoding/protocol. specified in the property, CommunicationMechanism. The defined values represent the authentication defined in the DMTF document, Specification for CIM Operations over HTTP.
ValueMap
Values
Unknown
Other
None
Basic
Digest
ArrayType
Indexed
ModelCorrespondence
CIM_ObjectManagerCommunicationMechanism.AuthenticationMechanismDescriptions
AuthenticationMechanismDescriptions
Description
Free-form strings providing descriptions of the supported mechanisms. Entries in this array are correlated with those in the AuthenticationMechanismsSupported array. An entry in this Descriptions array MUST be provided when 1, "Other", is specified in AuthenticationMechanismsSupported.
ArrayType
Indexed
ModelCorrespondence
CIM_ObjectManagerCommunicationMechanism.AuthenticationMechanismsSupported
Version
Required
Description
Provides the protocol version for this service access point. Version information MUST be in the form of M.N, where M is a numeric that describes the Major version and N is a numeric that describes the minor version.
RequestStateChange
RequestedState
TimeoutPeriod
CIM_IndicationSubscription
Association
Version
2.7.0
Description
CIM_IndicationSubscription describes a flow of Indications. The flow is specified by the referenced Filter, and directed to the referenced destination or process in the Handler. Property values of the referenced CIM_IndicationFilter instance and CIM_ListenerDestination instance MAY significantly effect the definition of the subscription. E.g., a subscription associated with a "Transient" destination MAY be deleted when the destination terminates or is no longer available.
Filter
Description
The Filter that defines the criteria and data of the possible Indications of this subscription.
Handler
Description
The Handler addressing delivery of the possible Indications of this subscription.
OnFatalErrorPolicy
Description
Defines the desired behavior for a subscription when a fatal error occurs in one of the Indication processing subcomponents (e.g., Indication processor, Indication or instance provider, or Indication handler) and the Indication cannot be successfully sent. Specifically, a failure implies that some aspect of Indication generation, processing or dispatch is no longer functioning and Indications may be lost. If the value of OnFatalErrorPolicy is 2 ("Ignore") or not set (NULL), the subscription MUST continue to be processed in a 'best effort' mode. This mode of operation can lead to unpredictable, and potentially misleading results, because Indications may be lost. If the value is 3 ("Disable"), the subscription MUST be disabled. With this policy, no new Indications will be generated or dispatched until the subscription is explicitly enabled. This is accomplished via the property, SubscriptionState. If the value is 4 ("Remove"), the subscription MUST be deleted. Selecting this policy has the same effect as issuing a DeleteInstance operation on this subscription instance.
ValueMap
Values
Other
Ignore
Disable
Remove
OtherOnFatalErrorPolicy
Description
A string defining "Other" values for OnFatalErrorPolicy. This value MUST be set to a non NULL value when OnFatalErrorPolicy is set to a value of 1 ("Other"). For all other values, the OtherOnFatalErrorPolicy MUST be NULL.
FailureTriggerTimeInterval
Description
The FailureTriggerTimeInterval is used by the client to specify a recommended minimum delay before the OnFatalErrorPolicy is implemented.
Units
Seconds
SubscriptionState
Write
Description
Indicates the current processing state of the subscription.
ValueMap
Values
Unknown
Other
Enabled
Enabled Degraded
Disabled
OtherSubscriptionState
Description
A string defining "Other" values for SubscriptionState. This value MUST be set to a non NULL value when SubscriptionState is set to a value of 1 ("Other"). For all other values, the OtherSubscriptionState MUST be NULL.
TimeOfLastStateChange
Description
Date and time of the last state change. This value is based on the notion of local date and time of the Managed System Element running the Indication processing subcomponents.
SubscriptionDuration
Write
Description
SubscriptionDuration defines the desired length of the subscription. Indications generated after the duration of the subscription has exceeded SubscriptionDuration MUST NOT be sent. The duration of a subscription MAY be changed by modifying this property. An expired subscription MAY be deleted and MUST NOT be modified. If the value of SubscriptionDuration is not set, the subscription MUST be treated as having no expiration date.
Units
Seconds
SubscriptionStartTime
Description
SubscriptionStartTime is the time the subscription was started. The value of this property is computed based on the notion of date and time of the ManagedSystemElement running the Indication processing subcomponents.
SubscriptionTimeRemaining
Description
SubscriptionTimeRemaining is a computed value that provides a snapshot of the time remaining in the Subscription.
Units
Seconds
RepeatNotificationPolicy
Description
The RepeatNotificationPolicy property defines the desired behavior for handling Indications that report the occurrence of the same underlying event (e.g., the disk is still generating I/O errors and has not yet been repaired). The defined semantics for the RepeatNotificationCount, RepeatNotificationInterval, and RepeatNotificationGap properties depend on the value of RepeatNotificationPolicy, but values for these properties MUST be set if the property is defined for the selected policy. If the value of RepeatNotificationPolicy is 0 ("Unknown") or not set, no special processing for repeat Indications is defined by the subscription. The semantics associated with the handling of repeat Indications MAY be defined by the Indication processing subcomponents. If the value of RepeatNotificationPolicy is 2 ("None"), special processing of repeat Indications MUST NOT be performed. If the value is 3 ("Suppress") the first RepeatNotificationCount Indications, describing the same event, MUST be sent and all subsequent Indications for this event suppressed for the remainder of the time interval RepeatNotificationInterval. A new interval starts when the next Indication for this event is received. If the value of RepeatNotificationPolicy is 4 ("Delay") and an Indication is received, this Indication MUST be suppressed if, including this Indication, RepeatNoticationCount or fewer Indications for this event have been received during the prior time interval defined by RepeatNotificationInterval. If this Indication is the RepeatNotificationCount + 1 Indication, this Indication MUST be sent and all subsequent Indications for this event ignored until the RepeatNotificationGap has elapsed. A RepeatNotificationInterval MAY NOT overlap a RepeatNotificationGap time interval.
ValueMap
Values
Unknown
Other
None
Suppress
Delay
OtherRepeatNotificationPolicy
Description
A string defining "Other" values for RepeatNotificationPolicy. This value MUST be set to a non NULL value when RepeatNotificationPolicy is set to a value of 1 ("Other"). For all other values, the OtherRepeatNotificationPolicy MUST be NULL.
RepeatNotificationInterval
Description
Defines the time interval for the repeat notification policy calculation.
Units
Seconds
RepeatNotificationGap
Description
Defines the gap interval for the repeat notification policy calculation.
Units
Seconds
RepeatNotificationCount
Description
Defines the count property for the repeat notification policy calculation.
g and Indica
CIM_ManagedSystemElement
CIM_ManagedElement
Abstract
Version
2.8.0
Description
CIM_ManagedSystemElement is the base class for the System Element hierarchy. Any distinguishable component of a System is a candidate for inclusion in this class. Examples of system components include: \n- software components such as application servers, databases, and applications \n- operating system components such as files, processes, and threads \n- device components such as disk drives, controllers, processors, and printers \n- physical components such as chips and cards.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. \nNote that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties.
Description
Description
The Description property provides a textual description of the object.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
InstallDate
Description
A datetime value indicating when the object was installed. A lack of a value does not indicate that the object is not installed.
MappingStrings
MIF.DMTF|ComponentID|001.5
Name
Description
The Name property defines the label by which the object is known. When subclassed, the Name property can be overridden to be a Key property.
MaxLen
OperationalStatus
Description
Indicates the current status(es) of the element. Various health and operational statuses are defined. Many of the enumeration's values are self- explanatory. However, a few are not and are described in more detail. \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, etc. \n"Predictive Failure" indicates that an element is functioning nominally but predicting a failure in the near future. \n"In Service" describes an element being configured, maintained, cleaned, or otherwise administered. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is currently unreachable. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the element's state and configuration may need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Supporting Entity in Error" describes that this element may be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower layer networking problems. \n"Completed" indicates the element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can till if the complete operation passed (Completed with OK), and failure (Completed with Error). Completed with Degraded would imply the operation finished, but did not complete OK or report an error. \n"Power Mode" indicates the element has additional power model information contained in the Associated PowerManagementService association. \nOperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent approach to enumerations, to address implementation needs for an array property, and to provide a migration path from today's environment to the future. This change was not made earlier since it required the DEPRECATED qualifier. Due to the widespread use of the existing Status property in management applications, it is strongly RECOMMENDED that providers/instrumentation provide BOTH the Status and OperationalStatus properties. Further, the first value of OperationalStatus SHOULD contain the primary status for the element. When instrumented, Status (since it is single-valued) SHOULD also provide the primary status of the element.
ValueMap
0x8000..
Values
Unknown
Other
Degraded
Stressed
Predictive Failure
Error
Non-Recoverable Error
Starting
Stopping
Stopped
In Service
No Contact
Lost Communication
Aborted
Dormant
Supporting Entity in Error
Completed
Power Mode
DMTF Reserved
Vendor Reserved
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.StatusDescriptions
StatusDescriptions
Description
Strings describing the various OperationalStatus array values. For example, if "Stopping" is the value assigned to OperationalStatus, then this property may contain an explanation as to why an object is being stopped. Note that entries in this array are correlated with those at the same array index in OperationalStatus.
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.OperationalStatus
Status
Description
A string indicating the current status of the object. Various operational and non-operational statuses are defined. This property is deprecated in lieu of OperationalStatus, which includes the same semantics in its enumeration. This change is made for 3 reasons: 1) Status is more correctly defined as an array. This overcomes the limitation of describing status via a single value, when it is really a multi-valued property (for example, an element may be OK AND Stopped. 2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values. And, 3) The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, Status was grandfathered into the Schema. Use of the Deprecated qualifier allows the maintenance of the existing property, but also permits an improved definition using OperationalStatus.
ValueMap
Error
Degraded
Unknown
Pred Fail
Starting
Stopping
Service
Stressed
NonRecover
No Contact
Lost Comm
Stopped
MaxLen
====
CIM_ServiceAccessPoint
CIM_EnabledLogicalElement
Abstract
Version
2.6.0
Description
CIM_ServiceAccessPoint represents the ability to utilize or invoke a Service. Access points represent that a Service is made available to other entities for use.
TimeOfLastStateChange
Description
The date/time when the element's EnabledState last changed. If the state of the element has not changed and this property is populated, then it MUST be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property MUST NOT be updated.
EnabledDefault
Write
Description
An enumerated value indicating an administrator's default/startup configuration for an element's Enabled State. By default, the element is "Enabled" (value=2).
ValueMap
8..32767
32768..65535
Values
Enabled
Disabled
Not Applicable
Enabled but Offline
No Default
DMTF Reserved
Vendor Reserved
RequestedState
Description
RequestedState is an integer enumeration indicating the last requested or desired state for the element. The actual state of the element is represented by EnabledState. This property is provided to compare the last requested and current enabled/disabled states. Note that when EnabledState is set to 5 ("Not Applicable"), then this property has no meaning. By default, the element's RequestedState is 5 ("No Change"). Refer to the EnabledState's property Description for explanations of the values in the RequestedState enumeration. \n\nIt should be noted that there are two new values in RequestedState that build on the statuses of EnabledState. These are "Reboot" (10) and "Reset" (11). The former, Reboot, refers to doing a "Shut Down" and then moving to an "Enabled" state. The latter, Reset, indicates that the element is first "Disabled" and then "Enabled". The distinction between requesting "Shut Down" and "Disabled" should also be noted. The former, Shut Down, requests an orderly transition to the Disabled state, and MAY involve removing power, to completely erase any existing state. The latter, the Disabled state, requests an immediate disabling of the element, such that it will not execute or accept any commands or processing requests. \n\nThis property is set as the result of a method invocation (such as Start or StopService on CIM_Service), or may be overridden and defined as WRITEable in a subclass. The method approach is considered superior to a WRITEable property, since it allows an explicit invocation of the operation and the return of a result code.
ValueMap
32768..65535
Values
Enabled
Disabled
Shut Down
No Change
Offline
Test
Deferred
Quiesce
Reboot
Reset
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
OtherEnabledState
Description
A string describing the element's enabled/disabled state when the EnabledState property is set to 1 ("Other"). This property MUST be set to NULL when EnabledState is any value other than 1.
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
EnabledState
Description
EnabledState is an integer enumeration that indicates the enabled/disabled states of an element. It can also indicate the transitions between these requested states. For example, shutting down (value = 4) and starting (value=10) are transient states between enabled and disabled. The following text briefly summarizes the various enabled/disabled states: \nEnabled (2) indicates that the element is/could be executing commands, will process any queued commands, and queues new requests. \nDisabled (3) indicates that the element will not execute commands and will drop any new requests. \nShutting Down (4) indicates that the element is in the process of going to a Disabled state. \nNot Applicable (5) indicates the element doesn't support being enabled/disabled. \nEnabled but Offline (6) indicates that the element may be completing commands, and will drop any new requests. \nTest (7) indicates that the element is in a test state. \nDeferred (8) indicates that the element may be completing commands, but will queue any new requests. \nQuiesce (9) indicates that the element is enabled but in a restricted mode. The element's behavior is similar to the Enabled state, but it only processes a restricted set of commands. All other requests are queued. \nStarting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.
ValueMap
11..32767
32768..65535
Values
Unknown
Other
Enabled
Disabled
Shutting Down
Not Applicable
Enabled but Offline
In Test
Deferred
Quiesce
Starting
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.OtherEnabledState
Status
Description
A string indicating the current status of the object. Various operational and non-operational statuses are defined. This property is deprecated in lieu of OperationalStatus, which includes the same semantics in its enumeration. This change is made for 3 reasons: 1) Status is more correctly defined as an array. This overcomes the limitation of describing status via a single value, when it is really a multi-valued property (for example, an element may be OK AND Stopped. 2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values. And, 3) The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, Status was grandfathered into the Schema. Use of the Deprecated qualifier allows the maintenance of the existing property, but also permits an improved definition using OperationalStatus.
ValueMap
Error
Degraded
Unknown
Pred Fail
Starting
Stopping
Service
Stressed
NonRecover
No Contact
Lost Comm
Stopped
MaxLen
StatusDescriptions
Description
Strings describing the various OperationalStatus array values. For example, if "Stopping" is the value assigned to OperationalStatus, then this property may contain an explanation as to why an object is being stopped. Note that entries in this array are correlated with those at the same array index in OperationalStatus.
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.OperationalStatus
OperationalStatus
Description
Indicates the current status(es) of the element. Various health and operational statuses are defined. Many of the enumeration's values are self- explanatory. However, a few are not and are described in more detail. \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, etc. \n"Predictive Failure" indicates that an element is functioning nominally but predicting a failure in the near future. \n"In Service" describes an element being configured, maintained, cleaned, or otherwise administered. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is currently unreachable. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the element's state and configuration may need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Supporting Entity in Error" describes that this element may be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower layer networking problems. \n"Completed" indicates the element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can till if the complete operation passed (Completed with OK), and failure (Completed with Error). Completed with Degraded would imply the operation finished, but did not complete OK or report an error. \n"Power Mode" indicates the element has additional power model information contained in the Associated PowerManagementService association. \nOperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent approach to enumerations, to address implementation needs for an array property, and to provide a migration path from today's environment to the future. This change was not made earlier since it required the DEPRECATED qualifier. Due to the widespread use of the existing Status property in management applications, it is strongly RECOMMENDED that providers/instrumentation provide BOTH the Status and OperationalStatus properties. Further, the first value of OperationalStatus SHOULD contain the primary status for the element. When instrumented, Status (since it is single-valued) SHOULD also provide the primary status of the element.
ValueMap
0x8000..
Values
Unknown
Other
Degraded
Stressed
Predictive Failure
Error
Non-Recoverable Error
Starting
Stopping
Stopped
In Service
No Contact
Lost Communication
Aborted
Dormant
Supporting Entity in Error
Completed
Power Mode
DMTF Reserved
Vendor Reserved
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.StatusDescriptions
InstallDate
Description
A datetime value indicating when the object was installed. A lack of a value does not indicate that the object is not installed.
MappingStrings
MIF.DMTF|ComponentID|001.5
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
Description
Description
The Description property provides a textual description of the object.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. \nNote that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties.
SystemCreationClassName
Description
The scoping System's CreationClassName.
MaxLen
SystemName
Description
The scoping System's Name.
MaxLen
CreationClassName
Description
CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
Name
Override
Name
Description
The Name property uniquely identifies the ServiceAccessPoint and provides an indication of the functionality that is managed. This functionality is described in more detail in the object's Description property.
MaxLen
RequestStateChange
RequestedState
TimeoutPeriod
(9) indicate
CIM_IndicationFilter
CIM_ManagedElement
Version
2.6.0
Description
CIM_IndicationFilter defines the criteria for generating an Indication and what data should be returned in the Indication. It is derived from CIM_ManagedElement to allow modeling the dependency of the filter on a specific service.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. \nNote that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties.
Description
Description
The Description property provides a textual description of the object.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
SystemCreationClassName
Description
A System's CreationClassName. The Filter is defined in the context of a CIM_System, where it is hosted or to which it applies. In a future release, a weak relationship will be explicitly added to the model. This is not done now to allow further refinement of the Filter definition and its inheritance tree. Keys are defined now to allow the class to be instantiated.
MaxLen
SystemName
Description
A System's Name. The Filter is defined in the context of a CIM_System, where it is hosted or to which it applies. In a future release, a weak relationship will be explicitly added to the model. This is not done now to allow further refinement of the Filter definition and its inheritance tree. Keys are defined now to allow the class to be instantiated.
MaxLen
CreationClassName
Description
Indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, it allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
Name
Description
The name of the filter.
SourceNamespace
Description
The path to a local namespace where the Indications originate. If NULL, the namespace of the Filter registration is assumed.
Query
Required
Description
A query expression that defines the condition(s) under which Indications will be generated. For some Indication classes, the query expression may also define the instance properties to be copied to the CIM_InstIndication's SourceInstance and PreviousInstance properties. Query language semantics include projection (e.g., Select), range (e.g., From) and predicate (e.g., Where).
ModelCorrespondence
CIM_IndicationFilter.QueryLanguage
QueryLanguage
Required
Description
The language in which the query is expressed.
esti
CIM_InstModification
CIM_InstIndication
Indication
Version
2.6.0
Description
CIM_InstModification notifies when an instance is modified.
SourceInstance
Required
Description
A copy of the instance that changed to generate the Indication. SourceInstance contains the current values of the properties selected by the Indication Filter's Query. In the case of CIM_InstDeletion, the property values are copied before the instance is deleted.
IndicationIdentifier
Description
An identifier for the Indication. This property is similar to a key value in that it can be used for identification, when correlating Indications (see the CorrelatedIndications array). Its value SHOULD be unique as long as Alert correlations are reported, but MAY be reused or left NULL if no future Indications will reference it in their CorrelatedIndications array.
MappingStrings
Recommendation.ITU|X733.Notification identifier
CorrelatedIndications
Description
A list of IndicationIdentifiers whose notifications are correlated with (related to) this one.
MappingStrings
Recommendation.ITU|X733.Correlated notifications
IndicationTime
Description
The time and date of creation of the Indication. The property may be set to NULL if the entity creating the Indication is not capable of determing this information. Note that IndicationTime may be the same for two Indications that are generated in rapid succession.
PreviousInstance
Required
Description
A copy of the 'previous' instance whose change generated the Indication. PreviousInstance contains 'older' values of an instance's properties (as compared to SourceInstance), selected by the IndicationFilter's Query.
es when an i
CIM_RegisteredProfile
CIM_ManagedElement
Version
2.8.0
Description
A RegisteredProfile describes a set of CIM Schema classes with required properties and/or methods, necessary to manage a real-world entity or to support a usage scenario, in an interoperable fashion. RegisteredProfiles can be defined by the DMTF or other standards organizations. Note that this class should not be confused with CIM_Profile, which collects SettingData instances, to be applied as a 'configuration profile' for an element. \nA RegisteredProfile is a named 'standard' for CIM-based management of a particular System, subsystem, Service or other entity, for a specified set of uses. It is a complete, standalone definition, as opposed to the subclass RegisteredSubProfile, which requires a scoping profile for context. \nThe uses for a RegisteredProfile or SubProfile MUST be specified in the document that defines the profile. Examples of Profiles are to manage various aspects of an Operating System, Storage Array, or Database. The name of the profile is defined and scoped by its authoring organization.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. \nNote that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties.
Description
Description
The Description property provides a textual description of the object.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
InstanceID
Description
Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following 'preferred' algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon ':', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority. (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> MUST NOT contain a colon (':'). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the organizational entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above 'preferred' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instance's NameSpace. \nFor DMTF defined instances, the 'preferred' algorithm MUST be used with the <OrgID> set to 'CIM'.
RegisteredOrganization
Required
Description
The organization that defines this profile.
ValueMap
Values
Other
DMTF
CompTIA
Consortium for Service Innovation
FAST
INTAP
itSMF
Northwest Energy Efficiency Alliance
SNIA
TM Forum
The Open Group
ANSI
IEEE
IETF
INCITS
ModelCorrespondence
CIM_RegisteredProfile.OtherRegisteredOrganization
OtherRegisteredOrganization
Description
A free-form string providing a description of the organization when 1, "Other", is specified for the RegisteredOrganization.
MaxLen
ModelCorrespondence
CIM_RegisteredProfile.RegisteredOrganization
RegisteredName
Required
Description
The name of this registered profile. Since multiple versions can exist for the same RegisteredName, the combination of RegisteredName, RegisteredOrganization, and RegisteredVersion MUST uniquely identify the registered profile within the scope of the organization.
MaxLen
RegisteredVersion
Required
Description
The version of this profile. The string representing the version MUST be in the form: \nM + "." + N + "." + U \nWhere: \nM - The major version (in numeric form) describing the profile's creation or last modification. \nN - The minor version (in numeric form) describing the profile's creation or last modification. \nU - The update (e.g. errata, patch, ..., in numeric form) describing the profile's creation or last modification.
AdvertiseTypes
Required
Description
This property signifies the advertisement for the profile information. It is used by the advertising services of the WBEM infrastructure to determine what should be advertised, via what mechanisms. The property is an array so that the profile MAY be advertised using several mechanisms. Note: If this property is null/uninitialized, this is equivalent to specifying the value 2, "Not Advertised".
ValueMap
Values
Other
Not Advertised
ArrayType
Indexed
ModelCorrespondence
CIM_RegisteredProfile.AdvertiseTypeDescriptions
AdvertiseTypeDescriptions
Description
A free-form string providing additional information related to the AdvertiseType. A description MUST be provided when the AdvertiseType is 1, "Other". An entry in this array corresponds to the entry in the AdvertiseTypes array at the same index. It is not expected that additional descriptions are needed if the Type is set to "Not Advertised" or "SLP". However, as the SLP template expands, or as other advertisement mechanisms are defined, support for additional descriptions may be needed. This array is defined to support this.
ArrayType
Indexed
ModelCorrespondence
CIM_RegisteredProfile.AdvertiseTypes
CIM_ProcessIndication
CIM_Indication
Indication
Abstract
Version
2.6.0
Description
An abstract superclass for specialized Indication classes, addressing specific changes and alerts published by providers and instrumentation. Subclasses include AlertIndication (with properties such as PerceivedSeverity and ProbableCause), and SNMPTrapIndication (which recasts Traps as CIM indications).
IndicationTime
Description
The time and date of creation of the Indication. The property may be set to NULL if the entity creating the Indication is not capable of determing this information. Note that IndicationTime may be the same for two Indications that are generated in rapid succession.
CorrelatedIndications
Description
A list of IndicationIdentifiers whose notifications are correlated with (related to) this one.
MappingStrings
Recommendation.ITU|X733.Correlated notifications
IndicationIdentifier
Description
An identifier for the Indication. This property is similar to a key value in that it can be used for identification, when correlating Indications (see the CorrelatedIndications array). Its value SHOULD be unique as long as Alert correlations are reported, but MAY be reused or left NULL if no future Indications will reference it in their CorrelatedIndications array.
MappingStrings
Recommendation.ITU|X733.Notification identifier
this subscri
CIM_SubProfileRequiresProfile
CIM_ReferencedProfile
Association
Version
2.8.0
Description
A subprofile requires another RegisteredProfile for context. This association mandates the scoping relationship between a subprofile and its scoping profile.
Antecedent
Override
Antecedent
Description
The RegisteredProfile that is referenced/required by the subprofile.
Dependent
Override
Dependent
Description
A RegisteredSubProfile that requires a scoping profile, for context.
Crea
CIM_InstIndication
CIM_Indication
Indication
Abstract
Version
2.6.0
Description
CIM_InstIndication is an abstract superclass describing changes to instances. Subclasses represent specific types of change notifications, such as instance creation, deletion and modification.
IndicationTime
Description
The time and date of creation of the Indication. The property may be set to NULL if the entity creating the Indication is not capable of determing this information. Note that IndicationTime may be the same for two Indications that are generated in rapid succession.
CorrelatedIndications
Description
A list of IndicationIdentifiers whose notifications are correlated with (related to) this one.
MappingStrings
Recommendation.ITU|X733.Correlated notifications
IndicationIdentifier
Description
An identifier for the Indication. This property is similar to a key value in that it can be used for identification, when correlating Indications (see the CorrelatedIndications array). Its value SHOULD be unique as long as Alert correlations are reported, but MAY be reused or left NULL if no future Indications will reference it in their CorrelatedIndications array.
MappingStrings
Recommendation.ITU|X733.Notification identifier
SourceInstance
Required
Description
A copy of the instance that changed to generate the Indication. SourceInstance contains the current values of the properties selected by the Indication Filter's Query. In the case of CIM_InstDeletion, the property values are copied before the instance is deleted.
CIM_EnabledLogicalElement
CIM_LogicalElement
Abstract
Version
2.8.0
Description
This class extends LogicalElement to abstract the concept of an element that is enabled and disabled, such as a LogicalDevice or a ServiceAccessPoint.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. \nNote that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties.
Description
Description
The Description property provides a textual description of the object.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
InstallDate
Description
A datetime value indicating when the object was installed. A lack of a value does not indicate that the object is not installed.
MappingStrings
MIF.DMTF|ComponentID|001.5
Name
Description
The Name property defines the label by which the object is known. When subclassed, the Name property can be overridden to be a Key property.
MaxLen
OperationalStatus
Description
Indicates the current status(es) of the element. Various health and operational statuses are defined. Many of the enumeration's values are self- explanatory. However, a few are not and are described in more detail. \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, etc. \n"Predictive Failure" indicates that an element is functioning nominally but predicting a failure in the near future. \n"In Service" describes an element being configured, maintained, cleaned, or otherwise administered. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is currently unreachable. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the element's state and configuration may need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Supporting Entity in Error" describes that this element may be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower layer networking problems. \n"Completed" indicates the element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can till if the complete operation passed (Completed with OK), and failure (Completed with Error). Completed with Degraded would imply the operation finished, but did not complete OK or report an error. \n"Power Mode" indicates the element has additional power model information contained in the Associated PowerManagementService association. \nOperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent approach to enumerations, to address implementation needs for an array property, and to provide a migration path from today's environment to the future. This change was not made earlier since it required the DEPRECATED qualifier. Due to the widespread use of the existing Status property in management applications, it is strongly RECOMMENDED that providers/instrumentation provide BOTH the Status and OperationalStatus properties. Further, the first value of OperationalStatus SHOULD contain the primary status for the element. When instrumented, Status (since it is single-valued) SHOULD also provide the primary status of the element.
ValueMap
0x8000..
Values
Unknown
Other
Degraded
Stressed
Predictive Failure
Error
Non-Recoverable Error
Starting
Stopping
Stopped
In Service
No Contact
Lost Communication
Aborted
Dormant
Supporting Entity in Error
Completed
Power Mode
DMTF Reserved
Vendor Reserved
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.StatusDescriptions
StatusDescriptions
Description
Strings describing the various OperationalStatus array values. For example, if "Stopping" is the value assigned to OperationalStatus, then this property may contain an explanation as to why an object is being stopped. Note that entries in this array are correlated with those at the same array index in OperationalStatus.
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.OperationalStatus
Status
Description
A string indicating the current status of the object. Various operational and non-operational statuses are defined. This property is deprecated in lieu of OperationalStatus, which includes the same semantics in its enumeration. This change is made for 3 reasons: 1) Status is more correctly defined as an array. This overcomes the limitation of describing status via a single value, when it is really a multi-valued property (for example, an element may be OK AND Stopped. 2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values. And, 3) The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, Status was grandfathered into the Schema. Use of the Deprecated qualifier allows the maintenance of the existing property, but also permits an improved definition using OperationalStatus.
ValueMap
Error
Degraded
Unknown
Pred Fail
Starting
Stopping
Service
Stressed
NonRecover
No Contact
Lost Comm
Stopped
MaxLen
EnabledState
Description
EnabledState is an integer enumeration that indicates the enabled/disabled states of an element. It can also indicate the transitions between these requested states. For example, shutting down (value = 4) and starting (value=10) are transient states between enabled and disabled. The following text briefly summarizes the various enabled/disabled states: \nEnabled (2) indicates that the element is/could be executing commands, will process any queued commands, and queues new requests. \nDisabled (3) indicates that the element will not execute commands and will drop any new requests. \nShutting Down (4) indicates that the element is in the process of going to a Disabled state. \nNot Applicable (5) indicates the element doesn't support being enabled/disabled. \nEnabled but Offline (6) indicates that the element may be completing commands, and will drop any new requests. \nTest (7) indicates that the element is in a test state. \nDeferred (8) indicates that the element may be completing commands, but will queue any new requests. \nQuiesce (9) indicates that the element is enabled but in a restricted mode. The element's behavior is similar to the Enabled state, but it only processes a restricted set of commands. All other requests are queued. \nStarting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.
ValueMap
11..32767
32768..65535
Values
Unknown
Other
Enabled
Disabled
Shutting Down
Not Applicable
Enabled but Offline
In Test
Deferred
Quiesce
Starting
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.OtherEnabledState
OtherEnabledState
Description
A string describing the element's enabled/disabled state when the EnabledState property is set to 1 ("Other"). This property MUST be set to NULL when EnabledState is any value other than 1.
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
RequestedState
Description
RequestedState is an integer enumeration indicating the last requested or desired state for the element. The actual state of the element is represented by EnabledState. This property is provided to compare the last requested and current enabled/disabled states. Note that when EnabledState is set to 5 ("Not Applicable"), then this property has no meaning. By default, the element's RequestedState is 5 ("No Change"). Refer to the EnabledState's property Description for explanations of the values in the RequestedState enumeration. \n\nIt should be noted that there are two new values in RequestedState that build on the statuses of EnabledState. These are "Reboot" (10) and "Reset" (11). The former, Reboot, refers to doing a "Shut Down" and then moving to an "Enabled" state. The latter, Reset, indicates that the element is first "Disabled" and then "Enabled". The distinction between requesting "Shut Down" and "Disabled" should also be noted. The former, Shut Down, requests an orderly transition to the Disabled state, and MAY involve removing power, to completely erase any existing state. The latter, the Disabled state, requests an immediate disabling of the element, such that it will not execute or accept any commands or processing requests. \n\nThis property is set as the result of a method invocation (such as Start or StopService on CIM_Service), or may be overridden and defined as WRITEable in a subclass. The method approach is considered superior to a WRITEable property, since it allows an explicit invocation of the operation and the return of a result code.
ValueMap
32768..65535
Values
Enabled
Disabled
Shut Down
No Change
Offline
Test
Deferred
Quiesce
Reboot
Reset
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
EnabledDefault
Write
Description
An enumerated value indicating an administrator's default/startup configuration for an element's Enabled State. By default, the element is "Enabled" (value=2).
ValueMap
8..32767
32768..65535
Values
Enabled
Disabled
Not Applicable
Enabled but Offline
No Default
DMTF Reserved
Vendor Reserved
TimeOfLastStateChange
Description
The date/time when the element's EnabledState last changed. If the state of the element has not changed and this property is populated, then it MUST be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property MUST NOT be updated.
RequestStateChange
RequestedState
TimeoutPeriod
 maintenance
CIM_ManagedElement
Abstract
Version
2.7.0
Description
ManagedElement is an abstract class that provides a common superclass (or top of the inheritance tree) for the non-association classes in the CIM Schema.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
Description
Description
The Description property provides a textual description of the object.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. \nNote that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties.
CIM_InstCreation
CIM_InstIndication
Indication
Version
2.6.0
Description
CIM_InstCreation notifies when a new instance is created.
SourceInstance
Required
Description
A copy of the instance that changed to generate the Indication. SourceInstance contains the current values of the properties selected by the Indication Filter's Query. In the case of CIM_InstDeletion, the property values are copied before the instance is deleted.
IndicationIdentifier
Description
An identifier for the Indication. This property is similar to a key value in that it can be used for identification, when correlating Indications (see the CorrelatedIndications array). Its value SHOULD be unique as long as Alert correlations are reported, but MAY be reused or left NULL if no future Indications will reference it in their CorrelatedIndications array.
MappingStrings
Recommendation.ITU|X733.Notification identifier
CorrelatedIndications
Description
A list of IndicationIdentifiers whose notifications are correlated with (related to) this one.
MappingStrings
Recommendation.ITU|X733.Correlated notifications
IndicationTime
Description
The time and date of creation of the Indication. The property may be set to NULL if the entity creating the Indication is not capable of determing this information. Note that IndicationTime may be the same for two Indications that are generated in rapid succession.
a new instan
CIM_IndicationHandler
CIM_ListenerDestination
Deprecated
CIM_ListenerDestination
Abstract
Version
2.8.0
Description
CIM_IndicationHandler is an abstract superclass describing how an Indication is to be processd/delivered/'handled'. This may define a destination and protocol for delivering Indications, or it may define a process to invoke. This class is derived from CIM_ManagedElement to allow modeling the dependency of the Handler on a specific service.
OtherPersistenceType
Description
A string describing ("Other") values for PersistenceType. This value MUST be set to a non NULL value when the PersistenceType is 1 ("Other"). For all other values of PersistenceType, the value of OtherPersistenceType MUST be NULL.
ModelCorrespondence
CIM_ListenerDestination.PersistenceType
PersistenceType
Description
Describes the Persistence Type of the destination defined by this instance. If the value of PersistenceType is not specified, the value of PersistenceType MUST be treated as 2 ("Permanent"). A value of 2 ("Permanent") declares that the destination is always expected to be available (e.g., system log file). Inability to access this destination MUST be treated as an error condition. A value of 3 ("Transient") indicates that the destination is short-lived. Inability to access the destination MAY be treated as a normal termination condition. Subscriptions with "Transient" destinations MAY be deleted when the destination terminates or is no longer available.
ValueMap
Values
Other
Permanent
Transient
ModelCorrespondence
CIM_ListenerDestination.OtherPersistenceType
Name
Description
Indicates the name of the CIM Listener destination.
MaxLen
CreationClassName
Description
Indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, it allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
SystemName
Description
A System's Name. A CIM Listener destination is defined in context of a CIM_System (e.g., the sending system.
MaxLen
SystemCreationClassName
Description
A System's CreationClassName. A CIM Listener destination is defined in context of a CIM_System (e.g., the sending system.
MaxLen
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
Description
Description
The Description property provides a textual description of the object.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. \nNote that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties.
Owner
Description
The name of the entity that created and/or maintains this Handler.
 When used w
CIM_Namespace
CIM_ManagedElement
Version
2.8.0
Description
Namespace provides a domain (in other words, a container), in which the instances [of a class] are guaranteed to be unique per the KEY qualifier definitions. It is named relative to the CIM_ObjectManager implementation that provides such a domain.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. \nNote that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties.
Description
Description
The Description property provides a textual description of the object.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
SystemCreationClassName
Description
The scoping System's CreationClassName.
MaxLen
SystemName
Description
The scoping System's Name.
MaxLen
ObjectManagerCreationClassName
Description
The scoping ObjectManager's CreationClassName.
MaxLen
ObjectManagerName
Description
The scoping ObjectManager's Name.
MaxLen
CreationClassName
Description
CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
Name
Description
A string to uniquely identify the Namespace within the ObjectManager.
MaxLen
ClassInfo
Required
Write
Description
Enumeration indicating the organization/schema of the Namespace's objects. For example, they may be instances of classes of a specific CIM version.
ValueMap
Values
Unknown
Other
CIM 1.0
CIM 2.0
CIM 2.1
CIM 2.2
CIM 2.3
CIM 2.4
CIM 2.5
CIM 2.6
CIM 2.7
CIM 2.8
DMI Recast
SNMP Recast
CMIP Recast
ModelCorrespondence
CIM_Namespace.DescriptionOfClassInfo
DescriptionOfClassInfo
Write
Description
A string providing more detail (beyond the general classification in ClassInfo) for the object hierarchy of the Namespace.
ModelCorrespondence
CIM_Namespace.ClassInfo
ClassType
Write
Description
Enumeration indicating the schema of the Namespace's objects. For example, they may be instances of classes of a specific CIM version or a mapping from another standard, such as SNMP. If 'Other' is selected, the DescriptionOfClassType property MUST be populated.
ValueMap
Values
Unknown
Other
DMI Recast
SNMP Recast
CMIP Recast
ModelCorrespondence
CIM_Namespace.DescriptionOfClassType
CIM_Namespace.ClassTypeVersion
ClassTypeVersion
Write
Description
The version of the objects in this namespace. The string representing the version MUST be in the form: \nM + "." + N + "." + U \nWhere: \nM - The major version (in numeric form) \nN - The minor version (in numeric form) \nU - The update (e.g. errata, patch, ..., in numeric form)
ModelCorrespondence
CIM_Namespace.DescriptionOfClassType
CIM_Namespace.ClassType
DescriptionOfClassType
Write
Description
A string providing more detail (beyond the general classification in ClassInfo) for the object hierarchy of the Namespace.
ModelCorrespondence
CIM_Namespace.ClassType
CIM_Namespace.ClassTypeVersion
ation of an 
CIM_Indication
Indication
Abstract
Version
2.7.0
Description
CIM_Indication is the abstract root class for all notifications about changes in schema, objects and their data, and about events detected by providers and instrumentation. Subclasses represent specific types of notifications. \n\nTo receive an Indication, a consumer (or subscriber) must create an instance of CIM_IndicationFilter describing the criteria of the notification, an instance of CIM_ListenerDestination describing the delivery of the notification, and an instance of CIM_IndicationSubscription associating the Filter and Handler.
IndicationIdentifier
Description
An identifier for the Indication. This property is similar to a key value in that it can be used for identification, when correlating Indications (see the CorrelatedIndications array). Its value SHOULD be unique as long as Alert correlations are reported, but MAY be reused or left NULL if no future Indications will reference it in their CorrelatedIndications array.
MappingStrings
Recommendation.ITU|X733.Notification identifier
CorrelatedIndications
Description
A list of IndicationIdentifiers whose notifications are correlated with (related to) this one.
MappingStrings
Recommendation.ITU|X733.Correlated notifications
IndicationTime
Description
The time and date of creation of the Indication. The property may be set to NULL if the entity creating the Indication is not capable of determing this information. Note that IndicationTime may be the same for two Indications that are generated in rapid succession.
 Subub
ng I/O error
CIM_ReferencedProfile
CIM_Dependency
Association
Version
2.8.0
Description
A profile that is referenced by another RegisteredProfile.
Antecedent
Override
Antecedent
Description
The RegisteredProfile that is referenced by the Dependent Profile.
Dependent
Override
Dependent
Description
A RegisteredProfile that references other profiles.
ce'sc C
CIM_Dependency
Association
Abstract
Version
2.6.0
Description
CIM_Dependency is a generic association used to establish dependency relationships between ManagedElements.
Antecedent
Description
Antecedent represents the independent object in this association.
Dependent
Description
Dependent represents the object dependent on the Antecedent.
CIM_RegisteredSubProfile
CIM_RegisteredProfile
Version
2.8.0
Description
A RegisteredSubProfile subclasses RegisteredProfile to indicate that a scoping profile is required to provide context. The latter is specified by the mandatory association, SubProfileRequiresProfile.
AdvertiseTypeDescriptions
Description
A free-form string providing additional information related to the AdvertiseType. A description MUST be provided when the AdvertiseType is 1, "Other". An entry in this array corresponds to the entry in the AdvertiseTypes array at the same index. It is not expected that additional descriptions are needed if the Type is set to "Not Advertised" or "SLP". However, as the SLP template expands, or as other advertisement mechanisms are defined, support for additional descriptions may be needed. This array is defined to support this.
ArrayType
Indexed
ModelCorrespondence
CIM_RegisteredProfile.AdvertiseTypes
AdvertiseTypes
Required
Description
This property signifies the advertisement for the profile information. It is used by the advertising services of the WBEM infrastructure to determine what should be advertised, via what mechanisms. The property is an array so that the profile MAY be advertised using several mechanisms. Note: If this property is null/uninitialized, this is equivalent to specifying the value 2, "Not Advertised".
ValueMap
Values
Other
Not Advertised
ArrayType
Indexed
ModelCorrespondence
CIM_RegisteredProfile.AdvertiseTypeDescriptions
RegisteredVersion
Required
Description
The version of this profile. The string representing the version MUST be in the form: \nM + "." + N + "." + U \nWhere: \nM - The major version (in numeric form) describing the profile's creation or last modification. \nN - The minor version (in numeric form) describing the profile's creation or last modification. \nU - The update (e.g. errata, patch, ..., in numeric form) describing the profile's creation or last modification.
RegisteredName
Required
Description
The name of this registered profile. Since multiple versions can exist for the same RegisteredName, the combination of RegisteredName, RegisteredOrganization, and RegisteredVersion MUST uniquely identify the registered profile within the scope of the organization.
MaxLen
OtherRegisteredOrganization
Description
A free-form string providing a description of the organization when 1, "Other", is specified for the RegisteredOrganization.
MaxLen
ModelCorrespondence
CIM_RegisteredProfile.RegisteredOrganization
RegisteredOrganization
Required
Description
The organization that defines this profile.
ValueMap
Values
Other
DMTF
CompTIA
Consortium for Service Innovation
FAST
INTAP
itSMF
Northwest Energy Efficiency Alliance
SNIA
TM Forum
The Open Group
ANSI
IEEE
IETF
INCITS
ModelCorrespondence
CIM_RegisteredProfile.OtherRegisteredOrganization
InstanceID
Description
Within the scope of the instantiating Namespace, InstanceID opaquely and uniquely identifies an instance of this class. In order to ensure uniqueness within the NameSpace, the value of InstanceID SHOULD be constructed using the following 'preferred' algorithm: \n<OrgID>:<LocalID> \nWhere <OrgID> and <LocalID> are separated by a colon ':', and where <OrgID> MUST include a copyrighted, trademarked or otherwise unique name that is owned by the business entity creating/defining the InstanceID, or is a registered ID that is assigned to the business entity by a recognized global authority. (This is similar to the <Schema Name>_<Class Name> structure of Schema class names.) In addition, to ensure uniqueness, <OrgID> MUST NOT contain a colon (':'). When using this algorithm, the first colon to appear in InstanceID MUST appear between <OrgID> and <LocalID>. \n<LocalID> is chosen by the organizational entity and SHOULD not be re-used to identify different underlying (real-world) elements. If the above 'preferred' algorithm is not used, the defining entity MUST assure that the resultant InstanceID is not re-used across any InstanceIDs produced by this or other providers for this instance's NameSpace. \nFor DMTF defined instances, the 'preferred' algorithm MUST be used with the <OrgID> set to 'CIM'.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
Description
Description
The Description property provides a textual description of the object.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. \nNote that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties.
ing the valu
CIM_IndicationHandlerCIMXML
CIM_IndicationHandler
Deprecated
CIM_ListenerDestinationCIMXML
Version
2.8.0
Description
CIM_IndicationHandlerCIMXML describes the destination for Indications to be delivered via CIM-XML.
Owner
Description
The name of the entity that created and/or maintains this Handler.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. \nNote that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties.
Description
Description
The Description property provides a textual description of the object.
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
SystemCreationClassName
Description
A System's CreationClassName. A CIM Listener destination is defined in context of a CIM_System (e.g., the sending system.
MaxLen
SystemName
Description
A System's Name. A CIM Listener destination is defined in context of a CIM_System (e.g., the sending system.
MaxLen
CreationClassName
Description
Indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, it allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
Name
Description
Indicates the name of the CIM Listener destination.
MaxLen
PersistenceType
Description
Describes the Persistence Type of the destination defined by this instance. If the value of PersistenceType is not specified, the value of PersistenceType MUST be treated as 2 ("Permanent"). A value of 2 ("Permanent") declares that the destination is always expected to be available (e.g., system log file). Inability to access this destination MUST be treated as an error condition. A value of 3 ("Transient") indicates that the destination is short-lived. Inability to access the destination MAY be treated as a normal termination condition. Subscriptions with "Transient" destinations MAY be deleted when the destination terminates or is no longer available.
ValueMap
Values
Other
Permanent
Transient
ModelCorrespondence
CIM_ListenerDestination.OtherPersistenceType
OtherPersistenceType
Description
A string describing ("Other") values for PersistenceType. This value MUST be set to a non NULL value when the PersistenceType is 1 ("Other"). For all other values of PersistenceType, the value of OtherPersistenceType MUST be NULL.
ModelCorrespondence
CIM_ListenerDestination.PersistenceType
Destination
Required
Description
The destination URL to which CIM-XML Indication messages are to be delivered. The scheme prefix MUST be consistent with the DMTF CIM-XML Specifications. If a scheme prefix is not specified, the scheme "http:" MUST be assumed.
CIM_Indi
CIM_LogicalElement
CIM_ManagedSystemElement
Abstract
Version
2.6.0
Description
CIM_LogicalElement is a base class for all the components of a System that represent abstract system components, such as Files, Processes, or LogicalDevices.
Status
Description
A string indicating the current status of the object. Various operational and non-operational statuses are defined. This property is deprecated in lieu of OperationalStatus, which includes the same semantics in its enumeration. This change is made for 3 reasons: 1) Status is more correctly defined as an array. This overcomes the limitation of describing status via a single value, when it is really a multi-valued property (for example, an element may be OK AND Stopped. 2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values. And, 3) The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, Status was grandfathered into the Schema. Use of the Deprecated qualifier allows the maintenance of the existing property, but also permits an improved definition using OperationalStatus.
ValueMap
Error
Degraded
Unknown
Pred Fail
Starting
Stopping
Service
Stressed
NonRecover
No Contact
Lost Comm
Stopped
MaxLen
StatusDescriptions
Description
Strings describing the various OperationalStatus array values. For example, if "Stopping" is the value assigned to OperationalStatus, then this property may contain an explanation as to why an object is being stopped. Note that entries in this array are correlated with those at the same array index in OperationalStatus.
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.OperationalStatus
OperationalStatus
Description
Indicates the current status(es) of the element. Various health and operational statuses are defined. Many of the enumeration's values are self- explanatory. However, a few are not and are described in more detail. \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, etc. \n"Predictive Failure" indicates that an element is functioning nominally but predicting a failure in the near future. \n"In Service" describes an element being configured, maintained, cleaned, or otherwise administered. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is currently unreachable. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the element's state and configuration may need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Supporting Entity in Error" describes that this element may be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower layer networking problems. \n"Completed" indicates the element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can till if the complete operation passed (Completed with OK), and failure (Completed with Error). Completed with Degraded would imply the operation finished, but did not complete OK or report an error. \n"Power Mode" indicates the element has additional power model information contained in the Associated PowerManagementService association. \nOperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent approach to enumerations, to address implementation needs for an array property, and to provide a migration path from today's environment to the future. This change was not made earlier since it required the DEPRECATED qualifier. Due to the widespread use of the existing Status property in management applications, it is strongly RECOMMENDED that providers/instrumentation provide BOTH the Status and OperationalStatus properties. Further, the first value of OperationalStatus SHOULD contain the primary status for the element. When instrumented, Status (since it is single-valued) SHOULD also provide the primary status of the element.
ValueMap
0x8000..
Values
Unknown
Other
Degraded
Stressed
Predictive Failure
Error
Non-Recoverable Error
Starting
Stopping
Stopped
In Service
No Contact
Lost Communication
Aborted
Dormant
Supporting Entity in Error
Completed
Power Mode
DMTF Reserved
Vendor Reserved
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.StatusDescriptions
Name
Description
The Name property defines the label by which the object is known. When subclassed, the Name property can be overridden to be a Key property.
MaxLen
InstallDate
Description
A datetime value indicating when the object was installed. A lack of a value does not indicate that the object is not installed.
MappingStrings
MIF.DMTF|ComponentID|001.5
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
Description
Description
The Description property provides a textual description of the object.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. \nNote that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties.
CIM_Service
CIM_EnabledLogicalElement
Abstract
Version
2.7.0
Description
A CIM_Service is a Logical Element that contains the information necessary to represent and manage the functionality provided by a Device and/or SoftwareFeature. A Service is a general-purpose object to configure and manage the implementation of functionality. It is not the functionality itself.
TimeOfLastStateChange
Description
The date/time when the element's EnabledState last changed. If the state of the element has not changed and this property is populated, then it MUST be set to a 0 interval value. If a state change was requested, but rejected or not yet processed, the property MUST NOT be updated.
EnabledDefault
Write
Description
An enumerated value indicating an administrator's default/startup configuration for an element's Enabled State. By default, the element is "Enabled" (value=2).
ValueMap
8..32767
32768..65535
Values
Enabled
Disabled
Not Applicable
Enabled but Offline
No Default
DMTF Reserved
Vendor Reserved
RequestedState
Description
RequestedState is an integer enumeration indicating the last requested or desired state for the element. The actual state of the element is represented by EnabledState. This property is provided to compare the last requested and current enabled/disabled states. Note that when EnabledState is set to 5 ("Not Applicable"), then this property has no meaning. By default, the element's RequestedState is 5 ("No Change"). Refer to the EnabledState's property Description for explanations of the values in the RequestedState enumeration. \n\nIt should be noted that there are two new values in RequestedState that build on the statuses of EnabledState. These are "Reboot" (10) and "Reset" (11). The former, Reboot, refers to doing a "Shut Down" and then moving to an "Enabled" state. The latter, Reset, indicates that the element is first "Disabled" and then "Enabled". The distinction between requesting "Shut Down" and "Disabled" should also be noted. The former, Shut Down, requests an orderly transition to the Disabled state, and MAY involve removing power, to completely erase any existing state. The latter, the Disabled state, requests an immediate disabling of the element, such that it will not execute or accept any commands or processing requests. \n\nThis property is set as the result of a method invocation (such as Start or StopService on CIM_Service), or may be overridden and defined as WRITEable in a subclass. The method approach is considered superior to a WRITEable property, since it allows an explicit invocation of the operation and the return of a result code.
ValueMap
32768..65535
Values
Enabled
Disabled
Shut Down
No Change
Offline
Test
Deferred
Quiesce
Reboot
Reset
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
OtherEnabledState
Description
A string describing the element's enabled/disabled state when the EnabledState property is set to 1 ("Other"). This property MUST be set to NULL when EnabledState is any value other than 1.
ModelCorrespondence
CIM_EnabledLogicalElement.EnabledState
EnabledState
Description
EnabledState is an integer enumeration that indicates the enabled/disabled states of an element. It can also indicate the transitions between these requested states. For example, shutting down (value = 4) and starting (value=10) are transient states between enabled and disabled. The following text briefly summarizes the various enabled/disabled states: \nEnabled (2) indicates that the element is/could be executing commands, will process any queued commands, and queues new requests. \nDisabled (3) indicates that the element will not execute commands and will drop any new requests. \nShutting Down (4) indicates that the element is in the process of going to a Disabled state. \nNot Applicable (5) indicates the element doesn't support being enabled/disabled. \nEnabled but Offline (6) indicates that the element may be completing commands, and will drop any new requests. \nTest (7) indicates that the element is in a test state. \nDeferred (8) indicates that the element may be completing commands, but will queue any new requests. \nQuiesce (9) indicates that the element is enabled but in a restricted mode. The element's behavior is similar to the Enabled state, but it only processes a restricted set of commands. All other requests are queued. \nStarting (10) indicates that the element is in the process of going to an Enabled state. New requests are queued.
ValueMap
11..32767
32768..65535
Values
Unknown
Other
Enabled
Disabled
Shutting Down
Not Applicable
Enabled but Offline
In Test
Deferred
Quiesce
Starting
DMTF Reserved
Vendor Reserved
ModelCorrespondence
CIM_EnabledLogicalElement.OtherEnabledState
Status
Description
A string indicating the current status of the object. Various operational and non-operational statuses are defined. This property is deprecated in lieu of OperationalStatus, which includes the same semantics in its enumeration. This change is made for 3 reasons: 1) Status is more correctly defined as an array. This overcomes the limitation of describing status via a single value, when it is really a multi-valued property (for example, an element may be OK AND Stopped. 2) A MaxLen of 10 is too restrictive and leads to unclear enumerated values. And, 3) The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, Status was grandfathered into the Schema. Use of the Deprecated qualifier allows the maintenance of the existing property, but also permits an improved definition using OperationalStatus.
ValueMap
Error
Degraded
Unknown
Pred Fail
Starting
Stopping
Service
Stressed
NonRecover
No Contact
Lost Comm
Stopped
MaxLen
StatusDescriptions
Description
Strings describing the various OperationalStatus array values. For example, if "Stopping" is the value assigned to OperationalStatus, then this property may contain an explanation as to why an object is being stopped. Note that entries in this array are correlated with those at the same array index in OperationalStatus.
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.OperationalStatus
OperationalStatus
Description
Indicates the current status(es) of the element. Various health and operational statuses are defined. Many of the enumeration's values are self- explanatory. However, a few are not and are described in more detail. \n"Stressed" indicates that the element is functioning, but needs attention. Examples of "Stressed" states are overload, overheated, etc. \n"Predictive Failure" indicates that an element is functioning nominally but predicting a failure in the near future. \n"In Service" describes an element being configured, maintained, cleaned, or otherwise administered. \n"No Contact" indicates that the monitoring system has knowledge of this element, but has never been able to establish communications with it. \n"Lost Communication" indicates that the ManagedSystem Element is known to exist and has been contacted successfully in the past, but is currently unreachable. \n"Stopped" and "Aborted" are similar, although the former implies a clean and orderly stop, while the latter implies an abrupt stop where the element's state and configuration may need to be updated. \n"Dormant" indicates that the element is inactive or quiesced. \n"Supporting Entity in Error" describes that this element may be "OK" but that another element, on which it is dependent, is in error. An example is a network service or endpoint that cannot function due to lower layer networking problems. \n"Completed" indicates the element has completed its operation. This value should be combined with either OK, Error, or Degraded so that a client can till if the complete operation passed (Completed with OK), and failure (Completed with Error). Completed with Degraded would imply the operation finished, but did not complete OK or report an error. \n"Power Mode" indicates the element has additional power model information contained in the Associated PowerManagementService association. \nOperationalStatus replaces the Status property on ManagedSystemElement to provide a consistent approach to enumerations, to address implementation needs for an array property, and to provide a migration path from today's environment to the future. This change was not made earlier since it required the DEPRECATED qualifier. Due to the widespread use of the existing Status property in management applications, it is strongly RECOMMENDED that providers/instrumentation provide BOTH the Status and OperationalStatus properties. Further, the first value of OperationalStatus SHOULD contain the primary status for the element. When instrumented, Status (since it is single-valued) SHOULD also provide the primary status of the element.
ValueMap
0x8000..
Values
Unknown
Other
Degraded
Stressed
Predictive Failure
Error
Non-Recoverable Error
Starting
Stopping
Stopped
In Service
No Contact
Lost Communication
Aborted
Dormant
Supporting Entity in Error
Completed
Power Mode
DMTF Reserved
Vendor Reserved
ArrayType
Indexed
ModelCorrespondence
CIM_ManagedSystemElement.StatusDescriptions
InstallDate
Description
A datetime value indicating when the object was installed. A lack of a value does not indicate that the object is not installed.
MappingStrings
MIF.DMTF|ComponentID|001.5
Caption
Description
The Caption property is a short textual description (one- line string) of the object.
MaxLen
Description
Description
The Description property provides a textual description of the object.
ElementName
Description
A user-friendly name for the object. This property allows each instance to define a user-friendly name IN ADDITION TO its key properties/identity data, and description information. \nNote that ManagedSystemElement's Name property is also defined as a user-friendly name. But, it is often subclassed to be a Key. It is not reasonable that the same property can convey both identity and a user friendly name, without inconsistencies. Where Name exists and is not a Key (such as for instances of LogicalDevice), the same information MAY be present in both the Name and ElementName properties.
SystemCreationClassName
Description
The scoping System's CreationClassName.
MaxLen
SystemName
Description
The scoping System's Name.
MaxLen
CreationClassName
Description
CreationClassName indicates the name of the class or the subclass used in the creation of an instance. When used with the other key properties of this class, this property allows all instances of this class and its subclasses to be uniquely identified.
MaxLen
Name
Override
Name
Description
The Name property uniquely identifies the Service and provides an indication of the functionality that is managed. This functionality is described in more detail in the object's Description property.
MaxLen
PrimaryOwnerName
Write
Description
The name of the primary owner for the service, if one is defined. The primary owner is the initial support contact for the Service.
MaxLen
MappingStrings
MIF.DMTF|General Information|001.3
PrimaryOwnerContact
Write
Description
A string that provides information on how the primary owner of the Service can be reached (e.g. phone number, email address, ...).
MaxLen
MappingStrings
MIF.DMTF|General Information|001.4
StartMode
Description
StartMode is a string value indicating whether the Service is automatically started by a System, Operating System, etc. or only started upon request. This property is deprecated in lieu of the EnabledDefault property inherited from EnabledLogicalElement, which addresses the same semantics. The change to a uint16 data type was discussed when CIM V2.0 was defined. However, existing V1.0 implementations used the string property and did not want to modify their code. Therefore, StartMode was grandfathered into the Schema. Use of the Deprecated qualifier allows the maintenance of the existing property, but also permits an improved, clarified definition using EnabledDefault.
ValueMap
Automatic
Manual
MaxLen
Started
Description
Started is a boolean indicating whether the Service has been started (TRUE), or stopped (FALSE).
RequestStateChange
RequestedState
TimeoutPeriod
StartService
StopService
includes the
libsfcClassProviderMem.so.0.0.0.debug
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.ctors
.dtors
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.data
.bss
.gnu_debuglink
