q'`"
F,0)I
 0M 
:q:]
CEJcZ
"U+=
__gmon_start__
_fini
__cxa_finalize
_Jv_RegisterClasses
become_a_nobody
getpwnam
getuid
setuid
err_quit
debug_msg
debug_level
stderr
__vfprintf_chk
fputc
daemon_init
fork
setsid
daemon_proc
chdir
umask
openlog
update_pidfile
fopen
fscanf
fclose
unlink
getpid
__fprintf_chk
getpgid
__errno_location
strerror
skip_token
__ctype_b_loc
skip_whitespace
slurpfile
read
err_ret
readn
writen
dotconf_callback
dotconf_continue_line
dotconf_invoke_command
dotconf_find_command
dotconf_is_wild_card
dotconf_strcmp_from_back
strlen
dotconf_register_options
realloc
malloc
dotconf_wild_card_cleanup
dotconf_free_command
dotconf_find_wild_card
strncpy
dotconf_star_match
strncmp
dotconf_question_mark_match
dotconf_cleanup
dotconf_create
access
calloc
__strdup
getenv
snprintf
strncasecmp
dotconf_get_next_line
fgets
strcpy
__stack_chk_fail
dotconf_warning
__vsnprintf_chk
dotconf_get_here_document
__xstat
memset
dotconf_substitute_env
strncat
dotconf_read_arg
dotconf_set_command
sscanf
dotconf_handle_command
dotconf_command_loop
dotconf_command_loop_until_error
dotconf_handle_star
__strncpy_chk
opendir
readdir
__sprintf_chk
closedir
strstr
__strcat_chk
strcmp
__strcpy_chk
dotconf_handle_wild_card
dotconf_handle_question_mark
__snprintf_chk
err_quiet
ganglia_quiet_errors
err_verbose
__vsprintf_chk
stdout
fflush
fputs
__syslog_chk
err_msg
err_sys
err_dump
abort
gexec_cluster
g_tcp_socket_connect
XML_ParserCreate
time
XML_SetElementHandler
XML_SetUserData
XML_GetBuffer
gexec_errno
XML_ParserFree
g_tcp_socket_delete
XML_ParseBuffer
llist_sort
XML_GetErrorCode
XML_ErrorString
XML_GetCurrentLineNumber
gexec_cluster_free
llist_add
strtol
strchr
strtod
hashval
hash_foreach
pthread_rdwr_rlock_np
pthread_rdwr_runlock_np
hash_walkfrom
datum_free
hash_delete
pthread_rdwr_wlock_np
pthread_rdwr_wunlock_np
hash_destroy
memcpy
hash_lookup
datum_new
hash_insert
hash_create
pthread_rdwr_init_np
g_inetaddr_ref
g_inetaddr_unref
g_inetaddr_delete
g_inetaddr_is_multicast
g_inetaddr_set_port
g_inetaddr_get_port
g_inetaddr_get_interface_to
socket
getsockname
g_gethostbyaddr
gethostbyname_mutex
pthread_mutex_lock
pthread_mutex_unlock
g_gethostbyname
inet_aton
g_inetaddr_new
g_inetaddr_list_interfaces
ioctl
llist_remove
llist_search
llist_print
my_inet_ntop
pthread_cond_broadcast
pthread_cond_wait
pthread_cond_signal
pthread_mutex_init
pthread_cond_init
g_tcp_socket_server_accept
select
g_tcp_socket_server_new_interface
setsockopt
g_tcp_socket_new
g_tcp_socket_server_new
Ganglia_25metric_bykey
ganglia_25_metric_array
Ganglia_25metric_byname
strcasecmp
xdr_Ganglia_spoof_header
xdr_string
xdr_Ganglia_gmetric_message
xdr_u_int
xdr_Ganglia_spoof_message
xdr_Ganglia_message_formats
xdr_enum
xdr_Ganglia_message
xdr_float
xdr_double
xdr_u_short
xdr_Ganglia_value_types
xdr_Ganglia_25metric
xdr_int
mcast_set_ttl
apr_socket_addr_get
apr_sockaddr_info_get
apr_socket_create
apr_setsocketopt
apr_bind
apr_socket_close
apr_socket_opt_set
fwrite
apr_sockaddr_port_set
create_tcp_server
apr_listen
create_udp_server
create_udp_client
apr_connect
apr_sockaddr_ip_buffer_get
apr_inet_ntop
memmove
create_mcast_server
apr_strnatcasecmp
create_mcast_client
if_nametoindex
Ganglia_default_collection_groups
check_value
Ganglia_gmetric_set
apr_pstrdup
Ganglia_udp_send_message
apr_socket_send
Ganglia_gmetric_send_spoof
__printf_chk
xdrmem_create
Ganglia_udp_send_channels_create
cfg_size
apr_array_make
apr_pool_create_ex
apr_array_push
cfg_getnsec
cfg_getstr
cfg_getint
Ganglia_gmond_config_create
cfg_tilde_expand
cfg_init
cfg_parse
cfg_parse_buf
Ganglia_pool_destroy
apr_pool_destroy
Ganglia_gmetric_destroy
Ganglia_pool_create
libgmond_apr_lib_initialized
apr_initialize
apr_terminate
Ganglia_gmetric_create
apr_palloc
build_default_gmond_configuration
apr_pstrcat
Ganglia_gmetric_send
cfg_include
libdl.so.2
libresolv.so.2
libnsl.so.1
libpthread.so.0
libc.so.6
__cxa_atexit
_edata
__bss_start
_end
libganglia-3.0.7.so.0
GLIBC_2.3.2
GLIBC_2.2.5
GLIBC_2.4
GLIBC_2.3
GLIBC_2.3.4
ATSubH
t$(H
L$8L
D$@L
L$HH)
ffffff.
[]A\
fffff.
fff.
ATUS
[]A\A]A^
[]A\A]A^
[]A\A]
[]A\A]
fffff.
USt'H
[]A\
ffffff.
AVAUATI
T$ A
42Lc
uOIc
[]A\A]A^A_
fff.
AUATI
xXIc
[]A\A]
[]A\A]
gfff
A9l$(
|$ A\
fffff.
}\Hc
H;\$
H;\$8u
\$HH
l$PL
d$XL
l$`L
t$hL
|$pH
\$8I
HcD$
t$ Hc\$
t$8H
AWAVAUI
ATUH
[]A\A]A^A_
[]A\A]A^A_
AVAUI
ATUH
[]A\A]A^
[]A\A]
fff.
l$ L
t$(L
|$0H
ffffff.
[]A\A]
AUATUSH
[]A\A]
ffffff.
\$ I
ffffff.
AWAVAUATI
t$0H
|$0I
tUHc
[]A\A]A^A_
D$0H
ffff.
AVAUATUSH
[]A\A]A^A_
L;4$v
v*<}u
;}t1H
H+L$
ffff.
AVAUATUSH
D$@H
|$(H
t$ H
T$8H
[]A\A]A^A_
|$81
T$(L
d$8A
D$ L
L;t$
D$8H
T$ H
D$8A
|$(H
AUATUH
+4$1
D+,$1
m Lc
8 ~wA
[]A\A]A^A_
[]A\A]A^A_
l$ I
|$h1
\$hH
\$xL
\$hH
HcD$
T$hL
D$(L
AWAVAUATUSH
|$`H
T$PH
D$h1
D$8H
T$(H
D$0H
D$ H
t$PL
T$xA
D;l$|
D$XH
|$pH
T$`H
|$pH
T$`H
|$pIc
[]A\A]A^A_
D$8H
t$HH
9L$x
|$0Hc
L$0L
D$XH
|$pH
t$@H
t$pH
D$(H
L$ H
D$`L
D$pH
T$`D
AWE1
AUATUSH
|$hH
t$`H
D$HH
T$PH
D$8HcD$|H
T$@H
T$0H
D$|H
t$XL
;l$x
D$t9D$|
L$ H
D$`H
t$PL
D$HH
L$@L
T$8H
[]A\A]A^A_
D$`H
T$hL
D$hH
D$hH
T$(H
D$hH
T$hD
T$ H
t$/L
t$/H
T$ L
|$ H
\$0H
l$8L
d$@L
l$HL
t$PH
D$0H
D$0H
D$0L
|$0H
|$0H
fff.
t$(H
L$8L
D$@L
L$HH
D$ H
ffffff.
t$(H
L$8L
D$@L
L$HH
D$ H
t$(H
L$8L
D$@L
L$HH
D$ H
fff.
t$(H
L$8L
D$@L
L$HH
D$ H
fffff.
t$(H
L$8L
D$@L
L$HH
D$ H
fff.
AVAUATUH
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
-pv 
-]v 
[]A\
[]A\
fffff.
AVAUI
ATUH
[]A\A]A^A_
|$@A
unresolvH
[]A\A]A^A_
|$@L
|$@L
unspecifH
ffff.
AVAUI
[]A\A]A^A_
AVAUI
[]A\A]A^A_
AWAVI
AUATUSH
+D;m
[]A\A]A^A_
AUATUH
tcE1
[]A\A]
ffffff.
AUATUH
[]A\A]
AWAVI
AUATI
[]A\A]A^A_
ATUSH
[]A\A]
fffff.
ffffff.
D$(1
T$(dH3
\$8H
l$@H
l$ H
fffff.
d$ L
l$(L
t$0H
D$(1
T$(dH3
\$0H
l$8L
d$@H
ffffff.
AVAUATUSH
D$81
T$8dH3
H[]A\A]A^A_
l$ L
ffff.
t"H9
[]A\A]
[]A\A]
UStNH
ffffff.
ATUH
fff.
ATUH
fff.
AWAVAUATUH
[]A\A]A^A_
l$ L
d$(L
l$0H
fff.
fffff.
D$(1
T$(dH3
fffff.
l$ H
-1V 
fffff.
ffff.
#rKH
l$ L
d$(L
l$0H
fff.
fffff.
t<E1
l$`H
D$`H
D$hH
\$0H
D$D1
|$0E1
\$HH
l$PL
d$XL
l$`L
t$hL
|$pH
D$<A
L$<A
fff.
l$ L
t$(L
|$0H
ffff.
l$ L
d$(L
l$0L
t$8L
|$@H
D$ H
D$(H
D$0H
D$8H
D$@H
\$PL
D$XH
AWAVAUATUSH
D$ H
t$ H
D$0H
T$$H
D9|$ H
T$$H
|$0L
8[]A\A]A^A_
l$ H
fffff.
l$ H
fffff.
l$PL
D$XH
user '%s' does not exist
exiting. setuid '%s' error
Must be root to setuid to "%s"
daemon already running: %s pid %d
Error writing pidfile '%s' -- %s
slurpfile() open() error on file %s
slurpfile() read() error on file %s
Error opening configuration file '%s'
[dotconf] Parse error. Unexpected end of file at line %ld in file %s
[emerg] could not stat currently read file (%s)
Missing argument to option '%s'
Error occured while processing wildcard %c
Filename is '%s'
Cannot open %s for inclusion.
IncludePath is '%s'
Absolute filename too long (>%d)
Error occured while attempting to process %s for inclusion.
IncludePath is '%s'
DC_INCLUDEPATH
%s:%ld: 
Unterminated here-document!
Unbalanced '{'
Unknown Config-Option: '%s'
%s%s%s
Include
IncludePath
: %s
Connected to socket %s:%d
Created the XML Parser
Got the XML Buffer
Read %d bytes of data
HOST
CLUSTER
LOCALTIME
METRIC
cpu_num
load_one
load_five
load_fifteen
proc_run
proc_total
cpu_user
cpu_nice
cpu_system
cpu_idle
cpu_wio
gexec
gexec_cluster() XML_ParseBuffer() error at line %d:
hash_create size = %d
hash->size is %d
hash->node[i] malloc error
hash malloc error in hash_create()
hash->node malloc error. freeing hash.
tcp_listen() setsockopt() SO_REUSEADDR error
tcp_listen() setsockopt() SO_KEEPALIVE error
tcp_listen() setsockopt() TCP_NODELAY error
gmetric
CPUs
zero
cpu_speed
mem_total
swap_total
boottime
sys_clock
machine_type
os_name
os_release
both
%.1f
cpu_aidle
%.2f
mem_free
mem_shared
mem_buffers
mem_cached
swap_free
heartbeat
location
(x,y,z)
bytes_out
bytes/sec
bytes_in
pkts_in
packets/sec
pkts_out
disk_total
%.3f
disk_free
part_max_used
bread_sec
1/sec
bwrite_sec
lread_sec
lwrite_sec
rcache
wcache
phread_sec
phwrite_sec
cpu_intr
cpu_sintr
mem_arm
mem_rm
mem_avm
mem_vm
Warning: your operating system does not support IPV6_V6ONLY!
This means that you are also listening to IPv4 traffic on port %d
This IPv6=>IPv4 mapping may be a security risk.
/* The old internal 2.5.x metric array has been replaced by the following 
   collection_group directives.  What follows is the default behavior for 
   collecting and sending metrics that is as close to 2.5.x behavior as 
   possible. */
/* This collection group will cause a heartbeat (or beacon) to be sent every 
   20 seconds.  In the heartbeat is the GMOND_STARTED data which expresses 
   the age of the running gmond. */ 
collection_group { 
  collect_once = yes 
  time_threshold = 20 
  metric { 
    name = "heartbeat" 
  } 
/* This collection group will send general info about this host every 1200 secs. 
   This information doesn't change between reboots and is only collected once. */ 
collection_group { 
  collect_once = yes 
  time_threshold = 1200 
  metric { 
    name = "cpu_num" 
  } 
  metric { 
    name = "cpu_speed" 
  } 
  metric { 
    name = "mem_total" 
  } 
  /* Should this be here? Swap can be added/removed between reboots. */ 
  metric { 
    name = "swap_total" 
  } 
  metric { 
    name = "boottime" 
  } 
  metric { 
    name = "machine_type" 
  } 
  metric { 
    name = "os_name" 
  } 
  metric { 
    name = "os_release" 
  } 
  metric { 
    name = "location" 
  } 
/* This collection group will send the status of gexecd for this host every 300 secs */
/* Unlike 2.5.x the default behavior is to report gexecd OFF.  */ 
collection_group { 
  collect_once = yes 
  time_threshold = 300 
  metric { 
    name = "gexec" 
  } 
/* This collection group will collect the CPU status info every 20 secs. 
   The time threshold is set to 90 seconds.  In honesty, this time_threshold could be 
   set significantly higher to reduce unneccessary network chatter. */ 
collection_group { 
  collect_every = 20 
  time_threshold = 90 
  /* CPU status */ 
  metric { 
    name = "cpu_user"  
    value_threshold = "1.0" 
  } 
  metric { 
    name = "cpu_system"   
    value_threshold = "1.0" 
  } 
  metric { 
    name = "cpu_idle"  
    value_threshold = "5.0" 
  } 
  metric { 
    name = "cpu_nice"  
    value_threshold = "1.0" 
  } 
  metric { 
    name = "cpu_aidle" 
    value_threshold = "5.0" 
  } 
  metric { 
    name = "cpu_wio" 
    value_threshold = "1.0" 
  } 
  /* The next two metrics are optional if you want more detail... 
     ... since they are accounted for in cpu_system.  
  metric { 
    name = "cpu_intr" 
    value_threshold = "1.0" 
  } 
  metric { 
    name = "cpu_sintr" 
    value_threshold = "1.0" 
  } 
  */ 
collection_group { 
  collect_every = 20 
  time_threshold = 90 
  /* Load Averages */ 
  metric { 
    name = "load_one" 
    value_threshold = "1.0" 
  } 
  metric { 
    name = "load_five" 
    value_threshold = "1.0" 
  } 
  metric { 
    name = "load_fifteen" 
    value_threshold = "1.0" 
/* This group collects the number of running and total processes */ 
collection_group { 
  collect_every = 80 
  time_threshold = 950 
  metric { 
    name = "proc_run" 
    value_threshold = "1.0" 
  } 
  metric { 
    name = "proc_total" 
    value_threshold = "1.0" 
  } 
/* This collection group grabs the volatile memory metrics every 40 secs and 
   sends them at least every 180 secs.  This time_threshold can be increased 
   significantly to reduce unneeded network traffic. */ 
collection_group { 
  collect_every = 40 
  time_threshold = 180 
  metric { 
    name = "mem_free" 
    value_threshold = "1024.0" 
  } 
  metric { 
    name = "mem_shared" 
    value_threshold = "1024.0" 
  } 
  metric { 
    name = "mem_buffers" 
    value_threshold = "1024.0" 
  } 
  metric { 
    name = "mem_cached" 
    value_threshold = "1024.0" 
  } 
  metric { 
    name = "swap_free" 
    value_threshold = "1024.0" 
  } 
collection_group { 
  collect_every = 40 
  time_threshold = 300 
  metric { 
    name = "bytes_out" 
    value_threshold = 4096 
  } 
  metric { 
    name = "bytes_in" 
    value_threshold = 4096 
  } 
  metric { 
    name = "pkts_in" 
    value_threshold = 256 
  } 
  metric { 
    name = "pkts_out" 
    value_threshold = 256 
  } 
/* Different than 2.5.x default since the old config made no sense */ 
collection_group { 
  collect_every = 1800 
  time_threshold = 3600 
  metric { 
    name = "disk_total" 
    value_threshold = 1.0 
  } 
collection_group { 
  collect_every = 40 
  time_threshold = 180 
  metric { 
    name = "disk_free" 
    value_threshold = 1.0 
  } 
  metric { 
    name = "part_max_used" 
    value_threshold = 1.0 
  } 
Incorrect format for spoof argument. exiting.
 spoofName: %s    spoofIP: %s 
udp_send_channel mcast_join=%s mcast_if=%s host=%s port=%d
Unable to join multicast channel %s:%d. Exiting
Unable to create UDP client for %s:%d. Exiting.
Configuration file '%s' not found.
Your default configuration buffer failed to parse. Exiting.
/* This configuration is as close to 2.5.x default behavior as possible 
   The values closely match ./gmond/metric.h definitions in 2.5.x */ 
globals {                    
  daemonize = yes              
  setuid = yes             
  user = ganglia              
  debug_level = 0               
  max_udp_msg_len = 1472        
  mute = no             
  deaf = no             
  host_dmax = 0 /*secs */ 
  cleanup_threshold = 300 /*secs */ 
  gexec = no             
/* If a cluster attribute is specified, then all gmond hosts are wrapped inside 
 * of a <CLUSTER> tag.  If you do not specify a cluster tag, then all <HOSTS> will 
 * NOT be wrapped inside of a <CLUSTER> tag. */ 
cluster { 
  name = "unspecified" 
  owner = "unspecified" 
  latlong = "unspecified" 
  url = "unspecified" 
/* The host section describes attributes of the host, like the location */ 
host { 
  location = "unspecified" 
/* Feel free to specify as many udp_send_channels as you like.  Gmond 
   used to only support having a single channel */ 
udp_send_channel { 
  mcast_join = 239.2.11.71 
  port = 8649 
  ttl = 1 
/* You can specify as many udp_recv_channels as you like as well. */ 
udp_recv_channel { 
  mcast_join = 239.2.11.71 
  port = 8649 
  bind = 239.2.11.71 
/* You can specify as many tcp_accept_channels as you like to share 
   an xml description of the state of the cluster */ 
tcp_accept_channel { 
  port = 8649 
float
double
string
uint8
uint16
uint32
udp_send_channel
host
mcast_join
mcast_if
port
NULL
Parse error for '%s'
cluster
globals
udp_recv_channel
tcp_accept_channel
collection_group
include
owner
latlong
unspecified
daemonize
setuid
ganglia
debug_level
max_udp_msg_len
mute
deaf
host_dmax
cleanup_threshold
bind
family
inet4
interface
timeout
collect_once
collect_every
time_threshold
default
allow
access
value_threshold
action
mask
libganglia-3.0.7.so.0.0.0.debug
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.ctors
.dtors
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.data
.bss
.gnu_debuglink
