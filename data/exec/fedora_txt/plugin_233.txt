__gmon_start__
_fini
__cxa_finalize
_Jv_RegisterClasses
gnm_range_skew_pop
float_range_function
gnm_range_kurtosis_m3_pop
gnm_range_var_pop
gnm_range_var_est
gnm_range_skew_est
gnm_range_stddev_pop
gnm_range_stddev_est
gnm_range_mode
go_range_min
go_range_median_inter_nonconst
go_range_max
gnm_range_kurtosis_m3_est
gnm_range_harmonic_mean
gnm_range_geometric_mean
go_range_devsq
go_range_average
gnm_range_avedev
value_terminate_err
value_get_as_float
gnm_range_rsq_pop
float_range_function2
gnm_range_covar
gnm_range_correl_pop
value_release
g_free
g_malloc0
gnm_expr_eval
value_new_error_VALUE
value_new_cellrange
gnm_cellref_make_abs
g_return_if_fail_warning
value_new_float
value_new_error_NUM
value_get_as_int
go_range_sum
gnm_range_product
function_iterate_argument_values
value_new_int
random_laplace_pdf
sqrt
value_get_as_checked_bool
dgeom
pgeom
random_exppow_pdf
pnorm
dweibull
pweibull
g_memdup
collect_floats_value
value_new_error_NA
value_new_error_DIV0
value_area_get_width
value_area_get_height
go_fake_floor
qsort
go_linear_regression
value_get_as_bool
g_malloc
value_new_array
value_array_set
sheet_foreach_cell_in_range
g_slist_free
dcgettext
value_new_error
gnm_cell_eval_content
g_slist_append
go_fake_ceil
gnm_range_min_k_nonconst
go_range_fractile_inter_nonconst
dpois
ppois
permut
function_iterate_do_value
go_pow10
go_fake_trunc
qnorm
dnorm
dnbinom
go_regression_stat_new
go_regression_stat_destroy
go_logarithmic_regression
value_dup
plnorm
qlnorm
go_logarithmic_fit
go_exponential_regression
dhyper
phyper
lgamma
qgamma
dgamma
pgamma
value_new_array_non_init
expm1
log1p
dexp
pexp
qbinom
pchisq
qchisq
dcauchy
pcauchy
dbinom
pbinom
qbeta
pbeta
go_plugin_depends
go_plugin_header
stat_functions
libm.so.6
libc.so.6
_edata
__bss_start
_end
plugin.so
GLIBC_2.2.5
%z~!
%r~!
%j~!
%b~!
%Z~!
%R~!
%J~!
%B~!
%:~!
%2~!
%*~!
%"~!
%z}!
%r}!
%j}!
=@}!
ATSubH
%dJ!
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
fffff.
AWAVI
AUATUSH
[]A\A]A^A_
XD$0H
Hc|$
FtdI
FtYH
T$ H
*utE
D9d$
|$ A
D;d$
H[]A\A]A^A_
l$ A
T$,D9d$,H
T$ L
D$DH
|$ D
XD$8H
H;,$H
|$ D
XL$0
^L$8
\L$0H
H[]A\A]A^
fff.
l$ H
fffff.
l$(H
\$ L
d$0L
l$8L
t$@H
ffffff.
D$ f
\L$(
L$(H
\$(H
l$0H
\$(H
l$0H
ffffff.
fff.
ffffff.
L$Hf
QD$Hf
d$ H
d$ H
l$ H
l$ H
\$0H
l$8L
d$@H
T$ Hc
T$(f
l$ L
d$(L
l$0H
l$0H
\$(L
d$8L
l$@L
t$HL
|$PH
L$$M
L$$9L$ 
\$PH
L$$H
L$\I
D$PH
\$hH
l$pL
d$xL
L$XI
t$\H
T$HL
t$\H
T$@L
t$XH
T$8L
t$XH
T$0L
\$@f
.D$0
T$Xf
\L$8
L$(1
*L$$
\d$8
YT$(f
YD$0
l$ L
d$(L
l$0L
t$8L
|$@H
l$ L
d$(L
l$0L
t$8L
|$@H
l$ L
d$(L
l$0L
t$8L
|$@H
l$ H
d$(L
l$0L
t$8L
|$@H
l$ L
d$(L
l$0L
t$8L
|$@H
t$ H
t$ H
\$ H
l$(L
d$0H
L$ H
D$(1
L$ H
D$ 1
L$HM
D$8H
\$XH
l$`L
d$hL
l$pH
L$LM
D$@u
L$L;L$Ht
|$@L
L$ A
YD$(
XD$ 
ffffff.
l$ H
D$ H
\$@H
l$HL
d$PL
l$XL
t$`H
L$<I
L$4I
;L$<
L$<I
L$4I
Hc|$8H
L$8H
L$<Hc
t$(H
L$8I
t$(1
|$(L
T$4H
9\$4
\$`H
l$PH
p[]A\
;Ft@
p[]A\
\$`H
l$PH
D$h;D$XtvH
\$`H
l$PH
|$`H
\$PH
T$8H
D$ H
D$ f
XD$0
XL$(
D$0f
XD$8
T$HH
YT$ 
*D$h
\T$@
 uMH
 ugH
L$,L
\$0H
l$8L
d$@H
t$,L
L$,L
\$0H
l$8L
d$@H
*L$,
t$,L
\$ H
l$(L
d$0H
\$ H
l$(L
d$0H
D$0H
T$ H
\$PH
l$XL
d$`H
l$ H
l$ H
ffffff.
ffffff.
l$ H
l$ H
|$ H
FtfH
D$ H
D$0H
T$`H
T$`H
D$<E
D$<I
D$(L
~AHcD$<
D$ I
D$ E1
T$ E1
D$ H
D$PI
;\$\I
D$xH
9\$\|}H
D$ L
|$PH
T$xH
|$PE1
D$@I
;\$LI
D$pH
9\$L|mH
D$ L
l$lH
T$pH
|$@E1
D+t$LIc
|$@D
|$ H
FtjH
D$pH
D$ H
D$(H
D$4I
t$dL
|$p1
|$pH
|$p1
|$pH
|$p1
|$pH
~AHcD$4
t$dH
t$d1
\$dE
\$dL
|$p1
l$dM
D$ I
D$ E1
l$dH
T$ E1
l$dH
D$ H
l$dH
D$HI
D$dH
;\$PI
D$XH
D$pE1
9\$P|qH
D$ L
|$HH
T$XH
|$HE1
\$d)T$dHc|$dH
|$HI
D$8I
D$D~
T$dH
9\$D
D$ L
l$TH
|$8E1
D$ H
|$8I
T$ H
l$ H
l$ H
ffffff.
?FtH1
d$ L
l$(L
t$0H
|$ H
FtfH
D$ H
D$0H
T$`H
T$`H
D$<H
D$<I
D$(L
~AHcD$<
D$ I
D$ E1
T$ E1
D$ H
D$PI
;\$\I
D$xH
9\$\|}H
D$ L
|$PH
T$xH
|$PE1
D$@I
;\$LI
D$pH
9\$L|mH
D$ L
l$lH
T$pH
|$@E1
D+t$LIc
|$@D
l$ H
D$ H
\$HH
l$PL
d$XL
l$`H
L$8I
L$0I
D$<E
L$8;L$4
L$8I
L$0I
|$(L
|$0H
9\$0
L$4H
L$8Hc
t$(H
L$4H
x^E9
uvD)
l$ L
t$(L
|$0H
l$ L
t$(L
|$0H
fff.
ffff.
\$ H
l$(L
d$0L
l$8L
t$@H
d$ H
d$ H
\$(H
l$0L
d$8L
l$@L
t$HL
|$PH
L$ M
D$$H
L$ L
|$ H
L$ H
D9l$ L
ffff.
fffff.
d$ H
d$ H
d$ H
d$ H
fffff.
d$ L
l$(L
t$0H
d$ L
l$(L
t$0H
d$ L
l$(L
t$0H
d$ L
l$(L
t$0H
l$ H
l$ H
fff.
D$0H
D$8f
.D$ w
D$ f
D$8f
.D$(s
.D$0s
T$01
\\$8
D$8H
D$ H
D$ f
D$ f
\\$ 
\D$ 
i == argc
gnumeric
goffice
1.8.2
avedev
number,number,
average
averagea
bernoulli
betadist
fff|ff
x,alpha,beta,a,b
betainv
p,alpha,beta,a,b
fffb
n,t,p,c
cauchy
x,a,cum
chidist
x,dof
chiinv
p,dof
chitest
act_range,theo_range
confidence
x,stddev,size
correl
array1,array2
count
counta
covar
critbinom
trials,p,alpha
devsq
expondist
x,y,cumulative
fdist
x,dof of num,dof of denom
finv
p,dof of num,dof of denom
fisher
number
fisherinv
forecast
x,known y's,known x's
frequency
data_array,bins_array
ftest
arr1,arr2
gammadist
number,alpha,beta,cum
gammainv
number,alpha,beta
gammaln
geomean
growth
A|AAb
harmean
hypgeomdist
ffff|b
x,n,M,N,cumulative
intercept
kurt
large
values,k,
linest
A|Abb
logest
logfit
known_y's,known_x's
loginv
p,mean,stddev
lognormdist
x,mean,stddev
logreg
maxa
mina
mode
negbinomdist
f,t,p
x,mean,stddev,cumulative
norminv
normsdist
normsinv
pearson
percentile
array,k
percentrank
array,x,significance
permut
poisson
x,mean,cumulative
prob
AAf|f
quartile
array,quart
fr|f
slope
small
standardize
ssmedian
array,interval
stdev
stdeva
stdevp
stdevpa
steyx
skew
tdist
x,dof,tails
tinv
trend
trimmean
ref,fraction
ttest
rrff
array1,array2,tails,type
vara
varp
varpa
weibull
x.alpha,beta,cumulative
ztest
ref,x
exppowdist
x,a,b
kurtp
landau
laplace
logistic
pareto
rayleigh
x,sigma
rayleightail
x,a,sigma
skewp
subtotal
function_nbr,ref,ref,
cronbach
munG
gnumeric_cronbach
Array version not implemented!
known_y's,known_x's,new_x's,const
known_y's,known_x's,const,stat
x_range,prob_range,lower_limit,upper_limit
@FUNCTION=AVEDEV
@SYNTAX=AVEDEV(n1, n2, ...)
@DESCRIPTION=AVEDEV returns the average of the absolute deviations of a data set from their mean.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
AVEDEV(A1:A5) equals 7.84.
@SEEALSO=STDEV
@FUNCTION=AVERAGE
@SYNTAX=AVERAGE(value1, value2,...)
@DESCRIPTION=AVERAGE computes the average of all the values and cells referenced in the argument list.  This is equivalent to the sum of the arguments divided by the count of the arguments.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
AVERAGE(A1:A5) equals 23.2.
@SEEALSO=SUM, COUNT
@FUNCTION=AVERAGEA
@SYNTAX=AVERAGEA(number1,number2,...)
@DESCRIPTION=AVERAGEA returns the average of the given arguments.  Numbers, text and logical values are included in the calculation too. If the cell contains text or the argument evaluates to FALSE, it is counted as value zero (0).  If the argument evaluates to TRUE, it is counted as one (1).  Note that empty cells are not counted.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers and strings 11.4, 17.3, "missing", 25.9, and 40.1.  Then
AVERAGEA(A1:A5) equals 18.94.
@SEEALSO=AVERAGE
@FUNCTION=BERNOULLI
@SYNTAX=BERNOULLI(k,p)
@DESCRIPTION=BERNOULLI returns the probability p(k) of obtaining @k from a Bernoulli distribution with probability parameter @p.
* If @k != 0 and @k != 1 BERNOULLI returns #NUM! error.
* If @p < 0 or @p > 1 BERNOULLI returns #NUM! error.
@EXAMPLES=
BERNOULLI(0,0.5).
@SEEALSO=RANDBERNOULLI
@FUNCTION=BETADIST
@SYNTAX=BETADIST(x,alpha,beta[,a,b])
@DESCRIPTION=BETADIST function returns the cumulative beta distribution. @a is the optional lower bound of @x and @b is the optional upper bound of @x.
* If @a is not given, BETADIST uses 0.
* If @b is not given, BETADIST uses 1.
* If @x < @a or @x > @b BETADIST returns #NUM! error.
* If @alpha <= 0 or @beta <= 0, BETADIST returns #NUM! error.
* If @a >= @b BETADIST returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
BETADIST(0.12,2,3) equals 0.07319808.
@SEEALSO=BETAINV
@FUNCTION=BETAINV
@SYNTAX=BETAINV(p,alpha,beta[,a,b])
@DESCRIPTION=BETAINV function returns the inverse of cumulative beta distribution.  @a is the optional lower bound of @x and @b is the optional upper bound of @x.
* If @a is not given, BETAINV uses 0.
* If @b is not given, BETAINV uses 1.
* If @p < 0 or @p > 1 BETAINV returns #NUM! error.
* If @alpha <= 0 or @beta <= 0, BETAINV returns #NUM! error.
* If @a >= @b BETAINV returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
BETAINV(0.45,1.6,1) equals 0.607096629.
@SEEALSO=BETADIST
@FUNCTION=BINOMDIST
@SYNTAX=BINOMDIST(n,trials,p,cumulative)
@DESCRIPTION=BINOMDIST function returns the binomial distribution. @n is the number of successes, @trials is the total number of independent trials, @p is the probability of success in trials, and @cumulative describes whether to return the sum of the binomial function from 0 to @n.
* If @n or @trials are non-integer they are truncated.
* If @n < 0 or @trials < 0 BINOMDIST returns #NUM! error.
* If @n > @trials BINOMDIST returns #NUM! error.
* If @p < 0 or @p > 1 BINOMDIST returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
BINOMDIST(3,5,0.8,0) equals 0.2048.
@SEEALSO=POISSON
@FUNCTION=CAUCHY
@SYNTAX=CAUCHY(x,a,cum)
@DESCRIPTION=CAUCHY returns the Cauchy distribution with scale parameter @a. If @cum is TRUE, CAUCHY returns the cumulative distribution.
* If @a < 0 CAUCHY returns #NUM! error.
* If @cum != TRUE and @cum != FALSE CAUCHY returns #VALUE! error.
@EXAMPLES=
CAUCHY(0.43,1,TRUE) returns 0.370735.
@SEEALSO=RANDCAUCHY
@FUNCTION=CHIDIST
@SYNTAX=CHIDIST(x,dof)
@DESCRIPTION=CHIDIST function returns the one-tailed probability of the chi-squared distribution. @dof is the number of degrees of freedom.
* If @dof is non-integer it is truncated.
* If @dof < 1 CHIDIST returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
CHIDIST(5.3,2) equals 0.070651213.
@SEEALSO=CHIINV,CHITEST
@FUNCTION=CHIINV
@SYNTAX=CHIINV(p,dof)
@DESCRIPTION=CHIINV function returns the inverse of the one-tailed probability of the chi-squared distribution.
* If @p < 0 or @p > 1 or @dof < 1 CHIINV returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
CHIINV(0.98,7) equals 1.564293004.
@SEEALSO=CHIDIST,CHITEST
@FUNCTION=CHITEST
@SYNTAX=CHITEST(actual_range,theoretical_range)
@DESCRIPTION=CHITEST function returns the test for independence of chi-squared distribution.
@actual_range is a range that contains the observed data points. @theoretical_range is a range that contains the expected values of the data points.
* This function is Excel compatible.
@EXAMPLES=
@SEEALSO=CHIDIST,CHIINV
@FUNCTION=CONFIDENCE
@SYNTAX=CONFIDENCE(x,stddev,size)
@DESCRIPTION=CONFIDENCE function returns the confidence interval for a mean. @x is the significance level, @stddev is the population standard deviation, and @size is the size of the sample.
* If @size is non-integer it is truncated.
* If @size < 0 CONFIDENCE returns #NUM! error.
* If @size is 0 CONFIDENCE returns #DIV/0! error.
* This function is Excel compatible.
@EXAMPLES=
CONFIDENCE(0.05,1,33) equals 0.341185936.
@SEEALSO=AVERAGE
@FUNCTION=CORREL
@SYNTAX=CORREL(array1,array2)
@DESCRIPTION=CORREL returns the correlation coefficient of two data sets.
* Strings and empty cells are simply ignored.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, and 42.7.  Then
CORREL(A1:A5,B1:B5) equals 0.996124788.
@SEEALSO=COVAR,FISHER,FISHERINV
@FUNCTION=COUNT
@SYNTAX=COUNT(b1, b2, ...)
@DESCRIPTION=COUNT returns the total number of integer or floating point arguments passed.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
COUNT(A1:A5) equals 5.
@SEEALSO=AVERAGE
@FUNCTION=COUNTA
@SYNTAX=COUNTA(b1, b2, ...)
@DESCRIPTION=COUNTA returns the number of arguments passed not including empty cells.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers and strings 11.4, "missing", "missing", 25.9, and 40.1.  Then
COUNTA(A1:A5) equals 5.
@SEEALSO=AVERAGE,COUNT,DCOUNT,DCOUNTA,PRODUCT,SUM
@FUNCTION=COVAR
@SYNTAX=COVAR(array1,array2)
@DESCRIPTION=COVAR returns the covariance of two data sets.
* Strings and empty cells are simply ignored.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, and 42.7.  Then
COVAR(A1:A5,B1:B5) equals 65.858.
@SEEALSO=CORREL,FISHER,FISHERINV
@FUNCTION=CRITBINOM
@SYNTAX=CRITBINOM(trials,p,alpha)
@DESCRIPTION=CRITBINOM function returns the smallest value for which the cumulative is greater than or equal to a given value. @n is the number of trials, @p is the probability of success in trials, and @alpha is the criterion value.
* If @trials is a non-integer it is truncated.
* If @trials < 0 CRITBINOM returns #NUM! error.
* If @p < 0 or @p > 1 CRITBINOM returns #NUM! error.
* If @alpha < 0 or @alpha > 1 CRITBINOM returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
CRITBINOM(10,0.5,0.75) equals 6.
@SEEALSO=BINOMDIST
@FUNCTION=DEVSQ
@SYNTAX=DEVSQ(n1, n2, ...)
@DESCRIPTION=DEVSQ returns the sum of squares of deviations of a data set from the sample mean.
* Strings and empty cells are simply ignored.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
DEVSQ(A1:A5) equals 470.56.
@SEEALSO=STDEV
@FUNCTION=EXPONDIST
@SYNTAX=EXPONDIST(x,y,cumulative)
@DESCRIPTION=EXPONDIST function returns the exponential distribution. If the @cumulative boolean is false it will return:
	@y * exp (-@y*@x),
otherwise it will return
	1 - exp (-@y*@x).
* If @x < 0 or @y <= 0 this will return an error.
* This function is Excel compatible.
@EXAMPLES=
EXPONDIST(2,4,0) equals 0.001341851.
@SEEALSO=POISSON
@FUNCTION=FDIST
@SYNTAX=FDIST(x,dof1,dof2)
@DESCRIPTION=FDIST function returns the F probability distribution. @dof1 is the numerator degrees of freedom and @dof2 is the denominator degrees of freedom.
* If @x < 0 FDIST returns #NUM! error.
* If @dof1 < 1 or @dof2 < 1, FDIST returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
FDIST(2,5,5) equals 0.232511319.
@SEEALSO=FINV
@FUNCTION=FINV
@SYNTAX=FINV(p,dof1,dof2)
@DESCRIPTION=FINV function returns the inverse of the F probability distribution.
* If @p < 0 or @p > 1 FINV returns #NUM! error.
* If @dof1 < 1 or @dof2 < 1 FINV returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
FINV(0.2,2,4) equals 2.472135955.
@SEEALSO=FDIST
@FUNCTION=FISHER
@SYNTAX=FISHER(x)
@DESCRIPTION=FISHER function returns the Fisher transformation at @x.
* If @x is not a number, FISHER returns #VALUE! error.
* If @x <= -1 or @x >= 1, FISHER returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
FISHER(0.332) equals 0.345074339.
@SEEALSO=SKEW
@FUNCTION=FISHERINV
@SYNTAX=FISHERINV(x)
@DESCRIPTION=FISHERINV function returns the inverse of the Fisher transformation at @x.
* If @x is non-number FISHERINV returns #VALUE! error.
* This function is Excel compatible.
@EXAMPLES=
FISHERINV(2) equals 0.96402758.
@SEEALSO=FISHER
@FUNCTION=FORECAST
@SYNTAX=FORECAST(x,known_y's,known_x's)
@DESCRIPTION=FORECAST function estimates a future value according to existing values using simple linear regression.  The estimated future value is a y-value for a given x-value (@x).
* If @known_x or @known_y contains no data entries or different number of data entries, FORECAST returns #N/A error.
* If the variance of the @known_x is zero, FORECAST returns #DIV/0 error.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, and 42.7.  Then
FORECAST(7,A1:A5,B1:B5) equals -10.859397661.
@SEEALSO=INTERCEPT,TREND
@FUNCTION=FREQUENCY
@SYNTAX=FREQUENCY(data_array,bins_array)
@DESCRIPTION=FREQUENCY function counts how often given values occur within a range of values.  The results are given as an array.
@data_array is a data array for which you want to count the frequencies.  @bin_array is an array containing the intervals into which you want to group the values in data_array.  If the @bin_array is empty, FREQUENCY returns the number of data points in @data_array.
* This function is Excel compatible.
@EXAMPLES=
@SEEALSO=
@FUNCTION=FTEST
@SYNTAX=FTEST(array1,array2)
@DESCRIPTION=FTEST function returns the two-tailed probability that the variances in the given two data sets are not significantly different.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, and 42.7.  Then
FTEST(A1:A5,B1:B5) equals 0.510815017.
@SEEALSO=FDIST,FINV
@FUNCTION=GAMMADIST
@SYNTAX=GAMMADIST(x,alpha,beta,cum)
@DESCRIPTION=GAMMADIST function returns the gamma distribution. If @cum is TRUE, GAMMADIST returns the incomplete gamma function, otherwise it returns the probability mass function.
* If @x < 0 GAMMADIST returns #NUM! error.
* If @alpha <= 0 or @beta <= 0, GAMMADIST returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
GAMMADIST(1,2,3,0) equals 0.07961459.
@SEEALSO=GAMMAINV
@FUNCTION=GAMMAINV
@SYNTAX=GAMMAINV(p,alpha,beta)
@DESCRIPTION=GAMMAINV function returns the inverse of the cumulative gamma distribution.
* If @p < 0 or @p > 1 GAMMAINV returns #NUM! error.
* If @alpha <= 0 or @beta <= 0 GAMMAINV returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
GAMMAINV(0.34,2,4) equals 4.829093908.
@SEEALSO=GAMMADIST
@FUNCTION=GAMMALN
@SYNTAX=GAMMALN(x)
@DESCRIPTION=GAMMALN function returns the natural logarithm of the gamma function.
* If @x is non-number then GAMMALN returns #VALUE! error.
* If @x <= 0 then GAMMALN returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
GAMMALN(23) equals 48.471181352.
@SEEALSO=POISSON
@FUNCTION=GEOMEAN
@SYNTAX=GEOMEAN(b1, b2, ...)
@DESCRIPTION=GEOMEAN returns the geometric mean of the given arguments. This is equal to the Nth root of the product of the terms.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
GEOMEAN(A1:A5) equals 21.279182482.
@SEEALSO=AVERAGE,HARMEAN,MEDIAN,MODE,TRIMMEAN
@FUNCTION=GROWTH
@SYNTAX=GROWTH(known_y's[,known_x's,new_x's,const])
@DESCRIPTION=GROWTH function applies the ``least squares'' method to fit an exponential curve to your data and predicts the exponential growth by using this curve. 
GROWTH returns an array having one column and a row for each data point in @new_x.
* If @known_x's is omitted, an array {1, 2, 3, ...} is used.
* If @new_x's is omitted, it is assumed to be the same as @known_x's.
* If @known_y's and @known_x's have unequal number of data points, GROWTH returns #NUM! error.
* If @const is FALSE, the line will be forced to go through the origin, i.e., b will be zero. The default is TRUE.
@EXAMPLES=
@SEEALSO=LOGEST,GROWTH,TREND
@FUNCTION=HARMEAN
@SYNTAX=HARMEAN(b1, b2, ...)
@DESCRIPTION=HARMEAN returns the harmonic mean of the N data points (that is, N divided by the sum of the inverses of the data points).
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
HARMEAN(A1:A5) equals 19.529814427.
@SEEALSO=AVERAGE,GEOMEAN,MEDIAN,MODE,TRIMMEAN
@FUNCTION=HYPGEOMDIST
@SYNTAX=HYPGEOMDIST(x,n,M,N[,cumulative])
@DESCRIPTION=HYPGEOMDIST function returns the hypergeometric distribution. @x is the number of successes in the sample, @n is the number of trials, @M is the number of successes overall, and @N is the population size.
If the optional argument @cumulative is TRUE, the cumulative left tail will be returned.
* If @x,@n,@M or @N is a non-integer it is truncated.
* If @x,@n,@M or @N < 0 HYPGEOMDIST returns #NUM! error.
* If @x > @M or @n > @N HYPGEOMDIST returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
HYPGEOMDIST(1,2,3,10) equals 0.4666667.
@SEEALSO=BINOMDIST,POISSON
@FUNCTION=INTERCEPT
@SYNTAX=INTERCEPT(known_y's,known_x's)
@DESCRIPTION=INTERCEPT function calculates the point where the linear regression line intersects the y-axis.
* If @known_x or @known_y contains no data entries or different number of data entries, INTERCEPT returns #N/A error.
* If the variance of the @known_x is zero, INTERCEPT returns #DIV/0 error.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, and 42.7.  Then
INTERCEPT(A1:A5,B1:B5) equals -20.785117212.
@SEEALSO=FORECAST,TREND
@FUNCTION=KURT
@SYNTAX=KURT(n1, n2, ...)
@DESCRIPTION=KURT returns an unbiased estimate of the kurtosis of a data set.
Note, that this is only meaningful if the underlying distribution really has a fourth moment.  The kurtosis is offset by three such that a normal distribution will have zero kurtosis.
* Strings and empty cells are simply ignored.
* If fewer than four numbers are given or all of them are equal KURT returns #DIV/0! error.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
KURT(A1:A5) equals 1.234546305.
@SEEALSO=AVERAGE,VAR,SKEW,KURTP
@FUNCTION=LARGE
@SYNTAX=LARGE(n, k)
@DESCRIPTION=LARGE returns the k-th largest value in a data set.
* If data set is empty LARGE returns #NUM! error.
* If @k <= 0 or @k is greater than the number of data items given LARGE returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
LARGE(A1:A5,2) equals 25.9.
LARGE(A1:A5,4) equals 17.3.
@SEEALSO=PERCENTILE,PERCENTRANK,QUARTILE,SMALL
@FUNCTION=LINEST
@SYNTAX=LINEST(known_y's[,known_x's[,const[,stat]]])
@DESCRIPTION=LINEST function calculates the ``least squares'' line that best fit to your data in @known_y's.  @known_x's contains the corresponding x's where y=mx+b.
LINEST returns an array having two columns and one row.  The slope (m) of the regression line y=mx+b is given in the first column and the y-intercept (b) in the second.
If @stat is TRUE, extra statistical information will be returned. Extra statistical information is written below the regression line coefficients in the result array.  Extra statistical information consists of four rows of data.  In the first row the standard error values for the coefficients m1, (m2, ...), b are represented.  The second row contains the square of R and the standard error for the y estimate.  The third row contains the F-observed value and the degrees of freedom.  The last row contains the regression sum of squares and the residual sum of squares.
* If @known_x's is omitted, an array {1, 2, 3, ...} is used.
* If @known_y's and @known_x's have unequal number of data points, LINEST returns #NUM! error.
* If @const is FALSE, the line will be forced to go through the origin, i.e., b will be zero. The default is TRUE.
* The default of @stat is FALSE.
@EXAMPLES=
@SEEALSO=LOGEST,TREND
@FUNCTION=LOGEST
@SYNTAX=LOGEST(known_y's[,known_x's,const,stat])
@DESCRIPTION=LOGEST function applies the ``least squares'' method to fit an exponential curve of the form
	y = b * m{1}^x{1} * m{2}^x{2}... to your data.
If @stat is TRUE, extra statistical information will be returned. Extra statistical information is written below the regression line coefficients in the result array.  Extra statistical information consists of four rows of data.  In the first row the standard error values for the coefficients m1, (m2, ...), b are represented.  The second row contains the square of R and the standard error for the y estimate.  The third row contains the F-observed value and the degrees of freedom.  The last row contains the regression sum of squares and the residual sum of squares.
* If @known_x's is omitted, an array {1, 2, 3, ...} is used. LOGEST returns an array { m{n},m{n-1}, ...,m{1},b }.
* If @known_y's and @known_x's have unequal number of data points, LOGEST returns #NUM! error.
* If @const is FALSE, the line will be forced to go through (0,1),i.e., b will be one.  The default is TRUE.
* The default of @stat is FALSE.
@EXAMPLES=
@SEEALSO=GROWTH,TREND
@FUNCTION=LOGFIT
@SYNTAX=LOGFIT(known_y's,known_x's)
@DESCRIPTION=LOGFIT function applies the ``least squares'' method to fit the logarithmic equation
y = a + b * ln(sign * (x - c)) ,   sign = +1 or -1 
to your data. The graph of the equation is a logarithmic curve moved horizontally by c and possibly mirrored across the y-axis (if sign = -1).
LOGFIT returns an array having five columns and one row. `Sign' is given in the first column, `a', `b', and `c' are given in columns 2 to 4. Column 5 holds the sum of squared residuals.
An error is returned when there are less than 3 different x's or y's, or when the shape of the point cloud is too different from a ``logarithmic'' one.
You can use the above formula 
= a + b * ln(sign * (x - c)) 
or rearrange it to 
= (exp((y - a) / b)) / sign + c 
to compute unknown y's or x's, respectively. 
Technically, this is non-linear fitting by trial-and-error. The accuracy of `c' is: width of x-range -> rounded to the next smaller (10^integer), times 0.000001. There might be cases in which the returned fit is not the best possible.
@EXAMPLES=
@SEEALSO=LOGREG,LINEST,LOGEST
@FUNCTION=LOGINV
@SYNTAX=LOGINV(p,mean,stddev)
@DESCRIPTION=LOGINV function returns the inverse of the lognormal cumulative distribution. @p is the given probability corresponding to the normal distribution, @mean is the arithmetic mean of the distribution, and @stddev is the standard deviation of the distribution.
* If @p < 0 or @p > 1 or @stddev <= 0 LOGINV returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
LOGINV(0.5,2,3) equals 7.389056099.
@SEEALSO=EXP,LN,LOG,LOG10,LOGNORMDIST
@FUNCTION=LOGNORMDIST
@SYNTAX=LOGNORMDIST(x,mean,stddev)
@DESCRIPTION=LOGNORMDIST function returns the lognormal distribution. @x is the value for which you want the distribution, @mean is the mean of the distribution, and @stddev is the standard deviation of the distribution.
* If @stddev = 0 LOGNORMDIST returns #DIV/0! error.
* If @x <= 0, @mean < 0 or @stddev < 0 LOGNORMDIST returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
LOGNORMDIST(3,1,2) equals 0.519662338.
@SEEALSO=NORMDIST
@FUNCTION=LOGREG
@SYNTAX=LOGREG(known_y's[,known_x's[,const[,stat]]])
@DESCRIPTION=LOGREG function transforms your x's to z=ln(x) and applies the ``least squares'' method to fit the linear equation
y = m * z + b 
to your y's and z's --- equivalent to fitting the equation
y = m * ln(x) + b 
to y's and x's. 
If @known_x's is omitted, an array {1, 2, 3, ...} is used. LOGREG returns an array having two columns and one row. m is given in the first column and b in the second. 
If @known_y's and @known_x's have unequal number of data points, LOGREG returns #NUM! error.
If @const is FALSE, the curve will be forced to go through [1; 0], i.e., b will be zero. The default is TRUE.
If @stat is TRUE, extra statistical information will be returned which applies to the state AFTER transformation to z. Extra statistical information is written below m and b in the result array.  Extra statistical information consists of four rows of data.  In the first row the standard error values for the coefficients m, b are represented.  The second row contains the square of R and the standard error for the y estimate. The third row contains the F-observed value and the degrees of freedom.  The last row contains the regression sum of squares and the residual sum of squares.The default of @stat is FALSE.
@EXAMPLES=
@SEEALSO=LOGFIT,LINEST,LOGEST
@FUNCTION=MAX
@SYNTAX=MAX(b1, b2, ...)
@DESCRIPTION=MAX returns the value of the element of the values passed that has the largest value, with negative numbers considered smaller than positive numbers.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
MAX(A1:A5) equals 40.1.
@SEEALSO=MIN,ABS
@FUNCTION=MAXA
@SYNTAX=MAXA(number1,number2,...)
@DESCRIPTION=MAXA returns the largest value of the given arguments.  Numbers, text and logical values are included in the calculation too. If the cell contains text or the argument evaluates to FALSE, it is counted as value zero (0).  If the argument evaluates to TRUE, it is counted as one (1).  Note that empty cells are not counted.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers and strings 11.4, 17.3, "missing", 25.9, and 40.1.  Then
MAXA(A1:A5) equals 40.1.
@SEEALSO=MAX,MINA
@FUNCTION=MEDIAN
@SYNTAX=MEDIAN(n1, n2, ...)
@DESCRIPTION=MEDIAN returns the median of the given data set.
* Strings and empty cells are simply ignored.
* If even numbers are given MEDIAN returns the average of the two numbers in the middle.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
MEDIAN(A1:A5) equals 21.3.
@SEEALSO=AVERAGE,COUNT,COUNTA,DAVERAGE,MODE,SSMEDIAN,SUM
@FUNCTION=MIN
@SYNTAX=MIN(b1, b2, ...)
@DESCRIPTION=MIN returns the value of the element of the values passed that has the smallest value, with negative numbers considered smaller than positive numbers.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
MIN(A1:A5) equals 11.4.
@SEEALSO=MAX,ABS
@FUNCTION=MINA
@SYNTAX=MINA(number1,number2,...)
@DESCRIPTION=MINA returns the smallest value of the given arguments.  Numbers, text and logical values are included in the calculation too. If the cell contains text or the argument evaluates to FALSE, it is counted as value zero (0).  If the argument evaluates to TRUE, it is counted as one (1).  Note that empty cells are not counted.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers and strings 11.4, 17.3, "missing", 25.9, and 40.1.  Then
MINA(A1:A5) equals 0.
@SEEALSO=MIN,MAXA
@FUNCTION=MODE
@SYNTAX=MODE(n1, n2, ...)
@DESCRIPTION=MODE returns the most common number of the data set. If the data set has many most common numbers MODE returns the first one of them.
* Strings and empty cells are simply ignored.
* If the data set does not contain any duplicates MODE returns #N/A error.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 11.4, 25.9, and 40.1.  Then
MODE(A1:A5) equals 11.4.
@SEEALSO=AVERAGE,MEDIAN
@FUNCTION=NEGBINOMDIST
@SYNTAX=NEGBINOMDIST(f,t,p)
@DESCRIPTION=NEGBINOMDIST function returns the negative binomial distribution. @f is the number of failures, @t is the threshold number of successes, and @p is the probability of a success.
* If @f or @t is a non-integer it is truncated.
* If (@f + @t -1) <= 0 NEGBINOMDIST returns #NUM! error.
* If @p < 0 or @p > 1 NEGBINOMDIST returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
NEGBINOMDIST(2,5,0.55) equals 0.152872629.
@SEEALSO=BINOMDIST,COMBIN,FACT,HYPGEOMDIST,PERMUT
@FUNCTION=NORMDIST
@SYNTAX=NORMDIST(x,mean,stddev,cumulative)
@DESCRIPTION=The NORMDIST function returns the value of the probability density function or the cumulative distribution function for the normal distribution with the mean given by @mean, and the standard deviation given by @stddev. If @cumulative is FALSE, NORMDIST returns the value of the probability density function at the value @x. If @cumulative is TRUE, NORMDIST returns the value of the cumulative distribution function at @x.
* If @stddev is 0 NORMDIST returns #DIV/0! error.
* This function is Excel compatible.
@EXAMPLES=
NORMDIST(2,1,2,0) equals 0.176032663.
@SEEALSO=POISSON
@FUNCTION=NORMINV
@SYNTAX=NORMINV(p,mean,stddev)
@DESCRIPTION=NORMINV function returns the inverse of the normal cumulative distribution. @p is the given probability corresponding to the normal distribution, @mean is the arithmetic mean of the distribution, and @stddev is the standard deviation of the distribution.
* If @p < 0 or @p > 1 or @stddev <= 0 NORMINV returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
NORMINV(0.76,2,3) equals 4.118907689.
@SEEALSO=NORMDIST,NORMSDIST,NORMSINV,STANDARDIZE,ZTEST
@FUNCTION=NORMSDIST
@SYNTAX=NORMSDIST(x)
@DESCRIPTION=NORMSDIST function returns the standard normal cumulative distribution. @x is the value for which you want the distribution.
* This function is Excel compatible.
@EXAMPLES=
NORMSDIST(2) equals 0.977249868.
@SEEALSO=NORMDIST
@FUNCTION=NORMSINV
@SYNTAX=NORMSINV(p)
@DESCRIPTION=NORMSINV function returns the inverse of the standard normal cumulative distribution. @p is the given probability corresponding to the normal distribution.
* If @p < 0 or @p > 1 NORMSINV returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
NORMSINV(0.2) equals -0.841621234.
@SEEALSO=NORMDIST,NORMINV,NORMSDIST,STANDARDIZE,ZTEST
@FUNCTION=PEARSON
@SYNTAX=PEARSON(array1,array2)
@DESCRIPTION=PEARSON returns the Pearson correlation coefficient of two data sets.
* Strings and empty cells are simply ignored.
* This function is Excel compatible.
@EXAMPLES=
@SEEALSO=INTERCEPT,LINEST,RSQ,SLOPE,STEYX
@FUNCTION=PERCENTILE
@SYNTAX=PERCENTILE(array,k)
@DESCRIPTION=PERCENTILE function returns the 100*@k-th percentile of the given data points (that is, a number x such that a fraction @k of the data points are less than x).
* If @array is empty, PERCENTILE returns #NUM! error.
* If @k < 0 or @k > 1, PERCENTILE returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
PERCENTILE(A1:A5,0.42) equals 20.02.
@SEEALSO=QUARTILE
@FUNCTION=PERCENTRANK
@SYNTAX=PERCENTRANK(array,x[,significance])
@DESCRIPTION=PERCENTRANK function returns the rank of a data point in a data set.  @array is the range of numeric values, @x is the data point which you want to rank, and the optional @significance specifies the number of significant digits for the returned value, truncating the remainder.  If @significance is omitted, PERCENTRANK uses three digits.
* If @array contains no data points, PERCENTRANK returns #NUM! error.
* If @significance is less than one, PERCENTRANK returns #NUM! error.
* If @x exceeds the largest value or is less than the smallest value in @array, PERCENTRANK returns #NUM! error.
* If @x does not match any of the values in @array or @x matches more than once, PERCENTRANK interpolates the returned value.
@EXAMPLES=
@SEEALSO=LARGE,MAX,MEDIAN,MIN,PERCENTILE,QUARTILE,SMALL
@FUNCTION=PERMUT
@SYNTAX=PERMUT(n,k)
@DESCRIPTION=PERMUT function returns the number of permutations. @n is the number of objects, @k is the number of objects in each permutation.
* If @n = 0 PERMUT returns #NUM! error.
* If @n < @k PERMUT returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
PERMUT(7,3) equals 210.
@SEEALSO=COMBIN
@FUNCTION=POISSON
@SYNTAX=POISSON(x,mean,cumulative)
@DESCRIPTION=POISSON function returns the Poisson distribution. @x is the number of events, @mean is the expected numeric value @cumulative describes whether to return the sum of the Poisson function from 0 to @x.
* If @x is a non-integer it is truncated.
* If @x < 0 POISSON returns #NUM! error.
* If @mean <= 0 POISSON returns the #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
POISSON(3,6,0) equals 0.089235078.
@SEEALSO=NORMDIST, WEIBULL
@FUNCTION=PROB
@SYNTAX=PROB(x_range,prob_range,lower_limit[,upper_limit])
@DESCRIPTION=PROB function returns the probability that values in a range or an array are between two limits. If @upper_limit is not given, PROB returns the probability that values in @x_range are equal to @lower_limit.
* If the sum of the probabilities in @prob_range is not equal to 1 PROB returns #NUM! error.
* If any value in @prob_range is <=0 or > 1, PROB returns #NUM! error.
* If @x_range and @prob_range contain a different number of data entries, PROB returns #N/A error.
* This function is Excel compatible.
@EXAMPLES=
@SEEALSO=BINOMDIST,CRITBINOM
@FUNCTION=QUARTILE
@SYNTAX=QUARTILE(array,quart)
@DESCRIPTION=QUARTILE function returns the quartile of the given data points.
If @quart is equal to: QUARTILE returns:
0                      the smallest value of @array.
1                      the first quartile
2                      the second quartile
3                      the third quartile
4                      the largest value of @array.
* If @array is empty, QUARTILE returns #NUM! error.
* If @quart < 0 or @quart > 4, QUARTILE returns #NUM! error.
* If @quart is not an integer, it is truncated.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
QUARTILE(A1:A5,1) equals 17.3.
@SEEALSO=LARGE,MAX,MEDIAN,MIN,PERCENTILE,SMALL
@FUNCTION=RANK
@SYNTAX=RANK(x,ref[,order])
@DESCRIPTION=RANK returns the rank of a number in a list of numbers.  @x is the number whose rank you want to find, @ref is the list of numbers, and @order specifies how to rank numbers.  If @order is 0, numbers are ranked in descending order, otherwise numbers are ranked in ascending order.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
RANK(17.3,A1:A5) equals 4.
@SEEALSO=PERCENTRANK
@FUNCTION=SLOPE
@SYNTAX=SLOPE(known_y's,known_x's)
@DESCRIPTION=SLOPE returns the slope of the linear regression line.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, and 42.7.  Then
SLOPE(A1:A5,B1:B5) equals 1.417959936.
@SEEALSO=STDEV,STDEVPA
@FUNCTION=SMALL
@SYNTAX=SMALL(n, k)
@DESCRIPTION=SMALL returns the k-th smallest value in a data set.
* If data set is empty SMALL returns #NUM! error.
* If @k <= 0 or @k is greater than the number of data items given SMALL returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
SMALL(A1:A5,2) equals 17.3.
SMALL(A1:A5,4) equals 25.9.
@SEEALSO=PERCENTILE,PERCENTRANK,QUARTILE,LARGE
@FUNCTION=STANDARDIZE
@SYNTAX=STANDARDIZE(x,mean,stddev)
@DESCRIPTION=STANDARDIZE function returns a normalized value. @x is the number to be normalized, @mean is the mean of the distribution, @stddev is the standard deviation of the distribution.
* If @stddev is 0 STANDARDIZE returns #DIV/0! error.
* This function is Excel compatible.
@EXAMPLES=
STANDARDIZE(3,2,4) equals 0.25.
@SEEALSO=AVERAGE
@FUNCTION=SSMEDIAN
@SYNTAX=SSMEDIAN(array[,interval)]
@DESCRIPTION=The SSMEDIAN function returns the median for grouped data as commonly determined in the social sciences. The data points given in @array are assumed to be the result of grouping data into intervals of length @interval
* If @interval is not given, SSMEDIAN uses 1.
* If @array is empty, SSMEDIAN returns #NUM! error.
* If @interval <= 0, SSMEDIAN returns #NUM! error.
* SSMEDIAN does not check whether the data points are at least @interval apart.
@EXAMPLES=
Let us assume that the cells A1, A2, A3 contain numbers 7, 8, 8.  Then
SSMEDIAN(A1:A3, 1) equals 7.75.
@SEEALSO=MEDIAN
@FUNCTION=STDEV
@SYNTAX=STDEV(b1, b2, ...)
@DESCRIPTION=STDEV returns the sample standard deviation of the given sample.
To obtain the population standard deviation of a whole population use STDEVP.
STDEV is also known as the N-1-standard deviation.
Under reasonable conditions, it is the maximum-likelihood estimator for the true population standard deviation.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
STDEV(A1:A5) equals 10.84619749.
@SEEALSO=AVERAGE,DSTDEV,DSTDEVP,STDEVA,STDEVPA,VAR
@FUNCTION=STDEVA
@SYNTAX=STDEVA(number1,number2,...)
@DESCRIPTION=STDEVA returns the sample standard deviation of the given sample.
To obtain the population standard deviation of a whole population use STDEVPA.
STDEVA is also known as the N-1-standard deviation.
Under reasonable conditions, it is the maximum-likelihood estimator for the true population standard deviation.
Numbers, text and logical values are included in the calculation too.  If the cell contains text or the argument evaluates to FALSE, it is counted as value zero (0).  If the argument evaluates to TRUE, it is counted as one (1).  Note that empty cells are not counted.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers and strings 11.4, 17.3, "missing", 25.9, and 40.1.  Then
STDEVA(A1:A5) equals 15.119953704.
@SEEALSO=STDEV,STDEVPA
@FUNCTION=STDEVP
@SYNTAX=STDEVP(b1, b2, ...)
@DESCRIPTION=STDEVP returns the population standard deviation of the given population. 
This is also known as the N-standard deviation
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
STDEVP(A1:A5) equals 9.701133954.
@SEEALSO=STDEV,STDEVA,STDEVPA
@FUNCTION=STDEVPA
@SYNTAX=STDEVPA(number1,number2,...)
@DESCRIPTION=STDEVPA returns the population standard deviation of an entire population.
This is also known as the N-standard deviation
Numbers, text and logical values are included in the calculation too.  If the cell contains text or the argument evaluates to FALSE, it is counted as value zero (0).  If the argument evaluates to TRUE, it is counted as one (1).  Note that empty cells are not counted.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers and strings 11.4, 17.3, "missing", 25.9, and 40.1.  Then
STDEVPA(A1:A5) equals 13.523697719.
@SEEALSO=STDEVA,STDEVP
@FUNCTION=STEYX
@SYNTAX=STEYX(known_y's,known_x's)
@DESCRIPTION=STEYX function returns the standard error of the predicted y-value for each x in the regression.
* If @known_y's and @known_x's are empty or have a different number of arguments then STEYX returns #N/A error.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, and 42.7.  Then
STEYX(A1:A5,B1:B5) equals 1.101509979.
@SEEALSO=PEARSON,RSQ,SLOPE
@FUNCTION=RSQ
@SYNTAX=RSQ(array1,array2)
@DESCRIPTION=RSQ returns the square of the Pearson correlation coefficient of two data sets.
* Strings and empty cells are simply ignored.
* This function is Excel compatible.
@EXAMPLES=
@SEEALSO=CORREL,COVAR,INTERCEPT,LINEST,LOGEST,PEARSON,SLOPE,STEYX,TREND
@FUNCTION=SKEW
@SYNTAX=SKEW(n1, n2, ...)
@DESCRIPTION=SKEW returns an unbiased estimate for skewness of a distribution.
Note, that this is only meaningful if the underlying distribution really has a third moment.  The skewness of a symmetric (e.g., normal) distribution is zero.
* Strings and empty cells are simply ignored.
* If less than three numbers are given, SKEW returns #DIV/0! error.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
SKEW(A1:A5) equals 0.976798268.
@SEEALSO=AVERAGE,VAR,SKEWP,KURT
@FUNCTION=TDIST
@SYNTAX=TDIST(x,dof,tails)
@DESCRIPTION=TDIST function returns the Student's t-distribution. @dof is the degree of freedom and @tails is 1 or 2 depending on whether you want one-tailed or two-tailed distribution.
@tails = 1 returns the size of the right tail.
* If @dof < 1 TDIST returns #NUM! error.
* If @tails is neither 1 or 2 TDIST returns #NUM! error.
* This function is Excel compatible for non-negative @x.
Warning: the parameterization of this function is different from what is used for, e.g., NORMSDIST.  This is a common source of mistakes, but necessary for compatibility.
@EXAMPLES=
TDIST(2,5,1) equals 0.050969739.
TDIST(-2,5,1) equals 0.949030261.
TDIST(0,5,2) equals 1.
@SEEALSO=TINV,TTEST
@FUNCTION=TINV
@SYNTAX=TINV(p,dof)
@DESCRIPTION=TINV function returns the inverse of the two-tailed Student's t-distribution.
* If @p < 0 or @p > 1 or @dof < 1 TINV returns #NUM! error.
* This function is Excel compatible.
Warning: the parameterization of this function is different from what is used for, e.g., NORMSINV.  This is a common source of mistakes, but necessary for compatibility.
@EXAMPLES=
TINV(0.4,32) equals 0.852998454.
@SEEALSO=TDIST,TTEST
@FUNCTION=TREND
@SYNTAX=TREND(known_y's[,known_x's[,new_x's[,const]]])
@DESCRIPTION=TREND function estimates future values of a given data set using the ``least squares'' line that best fit to your data. @known_y's is the y-values where y=mx+b and @known_x's contains the corresponding x-values.  @new_x's contains the x-values for which you want to estimate the y-values. If @const is FALSE, the line will be forced to go through the origin, i.e., b will be zero.
* If @known_x's is omitted, an array {1, 2, 3, ...} is used.
* If @new_x's is omitted, it is assumed to be the same as @known_x's.
* If @const is omitted, it is assumed to be TRUE.
* If @known_y's and @known_x's have unequal number of data points, TREND returns #NUM! error.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, and 42.7.  Then
TREND(A1:A5,B1:B5) equals {12.1, 15.7, 21.6, 26.7, 39.7}.
@SEEALSO=LINEST
@FUNCTION=TRIMMEAN
@SYNTAX=TRIMMEAN(ref,fraction)
@DESCRIPTION=TRIMMEAN returns the mean of the interior of a data set. @ref is the list of numbers whose mean you want to calculate and @fraction is the fraction of the data set excluded from the mean. For example, if @fraction=0.2 and the data set contains 40 numbers, 8 numbers are trimmed from the data set (40 x 0.2): the 4 largest and the 4 smallest.  To avoid a bias, the number of points to be excluded is always rounded down to the nearest even number.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
TRIMMEAN(A1:A5,0.2) equals 23.2.
@SEEALSO=AVERAGE,GEOMEAN,HARMEAN,MEDIAN,MODE
@FUNCTION=TTEST
@SYNTAX=TTEST(array1,array2,tails,type)
@DESCRIPTION=TTEST function returns the probability of a Student's t-Test. 
@array1 is the first data set and @array2 is the second data set.  If @tails is one, TTEST uses the one-tailed distribution and if @tails is two, TTEST uses the two-tailed distribution.  @type determines the kind of the test:
	1  Paired test
	2  Two-sample equal variance
	3  Two-sample unequal variance
* If the data sets contain a different number of data points and the test is paired (@type one), TTEST returns the #N/A error.
* @tails and @type are truncated to integers.
* If @tails is not one or two, TTEST returns #NUM! error.
* If @type is any other than one, two, or three, TTEST returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1, and the cells B1, B2, ... B5 23.2, 25.8, 29.9, 33.5, and 42.7.  Then
TTEST(A1:A5,B1:B5,1,1) equals 0.003127619.
TTEST(A1:A5,B1:B5,2,1) equals 0.006255239.
TTEST(A1:A5,B1:B5,1,2) equals 0.111804322.
TTEST(A1:A5,B1:B5,1,3) equals 0.113821797.
@SEEALSO=FDIST,FINV
@FUNCTION=VAR
@SYNTAX=VAR(b1, b2, ...)
@DESCRIPTION=VAR calculates sample variance of the given sample. To get the true variance of a complete population use VARP.
VAR is also known as the N-1-variance. Under reasonable conditions, it is the maximum-likelihood estimator for the true variance.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
VAR(A1:A5) equals 117.64.
@SEEALSO=VARP,STDEV
@FUNCTION=VARA
@SYNTAX=VARA(number1,number2,...)
@DESCRIPTION=VARA calculates sample variance of the given sample.
To get the true variance of a complete population use VARPA.
VARA is also known as the N-1-variance.
Under reasonable conditions, it is the maximum-likelihood estimator for the true variance.
Numbers, text and logical values are included in the calculation too. If the cell contains text or the argument evaluates to FALSE, it is counted as value zero (0).  If the argument evaluates to TRUE, it is counted as one (1).  Note that empty cells are not counted.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers and strings 11.4, 17.3, "missing", 25.9, and 40.1.  Then
VARA(A1:A5) equals 228.613.
@SEEALSO=VAR,VARPA
@FUNCTION=VARP
@SYNTAX=VARP(b1, b2, ...)
@DESCRIPTION=VARP calculates the variance of an entire population.
VARP is also known as the N-variance.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
VARP(A1:A5) equals 94.112.
@SEEALSO=AVERAGE,DVAR,DVARP,STDEV,VAR
@FUNCTION=VARPA
@SYNTAX=VARPA(number1,number2,...)
@DESCRIPTION=VARPA calculates the variance of an entire population.
VARPA is also known as the N-variance.
Numbers, text and logical values are included in the calculation too.  If the cell contains text or the argument evaluates to FALSE, it is counted as value zero (0).  If the argument evaluates to TRUE, it is counted as one (1).  Note that empty cells are not counted.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers and strings 11.4, 17.3, "missing", 25.9, and 40.1.  Then
VARPA(A1:A5) equals 182.8904.
@SEEALSO=VARA,VARP
@FUNCTION=WEIBULL
@SYNTAX=WEIBULL(x,alpha,beta,cumulative)
@DESCRIPTION=WEIBULL function returns the Weibull distribution. If the @cumulative boolean is true it will return:
	1 - exp (-(@x/@beta)^@alpha),
otherwise it will return
	(@alpha/@beta^@alpha) * @x^(@alpha-1) * exp(-(@x/@beta^@alpha)).
* If @x < 0 WEIBULL returns #NUM! error.
* If @alpha <= 0 or @beta <= 0 WEIBULL returns #NUM! error.
* This function is Excel compatible.
@EXAMPLES=
WEIBULL(3,2,4,0) equals 0.213668559.
@SEEALSO=POISSON
@FUNCTION=ZTEST
@SYNTAX=ZTEST(ref,x)
@DESCRIPTION=ZTEST returns the two-tailed probability of a z-test.
@ref is the data set and @x is the value to be tested.
* If @ref contains less than two data items ZTEST returns #DIV/0! error.
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
ZTEST(A1:A5,20) equals 0.254717826.
@SEEALSO=CONFIDENCE,NORMDIST,NORMINV,NORMSDIST,NORMSINV,STANDARDIZE
@FUNCTION=EXPPOWDIST
@SYNTAX=EXPPOWDIST(x,a,b)
@DESCRIPTION=EXPPOWDIST returns the probability density p(x) at @x for Exponential Power distribution with scale parameter @a and exponent @b.
This distribution has been recommended for lifetime analysis when a U-shaped hazard function is desired. This corresponds to rapid failure once the product starts to wear out after a period of steady or even improving reliability.
@EXAMPLES=
EXPPOWDIST(0.4,1,2).
@SEEALSO=RANDEXPPOW
@FUNCTION=GEOMDIST
@SYNTAX=GEOMDIST(k,p,cum)
@DESCRIPTION=GEOMDIST returns the probability p(k) of obtaining @k from a geometric distribution with probability parameter @p.
* If @k < 0 GEOMDIST returns #NUM! error.
* If @p < 0 or @p > 1 GEOMDIST returns #NUM! error.
* If @cum != TRUE and @cum != FALSE GEOMDIST returns #NUM! error.
@EXAMPLES=
GEOMDIST(2,10.4,TRUE).
@SEEALSO=RANDGEOM
@FUNCTION=KURTP
@SYNTAX=KURTP(n1, n2, ...)
@DESCRIPTION=KURTP returns the population kurtosis of a data set.
* Strings and empty cells are simply ignored.
* If fewer than two numbers are given or all of them are equal KURTP returns #DIV/0! error.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
KURTP(A1:A5) equals -0.691363424.
@SEEALSO=AVERAGE,VARP,SKEWP,KURT
@FUNCTION=LANDAU
@SYNTAX=LANDAU(x)
@DESCRIPTION=LANDAU returns the probability density p(x) at @x for the Landau distribution using an approximation method. 
@EXAMPLES=
LANDAU(0.34).
@SEEALSO=RANDLANDAU
@FUNCTION=LAPLACE
@SYNTAX=LAPLACE(x,a)
@DESCRIPTION=LAPLACE returns the probability density p(x) at @x for Laplace distribution with mean @a. 
@EXAMPLES=
LAPLACE(0.4,1).
@SEEALSO=RANDLAPLACE
@FUNCTION=LOGISTIC
@SYNTAX=LOGISTIC(x,a)
@DESCRIPTION=LOGISTIC returns the probability density p(x) at @x for a logistic distribution with scale parameter @a.
@EXAMPLES=
LOGISTIC(0.4,1).
@SEEALSO=RANDLOGISTIC
@FUNCTION=PARETO
@SYNTAX=PARETO(x,a,b)
@DESCRIPTION=PARETO returns the probability density p(x) at @x for a Pareto distribution with exponent @a and scale @b.
@EXAMPLES=
PARETO(0.6,1,2).
@SEEALSO=RANDPARETO
@FUNCTION=RAYLEIGH
@SYNTAX=RAYLEIGH(x,sigma)
@DESCRIPTION=RAYLEIGH returns the probability density p(x) at @x for a Rayleigh distribution with scale parameter @sigma.
@EXAMPLES=
RAYLEIGH(0.4,1).
@SEEALSO=RANDRAYLEIGH
@FUNCTION=RAYLEIGHTAIL
@SYNTAX=RAYLEIGHTAIL(x,a,sigma)
@DESCRIPTION=RAYLEIGHTAIL returns the probability density p(x) at @x for a Rayleigh tail distribution with scale parameter @sigma and lower limit @a.
@EXAMPLES=
RAYLEIGHTAIL(0.6,0.3,1).
@SEEALSO=RANDRAYLEIGHTAIL
@FUNCTION=SKEWP
@SYNTAX=SKEWP(n1, n2, ...)
@DESCRIPTION=SKEWP returns the population skewness of a data set.
* Strings and empty cells are simply ignored.
* If less than two numbers are given, SKEWP returns #DIV/0! error.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 11.4, 17.3, 21.3, 25.9, and 40.1.  Then
SKEWP(A1:A5) equals 0.655256198.
@SEEALSO=AVERAGE,VARP,SKEW,KURTP
@FUNCTION=SUBTOTAL
@SYNTAX=SUBTOTAL(function_nbr,ref1,ref2,...)
@DESCRIPTION=SUBTOTAL function returns a subtotal of given list of arguments. @function_nbr is the number that specifies which function to use in calculating the subtotal.
The following functions are available:
	1   AVERAGE
	2   COUNT
	3   COUNTA
	4   MAX
	5   MIN
	6   PRODUCT
	7   STDEV
	8   STDEVP
	9   SUM
	10   VAR
	11   VARP
* This function is Excel compatible.
@EXAMPLES=
Let us assume that the cells A1, A2, ..., A5 contain numbers 23, 27, 28, 33, and 39.  Then
SUBTOTAL(1,A1:A5) equals 30.
SUBTOTAL(6,A1:A5) equals 22378356.
SUBTOTAL(7,A1:A5) equals 6.164414003.
SUBTOTAL(9,A1:A5) equals 150.
SUBTOTAL(11,A1:A5) equals 30.4.
@SEEALSO=COUNT,SUM
@FUNCTION=CRONBACH
@SYNTAX=CRONBACH(ref1,ref2,...)
@DESCRIPTION=CRONBACH returns Cronbach's alpha for the given cases.
@ref1 is a data set, @ref2 the second data set, etc..
@EXAMPLES=
@SEEALSO=
\UUU
X?4*
%PiiC
@nz3
WYmS
plugin.so.debug
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.ctors
.dtors
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.bss
.gnu_debuglink
