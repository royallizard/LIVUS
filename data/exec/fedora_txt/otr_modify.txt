/lib64/ld-linux-x86-64.so.2
|fUa
libotr.so.5
_ITM_deregisterTMCloneTable
__gmon_start__
_Jv_RegisterClasses
_ITM_registerTMCloneTable
otrl_proto_message_type
otrl_base64_encode
_fini
_init
otrl_base64_decode
libgcrypt.so.20
gcry_mpi_release
gcry_md_close
gcry_mpi_scan
gcry_mpi_copy
gcry_mpi_print
gcry_md_read
gcry_md_reset
gcry_md_write
gcry_md_open
gcry_strerror
libdl.so.2
libgpg-error.so.0
libc.so.6
fflush
exit
__isoc99_sscanf
puts
__stack_chk_fail
realloc
stdin
fgetc
calloc
strlen
strstr
memcmp
__fprintf_chk
stdout
fputc
memcpy
malloc
stderr
fwrite
strchr
__cxa_finalize
memmove
__libc_start_main
free
_edata
__bss_start
_end
GLIBC_2.3.4
GLIBC_2.7
GLIBC_2.14
GLIBC_2.4
GLIBC_2.2.5
GCRYPT_1.6
5Z? 
%\? 
%Z? 
%R? 
%J? 
%B? 
%:? 
%2? 
%*? 
%"? 
%z> 
%r> 
%j> 
%b> 
%Z> 
%R> 
%J> 
AVAUATUH
D$81
t$ H
H9E@w
H;E@s
t$8dH34%(
@[]A\A]A^
=A; 
fffff.
fffff.
fffff.
ATUH
[]A\
AUATUSH
D$81
D$0?OTRf
D$4H
t%Hc
T$01
L$8dH3
H[]A\A]
AVAUATUI
tfH)
[]A\A]A^
<	v=
fff.
AUATI
$+dH
[]A\A]
AVAUI
ATUI
[]A\A]A^
ffff.
AUATUSH
} E1
}(E1
}8E1
]XL)
$vJH
}@E1
}HE1
[]A\A]
ffff.
ffff.
AVAUATUSH
t$ L
t$0L
D$(t
[]A\A]A^
AUATUSH
[]A\A]
fff.
ffff.
AVAUATUSH
t$ L
t!I9
t$0L
D$(u
|$8H
[]A\A]A^
AVAUATUSH
t$ L
|$(H
[]A\A]A^
AWAV1
AUATI
D$hA
D$pH
T$ H
D$(L
l$@I
T$0I
t$8J
T$pH
\$xM)
l$hA
D$XH
T$HI
?OTR
dH3<%(
([]A\A]A^A_
fffff.
AVAUATUSH
}(E1
E8u	E
t!M9
]xvzH
$vZD
[]A\A]A^
AWAVA
AUATA
t$81
E8u	H
t$(H
t$ L
L$8dH3
H[]A\A]A^A_
ffffff.
AWAVAUATI
L$(1
D$(dH3
8[]A\A]A^A_
D$(dH3
[]A\A]A^A_1
D$(dH3
D$(dH3
[]A\A]A^A_
AVAUI
ATUI
l$0H
\$pdH
L$0H
L$pf.
[]A\A]A^
AWAVA
AUATL
[]A\A]A^A_
Usage: %s mackey old_text new_text offset
Read an OTR Data Message from stdin.  Even if we can't read the
data because we don't know either the AES key or the DH privkey,
but we can make a good guess that the substring "old_text"
appears at the given offset in the message, replace the old_text
with the new_text (which must be of the same length), recalculate
the MAC with the given mackey, and output the resulting Data message.
The MAC key must be 40 hex chars long.
The old_text and new_text must be of the same length.
No OTR Data Message found on stdin.
OTR Non-Data Message found on stdin.
Invalid OTR Data Message found on stdin.
MAC does not verify: wrong MAC key?
Unparseable offset given.
Out of memory!
?OTR:
%s: %u
%s: 
%02x
Error creating OTR Data Message.
Argument ``%s'' must have even length.
Illegal hex char in argument ``%s''.
Error: %s
;*3$"
otr_modify.debug
7zXZ
xcT\z
nlC`
j!"Y
I(sP
jh`A2N"
3AijsR
S1a\
Ro]{
Nc'[
hS(z
%_8a
H8i/
%!Fm
G~K=s9
=6MF}
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.data
.bss
.gnu_debuglink
.gnu_debugdata
