__gmon_start__
_init
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
PyList_New
PyArg_ParseTupleAndKeywords
xs_daemon_open_readonly
xs_daemon_open
PyErr_SetFromErrno
__stack_chk_fail
_Py_NoneStruct
__errno_location
PyArg_ParseTuple
PyEval_SaveThread
xs_get_domain_path
PyEval_RestoreThread
PyString_FromString
free
PySequence_SetItem
PyList_Size
xs_daemon_close
xs_release_domain
xs_resume_domain
xs_set_target
xs_introduce_domain
strtoul
xs_transaction_end
_Py_ZeroStruct
_Py_TrueStruct
xs_transaction_start
__snprintf_chk
PyList_GetItem
xs_unwatch
xs_read_watch
sscanf
Py_BuildValue
xs_watch
PyList_Append
calloc
PyTuple_New
xs_set_permissions
memmove
xs_get_permissions
PyList_SetItem
xs_rm
xs_mkdir
xs_directory
xs_write
xs_read
PyString_FromStringAndSize
Py_FindMethod
initxs
PyType_Ready
Py_InitModule4_64
PyExc_RuntimeError
PyErr_NewException
PyModule_AddObject
libxenstore.so.3.0
libpython2.7.so.1.0
libpthread.so.0
libc.so.6
_edata
__bss_start
GLIBC_2.2.5
GLIBC_2.4
GLIBC_2.3.4
=y9 
=99 
529 
=_4 
=y0 
AUATUSH
[]A\A]
ATUSH
 []A\
=;1 
AUATUSH
[]A\A]
AUATUSH
D$(1
L$(dH3
8[]A\A]
AWAVAUATUSH
D$(1
D$ H
L$(dH3
8[]A\A]A^A_
H;D$ 
T$ I
AVAUATUSH
D$(1
L$(dH3
0[]A\A]A^
AWAVAUATUSH
T$X1
L$@H
T$PL
D$HH
D$ H
|$HH
D$,Hc
|$8L
9l$(
T$XdH3
h[]A\A]A^A_
D$(H
t$ H
HcT$
AVAUATUSH
 []A\A]A^
AUATUSH
([]A\A]
ATUSH
t$(1
D$ H
L$ H
L$(dH3
0[]A\
(sO)
i|ii
write
read
{s:i,s:i,s:i}
sss#
xen.lowlevel.xs
xen.lowlevel.xs.Error
transaction
abort
readonly
xen.lowlevel.xs.xs
Xenstore connections
mkdir
get_permissions
set_permissions
read_watch
unwatch
transaction_start
transaction_end
introduce_domain
set_target
resume_domain
release_domain
close
get_domain_path
Read data from a path.
 transaction [string]: transaction handle
 path [string]:        xenstore path
Returns: [string] data read.
         None if key doesn't exist.
Raises xen.lowlevel.xs.Error on error.
Write data to a path.
 transaction [string]: transaction handle
 path   [string] : xenstore path to write to
. data   [string] : data to write.
Returns None on success.
Raises xen.lowlevel.xs.Error on error.
List a directory.
 transaction [string]: transaction handle
 path [string]:        path to list.
Returns: [string array] list of subdirectory names.
         None if key doesn't exist.
Raises xen.lowlevel.xs.Error on error.
Make a directory.
 path [string]: path to directory to create.
Returns None on success.
Raises xen.lowlevel.xs.Error on error.
Remove a path.
 transaction [string]: transaction handle
 path [string] : path to remove
Returns None on success.
Raises xen.lowlevel.xs.Error on error.
Get the permissions for a path
 transaction [string]: transaction handle
 path [string]:        xenstore path.
Returns: permissions array.
Raises xen.lowlevel.xs.Error on error.
Set the permissions for a path
 transaction [string]: transaction handle
 path  [string]      : xenstore path.
 perms               : permissions.
Returns None on success.
Raises xen.lowlevel.xs.Error on error.
Watch a path, get notifications when it changes.
 path     [string] : xenstore path.
 token    [string] : returned in watch notification.
Returns None on success.
Raises xen.lowlevel.xs.Error on error.
Read a watch notification.
Returns: [tuple] (path, token).
Raises xen.lowlevel.xs.Error on error.
Stop watching a path.
 path  [string] : xenstore path.
 token [string] : token from the watch.
Returns None on success.
Raises xen.lowlevel.xs.Error on error.
Start a transaction.
Returns transaction handle on success.
Raises xen.lowlevel.xs.Error on error.
End the current transaction.
Attempts to commit the transaction unless abort is true.
 abort [int]: abort flag (default 0).
Returns True on success, False if you need to try again.
Raises xen.lowlevel.xs.Error on error.
Tell xenstore about a domain so it can talk to it.
 dom  [int]   : domain id
 page [long]  : address of domain's xenstore page
 port [int]   : port the domain is using for xenstore
Returns None on success.
Raises xen.lowlevel.xs.Error on error.
Tell xenstore that a domain is targetting another one so it
should let it tinker with it.
 dom    [int]   : domain id
 target [int]   : domain id of the target
Returns None on success.
Raises xen.lowlevel.xs.Error on error.
Tell xenstore to clear its shutdown flag for a domain.
This ensures that a subsequent shutdown will fire the
appropriate watches.
 dom [int]: domain id
Returns None on success.
Raises xen.lowlevel.xs.Error on error.
Tell xenstore to release its channel to a domain.
Unless this is done the domain will not be released.
 dom [int]: domain id
Returns None on success.
Raises xen.lowlevel.xs.Error on error.
Close the connection to xenstore.
Returns None on success.
Raises xen.lowlevel.xs.Error on error.
Return store path of domain, whether or not the domain exists.
 domid [int]: domain id
Returns: [string] domain store path.
Raises xen.lowlevel.xs.Error on error.
;*3$"
xs.so.debug
7zXZ
8cM!q
NgbL<
/3Nm^
.	mQd
4[j)
KnnqU
0pXj
Nvcc
n].w,
c7)l
sJU<
2Td2
G%j$
zl;u
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.init
.plt
.plt.got
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.data
.bss
.gnu_debuglink
.gnu_debugdata
