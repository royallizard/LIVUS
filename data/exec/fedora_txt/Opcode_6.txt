|gJS
__gmon_start__
_fini
__cxa_finalize
_Jv_RegisterClasses
Perl_Imy_cxt_list_ptr
Perl_croak_nocontext
Perl_hv_common_key_len
strlen
Perl_newSVsv
Perl_newSV
memset
XS_Opcode_full_opset
Perl_Istack_sp_ptr
Perl_Imarkstack_ptr_ptr
Perl_Istack_base_ptr
Perl_sv_2mortal
Perl_croak
XS_Opcode_empty_opset
XS_Opcode_invert_opset
Perl_Imaxo_ptr
Perl_sv_setsv_flags
boot_Opcode
Perl_newSVpv
Perl_new_version
Perl_sv_derived_from
Perl_vcmp
XS_Opcode__safe_pkg_prep
Perl_newXS_flags
XS_Opcode__safe_call_sv
XS_Opcode_verify_opset
XS_Opcode_opset_to_ops
XS_Opcode_opset
XS_Opcode_permit_only
Perl_newXS
Perl_sv_setpv
XS_Opcode_opdesc
XS_Opcode_define_optag
XS_Opcode_opmask_add
XS_Opcode_opcodes
XS_Opcode_opmask
Perl_my_cxt_init
Perl_warn_nocontext
Perl_newHV
Perl_get_op_names
Perl_newSViv
Perl_Iunitcheckav_ptr
Perl_Iscopestack_ix_ptr
Perl_call_list
Perl_Isv_yes_ptr
Perl_form
Perl_get_sv
Perl_sv_2pv_flags
Perl_vstringify
Perl_Iop_mask_ptr
Perl_Iop_ptr
Perl_dowantarray
Perl_Istack_max_ptr
Perl_stack_grow
Perl_safesyscalloc
Perl_get_op_descs
Perl_newSVpvn
Perl_sv_2iv_flags
Perl_sv_newmortal
Perl_sv_setiv
Perl_mg_set
Perl_pad_sv
Perl_push_scope
Perl_Idebug_ptr
Perl_save_vptr
Perl_warn
Perl_save_destructor
memcpy
Perl_Iendav_ptr
Perl_save_aptr
Perl_newAV
Perl_Idefstash_ptr
Perl_save_hptr
Perl_gv_stashpv
Perl_Icurstash_ptr
Perl_gv_fetchpv
Perl_sv_free
Perl_Iincgv_ptr
Perl_save_hash
Perl_gv_HVadd
Perl_Isub_generation_ptr
Perl_Istashcache_ptr
Perl_hv_clear
Perl_Imarkstack_max_ptr
Perl_call_sv
Perl_Gthr_key_ptr
pthread_getspecific
Perl_deb
Perl_pop_scope
Perl_markstack_grow
Perl_hv_name_set
Perl_Idefgv_ptr
libc.so.6
__stack_chk_fail
_edata
__bss_start
_end
GLIBC_2.1.3
GLIBC_2.4
GLIBC_2.0
[^_]
[^_]
,[^_]
,[^_]
|[^_]
,[^_]
,[^_]
<[^_]
[^_]
[^_]
98~g
\[^_]
,[^_]
,[^_]
\[^_]
>!t_
L[^_]
;8}g
L[^_]
,[^_]
[^_]
,[^_]
((svtype)((_svi)->sv_flags & 0xff)) >= SVt_RV
Assertion %s failed: file "Opcode.xs", line %d
((svtype)((_svi)->sv_flags & 0xff)) >= SVt_PV
((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVAV
((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVHV
!((((_svi)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svi)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svi)->sv_flags & 0xff)) == SVt_PVLV))
Can't negate operators here ("%s")
((svtype)((opset)->sv_flags & 0xff)) >= SVt_PV
((svtype)((opset)->sv_flags & 0xff)) != SVt_PVAV
((svtype)((opset)->sv_flags & 0xff)) != SVt_PVHV
!((((opset)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((opset)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((opset)->sv_flags & 0xff)) == SVt_PVLV))
((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVCV
((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVFM
!((opset)->sv_flags & 0x00000800) || !(*({ SV *const _svi = (SV *) (opset); ((((svtype)((_svi)->sv_flags & 0xff)) >= SVt_RV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Opcode.xs" "\", line %d", "((svtype)((_svi)->sv_flags & 0xff)) >= SVt_RV", 138), (void) 0)); ((((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVAV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Opcode.xs" "\", line %d", "((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVAV", 138), (void) 0)); ((((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVHV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Opcode.xs" "\", line %d", "((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVHV", 138), (void) 0)); ((((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVCV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Opcode.xs" "\", line %d", "((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVCV", 138), (void) 0)); ((((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVFM) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Opcode.xs" "\", line %d", "((svtype)((_svi)->sv_flags & 0xff)) != SVt_PVFM", 138), (void) 0)); ((!((((_svi)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svi)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svi)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Opcode.xs" "\", line %d", "!((((_svi)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svi)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svi)->sv_flags & 0xff)) == SVt_PVLV))", 138), (void) 0)); &((_svi)->sv_u.svu_rv); }))
Opcode tag "%s" already defined
Assertion %s failed: file "Opcode.c", line %d
%s object version %-p does not match %s%s%s%s %-p
(*Perl_Imaxo_ptr(my_perl)) < (362 + 100)
Can't add to uninitialised PL_op_mask
opcodes in list context not yet implemented
((svtype)((_svi)->sv_flags & 0xff)) == SVt_IV || ((svtype)((_svi)->sv_flags & 0xff)) >= SVt_PVIV
panic: opcode %d (%s) out of range
panic: invalid bitspec for "%s" (type %u)
panic: opcode "%s" value %d is invalid
set_opset_bits bit %2d (off=%d, bit=%d) %s %s
((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))
((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV
!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))
!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Opcode.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 521), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })
(*({ GV * const zzzz = (GV *) (((XPVCV*)(cv)->sv_any)->xcv_gv); ((((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Opcode.c" "\", line %d", "((((zzzz)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVLV))", 521), (void) 0)); ((((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Opcode.c" "\", line %d", "((svtype)((zzzz)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zzzz)->sv_flags & 0xff)) >= SVt_PVLV", 521), (void) 0)); ((!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Opcode.c" "\", line %d", "!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))", 521), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })) ? ((void) 0) : (Perl_croak_nocontext("Assertion %s failed: file \"" "Opcode.c" "\", line %d", "!({ SV *const thwacke = (SV *) (zzzz); if ((thwacke)->sv_flags & 0x40000000) ((!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))) ? ((void) 0) : (Perl_croak_nocontext(\"Assertion %s failed: file \\\"\" \"Opcode.c\" \"\\\", line %d\", \"!((((thwacke)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((thwacke)->sv_flags & 0xff)) == SVt_PVLV))\", 521), (void) 0)); ((thwacke)->sv_flags & 0x40000000); })", 521), (void) 0)); &(((XPVGV*)(zzzz)->sv_any)->xiv_u.xivu_namehek); }))
((svtype)((shplep)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((shplep)->sv_flags & 0xff)) == SVt_PVLV
((((shplep)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((shplep)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((shplep)->sv_flags & 0xff)) == SVt_PVLV))
undefined
wrong type
wrong size
Invalid opset: %s
Unknown operator tag "%s"
Unknown operator name "%s"
Unknown operator prefix "%s"
Opcode::full_opset
Usage: %s(%s)
Opcode::empty_opset
Opcode::invert_opset
XS_VERSION
%s::%s
1.11
version
bootstrap parameter
Opcode.c
Opcode::_safe_pkg_prep
Opcode::_safe_call_sv
Opcode::verify_opset
Opcode::opset_to_ops
Opcode::opset
Opcode::permit_only
Opcode::deny
Opcode::deny_only
Opcode::permit
Opcode::opdesc
Opcode::define_optag
Opcode::opmask_add
Opcode::opcodes
Opcode::opmask
opset_len %ld
:none
:all
optagsv, mask
set_opset_bits opset %s %s
safe, ...
Not a Safe object
Mask
(opset)
opset, desc = 0
opset, fatal = 0
Package, mask, codesv
Opcode.xs
ENTER
%s scope %ld at %s:%d
PL_op_mask restored
main::
LEAVE
Package
main
Opcode.so.debug
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.ctors
.dtors
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.data
.bss
.gnu_debuglink
