/lib/ld-linux.so.2
libQtCore.so.4
_Jv_RegisterClasses
_ITM_deregisterTMCloneTable
__gmon_start__
_ITM_registerTMCloneTable
_ZN7QRegExpD1Ev
_ZN11QTextStreamD1Ev
_ZN16QCoreApplicationC1ERiPPci
_ZNK7QString3midEii
_ZN11QTextStreamC1EP8_IO_FILE6QFlagsIN9QIODevice12OpenModeFlagEE
_ZN11QTextStreamC1EP7QString6QFlagsIN9QIODevice12OpenModeFlagEE
_ZN5QCharC1Ec
_ZNK5QChar7toUpperEv
_ZN9QListData6removeEi
_ZN7QString6resizeEi
_ZN5QChar9fromAsciiEc
_ZN7QString4freeEPNS_4DataE
_ZN7QString16fromAscii_helperEPKci
_ZN9QHashData11free_helperEPFvPNS_4NodeEE
_ZNK7QString10startsWithERKS_N2Qt15CaseSensitivityE
_ZN5QFile4openE6QFlagsIN9QIODevice12OpenModeFlagEE
_ZNK7QString8endsWithERK5QCharN2Qt15CaseSensitivityE
_ZN9QListData7append2ERKS_
_ZN10QByteArray11shared_nullE
_ZN7QString10fromLatin1EPKci
_ZN8QMapData11node_createEPPNS_4NodeEii
_ZN11QTextStreamlsEPKc
_Z23qUnregisterResourceDataiPKhS0_S0_
_ZNK7QString7indexOfERKS_iN2Qt15CaseSensitivityE
_ZN9QHashData12allocateNodeEi
_ZN9QListData11shared_nullE
_ZN5QFileD1Ev
_ZNK4QUrlneERKS_
_ZNK7QStringeqERKS_
_ZNK7QString3argERKS_iRK5QChar
_ZN7QString6appendERKS_
_ZN11QTextStreamlsERK7QString
_ZN9QtPrivate16QStringList_joinEPK11QStringListRK7QString
_ZN8QMapData10createDataEi
_ZNK4QUrl8toStringE6QFlagsINS_16FormattingOptionEE
_ZNK7QStringeqERK13QLatin1String
_ZN7QStringC1EiN2Qt14InitializationE
_ZN7QString7replaceERKS_S1_N2Qt15CaseSensitivityE
_ZN4QUrlC1Ev
_ZN4QUrlC1ERKS_
_ZN7QStringaSERKS_
_ZN5QFile6existsERK7QString
_ZN9QListData6detachEi
_ZN16QCoreApplicationD1Ev
_ZN7QString16codecForCStringsE
_ZN5QFile11setFileNameERK7QString
_ZN9QListData7reallocEi
_ZN7QString11shared_nullE
_Z21qRegisterResourceDataiPKhS0_S0_
_ZN7QString9fromAsciiEPKci
_ZNK4QUrl9toEncodedE6QFlagsINS_16FormattingOptionEE
_ZN9QHashData6rehashEi
_ZN11QTextStreamC1EP9QIODevice
_ZNK7QString5splitERK7QRegExpNS_13SplitBehaviorE
_ZN7QString17fromLatin1_helperEPKci
_ZNK7QString3argE5QChariRKS0_
_ZN4QUrlD1Ev
_ZN10QByteArray7reallocEi
_ZN9QIODevice5writeEPKcx
_ZN7QRegExpC1ERK7QStringN2Qt15CaseSensitivityENS_13PatternSyntaxE
_Z5qFreePv
_Z17qt_message_output9QtMsgTypePKc
_ZNK5QChar7toLowerEv
_ZN11QTextStreamlsE5QChar
_ZNK7QString8endsWithERKS_N2Qt15CaseSensitivityE
_ZNK7QString7toLowerEv
_ZN7QString7reallocEi
_Zls6QDebugRK4QUrl
_ZN7QString7reallocEv
_ZN4QDir9separatorEv
_ZN7QString6appendE5QChar
_ZN4QUrlC1ERK7QString
_ZNK7QString11toLocal8BitEv
_ZN9QIODevice7readAllEv
_ZN7QString6appendERK13QLatin1String
_ZN21QAbstractConcatenable16convertFromAsciiEPKciRP5QChar
_ZN8QMapData11shared_nullE
_ZN11QTextStreamlsEc
_ZN8QMapData16continueFreeDataEi
_Z5qHashRK10QByteArray
_ZN5QFileC1ERK7QString
_ZNK4QUrleqERKS_
_ZN9QtPrivate20QStringList_containsEPK11QStringListRK7QStringN2Qt15CaseSensitivityE
_ZN5QFile5closeEv
_ZN9QHashData8nextNodeEPNS_4NodeE
_ZN9QListData6appendEv
_ZNK4QUrlltERKS_
_ZNK7QString7toUpperEv
_ZNK7QString7sectionERK7QRegExpii6QFlagsINS_11SectionFlagEE
_Z4endlR11QTextStream
_ZN9QHashData11shared_nullE
_ZN9QHashData14detach_helper2EPFvPNS_4NodeEPvEPFvS1_Eii
_ZN7QString6insertEiPK5QChari
_ZN4QUrlaSERKS_
_ZN10QByteArrayC1EPKc
_Z5qHashRK7QString
_ZN7QString4fillE5QChari
_ZN9QListData11detach_growEPii
libpthread.so.0
libQtDBus.so.4
libsoprano.so.4
_ZNK7Soprano4Node7literalEv
_ZN7Soprano10Vocabulary4RDFS7commentEv
_ZN7Soprano10Vocabulary9XMLSchema18nonNegativeIntegerEv
_ZNK7Soprano5Error10ErrorCache8setErrorERK7QStringi
_ZN7Soprano10Vocabulary9XMLSchema8dateTimeEv
_ZN7Soprano10Vocabulary3RDF4typeEv
_ZNK7Soprano5Error10ErrorCache8setErrorERKNS0_5ErrorE
_ZN7Soprano10Vocabulary3NRL15inversePropertyEv
_ZN7Soprano10Vocabulary9XMLSchema8xsdShortEv
_ZN7Soprano10Vocabulary3NRL14maxCardinalityEv
_ZN7Soprano12LiteralValueD1Ev
_ZNK7Soprano9Statement7subjectEv
_ZN7Soprano10Vocabulary4RDFS6domainEv
_ZN7Soprano10Vocabulary9XMLSchema4timeEv
_ZN7Soprano10Vocabulary9XMLSchema9xsdDoubleEv
_ZN7Soprano10Vocabulary9XMLSchema7integerEv
_ZN7Soprano9StatementC1Ev
_ZN7Soprano10Vocabulary9XMLSchema8xsdFloatEv
_ZNK7Soprano9Statement9predicateEv
_ZN7Soprano10Vocabulary3NRL11cardinalityEv
_ZNK7Soprano12LiteralValue8toStringEv
_ZN7Soprano13PluginManager8instanceEv
_ZN7Soprano17StatementIteratorD1Ev
_ZN7Soprano5Error5ErrorD1Ev
_ZN7Soprano10Vocabulary9XMLSchema7booleanEv
_ZN7Soprano10Vocabulary4RDFS5rangeEv
_ZN7Soprano10Vocabulary9XMLSchema6xsdIntEv
_ZN7Soprano4NodeD1Ev
_ZN7Soprano9StatementC1ERKS0_
_ZN7Soprano23mimeTypeToSerializationERK7QString
_ZNK7Soprano12LiteralValue5toIntEv
_ZN7Soprano10Vocabulary9XMLSchema15negativeIntegerEv
_ZN7Soprano10Vocabulary4RDFS10subClassOfEv
_ZN7Soprano10Vocabulary9XMLSchema12unsignedLongEv
_ZN7Soprano10Vocabulary9XMLSchema7xsdLongEv
_ZN7Soprano9StatementD1Ev
_ZNK7Soprano4Node3uriEv
_ZN7Soprano10Vocabulary9XMLSchema11unsignedIntEv
_ZNK7Soprano9Statement6objectEv
_ZN7Soprano10Vocabulary4RDFS8ResourceEv
_ZN7Soprano10Vocabulary4RDFS7LiteralEv
_ZN7Soprano10Vocabulary9XMLSchema13unsignedShortEv
_ZN7Soprano10Vocabulary9XMLSchema6stringEv
_ZN7Soprano13PluginManager30discoverParserForSerializationENS_16RdfSerializationERK7QString
_ZN7Soprano10Vocabulary9XMLSchema4dateEv
libkdeui.so.5
_ZN12KCmdLineArgs10parsedArgsERK10QByteArray
_ZN14KComponentDataD1Ev
_Z5ki18nPKc
_ZNK12KCmdLineArgs5isSetERK10QByteArray
_ZN15KCmdLineOptionsC1Ev
_ZN10KAboutDataD1Ev
_ZN15KCmdLineOptionsD1Ev
_ZNK12KCmdLineArgs9getOptionERK10QByteArray
_ZN12KCmdLineArgs17addCmdLineOptionsERK15KCmdLineOptionsRK16KLocalizedStringRK10QByteArrayS8_
_ZN16KLocalizedStringC1Ev
_ZN16KLocalizedStringD1Ev
_ZN15KCmdLineOptions3addERK10QByteArrayRK16KLocalizedStringS2_
libkdecore.so.5
_ZN10KAboutDataC1ERK10QByteArrayS2_RK16KLocalizedStringS2_S5_NS_10LicenseKeyES5_S5_S2_S2_
_ZN14KComponentDataC1ERK10KAboutDataNS_25MainComponentRegistrationE
_ZNK12KCmdLineArgs3argEi
_ZN10KAboutData18setProgramIconNameERK7QString
_ZN12KCmdLineArgs4initEiPPcPK10KAboutData6QFlagsINS_13StdCmdLineArgEE
_ZN10KAboutData9addAuthorERK16KLocalizedStringS2_RK10QByteArrayS5_
_ZNK12KCmdLineArgs13getOptionListERK10QByteArray
_ZNK12KCmdLineArgs5countEv
libQtGui.so.4
libQtSvg.so.4
libstdc++.so.6
_ZTVN10__cxxabiv120__si_class_type_infoE
_Znwj
_ZTVN10__cxxabiv117__class_type_infoE
_ZdlPv
libm.so.6
libgcc_s.so.1
libc.so.6
_IO_stdin_used
__cxa_atexit
stdout
stderr
__cxa_finalize
__libc_start_main
__stack_chk_fail
_edata
__bss_start
_end
__libc_csu_fini
__data_start
_fp_hw
__libc_csu_init
GLIBCXX_3.4
CXXABI_1.3
GLIBC_2.1.3
GLIBC_2.4
GLIBC_2.0
Y[^_]
[^_]
UWVS
D$L1
|$0f
D$Le3
d$\[^_]
UWVS
l$Pe
t$,1
|$,e3=
d$<[^_]
D$(+D$
UWVS
l$Pe
|$,1
|$,e3=
d$<[^_]
D$(+D$
D$8e
d$ [^_
UWVS
T$Te
D$,1
;D$(t1
D$$u
9D$(u
L$,e3
d$<[^_]
UWVS
T$Te
D$,1
;D$(t1
D$$u
9D$(u
L$,e3
d$<[^_]
D$\1
|$\e3=
d$l[^_]
L$B1
L$41
D$L 
D$Bf
D$D1
D$Hf
D$T+B
UWVS
L$L1
D$(f
D$: 
|$$f
D$Le3
d$\[^_]
UWVS
D$l1
D$R 
t$le35
d$|[^_]
L$,f
D$R 
D$R 
UWVS
t$Pe
D$,1
t$,e35
d$<[^_]
D$\1
D$T+D$ 
9D$(t
t$T)
9D$(t
D$ 1
|$\e3=
d$l[^_]
UWVS
D$x 
;T$l
D$@f
D$t 
;D$l
L$HtI
[^_]
;T$l
D$@f
D$p 
D$@f
D$t 
D$b 
UWVS
D$<f
D$x 
L$8tU
D$t9
t$tu
[^_]
D$<f
D$j 
UWVS
L$<1
L$<e3
d$L[^_]
UWVS
|$$e
|$\1
9D$X
;D$X
L$0f
 D$3
|$\e3=
d$l[^_]
UWVS
l$Pe
|$,1
D$(+B
|$,e3=
d$<[^_]
UWVS
l$Pe
|$,1
|$(f
D$(+B
\$,e3
d$<[^_]
|$(f
UWVS
l$Pe
|$,1
\$,e3
d$<[^_]
UWVS
l$Pe
|$,1
D$(+B
|$,e3=
d$<[^_]
UWVS
d$,[
UWVS
[^_]
[^_]
UWVS
D$,1
|$,e3=
d$<[^_]
UWVS
l$0;x
[^_]
UWVS
d$,[^_]
|$<1
T$,t
L$<e3
d$L[^_]
UWVS
T$,e
|$L1
D$ f
D$2 
D$0 
t$Le35
D$ ur
d$\[^_]
UWVS
D$4f
D$Z 
D$X 
T$,f
D$T 
D$R 
D$>f
D$P 
[^_]
D$N 
D$L 
UWVS
D$F 
D$l1
D$D 
D$B 
|$le3=
d$|[^_]
D$h+D$0
9D$<t
UWVS
L$l1
D$>f
D$T 
D$J 
D$H 
t$le35
d$|[^_]
D$H 
UWVS
D$8f
D$V 
D$T 
D$R 
D$>f
D$P 
[^_]
D$N 
D$L 
UWVS
L$\1
D$>f
D$F 
|$\e3=
d$l[^_]
UWVS
D$,1
T$,e3
d$<[^_]
UWVS
|$te
D$L1
|$Le3=
d$\[^_]
UWVS
|$le
D$<1
|$<e3=
d$L[^_]
D$.f
D$8)
9D$ 
UWVS
D$ e
D$L1
|$Le3=
d$\[^_]
D$,1
L$,e3
d$0[^_
UWVS
|$@e
d$,[^_]
[^_]
UWVS
[^_]
UWVS
[^_]
UWVS
t$xe
|$L1
t$Le35
d$\[^_]
D$H+D$$
9D$,t
UWVS
D$<1
D$8+D$
t$<e35
d$L[^_]
UWVS
D$<1
D$8+D$
t$<e35
d$L[^_]
UWVS
T$`e
D$<1
D$49
L$8t3
D$4u
9D$8u
|$(t 
L$<e3
d$L[^_]
d$,[
d$,[
UWVS
T$,e
|$L1
D$ f
D$2 
D$0 
t$Le35
D$ ur
d$\[^_]
UWVS
D$4f
D$Z 
D$X 
T$,f
D$T 
D$R 
D$>f
D$P 
[^_]
D$N 
D$L 
UWVS
D$,f
D$Z 
D$(f
D$V 
D$T 
D$>f
D$R 
T$8f
D$L 
[^_]
D$P 
D$N 
UWVS
D$B 
t$l1
D$@ 
D$> 
t$le35
d$|[^_]
UWVS
D$8f
D$V 
D$T 
D$R 
D$>f
D$P 
[^_]
D$N 
D$L 
UWVS
L$l1
D$>f
D$L 
D$H 
t$le35
d$|[^_]
D$F 
D$D 
D$B 
D$D 
D$B 
UWVS
D$|1
D$N 
D$,f
D$H 
D$F 
L$|e3
[^_]
D$x+D$8
9D$<
D$L 
D$J 
UWVS
D$^ 
D$\ 
D$Nf
D$Z 
D$T 
[^_]
D$X 
D$V 
UWVS
L$l1
D$>f
D$J 
D$H 
t$le35
d$|[^_]
UWVS
D$F 
D$l1
D$D 
D$B 
|$le3=
d$|[^_]
D$h+D$0
9D$<t
UWVS
L$\1
D$>f
D$D 
t$\e35
d$l[^_]
D$B 
D$@ 
UWVS
T$l1
D$>f
D$T 
L$le3
d$|[^_]
D$F 
D$D 
D$B 
D$P 
D$L 
[^_]
[^_]
[^_]
UWVS
d$,[^_]
[^_]
UWVS
D$ e
T$D;B
T$H;B
T$@;B
l$,9~
;1tJ9
D$ 9H
T$$9
T$<1
D$ 9P
[^_]
T$H;B
T$D;B
T$@;B
T$,t0
l$D9x
D$,9x
UWVS
[^_]
UWVS
D$,1
L$,e3
d$<[^_]
UWVS
d$,[^_]
UWVS
D$\1
D$\e3
d$l[^_]
UWVS
L$|1
L$|e3
[^_]
UWVS
D$\1
|$,t^
D$\e3
d$l[^_]
UWVS
D$\1
D$\e3
d$l[^_]
UWVS
L$L9O
L$P9O
L$T9O
[^_]
UWVS
D$|1
T$|e3
[^_]
UWVS
l$Pe
D$,1
|$,e3=
d$<[^_]
UWVS
L$<1
L$<e3
d$L[^_]
UWVS
t$,U
[^_]
Uri()
#include "
_export.h"
_EXPORT
Nepomuk
NepomukFast
static QUrl 
Uri();
Get property '%1'. 
Set property '%1'. 
resource.h
resource.cpp
safe
fast
:gpl.tpl
:header_%1.tpl
NEPOMUK_VISIBILITY
NEPOMUK_RESOURCECOMMENT
NEPOMUK_RESOURCENAMEUPPER
NEPOMUK_RESOURCENAME
NepomukFast::Resource
NEPOMUK_PARENTRESOURCE
NEPOMUK_PARENT_INCLUDE
<nepomuk/%1.h>
        static 
NEPOMUK_OTHERCLASSES
    class 
NEPOMUK_METHODS
:source_%1.tpl
NEPOMUK_RESOURCENAMELOWER
NEPOMUK_RESOURCETYPEURI
#include "%1.h"
#include "%1"
#include "resource.h"
NEPOMUK_INCLUDES
    return QUrl::fromEncoded("
\return The URI of the property '%1'.
(CodeGenerator::writeSource) type not defined for property: 
Add a value to property '%1'. 
:dummyresource_header_fast.tpl
:dummyresource_source_fast.tpl
NEPOMUK_VISIBILITY_HEADER_INCLUDE
 \sa ResourceManager::allResourcesWithProperty
Get all resources that have this resource set as property '%1'. 
Nepomuk does not support multiple inheritance. Thus, to access properties from all parent classes helper methods like this are introduced. The object returned represents the exact same resource.
Retrieve a list of all available %1 resources. This list consists of all resource of type %1 that are stored in the local Nepomuk meta data storage and any changes made locally. Be aware that in some cases this list can get very big. Then it might be better to use libKNep directly.
%1::%2::
%1 %2to%3() const
    return %2( uri(), graphUri() );
void %1set%2%3%4( const %5& value )
    addProperty( QUrl::fromEncoded("%1"), Soprano::LiteralValue( value ) );
    addProperty( QUrl::fromEncoded("%1"), value.uri() );
    for( %1::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
       addProperty( QUrl::fromEncoded("%2"), Soprano::LiteralValue( *it ) );
    }
    for( %1::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
       addProperty( QUrl::fromEncoded("%2"), (*it).uri() );
    }
void %1add%2%3( const %4& value )
12AbstractCode
8FastCode
[#/:]
QString
QStringList
QList<
toIntList())
toIntList() << 0 ).first()
toUnsignedIntList())
toInt64List())
toInt64List() << 0 ).first()
toUnsignedInt64List())
toBoolList())
toDoubleList())
toDateTimeList())
toDateList())
toTimeList())
toStringList())
qint32
quint32
qint64
quint64
bool
double
QDateTime
QDate
QTime
Unknown type:
toUnsignedIntList() << 0 ).first()
toUnsignedInt64List() << 0 ).first()
toBoolList() << false ).first()
toDoubleList() << 0.0 ).first()
toDateTimeList() << QDateTime() ).first()
toDateList() << QDate() ).first()
toTimeList() << QTime() ).first()
toStringList() << QString() ).first()
submit@bugs.kde.org
http://nepomuk.kde.org
nepomuk-rcgen
trueg@kde.org
Maintainer
Sebastian Tr
tokoe@kde.org
Tobias Koenig
nepomuk
verbose
Actually generate the code.
writeall
listincludes
listheaders
listsources
ontologies <files>
prefix <prefix>
target <target-folder>
templates <templates>
class <classname>
visibility <visibility-name>
+[ontologies]
ontologies
target
prefix
templates
class
visibility
No ontology files specified.
Ontology file 
 does not exist.
Folder 
Parsing ontology file 
 failed.
Writing sources to 
resource.cpp;
resource.h;
#include <nepomuk/
[\s]
serialization
(c) 2006-2009, Sebastian Tr
Nepomuk Resource Class Generator
Major cleanup - Personal hero of maintainer
Verbose output debugging mode.
Generate simple and fast wrapper classes not based on Nepomuk::Resource which do not provide any data integrity checking
List all includes (deprecated).
List all header files that will be generated via the --writeall command.
List all source files that will be generated via the --writeall command.
The ontology files containing the ontologies to be generated, a space separated list (deprecated: use arguments instead.)
Include path prefix (deprecated)
Specify the target folder to store generated files into.
Templates to be used (deprecated).
Optionally specify the classes to be generated. Use option multiple times (defaults to all classes)
Serialization used in the ontology files. Will default to primitive file extension detection.
serialization <rdf-serialization>
Set the used visibility in case the classes are to be used in public API. <visibility-name> will be used to construct the export macro name and the export header. By default classes will not be exported.
The ontology files containing the ontologies to be generated.
Cannot export fast classes. They are only meant to be used as private classes.
%1 %2%3%4%5() const
QList<%1%2> %3all%2s()
%1 %2%3%4Of() const
    return %2( *this );
    return Nepomuk::convertResourceList<%3>( ResourceManager::instance()->allResourcesOfType( QUrl::fromEncoded("%2") ) );
    return ( property( QUrl::fromEncoded("%1") ).%2;
%1    return convertResourceList<%3>( property( QUrl::fromEncoded("%2") ).toResourceList() );
%1    return %2( property( QUrl::fromEncoded("%3") ).toResource().resourceUri() );
    return convertResourceList<%2>( manager()->allResourcesWithProperty( QUrl::fromEncoded("%1"), *this ) );
    Variant v = property( QUrl::fromEncoded("%1") );
    v.append( value );
    setProperty( QUrl::fromEncoded("%1"), v );
%1    Variant v = property( QUrl::fromEncoded("%2") );
    v.append( Resource( value ) );
    setProperty( QUrl::fromEncoded("%2"), v );
    setProperty( QUrl::fromEncoded("%1"), Variant( value ) );
%1    QList<Resource> l;
    for( %2::const_iterator it = value.constBegin();
         it != value.constEnd(); ++it ) {
        l.append( Resource( (*it) ) );
    }
    setProperty( QUrl::fromEncoded("%3"), Variant( l ) );
%1    setProperty( QUrl::fromEncoded("%2"), Variant( Resource( value ) ) );
    // We always store all Resource types as plain Resource objects.
    // It does not introduce any overhead (due to the implicit sharing of
    // the data and has the advantage that we can mix setProperty calls
    // with the special Resource subclass methods.
    // More importantly Resource loads the data as Resource objects anyway.
8SafeCode
qint16
quint16
Invalid iterator.
 (will be generated)
 (will not be generated)
trig
(OntologyParser) Parsing 
#Class
XMLSchema
Setting reverse property 
 on type 
Resource: 
 (->
          
http://org.kde.nepomuk/dummybaseuri
)?&M
\8Zk
 c6EU
XtgX
Pfua
 QUR@
4~(yW|!s
 * This file is part of the Nepomuk KDE project.
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
#ifndef _NEPOMUK_FAST_RESOURCE_H_
#define _NEPOMUK_FAST_RESOURCE_H_
#include <soprano/node.h>
#include <QtCore/QUrl>
namespace NepomukFast {
    class Resource
    {
    public:
        QUrl uri() const;
        QUrl graphUri() const;
        QUrl type() const;
        void addProperty( const QUrl &uri, const Soprano::Node &node );
        void setLabel( const QString &label );
    protected:
        Resource( const QUrl& uri, const QUrl& graphUri, const QUrl& type );
    private:
        QUrl m_uri;
        QUrl m_graphUri;
        QUrl m_type;
    };
#endif
WZpAY
AjXhb
iDz;
B>%SmkU
v<)(
5a"h
\u6H
 * This file is part of the Nepomuk KDE project.
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
#include "resource.h"
#include <nepomuk/resourcemanager.h>
#include <soprano/literalvalue.h>
#include <soprano/model.h>
#include <soprano/nao.h>
#include <soprano/rdf.h>
#include <soprano/rdfs.h>
using namespace NepomukFast;
Resource::Resource( const QUrl& uri, const QUrl& graphUri, const QUrl& type )
    : m_uri( uri ), m_graphUri( graphUri ), m_type( type )
    if ( m_uri.isEmpty() )
        m_uri = Nepomuk::ResourceManager::instance()->generateUniqueUri( QString() );
    if ( m_graphUri.isEmpty() )
        m_graphUri = Nepomuk::ResourceManager::instance()->generateUniqueUri( QString() );
    if ( m_type.isEmpty() )
        m_type = Soprano::Vocabulary::RDFS::Resource();
    else // add the type right away
        Nepomuk::ResourceManager::instance()->mainModel()->addStatement( m_uri, Soprano::Vocabulary::RDF::type(), m_type, m_graphUri );
QUrl Resource::uri() const
    return m_uri;
QUrl Resource::graphUri() const
    return m_graphUri;
QUrl Resource::type() const
    return m_type;
void Resource::addProperty( const QUrl &uri, const Soprano::Node &node )
    Nepomuk::ResourceManager::instance()->mainModel()->addStatement( m_uri, uri, node, m_graphUri );
void Resource::setLabel( const QString &label )
    addProperty( Soprano::Vocabulary::NAO::prefLabel(), Soprano::LiteralValue( label ) );
#ifndef _NEPOMUK_RESOURCENAMEUPPER_H_
#define _NEPOMUK_RESOURCENAMEUPPER_H_
class QDateTime;
class QDate;
class QTime;
namespace NepomukFast {
NEPOMUK_OTHERCLASSES
#include NEPOMUK_PARENT_INCLUDE
namespace NepomukFast {
NEPOMUK_RESOURCECOMMENT
    class NEPOMUK_RESOURCENAME : public NEPOMUK_PARENTRESOURCE
    {
    public:
        /**
         * Create a new empty and invalid NEPOMUK_RESOURCENAME instance
         */
        NEPOMUK_RESOURCENAME( const QUrl &uri = QUrl(), const QUrl &graphUri = QUrl() );
NEPOMUK_METHODS
    protected:
        NEPOMUK_RESOURCENAME( const QUrl& uri, const QUrl& graphUri, const QUrl& type );
    };
#endif
 * This file is part of the Nepomuk KDE project.
 * This library is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 * See the file "COPYING" for the exact licensing terms.
 * This file has been generated by the Nepomuk Resource class generator.
 * DO NOT EDIT THIS FILE.
 * ANY CHANGES WILL BE LOST.
#include <soprano/soprano.h>
#include "NEPOMUK_RESOURCENAMELOWER.h"
NEPOMUK_INCLUDES
#include <QtCore/QDateTime>
#include <QtCore/QDate>
#include <QtCore/QTime>
NepomukFast::NEPOMUK_RESOURCENAME::NEPOMUK_RESOURCENAME( const QUrl &uri, const QUrl &graphUri )
  : NEPOMUK_PARENTRESOURCE( uri, graphUri, QUrl::fromEncoded("NEPOMUK_RESOURCETYPEURI", QUrl::StrictMode) )
NepomukFast::NEPOMUK_RESOURCENAME::NEPOMUK_RESOURCENAME( const QUrl& uri, const QUrl& graphUri, const QUrl& type )
  : NEPOMUK_PARENTRESOURCE( uri, graphUri, type )
NEPOMUK_METHODS
;*2$"
nepomuk-rcgen.debug
7zXZ
k>HJ
xOzB
ZNkfTk
2Qp4
n2!}
'z_D
%g_]
l26&
0bsD*
.3rH
qN-D
W=*b
'tsN1O
gDmt
2Ecd
[z+p6l
j]E#
B\JK
h(7h
|e*IU
LMy1t
>x{te
=V@b
Y	>*
zaM5l
La7k.
S=g~S
<Qbe
Tz#LT9
dWK5
hl<Q
\jCK
9E.*^q
hUVp
S<ec
6zqKb)
?3,r
8u}f
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.data
.bss
.gnu_debuglink
.gnu_debugdata
