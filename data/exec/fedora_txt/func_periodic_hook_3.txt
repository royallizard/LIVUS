__gmon_start__
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
ast_context_destroy
ast_custom_function_unregister
__ast_pthread_mutex_lock
ast_audiohook_detach
__ast_pthread_mutex_unlock
ast_audiohook_destroy
__ast_module_unref
ast_pbx_outgoing_exten
__stack_chk_fail
ast_false
ast_true
__ao2_lock
ast_channel_datastore_find
__ao2_unlock
ast_log
ast_channel_name
gettimeofday
calloc
strdup
__ast_asprintf
ast_background_stacksize
ast_pthread_create_detached_stack
strlen
memcpy
__ast_app_separate_args
sscanf
option_debug
ast_options
__snprintf_chk
__ast_datastore_alloc
__ast_module_ref
ast_audiohook_init
ast_channel_datastore_add
ast_audiohook_attach
ast_debug_get_by_module
ast_datastore_free
ast_beep_start
ast_beep_stop
ast_module_register
ast_module_unregister
ast_context_find_or_create
ast_add_extension
__ast_custom_function_register_escalating
__ast_module_shutdown_ref
libpthread.so.0
libc.so.6
GLIBC_2.14
GLIBC_2.4
GLIBC_2.2.5
GLIBC_2.3.4
%z, 
%r, 
%j, 
%b, 
%Z, 
%R, 
%J, 
%B, 
%:, 
%2, 
%*, 
%", 
=E, 
u+UH
=.' 
=C+ 
)D$ H
D$PH
)D$0H
D$XH
D$`H
D$pPj
AUATUSH
[]A\A]
[]A\A]
[]A\A]
AWAVAUATSH
t*E1
[A\A]A^A_]
t	H)
AYAZ
AWAVAUA
[A\A]A^A_]
tNATL
[]A\
[]A\A]
func_periodic_hook
&(&state->audiohook)->lock
func_periodic_hook.c
HOOK_ID
HOOK_CHANNEL
Local
chan
hook_launch_thread
Failed to run hook on '%s'
%30u
Invalid hook interval: '%s'
%s,%s,%u
ExecIf
${ChannelToSpy},qEB
ChanSpy
Answer
beep
Playback
Periodic dialplan hooks.
PERIODIC_HOOK
Hook with ID '%s' not found on channel '%s'
Hook with ID '%s' not found on '%s'
Invalid value for PERIODIC_HOOK function: '%s'
Memory Allocation Failure in function %s at line %d of %s
/builddir/build/BUILD/asterisk-15.3.0/include/asterisk/utils.h
A context and extension are required for PERIODIC_HOOK().
hook to %s@%s enabled on %s with interval of %u seconds
Failed to enable periodic beep.
Failed to create %s dialplan context.
EncodedChannel=${CUT(HOOK_CHANNEL,-,1-2)}
GROUP_NAME=${EncodedChannel}${HOOK_ID}
GROUP(periodic-hook)=${GROUP_NAME}
$[${GROUP_COUNT(${GROUP_NAME}@periodic-hook)} > 1]?Hangup()
ChannelToSpy=${URIDECODE(${EncodedChannel})}
This paragraph is copyright (c) 2006 by Digium, Inc. In order for your module to load, it must return this key via a function called "key".  Any code which includes this paragraph must be licensed under the GNU General Public License version 2 or later (at your option).  In addition to Digium's general reservations of rights, Digium expressly reserves the right to allow other parties to license this paragraph under different terms. Any use of Digium, Inc. trademarks or logos (including "Asterisk" or "Digium") without express written permission of Digium, Inc. is prohibited.
__ast_strdup
__ast_calloc
hook_thread_arg_alloc
do_hook
hook_callback
hook_state_alloc
hook_datastore_destroy_callback
load_module
hook_re_enable
hook_off
hook_write
init_hook
hook_on
ast_beep_start
beep
hook@__func_periodic_hook_context__
hook
__func_periodic_hook_context__
;*3$"
68b329da9893e34099c7d8ad5cb9c940
gcc 8.0.1 20180312
GA*GOW
GA!stack_clash
GA*cf_protection
GA+GLIBCXX_ASSERTIONS
GA*FORTIFY
GA*cet status
func_periodic_hook.so-15.3.0-1.fc28.x86_64.debug
7zXZ
9?ls_
e11o
"uhr
cvqd
g=vCc
P#aT
O}F7
4$z0s
gg-n
_i.{
]GV)
%4dp
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.note.gnu.property
.init_array
.fini_array
.data.rel.ro
.dynamic
.got
.data
.bss
.gnu.build.attributes
.gnu_debuglink
.gnu_debugdata
