,@@D
}U=v^a
__gmon_start__
_init
_fini
__cxa_finalize
_Jv_RegisterClasses
PyObject_GetAttr
PyExc_NameError
PyErr_SetObject
PyString_FromString
PyModule_GetDict
PyTuple_New
PyCode_New
PyThreadState_Get
PyFrame_New
PyTraceBack_Here
PyArg_ParseTupleAndKeywords
_Py_NoneStruct
PyObject_CallObject
rk_long
PyInt_FromLong
PyNumber_Subtract
PyInt_AsLong
PyErr_Occurred
PyObject_GetItem
PyObject_SetItem
rk_interval
PyNumber_Add
PyExc_ValueError
PyErr_SetString
PyType_IsSubtype
PyExc_TypeError
PyErr_Format
PyExc_SystemError
PyTraceBack_Type
PyTuple_Type
PyTuple_Size
PyString_Type
PyClass_Type
PyInstance_Type
PyErr_Restore
rk_binomial
PyObject_IsTrue
rk_hypergeometric
rk_poisson
rk_negative_binomial
PyObject_GetAttrString
PyDict_New
PyObject_CallFunction
PyList_New
PySequence_GetItem
PyExc_IndexError
PyErr_ExceptionMatches
PyErr_Clear
PyObject_Cmp
PySequence_GetSlice
PyObject_SetAttr
PyNumber_Multiply
PyFloat_FromDouble
rk_logseries
rk_geometric
rk_zipf
rk_triangular
rk_noncentral_f
rk_wald
rk_lognormal
rk_logistic
rk_gumbel
rk_laplace
rk_vonmises
rk_noncentral_chisquare
rk_f
rk_gamma
rk_beta
rk_normal
rk_uniform
rk_rayleigh
rk_power
rk_weibull
rk_pareto
rk_standard_t
rk_chisquare
rk_standard_gamma
rk_exponential
rk_standard_cauchy
rk_standard_exponential
rk_gauss
rk_double
PyTuple_GetSlice
PyDict_Copy
PyDict_GetItemString
PyDict_SetItemString
PyDict_DelItemString
PyDict_SetItem
PyEval_CallObjectWithKeywords
PyMem_Malloc
rk_fill
PyString_FromStringAndSize
PyMem_Free
PyLong_FromUnsignedLong
memcpy
init_by_array
rk_randomseed
PyInt_AsUnsignedLongMask
rk_seed
PyErr_Fetch
PyErr_WriteUnraisable
PyList_SetItem
PyType_Type
initmtrand
Py_InitModule4_64
PyImport_AddModule
PyObject_SetAttrString
PyString_InternFromString
__pyx_type_6mtrand_RandomState
PyType_Ready
PyImport_ImportModule
PyCObject_Type
PyExc_RuntimeError
PyErr_Print
PyExc_ImportError
PyCObject_AsVoidPtr
rk_random
rk_ulong
sqrt
rk_devfill
fopen
fread
fclose
rk_altfill
gettimeofday
getpid
clock
rk_strerror
loggam
rk_geometric_search
rk_poisson_mult
floor
rk_hypergeometric_hyp
rk_poisson_ptrs
rk_binomial_inversion
rk_hypergeometric_hrua
rk_binomial_btpe
rk_geometric_inversion
ceil
acos
fmod
libm.so.6
libpython2.5.so.1.0
libpthread.so.0
libc.so.6
_edata
__bss_start
_end
GLIBC_2.2.5
D$0L
d$ H
D$@tRH
\$HH
l$PL
d$XL
l$`L
t$hL
|$pH
T$@H
\$HH
l$PL
d$XL
l$`L
t$hL
|$pH
l$ H
d$(L
l$0L
t$8L
|$@H
l$ L
t$(L
|$0H
l$ H
d$(L
l$0H
l$ H
$tXH
D$ H
D$ 1
t$ H
|$ H
l$0H
\$(L
d$8L
l$@L
t$HL
|$PH
l$ H
d$(L
l$0L
t$8L
|$@H
D$ H
T$ H
D$ L
|$ H
[]A\A]
|$ H
tWH;=`
I9D$
[]A\A]A^
tZH;
L;-k~"
]A\A]A^
A\A]A^L
L$hH
D$pH
D$`H
D$`H
\$xH
D$hI
D$`H
D$hH
l$8L
T$8H
|$hH
|$`H
l$8L
l$8L
|$hA
l$PI
T$@H
D$ f
T$ f
l$8H
L9l$`
D$`H
|$`H
d$8H
D$8L
T$HH
T$PH
l$HE1
D$(H
T$HH
D$(A
D$ I
L$0H
T$ I
^D$0
l$8L
l$8H
l$8H
l$8H
D$(M
l$8H
l$8H
l$8H
D$`I
l$ H
l$8H
T$HH
l$8H
l$8H
l$8H
l$8H
AWAVI
ATUSH
%%q"
|$ I
D$0M9
D$HI
T$HH
T$DI
T$0H
T$(H
T$8H
[]A\A]A^A_
D$`I
D$XH
H;l$`
@8Hc@ H
T$0H
T$HH
C0H;
T$8H
l$8H
D$8A
|$HH
T$HH
D$8H
T$81
H;\$P
@8Hc@ H
A0H;
AUATUSH
|$(I
t$ L
d$0u
L;t$0
T$0H
\$0H
T$0H
D$8H
T$@H
T$ I
\$0H
L;t$0H
T$@H
D$LE
t$(E1
l$0H
D$0M
|$(H
T$ H
@8Hc@ H
\$0H
T$0H
$txI
[]A\A]A^A_
T$8H
D$@H
T$ H
B0H;
D$0I
T$ H
@8Hc@ H
@8Hc@ H
A0H;
G0H;
|$0L
D$0H
l$(H
l$8H
t$@H
|$HH
L$XI
|$PH
T$PH
L$XH
D$PL
T$PH
L$XH
|$P1
T$PH
L$8H
T$@H
L$HH
T$0H
l$@H
l$8H
l$HH
l$HH
l$@H
l$HH
T$PH
L$XH
T$`H
L$XH
D$XH
|$PI
T$PH
L$PH
D$XH
T$PH
|$XH
L$XH
|$P1
T$PH
L$`I
|$PL
T$PH
L$`H
|$XL
T$XH
L$`H
T$PH
|$X1
L$XH
T$`H
L$`I
D$XL
T$`H
L$XH
|$PH
T$PH
L$XH
T$0H
T$hL
L$hH
\$|H
L$hH
\$XH
L$(H
|$hH
T$hH
A;D$
H;\$p
@8Hc@ H
D$ H
D$ J
A9D$
B0H;
5Gz"
|$`H
T$`H
|$P1
L$PH
@8Hc@ H
B0H;
l$ H
d$(L
l$0L
t$8L
|$@H
-;5"
5"u"
=#s"
5#w"
5.w"
5x/"
L$8H
D$@H
D$0H
D$0H
l$PH
\$HL
d$XL
l$`L
t$hL
|$pH
D$@I
D$8H
D$0H
|$@A
|$8A
5[m"
=\k"
5\o"
D$@H
T$ H
T$ H
T$ H
5*m"
$t|H
|$@H
|$8H
|$0H
T$ H
5hg"
=ie"
5gi"
T$ H
5ki"
D$8H
D$ H
T$ H
|$ H
T$ H
5wb"
=x`"
5he"
D$8H
|$ H
T$ H
5|b"
T$ H
T$ H
T$0I
L$8H
D$@H
D$0H
D$0H
l$PH
\$HL
d$XL
l$`L
t$hL
|$pH
D$@I
D$8H
D$0H
|$@A
|$8A
D$@H
T$ H
T$ H
T$ H
=cX"
$t|H
|$@H
|$8H
|$0H
T$ H
5(V"
=)T"
5'X"
T$ H
5+X"
D$8H
D$ H
T$ H
=LR"
|$ H
T$ H
57Q"
=8O"
5(T"
D$8H
|$ H
T$ H
5<Q"
T$ H
T$ H
T$0I
=iJ"
=.J"
l$ L
t$(L
|$0H
L$pH
D$xH
D$hH
D$hH
D$xI
%[	"
D$pH
D$hH
5BM"
D$xH
|$xH
5vL"
D$pL
|$pH
L9d$hH
|$hH
5tK"
5EH"
d$ L
d$0L
d$(L
d$ L
d$0E1
T$8H
T$ H
T$(H
T$0H
|$xH
|$pH
|$hH
d$(L
d$ L
d$(L
d$ E1
d$0H
d$(H
d$ L
d$0H
d$(L
d$ L
d$0H
d$ L
d$0L
d$(H
d$ L
d$0L
d$(H
5UC"
5$@"
d$ L
d$0L
d$(H
d$ L
d$0L
d$(H
5a@"
t$8L
T$8H
|$8H
T$8H
5l>"
t$8H
T$8H
5C;"
T$8H
T$8H
d$ L
d$0L
d$(H
d$ L
d$0L
d$ L
d$0L
d$ L
d$0L
d$ L
d$0L
d$ L
d$0H
d$(H
d$ L
d$0H
d$(H
5n7"
T$8L
T$8H
5n8"
D$8H
5{7"
|$8H
T$8H
5W6"
T$8H
5$6"
D$8I
T$8H
|$8H
T$8H
t$8H
T$8H
D$HL
d$ L
d$0L
d$(H
D$HL
d$ L
d$0L
D$HE1
d$ L
d$0H
d$(H
P0Hc
D$8H
T$8H
D$8H
5/1"
|$HH
=61"
D$pH
|$PH
5X+"
=Y)"
59/"
T$XH
|$HH
D$@L
|$8H
T$8H
T$HH
5u)"
=v'"
D$xH
|$8L
T$8H
D$8I
T$8H
D$PH
T$`M
T$ H
D$XH
T$@H
D$(H
T$`M
T$ H
T$@H
D$PH
T$0H
D$XH
T$PH
D$`H
D$ H
T$XH
D$@H
T$(H
D$PH
T$`M
T$ H
D$XH
T$@H
D$(H
D$PH
T$`M
T$ H
D$XH
T$@H
D$(H
T$`M
T$ H
T$@H
D$PH
T$0H
D$XH
T$`M
T$ H
T$@H
D$PH
T$0H
D$XH
T$`E1
T$ H
T$@H
D$PH
T$0H
D$XH
T$`L
T$ H
T$@H
D$PH
T$0H
D$XH
T$PE1
T$XH
D$`H
T$(H
D$ H
D$@H
T$PL
T$XH
D$`H
T$(H
D$ H
D$@H
T$PL
T$XH
D$`H
T$(H
D$ H
D$@H
T$PL
T$XH
D$`H
T$(H
D$ H
D$@H
T$PE1
T$XH
D$`H
T$(H
D$ H
D$@H
T$`E1
d$0H
T$ H
D$PH
D$XH
T$`E1
d$0H
T$ L
d$(H
D$PH
T$PE1
d$(L
d$ H
d$0H
D$HE1
d$(L
d$ L
d$0H
D$PH
T$PL
d$(L
d$ H
d$0H
d$ L
d$0L
d$(H
D$HL
d$ L
d$0L
D$H1
d$ L
d$0H
d$(H
d$ L
d$0H
d$(H
d$ L
d$0H
d$(H
D$HL
d$ L
d$0L
d$(H
D$HE1
d$ L
d$0H
d$(H
d$ L
d$0H
d$(H
D$HE1
d$ L
d$0H
d$(H
D$HE1
d$ L
d$0H
d$(H
d$(L
d$ L
d$(L
d$ L
d$0H
d$(L
d$ L
d$0H
d$(L
d$ L
d$(L
d$ H
d$0H
d$(L
d$ L
d$(L
d$ L
d$0H
d$(L
d$ L
d$0H
d$(L
d$ L
d$0H
d$ L
d$0H
d$(H
l$ H
d$(L
l$0L
t$8L
|$@H
l$ H
d$(L
l$0L
t$8L
|$@H
5L	"
5)	"
l$ H
d$(L
l$0L
t$8L
|$@H
ATUSH
|$0I
t$(L
L$ L
d$Xu
L;l$X
T$pH
D$pH
T$XH
D$pH
D$XH
D$XD
L$dH
D$ L
D$XI
T$pH
T$pH
L;l$XI
T$@I
D$HH
\$dE
L$ L
t$(E1
l$XH
D$XI
T$xH
|$0H
T$(D
@8Hc@ H
H;l$x
\$XH
T$XH
T$ H
[]A\A]A^A_
D$PH
T$HH
T$pH
B0H;
T$XH
D$PH
T$HH
T$(H
|$0H
T$(D
T$8H
@8Hc@ H
H;\$h
B0H;
L$HH
D$PH
D$8H
D$8H
D$@H
l$`H
\$XL
d$hL
l$pL
t$xL
D$PI
D$HH
D$@H
D$8H
|$PA
|$HA
|$@A
t$ H
|$(H
T$(H
D$(H
T$0H
T$(H
|$0H
T$0H
|$(1
T$(H
T$ H
|$PH
|$HH
|$@H
|$8H
l$ H
l$ H
l$ H
T$(H
T$0H
|$(H
T$(H
D$(H
|$0H
T$0H
T$(H
T$0H
T$0H
|$(1
T$(H
T$0H
|$(H
T$(H
D$(H
T$0H
T$(H
|$0H
T$0H
|$(1
T$(H
T$8I
L$HH
D$PH
D$8H
D$8H
D$@H
l$`H
\$XL
d$hL
l$pL
t$xL
D$PI
D$HH
D$@H
D$8H
|$PA
|$HA
|$@A
t$ H
D$0I
|$(H
T$(H
T$0H
D$(H
T$(H
T$0H
|$(1
T$(H
T$ H
|$PH
|$HH
|$@H
|$8H
l$ H
l$ H
l$ H
T$(H
T$0H
T$0H
D$0H
|$(H
T$(H
D$(H
T$0H
T$(H
|$0H
T$0H
|$(1
T$(H
|$(H
T$(H
D$(H
|$0H
T$0H
T$(H
T$0H
T$0H
|$(1
T$(H
T$8I
ATUSH
|$(I
t$ L
d$Hu
L;l$H
T$`H
D$`H
T$HH
D$`H
D$HH
L$TH
T$HI
T$`H
T$`H
L;l$HH
D$8H
t$(E1
l$HH
D$HI
T$hH
|$(H
D$pH
@8Hc@ H
H;l$h
\$HH
T$HH
$txI
[]A\A]A^A_
D$@H
T$8H
T$`H
B0H;
T$HH
D$@H
T$8H
T$ H
H;\$X
T$ H
@8Hc@ H
@8Hc@ H
A0H;
G0H;
L$(H
D$0H
D$ H
D$ H
l$@H
\$8L
d$HL
l$PL
t$XL
|$`H
D$0I
D$(H
D$ H
|$0A
|$0H
|$(H
|$ H
|$(A
T$ I
5?q!
L$(H
D$0H
D$0H
D$(H
D$ H
D$ H
l$@H
\$8L
d$HL
l$PL
t$XL
|$`H
D$0I
-'q!
D$(H
D$ H
|$0A
|$0H
|$(H
|$ H
|$(A
T$ I
L$(H
D$0H
D$0H
D$(H
D$ H
D$ H
l$@H
\$8L
d$HL
l$PL
t$XL
|$`H
D$0I
D$(H
D$ H
|$0A
|$0H
|$(H
|$ H
|$(A
T$ I
5;a!
L$(H
D$0H
D$0H
D$(H
D$ H
D$ H
l$@H
\$8L
d$HL
l$PL
t$XL
|$`H
D$0I
-g`!
D$(H
D$ H
|$0A
|$0H
|$(H
|$ H
|$(A
T$ I
L$(H
D$0H
D$0H
D$(H
D$ H
D$ H
l$@H
\$8L
d$HL
l$PL
t$XL
|$`H
D$0I
D$(H
D$ H
|$0A
|$0H
|$(H
|$ H
|$(A
T$ I
L$8H
D$@H
D$0H
D$0H
l$PH
\$HL
d$XL
l$`L
t$hL
|$pH
D$@I
D$8H
D$0H
|$@A
|$8A
T$ H
T$ H
T$ H
|$@H
|$8H
|$0H
T$ H
T$0I
L$8H
D$@H
D$0H
D$0H
l$PH
\$HL
d$XL
l$`L
t$hL
|$pH
D$@I
D$8H
D$0H
|$@A
|$8A
D$ I
T$ H
T$ H
|$@H
|$8H
|$0H
T$ H
T$ H
=B~!
D$ H
T$ H
|$ H
T$ H
T$0I
5t;!
L$8H
D$@H
D$0H
D$0H
l$PH
\$HL
d$XL
l$`L
t$hL
|$pH
D$@I
D$8H
D$0H
|$@A
|$8A
5=y!
=>w!
5F{!
D$ I
T$ H
T$ H
5[y!
|$@H
|$8H
|$0H
T$ H
T$ H
5As!
=Bq!
5Ju!
D$ H
T$ H
5Ds!
|$ H
T$ H
T$0I
5|.!
L$8H
D$@H
D$8H
D$0H
D$0H
l$PH
\$HL
d$XL
l$`L
t$hL
|$pH
D$@I
D$8H
D$0H
|$@A
|$8A
5=l!
=>j!
5Fn!
D$ I
T$ H
T$ H
5[l!
|$@H
|$8H
|$0H
T$ H
T$ H
5Af!
=Bd!
5Jh!
D$ H
T$ H
5Df!
|$ H
T$ H
T$0I
L$8H
D$@H
D$0H
D$0H
l$PH
\$HL
d$XL
l$`L
t$hL
|$pH
D$@I
D$8H
D$0H
|$@A
|$8A
5=_!
=>]!
5Fa!
D$ I
T$ H
T$ H
5]_!
|$@H
|$8H
|$0H
T$ H
T$ H
5AY!
=BW!
5J[!
D$ H
T$ H
5FY!
|$ H
T$ H
T$0I
L$8H
D$@H
D$@H
D$8H
D$0H
D$0H
l$PH
\$HL
d$XL
l$`L
t$hL
|$pH
D$@I
D$8H
D$0H
|$@A
|$8A
5:R!
=;P!
5CT!
T$ H
T$ H
T$ H
5VR!
|$@H
|$8H
|$0H
T$ H
T$0I
L$8H
D$@H
D$@H
D$8H
D$0H
D$0H
l$PH
\$HL
d$XL
l$`L
t$hL
|$pH
D$@I
D$8H
D$0H
|$@A
l$ H
|$8A
T$ H
T$0I
|$@H
|$8H
|$0H
AWAVI
ATUSH
|$ I
D$0M9
5_F!
T$HH
D$HH
|$HI
T$DI
=>A!
T$HH
T$HH
T$8H
[]A\A]A^A_
\$DE
D$`I
D$XH
T$8H
\$8H
H;l$`tXH
D$XH
@8Hc@ H
H;l$`u
T$0H
T$HH
C0H;
D$0H
H;\$P
@8Hc@ H
A0H;
l$ H
d$(L
l$0L
t$8L
|$@H
5E9!
=F7!
5N;!
5~9!
l$ H
d$(L
l$0L
t$8L
|$@H
5@2!
=A0!
5A4!
592!
l$ H
d$(L
l$0L
t$8L
|$@H
50+!
=1)!
51-!
5)+!
l$ H
d$(L
l$0L
t$8L
|$@H
52$!
=3"!
53&!
l$ H
d$(L
l$0L
t$8L
|$@H
l$ H
d$(L
l$0L
t$8L
|$@H
l$ H
d$(L
l$0L
t$8L
|$@H
l$ H
d$(L
l$0L
t$8L
|$@H
53	!
l$ H
d$(L
l$0L
t$8L
|$@H
AVAUATI
[]A\A]A^A_
[]A\A]A^A_
l$(H
\$ L
d$0L
l$8L
t$@H
\$ H
l$(L
d$0L
l$8L
t$@H
l$ H
d$(L
l$0H
l$ H
d$(L
l$0H
L$(H
D$0H
D$(H
D$ H
D$ H
|$0H
T$(I
D$ H
|$0H
|$(H
|$ H
l$@H
\$8L
d$HL
l$PL
t$XL
|$`H
|$(M
H9l$ 
D$ H
l$0H
\$(L
d$8L
l$@L
t$HL
|$PH
T$$L
$tXH
D$ I
l$ H
d$(L
l$0L
t$8L
|$@H
$I9D$ t=H
P0E1
l$ L
t$(L
|$0H
l$ L
t$(L
|$0H
$tPI
StOH
[]A\
[]A\
[]A\
zTuRH
z.u,
l$ H
AUATUH
[]A\A]A^
[]A\A]A^
thE1
X]H3
D$(z
X\$(f
L$8u
D$0f
.D$(
D$(H
\D$(
.D$(
D$8r
\$HH
l$PH
.D$8s
.L$8
D$0f
[]A\A]A^A_
zhuf
D$ z
D$ I
D$PL
L$hH
XD$`
YD$@
XD$ 
D$pf
L$hf
.L$H
D$pf
L$Hf
XD$`
XL$0
\L$8
YL$P
\L$ 
.L$(
[]A\
AUATI
D$8L
\D$8
YD$@
YL$@L
.D$@
YD$8
YD$H
[]A\A]
AVAUATUH
D$PH
XD$X
T$PI
D$hH
D$ H9D$
D$0I
L$hL;t$PH
XL$(I
XL$0
XD$X
.D$pw
D$pH
YD$`
XD$Xf
.D$ps
D$8L)
XL$@
XL$H
L$xf
D$ H9D$
L)l$
L9t$
[]A\L
A]A^A_
AUATUH
D$XL
\$ f
\$ f
L$`f
L$XM)
A\A]A^
T$0f
YL$x
T$hL)
YD$`
YL$p
YL$x
wYzW[f
D$ L
^L$ f
[]A\A]
L$ H
D$Pf
YD$P
\L$8
YT$P
YD$8H
D$0f
.D$Hr"H
L$@f
\D$H
YD$(
XD$0
XL$(f
D$ H
D$(z
QD$(f
YL$ 
d$ H
\$ H
l$(L
d$0L
l$8L
t$@H
L$Hs"z 
YL$H
d$`H
L$`f
XD$`
YL$H
.d$h
XL$P
XD$P
mtrand.RandomState.__reduce__
mtrand.disc0_array
mtrand.RandomState.tomaxint
mtrand.RandomState.shuffle
O|OO
unpack sequence of wrong size
Missing type object
Cannot convert %s to %s
lO|O
mtrand.discd_array
mtrand.discnp_array
OOO|O
mtrand.discnmN_array
mtrand.RandomState.poisson
mtrand.RandomState.binomial
__import__
OOOO
mtrand.RandomState.logseries
mtrand.RandomState.geometric
mtrand.RandomState.zipf
mtrand.cont3_array
mtrand.RandomState.triangular
mtrand.cont2_array
mtrand.RandomState.wald
|OOO
mtrand.RandomState.lognormal
mtrand.RandomState.logistic
mtrand.RandomState.gumbel
mtrand.RandomState.laplace
mtrand.RandomState.vonmises
mtrand.RandomState.f
mtrand.RandomState.gamma
mtrand.RandomState.beta
mtrand.RandomState.normal
mtrand.RandomState.uniform
mtrand.cont1_array
mtrand.RandomState.rayleigh
mtrand.RandomState.power
mtrand.RandomState.weibull
mtrand.RandomState.pareto
mtrand.RandomState.standard_t
mtrand.RandomState.chisquare
mtrand.cont0_array
mtrand.RandomState.randn
mtrand.RandomState.rand
mtrand.RandomState.__init__
mtrand.RandomState.bytes
mtrand.RandomState.randint
mtrand.RandomState.set_state
mtrand.RandomState.seed
%s.%s is not a type object
mtrand
__builtin__
__builtins__
ndarray
numpy
flatiter
broadcast
numpy.core.multiarray
_ARRAY_API
dtype
mtrand.RandomState.get_state
mtrand.RandomState
pvals
mean
ngood
nbad
nsample
left
mode
right
scale
sigma
kappa
nonc
dfnum
dfden
shape
high
length
MT19937
ValueError
__RandomState_ctor
_rand
append
arange
empty
float64
greater
hypergeometric
isinstance
less
less_equal
list
multinomial
multiply
multivariate_normal
negative_binomial
noncentral_chisquare
noncentral_f
permutation
random_integers
random_sample
reduce
sqrt
standard_cauchy
standard_exponential
standard_gamma
standard_normal
subtract
tuple
zeros
mtrand.pyx
numpy.pxi
__getstate__
__setstate__
mtrand.RandomState.permutation
mtrand.RandomState.__setstate__
mtrand.RandomState.__getstate__
mtrand.RandomState.random_integers
raise: arg 3 must be a traceback or None
instance exception may not have a separate value
exceptions must be strings, classes, or instances, not %s
mtrand.RandomState.multinomial
mtrand.RandomState.hypergeometric
mtrand.RandomState.negative_binomial
mtrand.RandomState.multivariate_normal
mtrand.RandomState.noncentral_f
mtrand.RandomState.noncentral_chisquare
mtrand.RandomState.standard_gamma
mtrand.RandomState.exponential
mtrand.RandomState.standard_cauchy
mtrand.RandomState.standard_exponential
mtrand.RandomState.standard_normal
mtrand.RandomState.random_sample
%s.%s does not appear to be the correct type object
module compiled against version %x of C-API but this version of numpy is %x
numpy.core.multiarray failed to import
Container for the Mersenne Twister PRNG.
    Constructor
    -----------
    RandomState(seed=None): initializes the PRNG with the given seed. See the
        seed() method for details.
    Distribution Methods
    -----------------
    RandomState exposes a number of methods for generating random numbers drawn
    from a variety of probability distributions. In addition to the
    distribution-specific arguments, each method takes a keyword argument
    size=None. If size is None, then a single value is generated and returned.
    If size is an integer, then a 1-D numpy array filled with generated values
    is returned. If size is a tuple, then a numpy array with that shape is
    filled and returned.
    
/dev/random
/dev/urandom
no error
random device unvavailable
?333333
@ffffff
?UUUUUU
>@UUUUUU
UUUUUU
size is not compatible with inputs
size is not compatible with inputs
size is not compatible with inputs
size is not compatible with inputs
size is not compatible with inputs
size is not compatible with inputs
algorithm must be 'MT19937'
state must be 624 longs
low >= high
scale <= 0
a <= 0
b <= 0
scale <= 0
shape <= 0
shape <= 0
scale <= 0
dfnum <= 0
dfden <= 0
dfnum <= 1
dfden <= 0
nonc < 0
df <= 0
df <= 1
nonc < 0
df <= 0
kappa < 0
a <= 0
a <= 0
a <= 0
scale <= 0
scale <= 0
scale <= 0
sigma <= 0.0
scale <= 0.0
mean <= 0.0
scale <= 0.0
left > mode
mode > right
left == right
n <= 0
p < 0
p > 1
n <= 0
p < 0
p > 1
lam < 0
a <= 1.0
p < 0.0
p > 1.0
ngood < 1
nbad < 1
ngood + nbad < nsample
nsample < 1
p < 0.0
p > 1.0
mean must be 1 dimensional
cov must be 2 dimensional and square
mean and cov must have same length
numpy.dual
sum(pvals) > 1.0
Seed the generator.
        seed(seed=None)
        seed can be an integer, an array (or other sequence) of integers of any
        length, or None. If seed is None, then RandomState will try to read data
        from /dev/urandom (or the Windows analogue) if available or seed from
        the clock otherwise.
        
Return a tuple representing the internal state of the generator.
        get_state() -> ('MT19937', int key[624], int pos)
        
Set the state from a tuple.
        
        state = ('MT19937', int key[624], int pos)
        
        set_state(state)
        
Return random floats in the half-open interval [0.0, 1.0).
        random_sample(size=None) -> random values
        
Returns random integers x such that 0 <= x <= sys.maxint.
        tomaxint(size=None) -> random values
        
Return random integers x such that low <= x < high.
        randint(low, high=None, size=None) -> random values
        If high is None, then 0 <= x < low.
        
Return random bytes.
        bytes(length) -> str
        
Uniform distribution over [low, high).
        uniform(low=0.0, high=1.0, size=None) -> random values
        
Return an array of the given dimensions which is initialized to 
        random numbers from a uniform distribution in the range [0,1).
        rand(d0, d1, ..., dn) -> random values
        Note:  This is a convenience function. If you want an
                    interface that takes a tuple as the first argument
                    use numpy.random.random_sample(shape_tuple).
        
        
Returns zero-mean, unit-variance Gaussian random numbers in an 
        array of shape (d0, d1, ..., dn).
        randn(d0, d1, ..., dn) -> random values
        Note:  This is a convenience function. If you want an
                    interface that takes a tuple as the first argument
                    use numpy.random.standard_normal(shape_tuple).
        
Return random integers x such that low <= x <= high.
        random_integers(low, high=None, size=None) -> random values.
        If high is None, then 1 <= x <= low.
        
Standard Normal distribution (mean=0, stdev=1).
        standard_normal(size=None) -> random values
        
Normal distribution (mean=loc, stdev=scale).
        normal(loc=0.0, scale=1.0, size=None) -> random values
        
Beta distribution over [0, 1].
        beta(a, b, size=None) -> random values
        
Exponential distribution.
        exponential(scale=1.0, size=None) -> random values
        
Standard exponential distribution (scale=1).
        standard_exponential(size=None) -> random values
        
Standard Gamma distribution.
        standard_gamma(shape, size=None) -> random values
        
Gamma distribution.
        gamma(shape, scale=1.0, size=None) -> random values
        
F distribution.
        f(dfnum, dfden, size=None) -> random values
        
Noncentral F distribution.
        noncentral_f(dfnum, dfden, nonc, size=None) -> random values
        
Chi^2 distribution.
        chisquare(df, size=None) -> random values
        
Noncentral Chi^2 distribution.
        noncentral_chisquare(df, nonc, size=None) -> random values
        
Standard Cauchy with mode=0.
        standard_cauchy(size=None)
        
Standard Student's t distribution with df degrees of freedom.
        standard_t(df, size=None)
        
von Mises circular distribution with mode mu and dispersion parameter
        kappa on [-pi, pi].
        vonmises(mu, kappa, size=None)
        
Pareto distribution.
        pareto(a, size=None)
        
Weibull distribution.
        weibull(a, size=None)
        
Power distribution.
        power(a, size=None)
        
Laplace distribution.
        
        laplace(loc=0.0, scale=1.0, size=None)
        
Gumbel distribution.
        
        gumbel(loc=0.0, scale=1.0, size=None)
        
Logistic distribution.
        
        logistic(loc=0.0, scale=1.0, size=None)
        
Log-normal distribution.
        
        Note that the mean parameter is not the mean of this distribution, but 
        the underlying normal distribution.
        
            lognormal(mean, sigma) <=> exp(normal(mean, sigma))
        
        lognormal(mean=0.0, sigma=1.0, size=None)
        
Rayleigh distribution.
        
        rayleigh(scale=1.0, size=None)
        
Wald (inverse Gaussian) distribution.
        
        wald(mean, scale, size=None)
        
Triangular distribution starting at left, peaking at mode, and 
        ending at right (left <= mode <= right).
        
        triangular(left, mode, right, size=None)
        
Binomial distribution of n trials and p probability of success.
        binomial(n, p, size=None) -> random values
        
Negative Binomial distribution.
        negative_binomial(n, p, size=None) -> random values
        
Poisson distribution.
        poisson(lam=1.0, size=None) -> random values
        
Zipf distribution.
        
        zipf(a, size=None)
        
Geometric distribution with p being the probability of "success" on
        an individual trial.
        
        geometric(p, size=None)
        
Hypergeometric distribution.
        
        Consider an urn with ngood "good" balls and nbad "bad" balls. If one 
        were to draw nsample balls from the urn without replacement, then 
        the hypergeometric distribution describes the distribution of "good" 
        balls in the sample.
        
        hypergeometric(ngood, nbad, nsample, size=None)        
        
Logarithmic series distribution.
        
        logseries(p, size=None)
        
Return an array containing multivariate normally distributed random numbers
        with specified mean and covariance.
        multivariate_normal(mean, cov) -> random values
        multivariate_normal(mean, cov, [m, n, ...]) -> random values
        mean must be a 1 dimensional array. cov must be a square two dimensional
        array with the same number of rows and columns as mean has elements.
        The first form returns a single 1-D array containing a multivariate
        normal.
        The second form returns an array of shape (m, n, ..., cov.shape[0]).
        In this case, output[i,j,...,:] is a 1-D array containing a multivariate
        normal.
        
Multinomial distribution.
        
        multinomial(n, pvals, size=None) -> random values
        pvals is a sequence of probabilities that should sum to 1 (however, the
        last element is always assumed to account for the remaining probability
        as long as sum(pvals[:-1]) <= 1).
        
Modify a sequence in-place by shuffling its contents.
        
        shuffle(x)
        
Given an integer, return a shuffled sequence of integers >= 0 and 
        < x; given a sequence, return a shuffled array copy.
        permutation(x)
        
mtrand.so.debug
.shstrtab
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.ctors
.dtors
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.data
.bss
.gnu_debuglink
