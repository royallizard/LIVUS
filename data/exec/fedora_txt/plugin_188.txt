j|M*
__gmon_start__
_init
_fini
__cxa_finalize
_Jv_RegisterClasses
workbook_date_conv
value_get_as_float
floor
go_date_serial_to_g
g_date_days_between
value_new_int
datetime_value_to_g
g_date_valid
go_date_weeknum
value_new_error_VALUE
g_date_get_year
g_date_get_month
go_date_serial_to_timet
go_fake_round
go_format_default_date
value_set_fmt
go_date_timet_to_serial_raw
value_new_float
value_new_error_NUM
yearfrac
g_date_get_weekday
g_free
collect_floats_value
go_date_g_to_serial
g_date_subtract_days
g_date_add_days
qsort
time
go_date_timet_to_serial
datetime_value_to_serial_raw
datetime_value_to_seconds
datetime_value_to_serial
g_date_set_dmy
g_date_compare
gnm_date_add_months
g_date_get_days_in_month
g_date_set_day
go_date_days_between_basis
g_date_get_day
gnm_datetime_allow_negative
g_date_clear
gnm_date_add_days
go_date_convention_base
value_peek_string
go_date_g_months_between
g_date_get_julian
go_date_g_years_between
gnm_date_add_years
g_date_set_year
g_log
g_assertion_message_expr
go_plugin_depends
go_plugin_header
datetime_functions
libm.so.6
libc.so.6
_edata
__bss_start
_end
plugin.so
GLIBC_2.0
GLIBC_2.1.3
d$<[^_]
d$<[^_]
d$<[^_]
d$<[^_]
d$<[^_]
d$0[^]
[^_]
[^_]
d$$[]
[^_]
[^_]
d$L[^_]
d$L[^_]
d$l[^_]
d$l[^_]
f={.
d$\[^_]
d$\[^_]
g_date_valid (gdate1)
functions.c
g_date_valid (gdate2)
goffice
gnumeric
1.10.11
datevalue
datedif
days360
ff|f
edate
eomonth
minute
networkdays
ff|?A
second
time
timevalue
today
weekday
workday
yearfrac
unix2date
date2unix
isoweeknum
isoyear
year:year of date
month:month of year
day:day of month
=DATE(2008,1,1)
=DATE(2008,13,1)
=DATE(2008,1,-10)
TODAY,YEAR,MONTH,DAY
=DATEVALUE(NOW())
TIMEVALUE,DATE
interval:counting unit
DAYS360
date:date serial value
=DAY(TODAY())
=DAY(DATE(1940,4,9))
DATE,YEAR,MONTH
DAYS360:days between dates
method:counting method
DATEDIF
=EDATE(DATE(2001,12,30),2)
EOMONTH:end of month
=EOMONTH(DATE(2001,12,14),2)
EDATE
=HOUR(TIME(12,30,2))
TIME,MINUTE,SECOND
=MINUTE(TIME(12,30,2))
TIME,HOUR,SECOND
=MONTH(TODAY())
=MONTH(DATE(1940,4,9))
DATE,YEAR,DAY
holidays:array of holidays
WORKDAY
=NOW()
=SECOND(TIME(12,30,2))
TIME,HOUR,MINUTE
hour:hour of the day
minute:minute within the hour
=TIME(12,30,2)
HOUR,MINUTE,SECOND
=TIMEVALUE(NOW())
DATEVALUE,TIME
=TODAY()
WEEKDAY:day-of-week
=WEEKDAY(DATE(1940,4,9))
DATE,ISOWEEKNUM
WEEKNUM:week number
=WEEKNUM(DATE(2000,1,1))
=WEEKNUM(DATE(2008,1,1))
WORKDAY:add working days
days:number of days to add
@{days} may be negative.
=WORKDAY(DATE(2001,12,14),2)
NETWORKDAYS
=YEAR(TODAY())
=YEAR(DATE(1940,4,9))
DATE,MONTH,DAY
basis:calendar basis
t:Unix time stamp
=UNIX2DATE(1000000000)
DATE2UNIX,DATE
d:date
=DATE2UNIX(DATE(2000,1,1))
UNIX2DATE,DATE
ISOWEEKNUM:ISO week number
=ISOWEEKNUM(DATE(2000,1,1))
=ISOWEEKNUM(DATE(2008,1,1))
ISOYEAR,WEEKNUM
=ISOYEAR(DATE(2000,1,1))
=ISOYEAR(DATE(2008,1,1))
ISOWEEKNUM,YEAR
datedif is known to differ from Excel for some values.
DATE:create a date serial value
The DATE function creates date serial values.  1-Jan-1900 is serial value 1, 2-Jan-1900 is serial value 2, and so on.  For compatibility reasons, a serial value is reserved for the non-existing date 29-Feb-1900.
If @{month} or @{day} is less than 1 or too big, then the year and/or month will be adjusted.
For spreadsheets created with the Mac version of Excel, serial 1 is 1-Jan-1904.
This function is Excel compatible.
DATEVALUE:the date part of a date and time serial value
serial:date and time serial value
DATEVALUE returns the date serial value part of a date and time serial value.
DATEDIF:difference between dates
start_date:starting date serial value
end_date:ending date serial value
DATEDIF returns the distance from @{start_date} to @{end_date} according to the unit specified by @{interval}.
If @{interval} is "y", "m", or "d" then the distance is measured in complete years, months, or days respectively.
If @{interval} is "ym" or "yd" then the distance is measured in complete months or days, respectively, but excluding any difference in years.
If @{interval} is "md" then the distance is measured in complete days but excluding any difference in months.
=DATEDIF(DATE(2003,2,3),DATE(2007,4,2),"m")
=DATEDIF(DATE(2000,4,30),DATE(2003,8,4),"d")
=DATEDIF(DATE(2000,4,30),DATE(2003,8,4),"y")
DAY:the day-of-month part of a date serial value
The DAY function returns the day-of-month part of @{date}.
DAYS360 returns the number of days from @{start_date} to @{end_date}.
If @{method} is 0, the default, the MS Excel (tm) US method will be used. This is a somewhat complicated industry standard method where the last day of February is considered to be the 30th day of the month, but only for @{start_date}.
If @{method} is 1, the European method will be used.  In this case, if the day of the month is 31 it will be considered as 30
If @{method} is 2, a saner version of the US method is used in which both dates get the same February treatment.
=DAYS360(DATE(2003,2,3),DATE(2007,4,2))
EDATE:adjust a date by a number of months
months:signed number of months
EDATE returns @{date} moved forward or backward the number of months specified by @{months}.
EOMONTH returns the date serial value of the end of the month specified by @{date} adjusted forward or backward the number of months specified by @{months}.
HOUR:compute hour part of fractional day
time:time of day as fractional day
The HOUR function computes the hour part of the fractional day given by @{time}.
MINUTE:compute minute part of fractional day
The MINUTE function computes the minute part of the fractional day given by @{time}.
MONTH:the month part of a date serial value
The MONTH function returns the month part of @{date}.
NETWORKDAYS:number of workdays in range
weekend:array of 0s and 1s, indicating whether a weekday (S, M, T, W, T, F, S) is on the weekend, defaults to {1,0,0,0,0,0,1}
NETWORKDAYS calculates the number of days from @{start_date} to @{end_date} skipping weekends and @{holidays} in the process.
If an entry of @{weekend} is non-zero, the corresponding weekday is not a work day.
This function is Excel compatible if the last argument is omitted.
This function is OpenFormula compatible.
=NETWORKDAYS(DATE(2001,1,2),DATE(2001,2,15))
=NETWORKDAYS(DATE(2001,1,2),DATE(2001,2,15),,{FALSE, FALSE, FALSE, TRUE, TRUE, FALSE, FALSE})
NOW:the date and time serial value of the current time
The NOW function returns the date and time serial value of the moment it is computed.  Recomputing later will produce a different value.
SECOND:compute seconds part of fractional day
The SECOND function computes the seconds part of the fractional day given by @{time}.
TIME:create a time serial value
second:second within the minute
The TIME function computes the fractional day between midnight at the time given by @{hour}, @{minute}, and @{second}.
TIMEVALUE:the time part of a date and time serial value
TIMEVALUE returns the time-of-day part of a date and time serial value.
TODAY:the date serial value of today
The TODAY function returns the date serial value of the day it is computed.  Recomputing on a later date will produce a different value.
method:numbering system, defaults to 1
The WEEKDAY function returns the day-of-week of @{date}.  The value of @{method} determines how days are numbered; it defaults to 1. 
If @{method} is 1, then Sunday is 1, Monday is 2, etc.
If @{method} is 2, then Monday is 1, Tuesday is 2, etc.
If @{method} is 3, then Monday is 0, Tuesday is 1, etc.
WEEKNUM calculates the week number according to @{method} which defaults to 1.
If @{method} is 1, then weeks start on Sundays and January 1 is in week 1.
If @{method} is 2, then weeks start on Mondays and January 1 is in week 1.
If @{method} is 150, then the ISO 8601 numbering is used.
WORKDAY adjusts @{date} by @{days} skipping over weekends and @{holidays} in the process.
=WORKDAY(DATE(2001,12,14),2,,{0,0,0,0,0,1,1})
YEAR:the year part of a date serial value
The YEAR function returns the year part of @{date}.
YEARFRAC:fractional number of years between dates
YEARFRAC calculates the number of days from @{start_date} to @{end_date} according to the calendar specified by @{basis}, which defaults to 0, and expresses the result as a fractional number of years.
If @{basis} is 0, then the US 30/360 method is used.
If @{basis} is 1, then actual number of days is used.
If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days.
If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days.
If @{basis} is 4, then the European 30/360 method is used.
=YEARFRAC(DATE(2000,1,1),DATE(2001,4,1))
UNIX2DATE:date value corresponding to the Unix timestamp @{t}
The UNIX2DATE function translates Unix timestamps into the corresponding date.  A Unix timestamp is the number of seconds since midnight (0:00) of January 1st, 1970 GMT.
DATE2UNIX:the Unix timestamp corresponding to a date @{d}
The DATE2UNIX function translates a date into a Unix timestamp. A Unix timestamp is the number of seconds since midnight (0:00) of January 1st, 1970 GMT.
ISOWEEKNUM calculates the week number according to the ISO 8601 standard.  Weeks start on Mondays and week 1 contains the first Thursday of the year.
January 1 of a year is sometimes in week 52 or 53 of the previous year.  Similarly, December 31 is sometimes in week 1 of the following year.
ISOYEAR:year corresponding to the ISO week number
ISOYEAR calculates the year to go with week number according to the ISO 8601 standard.
DAYS:difference between dates in days
DAYS returns the positive or negative number of days from @{start_date} to @{end_date}.
=DAYS(DATE(2003,2,3),DATE(2007,4,2))
=DAYS(DATE(2007,4,2),DATE(2003,2,3))
=DAYS(DATE(1900,2,28),DATE(1900,3,1))
munG
datedif_opt_ym
datedif_opt_yd
datedif_opt_md
plugin.so.debug
.data
.rodata
.shstrtab
.dynamic
.note.gnu.build-id
.eh_frame
.gnu.hash
.fini
.gnu_debuglink
.dynsym
.gnu.version
.rel.dyn
.data.rel.ro
.gnu.version_r
.jcr
.eh_frame_hdr
.dynstr
.ctors
.dtors
.bss
.init
.rel.plt
.got.plt
.got
.text
