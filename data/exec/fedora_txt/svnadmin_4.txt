/lib64/ld-linux-x86-64.so.2
libsvn_repos-1.so.0
svn_string_create
svn_error__locate
__gmon_start__
_Jv_RegisterClasses
svn_error_createf
svn_fs_youngest_rev
apr_hash_next
apr_array_push
svn_fs_abort_txn
apr_hash_this
apr_pool_destroy
svn_fs_get_lock
svn_stringbuf_create
svn_error_quick_wrap
svn_error_create
svn_error_clear
apr_hash_set
apr_pool_clear
apr_psprintf
apr_palloc
svn_fs_deltify_revision
svn_fs_change_rev_prop
svn_fs_unlock
apr_hash_first
apr_pstrdup
svn_fs_set_uuid
svn_path_join
svn_error_wrap_apr
apr_hash_make
svn_path_local_style
svn_stream_from_aprfile2
svn_pool_create_ex
apr_array_make
svn_utf_cstring_to_utf8
svn_repos_hotcopy
svn_repos_dump_fs2
svn_repos_open
svn_repos_dated_revision
svn_repos_fs_change_rev_prop3
svn_repos_upgrade
svn_repos_fs_pack
svn_repos_db_logfiles
svn_repos_fs
svn_repos_recover3
svn_repos_create
svn_repos_verify_fs
svn_repos_version
svn_repos_fs_get_locks
svn_repos_load_fs2
libsvn_fs-1.so.0
svn_fs_purge_txn
svn_fs_list_transactions
svn_fs_create_access
svn_fs_open_txn
svn_fs_set_access
svn_fs_version
svn_fs_initialize
svn_fs_set_warning_func
svn_fs_print_modules
libsvn_fs_fs-1.so.0
svn_delta_version
svn_stream_set_write
svn_stream_create
svn_subr_version
svn_ver_check_list
libsvn_fs_base-1.so.0
libsvn_delta-1.so.0
libsvn_fs_util-1.so.0
libsvn_subr-1.so.0
apr_file_open_stdout
apr_file_open_stdin
svn_opt__args_to_target_array
svn_cmdline_printf
svn_opt_parse_revision
svn_opt_get_canonical_subcommand2
svn_cstring_count_newlines
svn_opt_print_help3
svn_opt_get_option_from_code2
svn_opt_format_option
svn_cmdline_fprintf
svn_config_get_config
svn_path_is_url
svn_subst_translate_string
svn_opt_subcommand_takes_option3
svn_stringbuf_from_file2
svn_cmdline_fflush
svn_path_canonicalize
svn_handle_error2
svn_cmdline_init
svn_path_internal_style
svn_opt_parse_all_args
svn_cmdline_fputs
svn_user_get_name
svn_cmdline_handle_exit_error
svn_cmdline__getopt_init
svn_time_to_human_cstring
libz.so.1
libsqlite3.so.0
libaprutil-1.so.0
libcrypt.so.1
libexpat.so.1
libdb-4.8.so
libapr-1.so.0
apr_getopt_long
apr_allocator_create
apr_allocator_owner_set
apr_allocator_max_free_set
apr_signal
libpthread.so.0
libdl.so.2
libc.so.6
dcngettext
dcgettext
abort
stderr
__cxa_finalize
__libc_start_main
_edata
__bss_start
_end
__libc_csu_fini
__libc_csu_init
GLIBC_2.2.5
;G$H
W(Hc
[[]H
AZ[]
AWAVAUI
[]A\A]A^A_
d$0L
D$HH
I9D$
t$ H
I9D$
5~M 
t$ H
H(Hc
=@N 
t$(H
ATSubH
[A\]
fffff.
fffff.
l$ H
d$ H
fffff.
d$ L
l$(L
t$0H
\$ H
l$(L
d$0L
l$8L
t$@H
\$0H
l$8L
d$@L
l$HL
t$PH
T$LH
l$ H
\$0H
l$8L
d$@H
t$(H
|$ I
t$8H
|$(I
D$ H
D$(1
L$(H
T$ L
|$8H
\$HH
l$PL
d$XL
l$`H
|$8H
|$0H
D$0H
t$(H
|$(H
|$ H
D$(1
|$ H
L$(I
l$@H
\$8L
d$HL
l$PL
t$XL
|$`H
|$ L
D$ A
|$(H
T$(H
t$(H
l$PH
\$HL
d$XL
l$`L
t$hL
|$pH
|$ H
t$ L
|$(L
D$(A
|$0H
T$0H
|$8H
D$8H
t$0I
D$8H
l$ H
d$(L
l$0H
ffff.
l$PH
\$HL
d$XL
l$`L
t$hL
|$pH
|$ H
t$ H
|$(E1
t$(H
L$8H
t$01
d$8H
D$0H
|$(H
|$0H
ffffff.
|$ H
\$8H
l$@H
|$(H
t$(H
ffff.
|$(H
\$XH
l$`H
|$HH
L$(H
T$HH
|$8I
L$(H
T$HH
|$@I
D$8H
H;D$@
|$0H
D$@H
L$8H
t$0H
D$HH
D$@1
\$ H
l$(L
d$0L
l$8L
t$@H
t$(H
t$8H
H;\$
H9\$
L$hE
D$hE
d$ H
fffff.
l$ L
t$(L
|$0H
subversion/svnadmin/main.c
Caught signal
subversion
svnadmin: 
Invalid revision specifier
Upgrade completed.
Can't open stdio file
bdb-txn-nosync
bdb-log-autoremove
fs-type
pre-1.4-compatible
pre-1.5-compatible
pre-1.6-compatible
Repository argument required
svnadmin
Transaction '%s' removed.
administrator
No paths to unlock provided
Path '%s' isn't locked.
Removed lock on '%s'.
Recovery completed.
Path: %s
UUID Token: %s
Owner: %s
Created: %s
Expires: %s
Comment (%i lines):
Comment (%i line):
Deltifying revision %ld...
done.
Missing revision
Only one revision allowed
svn:log
Packing shard %s...
help
subcommand argument required
Unknown command: '%s'
svn_subr
svn_repos
svn_fs
svn_delta
show help on a subcommand
incremental
dump incrementally
deltas
use deltas in dump output
bypass-hooks
quiet
ignore-uuid
force-uuid
parent-dir
bdb-log-keep
config-dir
clean-logs
use-pre-commit-hook
use-post-commit-hook
use-pre-revprop-change-hook
use-post-revprop-change-hook
wait
crashtest
create
deltify
dump
hotcopy
list-dblogs
list-unused-dblogs
load
lslocks
lstxns
pack
recover
rmlocks
rmtxns
setlog
setrevprop
setuuid
upgrade
verify
--version
Revisions must not be greater than the youngest revision (%ld)
Failed to get exclusive repository access; perhaps another process
such as httpd, svnserve or svn has it open?
Waiting on repository lock; perhaps another process has it open?
Upgrade of this repository's underlying versioned filesystem is not supported; consider dumping and loading the data elsewhere
Upgrade of this repository is not supported; consider dumping and loading the data elsewhere
'%s' is an URL when it should be a path
general usage: svnadmin SUBCOMMAND REPOS_PATH  [ARGS & OPTIONS ...]
Type 'svnadmin help <subcommand>' for help on a specific subcommand.
Type 'svnadmin --version' to see the program version and FS modules.
Available subcommands:
The following repository back-end (FS) modules are available:
The latest repos revision is %ld.
First revision cannot be higher than second
Repository lock acquired.
Please wait; upgrading the repository may take some time...
Repository lock acquired.
Please wait; recovering the repository may take some time...
Exactly one property name and one file argument required
Exactly one file argument required
Multiple revision arguments encountered; try '-r N:M' instead of '-r N -r M'
Syntax error in revision argument '%s'
Subcommand '%s' doesn't accept option '%s'
Type 'svnadmin help %s' for usage.
Try 'svnadmin help' for more info
show program version information
specify revision number ARG (or X:Y range)
bypass the repository hook system
no progress (only errors) to stderr
ignore any repos UUID found in the stream
set repos UUID to that found in stream, if any
type of repository: 'fsfs' (default) or 'bdb'
load at specified directory in repository
disable fsync at transaction commit [Berkeley DB]
disable automatic log file removal [Berkeley DB]
read user configuration files from directory ARG
remove redundant Berkeley DB log files
                             from source repository [Berkeley DB]
call pre-commit hook before committing revisions
call post-commit hook after committing revisions
call hook before changing revision property
call hook after changing revision property
wait instead of exit if the repository is in
                             use by another process
use format compatible with Subversion versions
                             earlier than 1.4
use format compatible with Subversion versions
                             earlier than 1.5
use format compatible with Subversion versions
                             earlier than 1.6
usage: svnadmin crashtest REPOS_PATH
Open the repository at REPOS_PATH, then abort, thus simulating
a process that crashes while holding an open repository handle.
usage: svnadmin create REPOS_PATH
Create a new, empty repository at REPOS_PATH.
usage: svnadmin deltify [-r LOWER[:UPPER]] REPOS_PATH
Run over the requested revision range, performing predecessor delti-
fication on the paths changed in those revisions.  Deltification in
essence compresses the repository by only storing the differences or
delta from the preceding revision.  If no revisions are specified,
this will simply deltify the HEAD revision.
usage: svnadmin dump REPOS_PATH [-r LOWER[:UPPER] [--incremental]]
Dump the contents of filesystem to stdout in a 'dumpfile'
portable format, sending feedback to stderr.  Dump revisions
LOWER rev through UPPER rev.  If no revisions are given, dump all
revision trees.  If only LOWER is given, dump that one revision tree.
If --incremental is passed, the first revision dumped will describe
only the paths changed in that revision; otherwise it will describe
every path present in the repository as of that revision.  (In either
case, the second and subsequent revisions, if any, describe only paths
changed in those revisions.)
usage: svnadmin help [SUBCOMMAND...]
Describe the usage of this program or its subcommands.
usage: svnadmin hotcopy REPOS_PATH NEW_REPOS_PATH
Makes a hot copy of a repository.
usage: svnadmin list-dblogs REPOS_PATH
List all Berkeley DB log files.
WARNING: Modifying or deleting logfiles which are still in use
will cause your repository to be corrupted.
usage: svnadmin list-unused-dblogs REPOS_PATH
List unused Berkeley DB log files.
usage: svnadmin load REPOS_PATH
Read a 'dumpfile'-formatted stream from stdin, committing
new revisions into the repository's filesystem.  If the repository
was previously empty, its UUID will, by default, be changed to the
one specified in the stream.  Progress feedback is sent to stdout.
usage: svnadmin lslocks REPOS_PATH [PATH-IN-REPOS]
Print descriptions of all locks on or under PATH-IN-REPOS (which,
if not provided, is the root of the repository).
usage: svnadmin lstxns REPOS_PATH
Print the names of all uncommitted transactions.
usage: svnadmin pack REPOS_PATH
Possibly compact the repository into a more efficient storage model.
This may not apply to all repositories, in which case, exit.
usage: svnadmin recover REPOS_PATH
Run the recovery procedure on a repository.  Do this if you've
been getting errors indicating that recovery ought to be run.
Berkeley DB recovery requires exclusive access and will
exit if the repository is in use by another process.
usage: svnadmin rmlocks REPOS_PATH LOCKED_PATH...
Unconditionally remove lock from each LOCKED_PATH.
usage: svnadmin rmtxns REPOS_PATH TXN_NAME...
Delete the named transaction(s).
usage: svnadmin setlog REPOS_PATH -r REVISION FILE
Set the log-message on revision REVISION to the contents of FILE.  Use
--bypass-hooks to avoid triggering the revision-property-related hooks
(for example, if you do not want an email notification sent
from your post-revprop-change hook, or because the modification of
revision properties has not been enabled in the pre-revprop-change
hook).
NOTE: Revision properties are not versioned, so this command will
overwrite the previous log message.
usage: svnadmin setrevprop REPOS_PATH -r REVISION NAME FILE
Set the property NAME on revision REVISION to the contents of FILE. Use
--use-pre-revprop-change-hook/--use-post-revprop-change-hook to trigger
the revision property-related hooks (for example, if you want an email
notification sent from your post-revprop-change hook).
NOTE: Revision properties are not versioned, so this command will
overwrite the previous value of the property.
usage: svnadmin setuuid REPOS_PATH [NEW_UUID]
Reset the repository UUID for the repository located at REPOS_PATH.  If
NEW_UUID is provided, use that as the new repository UUID; otherwise,
generate a brand new UUID for the repository.
usage: svnadmin upgrade REPOS_PATH
Upgrade the repository located at REPOS_PATH to the latest supported
schema version.
This functionality is provided as a convenience for repository
administrators who wish to make use of new Subversion functionality
without having to undertake a potentially costly full repository dump
and load operation.  As such, the upgrade performs only the minimum
amount of work needed to accomplish this while still maintaining the
integrity of the repository.  It does not guarantee the most optimized
repository state as a dump and subsequent load would.
usage: svnadmin verify REPOS_PATH
Verifies the data stored in the repository.
svnadmin.debug
.data
.rodata
.shstrtab
.dynamic
.note.gnu.build-id
.eh_frame
.note.ABI-tag
.gnu.hash
.fini
.gnu_debuglink
.dynsym
.gnu.version
.rela.dyn
.data.rel.ro
.interp
.gnu.version_r
.jcr
.eh_frame_hdr
.dynstr
.ctors
.dtors
.bss
.init
.rela.plt
.got.plt
.got
.text
