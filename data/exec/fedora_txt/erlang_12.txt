__gmon_start__
_init
_fini
__cxa_finalize
_Jv_RegisterClasses
value_get_as_float
value_new_error_VALUE
goal_seek_initialize
goal_seek_newton
value_new_float
goal_seek_point
goal_seek_bisection
dgamma
pgamma
go_nan
expm1
go_plugin_depends
go_plugin_header
erlang_functions
libm.so.6
libc.so.6
_edata
__bss_start
_end
erlang.so
GLIBC_2.1.3
GLIBC_2.0
P[^]
P[^]
P[^]
P[^]
`[^]
`[^]
 [^]
 [^]
?goffice
gnumeric
1.6.3
probblock
traffic,circuits
offtraf
dimcirc
traffic,gos
offcap
circuits,gos
munG
@FUNCTION=PROBBLOCK
@SYNTAX=PROBBLOCK(traffic,circuits)
@DESCRIPTION=PROBBLOCK returns probability of blocking when a number of @traffic loads into a number of @circuits (servers).
* @traffic cannot exceed @circuits
@EXAMPLES=
PROBBLOCK(24,30) returns 0.4012.
@SEEALSO=OFFTRAF, DIMCIRC, OFFCAP
@FUNCTION=OFFTRAF
@SYNTAX=OFFTRAF(traffic,circuits)
@DESCRIPTION=OFFTRAF returns a predicted number of offered traffic from a number of carried @traffic (taken from measurements) on a number of @circuits.
* @traffic cannot exceed @circuits
@EXAMPLES=
OFFTRAF(24,30) returns 25.527.
@SEEALSO=PROBBLOCK, DIMCIRC, OFFCAP
@FUNCTION=DIMCIRC
@SYNTAX=DIMCIRC(traffic,gos)
@DESCRIPTION=DIMCIRC returns a number of circuits required from a number of @traffic loads with @gos grade of service.
@EXAMPLES=
DIMCIRC(24,1%) returns 35.
@SEEALSO=OFFCAP, OFFTRAF, PROBBLOCK
@FUNCTION=OFFCAP
@SYNTAX=OFFCAP(circuits,gos)
@DESCRIPTION=OFFCAP returns a number of traffic capacity given by a number of @circuits with @gos grade of service.
@EXAMPLES=
OFFCAP(30,1%) returns 20.337.
@SEEALSO=DIMCIRC, OFFTRAF, PROBBLOCK
erlang.so.debug
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.ctors
.dtors
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.bss
.gnu_debuglink
