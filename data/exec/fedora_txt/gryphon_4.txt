?@yf
__gmon_start__
_init
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
plugin_register
proto_register_gryphon
__stack_chk_fail
plugin_reg_handoff
proto_reg_handoff_gryphon
version
tcp_dissect_pdus
tvb_get_ntohs
tvb_get_guint8
proto_tree_add_text
proto_item_add_subtree
val_to_str
decode_boolean_bitfield
tvb_reported_length_remaining
tvb_get_ntohl
decode_numeric_bitfield
tvb_get_ephemeral_string
tvb_get_ephemeral_stringz
g_snprintf
g_strlcpy
g_strlcat
tvb_get_ntoh64
localtime
proto_tree_add_uint
col_set_str
col_clear
proto_tree_add_item
set_actual_length
tvb_get_nstringz0
decode_enumerated_bitfield
tvb_new_subset
proto_register_protocol
proto_register_field_array
proto_register_subtree_array
prefs_register_protocol
prefs_register_bool_preference
create_dissector_handle
dissector_add_uint
libpthread.so.0
libc.so.6
_edata
__bss_start
_end
gryphon.so
GLIBC_2.4
GLIBC_2.2.5
fffff.
fffff.
AVAUATI
([]A\A]A^A_
ffffff.
d$ H
AUATI
([]A\A]A^A_
fff.
d$ H
d$ H
d$ H
l$ L
d$(L
l$0H
D$81
T$ A
t$(tSD
t$(E1
|$/D
t$(A
|$(H
T$8dH3
D$(uPH
H[]A\A]A^A_
AUATI
([]A\A]A^A_
fff.
d$ H
d$ H
d$ H
d$ H
l$ L
d$(L
l$0H
d$ H
d$ H
l$ L
d$(L
l$0H
ffffff.
d$ L
l$(L
t$0H
\$(H
l$0L
d$8L
l$@H
D$81
T$ H
T$8dH3
\$HH
l$PL
d$XL
l$`L
t$hL
|$pH
l$ L
d$(L
l$0H
\$(H
l$0L
d$8L
l$@L
t$HL
|$PH
AWAVAUATI
$tNE
([]A\A]A^A_
d$ H
AWAVAUI
ATUS
D$(1
T$(dH3
8[]A\A]A^A_
AWAVAUATI
D$(1
T$(dH3
8[]A\A]A^A_
ffffff.
AVAUI
[]A\A]A^A_
ffff.
QAUI
D$(1
T$(dH3
8[]A\A]A^A_
AVAUI
D$H1
t$@H
T$ H
D$(H
T$0L
T$HdH3
X[]A\A]A^A_
l$ L
d$(L
l$0H
AUATU
T$HdH
D$h1
L$8D
D$DD
|$HL
D$TA
L$8I
L$@I
\$0L
L$DL
T$(L
T$(E
L$TH
|$@I
|$HL
T$hdH3
x[]A\A]A^A_
L$PL
L$@L
L$DL
D$XD
|$XL
|$XL
|$XL
|$XL
|$XL
l$0H
\$(L
d$8L
l$@H
AWAVAUI
ATUS
T$ dH
D$81
|$ L
|$ L
DL$,
|$ L
D$(L
|$(L
|$(L
T$8dH3
H[]A\A]A^A_
|$ L
AWAVAUATU
T$@H
D$HH
T$PH
D$XH
T$`H
D$hH
T$pH
D$xH
T$ H
D$(H
[]A\A]A^A_
+u#H
\$(H
l$0L
d$8L
l$@L
t$HL
|$PH
AWAVI
AUATUH
D9d$
([]A\A]A^A_
d$ H
l$ L
d$(L
l$0H
l$ L
d$(L
l$0H
AWAVAUATUH
([]A\A]A^A_
fff.
AWAVAUATU
D$H1
|$(L
|$(L
|$(D
D$8H
|$(L
L$8E
9D$8
|$(L
l$<H
D$ D
|$ I
T$HdH3
X[]A\A]A^A_
d$ L
l$(L
t$0H
D$81
T$8dH3
\$@H
l$HL
d$PL
l$XL
t$`H
D$81
T$8dH3
\$HH
l$PL
d$XL
l$`L
t$hL
|$pH
D$81
|$0H
T$8dH3
\$@H
l$HL
d$PL
l$XL
t$`H
fffff.
d$ H
AWAVAUATI
D$MD
D$4A
L$8H
D$@L
5%_ 
D$OL
|$HH
5g^ 
5.z 
L$@L
T$0E
5?y 
L$0)
D9t$0~
L$0L
[]A\A]A^A_
L$8H
D$4A
|$4L
|$4L
D$ND
t$MI
L$PL
5jX 
5Gn 
5[r 
5`r 
D9:u
Ft	;
AWAVAUI
ATUH
D$81
5io 
D$ H
5<n 
|$$L
\$ E
5&l 
D9d$ }
T$8dH3
H[]A\A]A^A_
|$$L
|$$L
T$(L
=bj 
fffff.
0.0.4
Number of running copies: %u
padding
Block number: %u
reserved
Handle %d: %u
Response handle: %u
Set optimization: %s
Do not sort messages
Set sorting: %s
Client ID: %u
Privileges: %u
Set Speed IOCTL
Get Speed IOCTL
Speed data size is %d byte%s
There %s %d preset speed%s
Data for preset %d
Number of filter handles: %d
Filter handle: %u
Baud rate index: %u
Event number: %u
Event numbers: All
Always initialize
Mode: %s
Response handles: all
Unknown (%u)
Action: %s response
Filter mode: %s
Filter handles: all
Action: %s filter
Flags: 0x%02x
The program is not present
Handle: %u
Output 1
Output 2
Digital values set
%s is set
No digital values are set
Input 1
Input 2
Input 3
Pushbutton
More filenames to return: %s
File and directory names
Data (%u byte%s)
Reset Limit = %u messages
Delay %d = %.2f seconds
Delay %d = infinite
Transmit schedule ID: %u
unknown option data
unknown option
Binary - Don't modify
Type of data in the file
Executable
Type of file
ASCII - Remove CR's
Data
Option number %u
Unknown (0x%02x)
Filtering on %s
Type of comparison: %s
Pattern
Mask
Value: %u
Value
Flags
The filter is inactive
The filter is active
Number of filter blocks = %d
Filter block %d
Timestamp: %d:%02d:%02d.%05d
Receive frame count: %u
Transmit frame count: %u
Receive error count: %u
Transmit error count: %u
Unknown (0x%08x)
IOCTL: %s
Message header
Data length: %d byte%s
Extra data length: %d byte%s
Mode: %d
Transmitted message
Received message
Local message
Remote message
Internal message
Priority: %u
Error status: %u
Context: %u
reserved:
Message Body
Header
Extra data
Critical
Normal
%s schedule ID: %u
Message index: %d
Number of iterations: %u
Flags: 0x%08x
Normal scheduler
Critical scheduler
Message %d
Sleep: %u milliseconds
Transmit count: %u
Do not s
%s%s
kip the first "Sleep" value
Channel: %u
Message
First
Second
Use 11 bit headers only
Use 29 bit headers only
Use both 11 & 29 bit headers
undefined
USDT request
USDT response
UUDT response
%s block of USDT/UUDT IDs
No IDs in the block
1 ID in the block
%s ID: %04X
%d IDs in the block
%s IDs from %04X through %04X
%d ignored byte%s
%segister with gusdt
Action flags
%s = %s
Transmit options
Do not e
Receive options
First group of names
Subsequent group of names
Directory: %.*s
Program %u
Name: %.32s
Description: %.80s
Program name: %.32s
Program size: %u bytes
Program description: %.80s
Username: %.16s
Password: %.32s
Event %d:
Event ID: %u
Event name: %.19s
Device name: %.20s
Device version: %.8s
Device serial number: %.20s
Number of channels: %d
Channel %d:
Driver name: %.20s
Driver version: %.8s
Device security string: %.16s
Valid Header lengths
Hardware serial number: %.20s
Unknown (0x%04x)
Protocol type & subtype: %s
Channel ID: %u
Card slot number: %u
Arguments: %s
Average over time
Average over frame count
- unknown -
Averaging period: %d frames
Pass
Block
Pass/Block flag: %s
Length of Pattern & Mask: %d
discarded data
Date/Time: [Invalid]
Channel (Client) number: %u
Gryphon
- Invalid -
Source: %s, channel %u
Destination: %s, channel %u
Data length: %u byte%s
Frame type: %s
Wait for response
Don't wait for response
Wait for previous responses
Command: %s
Data: (%d byte%s)
Status: %s
Event context: %u
Data (%d byte%s)
Data: %s
The response is inactive
The response is active
Old handle = %d
Action: %s
The period is in 0.01 seconds
The period is in frames
Period: %d messages
Period: %d.%02d seconds
Response block %d
gryphon
DG Gryphon Protocol
desegment
tcp.port
Source
gryphon.src
Source channel
gryphon.srcchan
Destination
gryphon.dest
Destination channel
gryphon.destchan
Frame type
gryphon.type
Command
gryphon.cmd
Command request
Command response
Network (vehicle) data
Event
Text string
Card
Client
Scheduler
Script Processor
Program Loader
USDT Server
Bus Load Monitoring
Flight Recorder
Message Responder
I/O and power
Utility/Miscellaneous
Get status
Get configuration
Enable event
Disable event
Get time
Set time
Set broadcasts on
Set broadcasts off
Set channel baud rate
Get channel baud rate
Set filter (deprecated)
Get filter
Transmit message
Set transmit loopback on
Set transmit loopback off
IOCTL pass-through
Add a filter
Modify a filter
Get filter handles
Set default filter
Get default filter mode
Set filter mode
Get filter mode
Get event names
Get defined speeds
Register with server
Set the sorting behavior
Set the type of optimization
Set Bus Load Monitoring mode
Get Bus Load Monitoring mode
Get Bus Load data
Get Bus Load statistics
Add response message
Get response message
Modify response message state
Get response message handles
Delete an uploaded program
Start an uploaded program
Stop an uploaded program
Set program upload options
Replace a scheduled message
Read current digital inputs
Read latched digital inputs
Write digital outputs
Set indicated output bits
Clear indicated output bits
Set initialization strategy
Get initialization strategy
Delete
Activate
Deactivate
frame header
data message header
data message data
data message extra data
event message header
event message
Bit field check
Greater than (signed)
Less than (signed)
Equal to
Not equal to
Greater than (unsigned)
Less than (unsigned)
Digital, change of state
Bus load average: %d.%02d%%
Current bus load: %d.%02d%%
Peak bus load: %d.%02d%%
Filter off, pass all messages
Filter on
GINIT: Initialize
GLOOPON: Loop on
GLOOPOFF: Loop off
GGETHWTYPE: Get hardware type
GGETREG: Get register
GSETREG: Set register
GGETERRLEV: Get error level
GSETERRLEV: Set error level
GGETBITRATE: Get bit rate
GGETRAM: Read value from RAM
GSETRAM: Write value to RAM
GCANGETMODE
GCANSETMODE
GCANGETTRANS
GCANSETTRANS
GCANSENDERR
GCANRGETOBJ
GCANRSETSTDID
GCANRSETEXTID
GCANRSETDATA
GCANRENABLE
GCANRDISABLE
GCANRGETMASKS
GCANRSETMASKS
GCANSWGETMODE
GCANSWSETMODE
GDLCGETFOURX
GDLCSETFOURX
GDLCGETLOAD
GDLCSETLOAD
GDLCSENDBREAK
GDLCABORTTX
DLCGETHDRMODE
GDLCSETHDRMODE
GHONSLEEP
GHONSILENCE
GKWPSETPTIMES
GKWPSETWTIMES
GKWPDOWAKEUP
GKWPGETBITTIME
GKWPSETBITTIME
GKWPSETNODEADDR
GKWPGETNODETYPE
GKWPSETNODETYPE
GKWPSETWAKETYPE
GKWPSETTARGADDR
GKWPSETKEYBYTES
GKWPSETSTARTREQ
GKWPSETSTARTRESP
GKWPSETPROTOCOL
GKWPGETLASTKEYBYTES
GKWPSETLASTKEYBYTES
GSCPGETBBR
GSCPSETBBR
GSCPGETID
GSCPSETID
GSCPADDFUNCID
GSCPCLRFUNCID
GUBPGETBITRATE
GUBPSETBITRATE
GUBPGETINTERBYTE
GUBPSETINTERBYTE
GUBPGETNACKMODE
GUBPSETNACKMODE
GUBPGETRETRYDELAY
GUBPSETRETRYDELAY
GSJAGETLISTEN
GSJASETLISTEN
GSJAGETSELFTEST
GSJASETSELFTEST
GSJAGETXMITONCE
GSJASETXMITONCE
GSJAGETTRIGSTATE
GSJASETTRIGCTRL
GSJAGETTRIGCTRL
GSJAGETOUTSTATE
GSJASETOUTSTATE
GSJAGETFILTER
GSJASETFILTER
GSJAGETMASK
GSJASETMASK
GSJAGETINTTERM
GSJASETINTTERM
GSJAGETFTTRANS
GSJASETFTTRANS
GSJAGETFTERROR
GLINGETBRKSPACE
GLINSETBRKSPACE
GLINGETBRKMARK
GLINSETBRKMARK
GLINGETIDDELAY
GLINSETIDDELAY
GLINGETRESPDELAY
GLINSETRESPDELAY
GLINGETINTERBYTE
GLINSETINTERBYTE
GLINGETWAKEUPDELAY
GLINSETWAKEUPDELAY
GLINGETWAKEUPTIMEOUT
GLINSETWAKEUPTIMEOUT
GLINGETWUTIMOUT3BR
GLINSETWUTIMOUT3BR
GLINSENDWAKEUP
GLINGETMODE
GLINSETMODE
GOUTGET: Read digital outputs
GOUTCLEARBIT
GPWRGETWHICH
GPWROFF
GPWROFFRESET
GPWRRESET
Dummy device driver
CAN, 82527 subtype
CAN, SJA1000 subtype
CAN, 82527 ISO11992 subtype
CAN, SJA1000 onboard subtype
J1850, HBCC subtype
J1850, GM DLC subtype
J1850, Chrysler subtype
Honda UART, DG HC08 subtype
Ford UBP, DG HC08 subtype
Chrysler SCI, UART subtype
LIN, DG HC08 subtype
OK - no error
Unknown error
Unrecognised command
Unsupported command
Invalid channel specified
Invalid destination
Invalid parameter(s)
Invalid message
Invalid length field
Transmit failed
Receive failed
Authorization failed
Memory allocation error
Command timed out
Unavailable
Buffer full
No such job
Program %u channel (client) number %u
Number of response handles: %d
Optimize for latency (Nagle algorithm disabled)
Optimize for throughput (Nagle algorithm enabled)
Sort into blocks of up to 16 messages
Initialize if not previously initialized
Response handles: all on channel %c
The program is already present
Filter field starts at byte %u
Filter field is %d byte%s long
Conforming messages are blocked
Conforming messages are passed
Receive dropped frame count: %u
Transmit dropped frame count: %u
Header length: %d byte%s, %d bits
Number of iterations: "infinite"
Transmit period: %u milliseconds
kip the last "Transmit period"
Pad messages with less than 8 data bytes with 0x00's
Pad messages with less than 8 data bytes with 0xFF's
Do not pad messages with less than 8 data bytes
Do not verify the integrity of long received messages and do not send them to the client
Verify the integrity of long received messages and send them to the client
Verify the integrity of long received messages but do not send them to the client
Using extended addressing for %d ID%s
Using extended addressing for the single, internally defined, ID
cho long transmit messages back to the client
end a USDT_DONE event when the last frame of a multi-frame USDT message is transmitted
end a USDT_FIRSTFRAME event when the first frame of a multi-frame USDT message is received
end a USDT_LASTFRAME event when the last frame of a multi-frame USDT message is received
Number of programs in this response: %u
Number of remaining programs: %u
Name & version extension: %.11s
Maximum data length = %d byte%s
Minimum data length = %d byte%s
Maximum extra data = %d byte%s
Minimum extra data = %d byte%s
Averaging period: %d.%03d seconds
Date/Time: %s %d, %d %02d:%02d:%02d.%05u
Don't wait for previous responses
Number of response blocks = %d
Whether the Gryphon dissector should desegment all messages spanning multiple TCP segments
Desegment all Gryphon messages spanning multiple TCP segments
Get number of dropped RX messages
Clear number of dropped RX messages
Get flight recorder channel info
Start flight recorder monitoring
Stop flight recorder monitoring
Describe program to to uploaded
Upload a program to the Gryphon
Get a list of uploaded programs
Get status of an uploaded program
Get a list of files & directories
Schedule transmission of messages
Stop and destroy a message transmission
Kill a message transmission (deprecated)
Register/Unregister with USDT server
Set IDs to use extended addressing
Read & clear latched digital inputs
Read digital inputs at power on time
Send response(s) for each conforming message
Send response(s) after the specified period expires following a conforming message
Send response(s) for a conforming message and ignore
further messages until the specified period expires
Deactivate this response for a conforming message
Delete this response for a conforming message
Deactivate this response after the specified period following a conforming message
Delete this response after the specified period following a conforming message
Greater than or equal to (signed)
Less than or equal to (signed)
Greater than or equal to (unsigned)
Less than or equal to (unsigned)
Digital, low to high transistion
Digital, high to low transistion
Historic peak bus load: %d.%02d%%
Filter off, block all messages
GGETRXCOUNT: Get the receive message counter
GSETRXCOUNT: Set the receive message counter
GGETTXCOUNT: Get the transmit message counter
GSETTXCOUNT: Set the transmit message counter
GGETRXDROP: Get the number of dropped receive messages
GSETRXDROP: Set the number of dropped receive messages
GGETTXDROP: Get the number of dropped transmit messages
GSETTXDROP: Set the number of dropped transmit messages
GGETRXBAD: Get the number of bad receive messages
GGETTXBAD: Get the number of bad transmit messages
GGETCOUNTS: Get total message counter
GGETBLMON: Get bus load monitoring status
GSETBLMON: Set bus load monitoring status (turn on/off)
GCANGETBTRS: Read CAN bit timing registers
GCANSETBTRS: Write CAN bit timing registers
GCANGETBC: Read CAN bus configuration register
GCANSETBC: Write CAN bus configuration register
GRESETHC08: Reset the HC08 processor
GTESTHC08COP: Stop updating the HC08 watchdog timer
GLINGETBITRATE: Get the current bit rate
GLINSETBITRATE: Set the bit rate
GINPGETINP: Read current digital inputs
GINPGETLATCH: Read latched digital inputs
GINPCLRLATCH: Read and clear latched digital inputs
GOUTSET: Write digital outputs
GOUTSETBIT: Set digital output bits
CAN, 82527 single wire subtype
CAN, Fiber Optic 82527 subtype
CAN, Fiber Optic 82527 single wire subtype
CAN, Fiber Optic ISO11992 subtype
CAN, SJA1000 Fault Tolerant subtype
CAN, SJA1000 Fiber Optic Fault Tolerant subtype
J1850, DE HC12 KWP/BDLC subtype
Keyword protocol 2000/ISO 9141
Chrysler C2D, UART / CDP68HC68S1 subtype
;*3$"
gryphon.so.debug
tX=2
.data
.rodata
.shstrtab
.dynamic
.note.gnu.build-id
.eh_frame
.gnu.hash
.fini
.gnu_debuglink
.dynsym
.gnu.version
.rela.dyn
.data.rel.ro
.gnu.version_r
.jcr
.eh_frame_hdr
.dynstr
.bss
.init
.rela.plt
.got.plt
.got
.text
.fini_array
.init_array
