/lib64/ld-linux-x86-64.so.2
>lRr
|fUa
libm.so.6
_ITM_deregisterTMCloneTable
__gmon_start__
_Jv_RegisterClasses
_ITM_registerTMCloneTable
atan2
ceil
floor
libc.so.6
fflush
strcpy
__rawmemchr
__printf_chk
exit
_IO_putc
fopen
strncmp
strrchr
__isoc99_sscanf
ftell
__stack_chk_fail
realloc
stdin
popen
strspn
__assert_fail
mkstemp
strtod
strtol
isatty
feof
fgets
strlen
ungetc
memset
strstr
__errno_location
memcmp
__fprintf_chk
stdout
fputc
fputs
memcpy
fclose
strtoul
malloc
remove
__ctype_b_loc
getenv
stderr
__snprintf_chk
fileno
pclose
fwrite
fread
__memcpy_chk
strchr
__vfprintf_chk
qsort
__strcpy_chk
__ctype_tolower_loc
__cxa_finalize
__sprintf_chk
memmove
_IO_getc
strcmp
strerror
__libc_start_main
random
snprintf
free
_edata
__bss_start
_end
GLIBC_2.2.5
GLIBC_2.3
GLIBC_2.7
GLIBC_2.14
GLIBC_2.4
GLIBC_2.3.4
AWAVA
[]A\A]A^A_
AUATH
D$(1
L$(dH3
8[]A\A]
fffff.
fffff.
fffff.
AUATI
[]A\A]
AUATUSH
[]A\A]
[]A\A]
SxBH
[]A\
AWAVI
AUATI
[]A\A]A^A_
<>t<H
fff.
ffffff.
ATUI
[]A\
ffffff.
t(E8
AWAVAUATI
t$ H
\$PL
|$(H
D$@H
D$80
D$<0
D$HH
D$XH
D$PH
L$8L
D9|$ ~uA
D$$D9
|$(H
|$PH9
[]A\A]A^A_
AWAVA
AUATI
L$ L
D$(L
D$4H
t$8dH
t$H1
D$01
\$(L
ET$0
L$49
t$HdH34%(
X[]A\A]A^A_
t$@H
D$@)
AUATA
[]A\A]
t'Hc
AWAVAUATI
D$ I
/L9p
 A9\$ 
[]A\A]A^A_
fffff.
ffff.
ffffff.
AWAVAUATUSH
[]A\A]A^A_
ffff.
N$9H
fffff.
D$81
T$8dH3
fffff.
ATUI
\$ H
D$(H
D$ H
D$0t
|$ H9
|$ H
D$(H)
[]A\
AUATI
 tdH
[]A\A]
AVAUI
ATUH
[]A\A]A^
AVAUI
ATUA
 tdH
dH3<%(
[]A\A]A^
AVAUA
ATUH
D$01
_AXxLH
|$(dH3<%(
0[]A\A]A^
ffff.
AWAVAUATI
T$(H
t$ H
\$ H
l$(A
@u%A
IcT$
D$0D
D$0u^A
IcT$
@t'L
D$0tXA
L;d$
H[]A\A]A^A_
tZD9
D$8D
T$0D
T$0L
D$8D
L$0L
GHSA
GHS1
P8E1
A;p4I
t#Hc
AWAVA
AUATE
[]A\A]A^A_
AWAVAUATA
D$81
L$XL
D$`L
D$(H
D$@H
D$ H
D$ H
T$(H
D$(H
L$8dH3
x[]A\A]A^A_
t$(H
t$(H
AWAVM
AUATA
<$Ic
[]A\A]A^A_
ffff.
AWAVAUATA
$A9u
4$E1
[]A\A]A^A_
AWAVA
AUAT
[]A\A]A^A_
AWAVAUATUSH
oHdH
D$X1
L$XdH3
h[]A\A]A^A_
LcD$
C;< 
t$ H
ouPA
AYAZ
D$(H
AQP1
\$ H
D$(H
D$ H
T$(H
|$ H9
|$ H
|$ H
D$(H)
dH34%(
fffff.
<$H9
dH34%(
ffff.
AVAUI
ATUI
[]A\A]A^
AVAUATUI
[]A\A]A^
59N"
ffffff.
OHHc
=(M"
ffff.
x"fD
@ fD
ffff.
tRD9
[]A\
tKUSH
G Hc
W,Hc
fff.
AVAUI
ATUA
SHco
[]A\A]A^
AVAUI
ATUI
[]A\A]A^
[]A\A]A^
;Q$}
W H;2t(H
R A9
t;USH
t(Hc
t[ATU1
A9\$
fffff.
}xAUATLc
Wh~H
}.D)
[]A\A]
fffff.
ATUI
[]A\
D$ f
D$"f
D$$f
D$(H
D$HH
T$@H
t$HH
[]A\
tkSH
t:H9
ffffff.
AUATH
(t[A
t1Mc
[]A\A]
fff.
ATUH
~LE1
;](}4J
;](H
AUATI
A9l$(~3I
D$ H
[]A\A]
[]A\A]
tDE1
AUATH
[]A\A]
ffffff.
}:Hc
;w(}
G Hc
AUATUSH
[]A\A]
]A\A]
t#;2u
ffffff.
O(AUD
W$ATUSM
}8D)
[]fD
W$A\A]
]A\A]
AWAVA
AUATI
t+E1
t$8M
T$(H
[]A\A]A^A_
[]A\A]A^A_
ffffff.
fffff.
t$(H
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
AUE1
T$(Ic
[]A\A]A^
]A\A]A^
AUATA
[]A\A]
ffffff.
AWAVAUATI
D$ H
f;L$
I;E0A
f;L$
T$!H
E8M+E(I)
[]A\A]A^A_
I9E0
ffffff.
ffffff.
ATUI
[]A\
AUATA
[]A\A]
fffff.
AWAVA
AUATUSL
[]A\A]A^A_
h Hc
ATUI
t$(fA
L$"H
[]A\
AWAVA
AUATI
t$@H
D$@H
S <,A
<;tD<!
D$8u
[]A\A]A^A_
T$@L
d$ H
l$(D
|$4A
D$(L
D$PH
T$HH
D$`H
D$hH
D$pH
D$0H
|$ I
T$ H
T$ E
d$ H
l$(D
|$4A
t$8L
d$ H
l$(D
|$4L
L$(L
AUATI
W <Gu4H
S <Iu*H
S <Fu H
[]A\A]
[]A\A]
|$@H
|$HH
D$XH
|$@H
D$ H
D$(H
D$0H
|$@A
D$H1
D$ H
D$(H
D$0H
T$HdH3
ffffff.
D$H1
D$ H
D$(H
D$0H
T$HdH3
AWAV
AUATI
dH3<%(
[]A\A]A^A_
E9:~0
AWAVAUATUSH
W(dH
D$(1
\$(dH3
8[]A\A]A^A_
T$ H
T$(E
D$$E1
K E9
AXAYtk
D$$H
{ fD
D$(A
A;D$(|
D$ J
p(E1
4(H9
D$(A
\$ M
A;+A
AWAVI
AUATI
D$H1
T$,D
D$4E
D$HdH3
X[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
t$D9
]A\A]A^A_
[]A\A]A^A_
fffff.
~HAUATI
[]A\A]
ffffff.
N(E1
~Wf.
D9V(
AWAVAUATI
}$~]E
E(E1
t#Hc
dH34%(
[]A\A]A^A_
C$D9
ffff.
fffff.
N$E)
G~@A
AVAUATLc%y
G UD
W$E)
[]A\A]A^A_
N$E)
fff.
AVAUATLc%
G UD
W$E)
[]A\A]A^A_
AVAULc-(
ATUS
R$A9
[]A\A]A^
AVAULc-x
ATUS
R$A9
[]A\A]A^
AUATUSH
Hc1J
Hc9H
[]A\A]
AWAVH
AUATA
D$ L
|$ I
8~,A
dH3<%(
[]A\A]A^A_
ATUI
[]A\
[]A\H
fffff.
AWAVI
AUATH
[]A\A]A^A_
[]A\A]A^A_
ffff.
AWAVI
AUATH
F~IO
[]A\A]A^A_
[]A\A]A^A_
fffff.
AWAVAUATUSH
o(dH
D;`(
[]A\A]A^A_
D$ 1
A9D$(
D$X1
T$XH
|$@H
t$4A
L$4A
D$PH
t$@H
T$XH
t$4A
D$pA
D$H;\$
}oLc
t$ J
D;t$
D$H9
t$ H
|$HD
L$pA
t$ D9
D;d$(
D$HE)
D;d$(A
D;d$(A
\$8H
\$PH
D$@H
4vD9
r$L9
D$4E
t$8D
F A9
\$HE
;T$4
HcL$4
D$ H
D$(Ic
D$ H
|$(1
D$ H
|$HH
D$(C
D$4Ic
D;L$4}6L
D$ J
D$(1
L$H)
}pIc
D$ D9
D$ D
D;l$
D9l$
D$ Ic
D$ 1
t$@H
T$8H
L$xE
\$@H
D$@H
;N(|
D$ 1
;u(}sH
D$ D
\$`H
T$ 1
HcD$(
t$PHc
t$41
l$xM
T$(H
T$8H
\$@H
D$pH
\$4D
l$8L
D$XH
L;d$Xu
\$pH
D$4;D$x
\$@L
H+{0H
T$8L
T$ L
H;D$(u
;U(|
D$@H
T$(H
H+x0H)
D$(H
\$@H
H+{0H)
I#F L9
T$hH
T$`H
A;@(
t$`H
t$8H
D$X1
D$hH
T$XH
|$@H
l$pE
d$4A
L$4A
D$PH
t$@H
T$XH
d$4A
D$xA
D$H;\$
}lLc
t$ K
D;t$
D$H9
|$ H
|$HD
L$xA
t$ D9
D;d$(
D$HE)
D;d$(A
D;d$(A
D$hH
\$8H
D$hH
\$PH
D$@H
D$4E
t$8D
F A9
\$HE
;T$4
HcL$4
D$ H
D$(Ic
D$ H
|$(1
D$ H
|$HH
D$(C
D$4Ic
D;L$4}8L
D$ J
D$(1
L$H)
}oIc
D$ D9
D$ D
D9l$
D9l$
D$ Ic
D$ 1
t$@H
T$8H
r$L9
\$@H
D$@H
t$8H
;N(|
;u(}oH
\$hH
T$ 1
t$XIc
t$4H
\$HL
l$xH
|$8H
|$@H
D$`L
fA;E
H;l$`u
t$@M
D$4;D$x
H+{0H
T$@L
l$(L
T$ L
H;D$ u
;U(|
D$HH
T$8H
H+x0H)
D$8H
\$HL
H+{0H)
D$PA
D$(H
T$(H
T$(H
T$pH
T$hH
t$hH
fff.
fff.
4PHc
AWAVA
AUATI
VUUUD
E;e ~
A\A]A^A_
AVAUH
ATUA
SHcW
[]A\A]A^
fff.
AWAVI
AUATUSH
|$@H
@80t
D$/H
D$0I
D$DA
D$HA
\$-H
+L$D+D$HA
+T$L
9\$ 
HcD$ H
T$`L
D$.H
T$tf
|$xf
*T$p
D$,H
D$hD
|$tf
T$`f
sefA
t$PD
D;D$
9\$ 
9\$(
X%I 
|$,@
\$P1
D$R+T$D+D$H
L$T+L$L
t*Lc
9L$@u*H
[]A\A]A^A_
fff.
AUATUS
[]A\A]
w.f=
fff.
yGIc
fffff.
ffffff.
AWAVH
AUATH
D$$1
t$(1
L$ f
t$"E1
D$ A
D$ H
|$(dH3<%(
8[]A\A]A^A_
fff.
tAHc
AWAVAUATUSH
d$`H
T$8H
|$ I
D$ f
\$ M
tsE1
t$Df
D$@H
t$(A
d$0H
|$(H
|$RH
t$Tf
D$PH
[]A\A]A^A_
D$,H
\$0H
|$,9
AWAVH
AUATA
XHcV$
D$H1
T$ f
D$4f
D$$~YA
t$ H
L$0H
D$0f
D$2)
D$4)
IA+|
IA+D
\$ f
t$0H
L$@A
\$HdH3
X[]A\A]A^A_
ATUH
7Hcv
E []A\
AWAVLc
AUATUSH
D$(1
HcG(
D$ H
L$$H
\$"1
D$$H
\$(dH3
8[]A\A]A^A_
HcG(
AWAVAUATI
D$H1
D$ D
D$8E
\$@E1
D$0Jc
D9|$8u
\$HdH3
X[]A\A]A^A_
HcT$8H
L$8E
L$01
Hc1H
|$0A
fff.
USHc
AWAVAUATUSH
[]A\A]A^A_
fffff.
AUATI
[]A\A]
ffff.
AUATUSH
VUUU
x5Hc
t~Hc
[]A\A]
AWAVM
AUATUSH
\$h1
D$'H
D$4I
t$0L
t$0L
l$@L
d$P1
H;l$
T$PH
D;t$ ~EH
;T$ 
D$hdH3
x[]A\A]A^A_
L$0H
USHc
dH3<%(
AWAVI
AUATI
D$(H
8t21
[]A\A]A^A_
AWAVAUATI
\$X1
t$HH
~:E1
D$0H
D$0f
l$<Hc
|$(H
l$HI
|$@I
T$TI
T$(H
D$PL
L$RIc|
L$T)
D$8L
|$<I
D$XdH3
h[]A\A]A^A_
AWAVH
AUATUSH
t$`H
|$XH
T$`H
t$XH
D$xA
|$`H
L$hL
L$8H
t$@M
t$P@
|$`1
|$@tV
t$@L
|$XH
D$XH
D$Xf
\$`H
D$XH
D$`H
[]A\A]A^A_
D$pH
L$ H
L$ E
L$ D
L$ tRH
l$"H
\$H1
\$TD
l$@f
D$8H
L$0L
\$(L
L$0L
\$(L
D$TH
t$`Hc
L$8H
t$@M
|$XL
\$XH
D$XH
D$XE1
|$Pt
;T$Pu
t$(E
t$"H
L$(A
t$ D
t$@f
T$ B
T$"A
D$8H
t$PL
T$TD
\$HH
T$TD
\$HH
L$ A
T$$H
t$(H
|$XH
D$XH
D$XH
D$X1
t$(M
L$"A
T$$I
A9](
D$XH
D$`H
|$8H
t$XH
ffffff.
AWAVAUATI
t$`H
[]A\A]A^A_
D$pH
t$@H
D$@1
l$`E
t$HH
t$ f
l$0H
d$8I9
t$dA
l$dA
fffff.
AVAUI
]A\A]A^
\u{H
[]A\A]A^
~^AVI
ATE1
[]A\A]A^
D$(1
?/t/H
D$(dH3
t$ H
AWAVAUATUSH
=$f!
[]A\A]A^A_
ffff.
AWAVAUATUSH
L$(H
|$(L
D90~}
l$ E)
8[]A\A]A^A_
AWAVAUATSH
AVPH
[A\A]A^A_]
t$(H
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
AWAVAUATE1
\$0dH
|$0#
L$(H
T$$L
D$,H
D$ H
|$4E
D$ 1
[]A\A]A^A_
StyH
[]A\
[]A\
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
5#V!
ffff.
fff.
[]A\
5uT!
AWAVAUATA
vCE9
([]A\A]A^A_
[]A\A]A^A_H
ATUH
[]A\
[]A\
AVAUI
ATUA
]A\A]A^
=aN!
AVAUATUI
>#t+
 []A\A]A^
=(L!
-[O!
ATUI
>_t[H
?xt\1
[]A\
_t2H
AUATI
?,t>1
[]A\A]
AUATI
<xt_
[]A\A]
AVAUI
ATUA
<,tG<x
[]A\A]A^
<-t{<+u
5OJ!
AWAVAUATI
[]A\A]A^A_
VUUU
fffff.
AWAVAUATI
=:G!
54G!
-.G!
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
AUATUSH
5}?!
[]A\A]
D$ H
fff.
fffff.
AUATI
5lD!
[]A\A]
fff.
AWAVI
AUATI
L$ D
l$<E
T$(I
>L;oHu
L;iHu
H4fA
H#B H
L$ L
HcQ 
@ H;
D$$A9
D$$D9
d$8M
T$&E1
fA;G
fA;W
H;PH
@uFM
G Hc
-^5!
T$ H
T$ H
T$ I
D$(L
d$8M
E9t$$
IcG(H
D$0H
L$(H
D$0H
L$(I
CTfA
SPfA)V
STfA)V 
fA;W
fA;G
fA;W
%B0!
D$ H
[]A\A]A^A_
D$(A
|$\L
t$`E
\$(9\$X
!L;PHu
|$X9
|$X9
L$hL
T$HD
L$hH
T$HL
\$pA9
D$8}pE9
D$@Ic
D$Hf
|$HH
D$@D;l$(
D;l$@
|$8H
uDH9
D$0D9
9D$4
L$8D
L$@)
t$hH
|$h9|$H}>
D$0;D$4}
D$49
T$hH
T$8Hc
D$xD
T$8L
T$8L
|$h9|$HD
D9T$
D9T$p|
L$@D
T$4L
T$8D
L$HL
T$@D
L$HL
T$@D
D$8E9
D$4D9
D$(D9
9L$(M
t$`E
\$(E
L$(H
L$(H
L#A L
D$0H
L$(H
L$(H
D$0H
L$ L
L$ HcQ 
IB fA
IJ E
IB$fA
AUATI
u![]A\A]A^
]A\A]A^
ffff.
ffffff.
ATUA
tfHc
[]A\
fff.
ATUSH
D$(H
D$ H
[]A\
AUATUSH
[]A\A]
AUATUSH
[]A\A]
[]A\A]
T$"A
T$ A
[]A\A]
AWAVAUATI
D$>H
D$LH
D$`H
D$(H
D$pH
D$0fA
d$>H
T$L9
|$8H
|$(1
D$pfA
t>fA
|$(L
|$01
T$`B
;l$hA
|$PL
l$0H
T$`K
T$RA
t$QH
;D$h
|$0L
[]A\A]A^A_
|$0L
(A9}
|$0L
AVAUATI
YD$8
\D$0
XD$0
D9|$(
t$,A
\$H9
L;t$@
t$(H
]A\A]A^A_
fffff.
k tfH
AWAVH
AUATI
A9m4A
Nm4A9A
d$,H
L$ H
d$,E
$E9Z
upPL
[]A\A]A^A_
ffffff.
[]A\
AUATI
t L9g
[]A\A]
tvAUATI
D$(1
~2f.
D$ H
A9\$(
[]A\A]
[]A\
[]A\
AWAVAUATUSH
D$ XXXXdH
D$(1
/tmp/gifL
sicle.XXH
D$(dH3
8[]A\A]A^A_
ffffff.
AVAUATUE1
R$A)
F$D)
}8E)
W |J
[]A\D)
W$[]A\A]A^
fffff.
ATUH
D$81
LcL$$H
~7HcT$
LcD$
D$ f
D$$f
f+UPf
f+UTH
t$8dH34%(
@[]A\
AWAVAUATI
T$HH
+B$A+D$TA
D$TH
[]A\A]A^A_
L;,$u
T$HH
+B A+D$PA
AWAVH
AUATI
tYIc
+Q A
vTA+VPA
m"fA
[]A\A]A^A_1
+Q$A
vPA+VTA
AWAVI
AUATUS
T$DdH
D$PH
[]A\A]A^A_
t$Pf
t$DH
|$HA
t$0D
D$(L
T$ H
G"fD
t$0)
|$H1
t$HH
|$H1
M(Hc
D$`H
L$hf
;\$x
|$XH
\$Xf
.L$p
\$|D
t$`D
D$0D
L$8f
 D9t$0
9\$x
D$XD
D$Xf
D$Pf
t$HH
t$HH
t$HH
|$XD
|$ H
|$(H
D$0H
D$HH
D9d$
|$(H
t$ H
D$0L
L$ A
ZYA9
|$XH
t$HH
EL$D
T$PD
t$Pf
fffff.
AUATUSH
D$81
D$8dH3
H[]A\A]
l$ H
T$(;
fff.
ATUA
[]A\
ffff.
AVAUI
ATUA
[]A\A]A^
AUATI
[]A\A]
AUATA
L; u
L;#t+H
L;%@
[]A\A]
[]A\A]
[]A\A]
AWAVAUATUSH
[]A\A]A^A_
}<au
L;.u
R(A9
fffff.
AWAVI
AUATUSH
>-tS
[]A\A]A^A_
D$ H
~-E1
[]A\A]A^A_
[]A\A]A^A_H
[]A\A]A^A_1
ATU1
[]A\
[]A\
9E@v
[]A\
[]A\
fff.
T$hL
T$pHc
D$hL
]A\A]A^
ffff.
~`AUATE1
E9l$
[]A\A]
AUATI
[]A\A]
fffff.
fffff.
AVAUA
ATUSH
ShD9
ShA9
[]A\A]A^
AUATI
[]A\A]1
t$ I
AWAVA
AUATI
t$ldH
L$X@
D$hL
T$p1
L$"E1
D$VE1
D$Tf
8D9\$
9t$$
|$Tf9|$
t'A8O
E"fE
|$"H
D$"f=
t$0A
|$0)
L$OD
L$HD
\$DL
T$@L
T$@L
T$8D
\$DD
L$OI
T$"H
T$09
D$41
\$4H
D$Vf
8D9\$
\$HD
L$DL
L;T$`H
L$DD
D$@H
L$8D
L$DD
|$41
BD$P
D$PA
t$0A
t$$1
D$"1
t$$f
D$$H
D$TE
D$@I
D$XL
L;T$`t
dH3<%(
[]A\A]A^A_
D$4L
D$41
AVAUI
ATUH
D$8H
D$@H
D$HH
D$PH
D$XH
D$`H
D$hH
\$ H
D$pL
[]A\A]A^
T$8H
\$ H
AWAVAUATUSH
T$PH
D$hH
D$pH
D$xH
D$0H
D$ L
|$0H
E9g$t
T$ A
D;`(
[]A\A]A^A_
L$,H
T$ H
AWAVA
AUATL
[]A\A]A^A_
(null)
\%03o
(no current option!)
out of memory
clp.c
min_match > 0
n_option_chars < 5
, and 
(Possibilities are
, and others
true
false
invalid
option %<%V%> is %s
any integer
value == lvalue
LANG
UTF-8
UTF8
utf8
len > 0
cli->could_be_short
option %<%s%s%> is ambiguous
unrecognized option %<%s%C%>
unrecognized option %<%s%s%>
%<%O%> requires an argument
next_argument
set_option_text
switch_to_short_argument
find_long
Clp_AddStringListType
argcmp
%<%O%> expects a real number, not %<%s%>
%<%O%> expects a true-or-false value, not %<%s%>
%<%O%> expects a nonnegative integer, not %<%s%>
%<%O%> expects an integer, not %<%s%>
CLP internal error: more than 1 option has short name %<%c%>
CLP internal error: 1-char long name conflicts with short name %<%c%>
CLP internal error: duplicate long name %<%s%>
CLP internal error: option %d has negative option_id
CLP internal error: option %d begins with "no-no-"
%<%O%> can%,t take an argument
%<%O%> requires a non-option argument
%s: Out of memory, giving up
%s: Out of memory, giving up (huge allocation)
giffunc.c
gifread.c
(not reporting more errors)
bad graphic extension
NETSCAPE2.0
ANIMEXTS1.0
bad loop extension
image corrupted, min_code_size too big
image corrupted, min_code_size too small
image corrupted, code out of range
missing %ld pixels of image data
%ld superfluous pixels of image data
image has zero width and/or height
image position and/or dimensions out of range
unknown block type %d at file offset %d
trailing garbage after GIF ignored
gifunopt.c
merge.c
dest->global
destcm->ncol <= 256
mapto >= 0 && mapto < ndestcol
((&destcol[mapto])->gfc_red==(&srccol[i])->gfc_red && (&destcol[mapto])->gfc_green==(&srccol[i])->gfc_green && (&destcol[mapto])->gfc_blue==(&srccol[i])->gfc_blue)
too many colors, using local colormaps
  (You may want to try %<--colors 256%>.)
too many colors, using local colormaps
some colors undefined by colormap
c->haspixel == 2 && found_transparent < 256
merge_image
merge_stream
merge_colormap_if_possible
optimize.c
opttemplate.c
bounds->top < screen_height && bounds->left < screen_width && bounds->top + bounds->height <= screen_height && bounds->left + bounds->width <= screen_width
%d colors required in a frame (256 is max)
0 && "optimized frame has strange disposal"
create_new_image_data16
create_new_image_data32
fix_difference_bounds
quantize.c
planpos == nplan
<%d,%d,%d>
!kd3->tree
kd3->maxdepth < 32
stackpos < 32
*new_ncol < new_cm->capacity
*new_ncol == 256
kcolor.h
none
posterize
default
floyd-steinberg
o8x8
ro64
ro64x64
ordered
diag45
diagonal
trihalftone
trihalf
sqhalftone
sqhalf
squarehalftone
o4x4
o3x3
adaptive palette size must be between 2 and 256
trivial adaptive palette (only %d colors in source)
(unsigned) i < (unsigned) kd3->nitems
kd3->disabled < 0 || kd3->disabled == i
kd3_disable
try_assign_transparency
plan_from_cplan
kd3_closest_transformed
kd3_build
 08(
$4<,
&6>.
#3;+
'7?/
1!^"~#
)p*S+0,
.t/;0
1x203
\!]v]
c!dnd
d	eUe
h!iji
k4lzl
n+ooo
o8p{p
u	vHv
w@w~w
w6xsx
x)yfy
z	{D{
{/|j|
}9~r~
2t3 4
4}5-6
9k:%;
?^@#A
BxCBD
FwGHH
KqLJM$N
Q~RaSET+U
]s^i_``XaRbMcJdHeHfIgLhPiVj]kelpm{n
w&x@y\zz{
\000
support.c
f1 >= 0 && f2 < fset->count
 %3d: #%02X%02X%02X
%s:%s%s fatal error: 
%s:%s%s warning: 
%s:%s%s 
%.*s%.*s
%g %g %g
0123456789abcdefABCDEF
%1x%1x%1x
%2x%2x%2x
file not in colormap format
%s color out of range
%s color not in colormap
<stdin>
* %s %d image%s
  logical screen %dx%d
  global color table [%d]
  background %d
  end comment 
  loop forever
  loop count %u
  extension %d: 
app '
'%c' (0x%02X)
0x%02X
 at end
 before #%d
 packetized
    %08x: 
%02x   
%02x%02x 
     
  extensions %d
  + image #%d 
#%s 
%dx%d
 at %d,%d
 interlaced
 transparent %d
    compressed size %u
    comment 
    local color table [%d]
    |
 disposal %s
 delay %d.%02ds
%s.%s
%s.%03d
%s.%0*d
no frame named %<#%s%>
0123456789ABCDEFabcdef
invalid color %<%s%>
file not in GIF format
empty output GIF not written
dest->nimages > 0
srci->refcount > 1
irrelevant background color
asis
previous
gifsicle
maximum 256 colors allowed in colormap
Usage: %s [OPTION | FILE | FRAME]...
Try '%s --help' for more information.
'Gifsicle' manipulates GIF images. Its most common uses include combining
single images into animations, adding transparency, optimizing animations for
space, and printing information about GIFs.
Usage: %s [OPTION | FILE | FRAME]...
Mode options: at most one, before any filenames.
  -m, --merge                   Merge mode: combine inputs, write stdout.
  -b, --batch                   Batch mode: modify inputs, write back to
                                same filenames.
  -e, --explode                 Explode mode: write N files for each input,
                                one per frame, to 'input.frame-number'.
  -E, --explode-by-name         Explode mode, but write 'input.name'.
General options: Also --no-OPTION for info and verbose.
  -I, --info                    Print info about input GIFs. Two -I's means
                                normal output is not suppressed.
      --color-info, --cinfo     --info plus colormap details.
      --extension-info, --xinfo --info plus extension details.
      --size-info, --sinfo      --info plus compression information.
  -V, --verbose                 Prints progress information.
  -h, --help                    Print this message and exit.
      --version                 Print version number and exit.
  -o, --output FILE             Write output to FILE.
  -w, --no-warnings             Don't report warnings.
      --conserve-memory         Conserve memory at the expense of speed.
      --multifile               Support concatenated GIF files.
Frame selections:               #num, #num1-num2, #num1-, #name
Frame change options:
  --delete FRAMES               Delete FRAMES from input.
  --insert-before FRAME GIFS    Insert GIFS before FRAMES in input.
  --append GIFS                 Append GIFS to input.
  --replace FRAMES GIFS         Replace FRAMES with GIFS in input.
  --done                        Done with frame changes.
Image options: Also --no-OPTION and --same-OPTION.
  -B, --background COL          Make COL the background color.
      --crop X,Y+WxH, --crop X,Y-X2,Y2
                                Crop the image.
      --crop-transparency       Crop transparent borders off the image.
      --flip-horizontal, --flip-vertical
                                Flip the image.
  -i, --interlace               Turn on interlacing.
  -S, --logical-screen WxH      Set logical screen to WxH.
  -p, --position X,Y            Set frame position to (X,Y).
      --rotate-90, --rotate-180, --rotate-270, --no-rotate
                                Rotate the image.
  -t, --transparent COL         Make COL transparent.
Extension options:
      --app-extension N D       Add an app extension named N with data D.
  -c, --comment TEXT            Add a comment before the next frame.
      --extension N D           Add an extension number N with data D.
  -n, --name TEXT               Set next frame's name.
      --no-comments, --no-names, --no-extensions
                                Remove comments (names, extensions) from input.
Animation options: Also --no-OPTION and --same-OPTION.
  -d, --delay TIME              Set frame delay to TIME (in 1/100sec).
  -D, --disposal METHOD         Set frame disposal to METHOD.
  -l, --loopcount[=N]           Set loop extension to N (default forever).
  -O, --optimize[=LEVEL]        Optimize output GIFs.
  -U, --unoptimize              Unoptimize input GIFs.
Whole-GIF options: Also --no-OPTION.
      --careful                 Write larger GIFs that avoid bugs in other
                                programs.
      --change-color COL1 COL2  Change COL1 to COL2 throughout.
  -k, --colors N                Reduce the number of colors to N.
      --color-method METHOD     Set method for choosing reduced colors.
  -f, --dither                  Dither image after changing colormap.
      --gamma G                 Set gamma for color reduction [2.2].
      --resize WxH              Resize the output GIF to WxH.
      --resize-width W          Resize to width W and proportional height.
      --resize-height H         Resize to height H and proportional width.
      --resize-fit WxH          Resize if necessary to fit within WxH.
      --scale XFACTOR[xYFACTOR] Scale the output GIF by XFACTORxYFACTOR.
      --resize-method METHOD    Set resizing method.
      --resize-colors N         Resize can add new colors up to N.
      --transform-colormap CMD  Transform each output colormap by shell CMD.
      --use-colormap CMAP       Set output GIF's colormap to CMAP, which can
                                be 'web', 'gray', 'bw', or a GIF file.
Report bugs to <ekohler@gmail.com>.
Too much information? Try '%s --help | more'.
frame specifications must start with #
frame %<#%s%> out of range, image has %d frames
invalid dimensions %<%s%> (want WxH)
invalid position %<%s%> (want 'X,Y')
invalid scale factor %<%s%> (want XxY)
invalid rectangle %<%s%> (want X1,Y1-X2,Y2 or X1,Y1+WxH
invalid color %<%s%> (want #RGB or #RRGGBB)
%<%O%> takes two color arguments
can%,t use as palette (no global color table)
there were errors reading this GIF
huge GIF, conserving memory (processing may take a while)
cropping dimensions don%,t fit image
irrelevant background color
  (The background will appear transparent because  the first image contains transparency.)
input images have conflicting background colors
  (This means some animation frames may appear incorrect.)
input images have conflicting background colors
fix_total_crop
merger_flatten
merge_frame_interval
xform.c
!kcs->data && !kcs->scratch
can%,t create temporary file!
%s  >%s
%d %d %d
<color transformation>
gfs->nimages > 0
(unsigned) gfi->left + gfi->width <= kcs->width
(unsigned) gfi->top + gfi->height <= kcs->height
w->ipos >= yi0 && w->ipos < yi1
can%,t run color transformation command: %s
color transformation error: %s
color transformation command failed
too few colors in color transformation results
too many colors in color transformation results
color transformation command generated no output
rotation == 1 || rotation == 3
gfs->images[0]->transparent >= 0 || (int) gfs->background < gfs->global->ncol
new image is too large (max size 65535x65535)
scale_image_data_weighted
kcscreen_dispose
kcscreen_apply
kcscreen_init
kd3_disable
resize_stream
rotate_image
(@-C
UUUUUU
UUUUUU%@
@%<--info%> suppresses normal output, can%,t use with an
  output mode like %<--merge%> or %<--batch%>.
  (Try %<-II%>, which doesn%,t suppress normal output.)
bad extension type: must be a number between 0 and 255
(plus more errors; is this GIF corrupt?)
fatal error: too many missing pixels, giving up
redundant %s option
  (The %s option was overridden by another %s option
  before it had any effect.)
useless %s-related %s option
  (It didn%,t affect any %s.)
frame selection and frame changes don%,t mix
%s: %<--multifile%> is useful only in merge mode
GIF too complex to unoptimize
  (The reason was local color tables or complex transparency.
  Try running the GIF through %<gifsicle --colors=255%> first.)
disposal must be between 0 and 7
COLOR2 must be in RGB format in %<--change-color COLOR1 COLOR2%>
argument to %O must be between 2 and 256
%O should be a number or %<srgb%>
one of W and H must be positive in %<%s WxH%>
%s X and Y factors must be positive
Copyright (C) 1997-2014 Eddie Kohler
This is free software; see the source for copying conditions.
There is NO warranty, not even for merchantability or fitness for a
particular purpose.
too late to change modes
#stdout#
<stdout>
gifsicle.c
!nested_mode
can't happen
is a terminal
%O requires two arguments
gray
grey
<unknown>
read error: 
%s:#%d
%s%s
%s%s (%d times)
missing %lu pixels
redundant %s option
useless %s-related %s option
#stdin#
%s~%d
empty file
no more images in file
trailing garbage ignored
GIF too complex to unoptimize
forever
infinite
blend-diversity
median-cut
no-keep-empty
no-drop-empty
sample
point
good
fast
mitchell
lanczos3
lanczos2
lanczos
catrom
%<%s%> is not a valid dither
sRGB
srgb
%s argument must be positive
%s can be at most 256
1.87
LCDF Gifsicle %s
frame
input
output
append
app-extension
no-app-extensions
batch
careful
change-color
cinfo
color-method
color-info
comment
no-comments
conserve-memory
crop-transparency
delete
done
explode
explode-by-name
no-extension
no-extensions
extension-info
flip-horizontal
flip-vertical
no-flip
gamma
help
insert-before
merge
multifile
nextfile
no-names
replace
resize
resize-width
resize-height
resiz
resi
resize-fit
resize-fit-width
resize-fit-height
resize-fi
resize-f
resize-method
resize-colors
rotate-90
rotate-180
rotate-270
no-rotate
same-app-extensions
same-background
same-bg
same-clip
same-comments
same-crop
same-extensions
same-interlace
same-logical-screen
same-loopcount
same-disposal
same-delay
same-names
same-position
same-screen
same-transparent
scale
scale-method
scale-colors
sinfo
size-info
transform-colormap
use-colormap
verbose
version
warnings
xinfo
logical screen
output file
colormap size
colormap method
color transformation
memory conservation
resize method
resize colors
unoptimization
color change
rotation
merge_and_write_frames
set_frame_change
@gifwrite.c
suffix < gfc->clear_code
GIF89a
NETSCAPE2.0
GIF87a
!node || (node >= gfc->nodes && node < gfc->nodes + 0x1000)
gfc_lookup
;*3$"
gifsicle.debug
7zXZ
"&uq
?-O{[QH
>Ny'
<`u=
Tj>Y
R0I6
k25J
WdYc
A<Cc|
'y_4
ac88
BvK-
j*)s
?QA"W}
@6ooT
t0b}
8YqQc
BAO$G]
6G y
JfFS
nSycZc
{M7Q
>g>6CB
E0Z	
os2mO
YJ`gh
rI[f
:C._
<ylz
"qM(L
dfz*
Orr;
o]YW
C7yb./s
?r)F
pA'o
*tv=
MsQ?
 |8Ho
2O%_)
q+Hwu&q
VdQ=hf
8n$;
B^Hz?\
)Xw%;
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.data
.bss
.gnu_debuglink
.gnu_debugdata
