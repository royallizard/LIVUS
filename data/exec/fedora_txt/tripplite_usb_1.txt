/lib/ld-linux.so.2
libusb-0.1.so.4
_ITM_deregisterTMCloneTable
__gmon_start__
_Jv_RegisterClasses
_ITM_registerTMCloneTable
usb_find_devices
_fini
usb_busses
usb_find_busses
usb_open
usb_claim_interface
usb_strerror
usb_control_msg
usb_clear_halt
usb_close
usb_interrupt_read
usb_detach_kernel_driver_np
usb_init
usb_set_altinterface
usb_get_string_simple
libm.so.6
sqrt
libpthread.so.0
write
__errno_location
fcntl
accept
sigaction
libc.so.6
_IO_stdin_used
setuid
chroot
socket
fflush
__printf_chk
fopen
optind
strrchr
regexec
__strdup
perror
getpwuid
__fdelt_chk
initgroups
signal
strncpy
puts
fork
regfree
unlink
putchar
listen
select
realloc
_exit
getpid
kill
chmod
__assert_fail
strtod
strtol
fgetc
fgets
getpwnam
calloc
strlen
setlogmask
sigemptyset
openlog
memset
strstr
bind
chdir
__syslog_chk
getopt
__fprintf_chk
stdout
fclose
__vsnprintf_chk
malloc
umask
strcasecmp
__strncpy_chk
__xstat64
__ctype_b_loc
getenv
regcomp
optarg
stderr
__snprintf_chk
seteuid
getuid
strncasecmp
usleep
gettimeofday
geteuid
difftime
strchr
__cxa_finalize
setsid
__sprintf_chk
memmove
setgid
strcmp
__libc_start_main
snprintf
__cxa_atexit
__stack_chk_fail
_edata
__bss_start
_end
GLIBC_2.0
GLIBC_2.3
GLIBC_2.2
GLIBC_2.1.3
GLIBC_2.15
GLIBC_2.4
GLIBC_2.1
GLIBC_2.3.4
L$<1
L$<e3
d$@[^_
D$0)
;t$4u
l$<)
;t$4
|$0+|$4
d$L[^
D$L1
D$D:
l$(1
8D$Eu
L$Le3
d$\[^_]
|$8	
D$L1
D$,)
|$Le3=
d$\[^_]
D$,)
UWVS
D$(e
[^_]
D$2J__
D$,1
T$,e3
d$0[^_
UWVS
d$,[^_]
D$ =
t$0t2
d$$[^
L$ff
D$cf
D$YF
D$[P
D$Wf
D$]S
D$_U
D$aV
t$gf
T$,u
[^_]
d$0[^_
d$0[^_
UWVS
|$8e
[^_]
UWVS
D$|1
D$:B
D$<D
D$>L
D$@S
D$BM
D$DT
D$c<1
D$|e3
[^_]
<0ud
<1tZ
D$,1
D$,e3
d$4[^
D$Xe
[^_]
T$Lt	
L$<tc
d$$[^
t$,t;
t$<tK
d$$[^
d$$1
UWVS
d$<[^_]
d$<1
[^_]
[^_]
UWVS
L$<1
;t$ u
9l$8
L$<e3
d$L[^_]
[^_]
UWVS
l$`e
D$<1
L$,t
T$<e3
d$L[^_]
UWVS
[^_]
UWVS
[^_]
UWVS
d$,[^_]
[^_]
d$,[^_]
d$,[
[^_]
[^_]
[^_]
[^_]
[^_]
d$ [^_
|$ u
|$ u
UWVS
l$0u	
[^_]
[^_]
UWVS
D$,e
[^_]
UWVS
9L$,t)
[^_]
[^_]
[^_]
UWVS
T$>f
[^_]
L$X9
\$T9
\$4t
D$0;D$<
[^_]
D$0;D$<
D$Pn
UWVS
d$,[^_]
d$,[^_]
t(9p
d$$[^
d$$[^
d$ [^_
d$ [^_
UWVS
d$,[^_]
d$,[^_]
d$$[^
d$$[^
t$ t
UWVS
d$<[^_]
d$<[^_]
9D$,
8/tQ
t$(V
UWVS
l$0W
T$,)
t$4j
[^_]
|$(W
[^_]
UWVS
t$(V
[^_]
UWVS
[^_]
t$(V
UWVS
Pjdj
t$4V
D$|e3
[^_]
UWVS
[^_]
t$(V
RRPj
QQPj
VVPj
RRPj
QQPj
QVPj
RVPj
t	[^_
UWVS
[^_]
UWVS
[^_]
D$(X
D$ P
[^_]
D$(X
D$ P
[^_]
UWVS
XZWU
WRQP
[^_]
UWVS
[^_]
[^_]
UWVS
t$0W
t$(PUW
[^_]
[^_]
UWVS
[^_]
UWVS
[^_]
[^_]
UWVS
[^_]
UWVS
l$,9
tL;:t
t9;8t
[^_]
[^_]
UWVS
t$<V
9l$8t<
9l$8u
[^_]
UWVS
[^_]
[^_]
UWVS
t$(V
ZYWV
t$ j
[^_]
@0Inva
@4lid 
@8ctx 
@<bufff
UWVS
[^_]
[^_]
[^_]
UWVS
[^_]
[^_]
UWVS
[^_]
[^_]
[^_]
[^_]
[^_]
F0Unba
F4lanc
F8ed w
F<ord 
F@due 
FDto u
FHnesc
FLaped
FP # i
FTn qu
FXotes
9F t
9G t
UWVS
[^_]
t$<j
|$01
>\;D$
UWVS
t$,U
[^_]
%02x 
send_cmd: sending  %s
send_cmd send_try %d
send_cmd recv_try %d
send_cmd: received %s (%s)
N%02X
K%d%d
K%c%c
ups.delay.shutdown
ups.id
outlet.
outlet.%d.switch = %s
outlet.%d.switch = %s -> %d
outlet.%d.switch
soft_shutdown(offdelay=%d): N
Could not set offdelay to %d
reset.input.minmax
load.off
load.on
shutdown.return
instcmd: unknown command [%s]
test.battery.start
Using OMNIVS protocol (%x)
Using SMARTPRO protocol (%x)
Unknown protocol (%04x)
Switchable load banks: %d
Error reading protocol
ups.debug.0
protocol %04x
ups.firmware.aux
Tripp Lite
ups.mfr
ups.debug.P
ups.model
ups.power.nominal
ups.firmware
outlet.%d.id
outlet.%d.desc
Load %d
outlet.%d.switchable
Unit ID: %d
input.voltage.nominal
battery.voltage.nominal
ups.debug.load_banks
Attached to %s %s
Terminating: EBUSY
Reconnect attempt #%d
Successfully reconnected
ups.debug.%c
Error reading '%c' value
Error reading S value
ups.debug.S
BYPASS
Battery OK
battery.test.status
Battery bad - replace
OVER
Overcurrent?
Battery fail - overcurrent?
Error reading B value
%.2f
input.voltage
battery.voltage
Error reading D value
ups.debug.M
input.voltage.minimum
input.voltage.maximum
ups.debug.T
Error reading T value
%.1f
input.frequency
input.frequency.nominal
ups.temperature
battery.charge
Error reading L value
output.voltage
ups.load
ups.debug.L
offdelay
battery_min
battery_max
unknown
vendor
product
USBNewRegexMatcher
No matching USB/HID UPS found
Detected a UPS: %s/%s
ups.vendorid
ups.productid
USBNewExactMatcher
Setting 'offdelay' to %d
Setting 'battery_min' to %.g
Setting 'battery_max' to %.g
0.29
send_cmd(msg_len=%u, type='%c')
send_cmd(): Trying to pass too many characters to UPS (%u)
libusb_set_report() returned %d instead of %u
libusb_get_interrupt() returned %d instead of %u while sending %s
send_cmd: send_try = %d, recv_try = %d
Could not set outlet %d to state %d, ret = %d
control_outlet unimplemented for protocol %04x
Could not set Unit ID (return code: %d).
Could not turn off UPS (is it still on battery?)
Using older SMART protocol (%04x)
Using OMNIVS 2001 protocol (%x)
Using binary SMART protocol (%x)
Unknown input voltage range: 0x%02x
Unknown number of switchable load banks: 0x%02x
Could not reset watchdog. Please check andsee if usbhid-ups(8) works with this UPS.
Could not reset watchdog. Please send model information to nut-upsdev mailing list
Could not retrieve status ... is this an OMNIVS model?
Unit ID not retrieved (not available on all models)
%s: Device claimed by another process
%s: Device detached? (error %d: %s)
==================================================
= device has been disconnected, try to reconnect =
Reconnecting to UPS failed; will retry later...
Too many unsuccessful reconnection attempts
Unknown value for s[2]: 0x%02x
Unknown value for s[1]: 0x%02x
Error reading M (min/max input voltage)
Set shutdown delay, in seconds (default=%d)
Minimum battery voltage, corresponding to 10%% charge (default=%.1f)
Maximum battery voltage, corresponding to 100%% charge (default=%.1f)
invalid regular expression: %s
Tripp Lite OMNIVS / SMARTPRO driver
Charles Lepple <clepple+nut@gmail.com>
Russell Kroll <rkroll@exploits.org>
Rickard E. (Rik) Faith <faith@alephnull.com>
Nicholas J. Kain <nicholas@kain.us>
*@- VendorID: %04x
- ProductID: %04x
- Manufacturer: %s
- Product: %s
- Serial Number: %s
- Bus: %s
Trying to match device
Device matches
matcher
matcher: unspecified error
usb_set_altinterface
HID descriptor, method 1
HID descriptor, method 2
HID descriptor length %d
Found HID device
%s: Connection timed out
Entering libusb_get_report
0.32
USB communication driver
No appropriate HID device found
Checking device (%04X/%04X) (%s/%s)
Failed to open device, skipping. (%s)
Device does not match - skipping
failed to claim USB device: %s
failed to detach kernel driver from USB device: %s
detached kernel driver from USB device...
Can't claim USB device [%04x:%04x]: %s
%s: '%s' is not a valid number
%s: setting bAlternateInterface to %d will probably not work
%s: calling usb_set_altinterface(udev, %d)
%s: usb_set_altinterface(udev, %d) returned %d (%s)
%s: usb_set_altinterface() should not be necessary - please email the nut-upsdev list with information about your UPS.
%s: skipped usb_set_altinterface(udev, 0)
  Couldn't retrieve descriptors
Unable to get HID descriptor (%s)
HID descriptor too short (expected %d, got %d)
i=%d, extra[i]=%02x, extra[i+1]=%02x
Unable to retrieve any HID descriptor
Warning: two different HID descriptors retrieved (Reportlen = %d vs. %d)
HID descriptor too long %d (max %d)
Unable to get Report descriptor
Warning: report descriptor too short (expected %d, got %d)
Caller doesn't like this device
Report descriptor retrieved (Reportlen = %d)
Regular expression to match UPS Manufacturer string
Regular expression to match UPS Product string
Regular expression to match UPS Serial number
Regular expression to match UPS Manufacturer numerical ID (4 digits hexadecimal)
Regular expression to match UPS Product numerical ID (4 digits hexadecimal)
Regular expression to match USB bus name
Force redundant call to usb_set_altinterface() (value=bAlternateSetting; default=0)
nut_usb_set_altinterface
libusb_get_report
libusb_set_report
libusb_get_string
libusb_get_interrupt
driver.parameter.%s
driver.flag.%s
enabled
driver.flag.nolock
driver.flag.ignorelb
driver.parameter.port
sddelay
sdorder
variable name
flag
override.
default.
chroot
user
VALUE
FLAG
UNKNOWN
usage: %s -a <id> [OPTIONS]
%40s : -x %s=<value>
%40s : -x %s
+a:kDhx:Lqr:u:Vi:
debug level is '%d'
Can't chdir to %s
%s/%s-%s.pid
Initiating UPS shutdown
device.type
driver.version
driver.version.internal
driver.name
battery.charge.low
battery.runtime
driver.parameter.pollinterval
driver.parameter.synchronous
device.mfr
device.model
ups.serial
device.serial
Signal %d: exiting
battery.runtime.low
Obsolete value sddelay found in ups.conf
Fatal error: '%s' is not a valid %s for this driver.
Look in the man page or call this driver with -h for a list of
valid variable names and flags.
Network UPS Tools - %s %s (%s)
Error: UPS [%s] is for driver %s, but I'm %s!
Warning: This is an experimental driver.
Some features may not function correctly.
Error: Section %s not found in ups.conf
  -a <id>        - autoconfig using ups.conf section <id>
                 - note: -x after -a overrides ups.conf settings
  -V             - print version, then exit
  -L             - print parseable list of driver variables
  -D             - raise debugging level
  -q             - raise log level threshold
  -h             - display this help
  -k             - force shutdown
  -i <int>       - poll interval
  -r <dir>       - chroot to <dir>
  -u <user>      - switch to <user> (if started as root)
  -x <var>=<val> - set driver variable <var> to <val>
                 - example: -x cable=940-0095B
Acceptable values for -x or ups.conf in this driver:
Error: unknown option -%c. Try -h for help.
Error: too many non-option arguments. Try -h for help.
Error: specifying '-a id' is now mandatory. Try -h for help.
Error: you must specify a port name in ups.conf. Try -h for help.
Duplicate driver instance detected! Terminating other driver!
Fatal error: broken driver. It probably needs to be converted.
using 'battery.charge' to set battery low state
using 'battery.runtime' to set battery low state
The 'ignorelb' flag is set, but there is no way to determine the
battery state of charge.
Only set this flag if both 'battery.charge' and 'battery.charge.low'
and/or 'battery.runtime' and 'battery.runtime.low' are available.
%s: nothing to write
%s: %.*s
SETINFO %s "%s"
ADDENUM %s "%s"
ADDRANGE %s %i %i
SETAUX %s %d
 STRING
SETFLAGS %s
%s/%s-%s
bind %s failed: %s
getpwuid
Current user: %s (UID %d)
Things to try:
 - mkdir %s
 - rm %s
Exiting.
chmod(%s, 0660) failed
listen(%d, %d) failed
select unix sockets failed
accept on unix fd failed
fcntl get on unix fd failed
new connection on fd %d
DUMPALL
DATASTALE
ADDCMD %s
DATAOK
DUMPDONE
PING
PONG
INSTCMD
Unknown command on socket: 
arg %d: %s
Parse error on sock: %s
ADDRANGE %s  %i %i
DELINFO %s
DELENUM %s "%s"
DELRANGE %s "%i %i"
DELCMD %s
ALARM %s
ups.status
ups.alarm
write %d bytes to socket %d failed
Can't create a unix domain socket
Fatal error: unable to create listener socket
 - set different owners or permissions on %s
 - run this as some other user (try -u <username>)
dstate_init: sock %s open on fd %d
fcntl set O_NDELAY on unix fd failed
Got INSTCMD, but driver lacks a handler
Got SET, but driver lacks a handler
%s: base variable (%s) does not exist
%s: base variable (%s) is immutable
dstate_setaux: base variable (%s) does not exist
%s: ignoring LB flag from device
%s: appending LB flag [charge '%s' below '%s']
%s: appending LB flag [runtime '%s' below '%s']
status_commit
status_set
dstate_setflags
send_to_all
send_to_one
/var/run/nut
%s/%s.pid
common.c
len <= size
%4.0f.%06ld	
/etc/ups
NUT_CONFPATH
NUT_STATEPATH
writepid: fopen %s
Failed to read pid from %s
kill
 %02x
%s: (%d bytes) =>
%3s 
%02Xh 
'%c' 
Unable to enter background
open /dev/null
Startup successful
initgroups
setgid
setuid
chdir(%s)
chroot(%s)
chdir(/)
chrooted into %s
Invalid log level threshold
user %s not found
getpwnam(%s)
Out of memory
2.7.3
vupslog: vsnprintf needed more than %d bytes
Ignoring invalid pid number %d
getuid gave 0, but seteuid(0) failed
snprintfcat
Unrecognized flag [%s]
%s: duplicate value (shouldn't happen)
state_addenum: base variable (%s) does not exist
state_addrange: min is superior to max! (%i, %i)
state_addrange: base variable (%s) does not exist
state_setflags: base variable (%s) does not exist
st_tree_node_add
Fatal error in parseconf(ups.conf): %s
%s/ups.conf
Can't open %s: %s
Parse error: %s:%d: %s
parseconf: fatal error: %s
realloc wordbuf failed
realloc arglist failed
realloc argsize failed
realloc arglist member failed
malloc wordbuf failed
addchar: discarding invalid character (0x%02x)!
;*2$"4
tripplite_usb.debug
7zXZ
J2<[
377hq
|- s
Uv{i"
"<1zWk
|!,O
EA[Y
{";s
,{X6N
D I?
K2e*
AR8&
>8bVn
yLwQY\
6V'4
N_lx
&ZE2
B.)1#%d	
h+0KC#>4D
n+$7
#RS3
7~B{
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.data
.bss
.gnu_debuglink
.gnu_debugdata
