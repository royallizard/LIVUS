__gmon_start__
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
PL_valid_types_PVX
PL_valid_types_IVX
__assert_fail
Perl_get_sv
Perl_sv_2iv_flags
Perl_PerlIO_stderr
PerlIO_printf
Perl_sv_setuv
Perl_pv_pretty
Perl_newSVsv
Perl_sv_utf8_upgrade_flags_grow
Perl_fbm_compile
Perl_sv_utf8_downgrade
PL_charclass
__ctype_b_loc
Perl_croak
PL_fold_locale
Perl_ckwarn
Perl_utf8n_to_uvchr
Perl__get_regclass_nonbitmap_data
Perl_swash_fetch
Perl_ckwarn_d
Perl_warner
Perl__invlist_search
PL_op_desc
Perl_custom_op_get_field
__stack_chk_fail
Perl_savestack_grow_cnt
Perl_safesysmalloc
Perl_safesysfree
Perl_reginitcolors
Perl_sv_force_normal_flags
Perl_sv_setsv_cow
memcpy
Perl_utf8_length
Perl_safesysrealloc
Perl_sv_pos_b2u_flags
PL_utf8skip
Perl__core_swash_init
Perl_valid_utf8_to_uvchr
Perl_hv_common_key_len
PL_latin1_lc
__ctype_tolower_loc
Perl_uvoffuni_to_utf8_flags
PL_fold_latin1
Perl__to_utf8_fold_flags
PL_fold
Perl_av_fetch
Perl_mg_size
Perl__load_PL_utf8_foldclosures
Perl_sv_2uv_flags
Perl_sv_newmortal
my_regprop
Perl__warn_problematic_locale
memcmp
PL_reg_name
Perl_foldEQ_utf8_flags
Perl_save_pushptr
memset
Perl_deb
Perl_pop_scope
Perl_regnext
PL_regkind
Perl_leave_scope
Perl_sv_eq_flags
Perl_sv_setsv_flags
Perl_pad_push
PL_valid_types_RV
Perl_newSVpvn_flags
Perl_sv_magic
Perl_foldEQ_latin1
Perl_ck_warner
Perl_foldEQ_locale
Perl_foldEQ
Perl__to_uni_fold_flags
Perl__to_fold_latin1
Perl_sv_mortalcopy_flags
Perl__is_utf8_FOO
PL_block_type
Perl_reg_temp_copy
Perl_save_scalar
Perl_gv_add_by_type
Perl_push_scope
Perl_save_strlen
Perl_save_vptr
Perl_was_lvalue_sub
Perl_sv_free2
Perl_cxinc
Perl_mg_find
Perl_find_runcv
PL_valid_types_NVX
Perl_safesyscalloc
Perl_sv_2pv_flags
Perl_croak_popstack
Perl_sv_2bool_flags
Perl_sv_pvn_force_flags
Perl_new_stackinfo
Perl_newSV
Perl_sv_2mortal
Perl__is_uni_FOO
Perl_free_tmps
my_re_intuit_start
Perl_fbm_instr
Perl_sv_peek
memchr
Perl_utf8_distance
my_regexec
Perl_save_destructor_x
Perl_mg_find_mglob
Perl_sv_len_utf8
Perl_hv_iterinit
Perl_save_sptr
Perl_utf8_hop
Perl_sv_pos_u2b_flags
Perl_av_push
Perl_sv_magicext_mglob
Perl_rninstr
PL_memory_wrap
Perl_croak_nocontext
Perl_warn_nocontext
Perl_hv_common
Perl__is_utf8_perl_idstart
Perl__add_range_to_invlist
Perl_ck_warner_d
strchr
Perl_grok_oct
Perl_sv_catpvf
Perl_sv_catpvn_flags
Perl_sv_recode_to_utf8
Perl_newSV_type
Perl_av_store
Perl_newRV_noinc
Perl_newSVuv
Perl_mg_set
Perl_sv_setiv
Perl_newSVpvn
Perl_sv_chop
Perl_form
Perl_av_exists
__memcpy_chk
Perl_vmess
Perl__new_invlist
Perl__get_swash_invlist
Perl__invlist_union_maybe_complement_2nd
Perl__invlist_intersection_maybe_complement_2nd
Perl__invlist_invert
Perl_sv_grow
Perl_amagic_call
Perl_gv_fetchpvn_flags
Perl_sv_catsv_flags
Perl_mg_get
Perl_sv_setpvn
my_reg_named_buff_fetch
my_reg_named_buff_exists
my_reg_named_buff_firstkey
my_reg_named_buff_nextkey
Perl_hv_iternext_flags
Perl_newSVhek
my_reg_named_buff_iter
my_reg_named_buff_scalar
Perl_newSViv
my_reg_named_buff_all
my_reg_named_buff
Perl_croak_no_modify
my_reg_numbered_buff_fetch
Perl_sv_untaint
Perl_is_utf8_string
my_reg_numbered_buff_store
my_reg_numbered_buff_length
Perl_is_utf8_string_loclen
Perl_report_uninit
my_reg_qr_package
Perl_sv_catpv
Perl_savesvpv
Perl_grok_atoUV
PL_valid_types_IV_set
Perl_sv_upgrade
Perl_grok_hex
Perl_av_pop
Perl__get_encoding
Perl_savepv
Perl_instr
Perl_savepvn
strncmp
Perl__new_invlist_C_array
PerlIO_putc
my_regdump
PL_reg_extflags_name
PL_reg_intflags_name
PL_varies_bitmask
memmove
PL_simple_bitmask
Perl_repeatcpy
my_re_op_compile
Perl_save_re_context
Perl_eval_sv
my_re_compile
my_reg_engine
my_re_intuit_string
my_regfree
Perl_op_refcnt_lock
Perl_op_refcnt_unlock
my_regdupe
Perl_sv_dup_inc
Perl_stack_grow
Perl_croak_xs_usage
Perl_get_re_arg
PL_core_reg_engine
boot_re
Perl_xs_handshake
Perl_newXS_deffile
Perl_newXS_flags
Perl_xs_boot_epilog
libperl.so.5.22
libc.so.6
_edata
__bss_start
_end
GLIBC_2.3
GLIBC_2.14
GLIBC_2.3.4
GLIBC_2.4
GLIBC_2.2.5
ATUH
[]A\A]A^
fffff.
fffff.
fffff.
H9A ~_Hc
9Gp|
AWAVAUATI
S0Hc
thD9ep
L$ 1
K0Hc
K0Hc
K0D9ep
8[]A\A]A^A_
AWAVI
AUATUSH
D$8A
T$(RATAWL
D$XH
8[]A\A]A^A_
<1I)
AWAVI
AUATI
[]A\A]A^A_
H9Ah
AWAVI
AUATI
[]A\A]A^A_
JpH9L
ffffff.
AWAVI
AUATI
D$81
t$8dH34%(
H[]A\A]A^A_
^_t*E
T$0H
|$(E1
T$1H
F f%
AWAVA
AUATI
D$(E
HcC0H
S0Hc
D$xH
HcC0H
D$xI
HcC0H
|$xH
L$xH
HcC0H
HcC0H
HcC0H
L$tL
HcC0H
8[]A\A]A^A_
l$xH
ffff.
[]A\
ffffff.
ffff.
AWAVI
AUATI
D$(A
L$(1
L$ M
([]A\A]A^A_
]A\A]A^A_1
AWAVM
AUATI
[]A\A]A^A_
[]A\A]A^A_
@t@H
[]A\A]A^A_
5if&
xCt2H9
AVAUATI
]A\A]A^
]A\A]A^
AWAVA
AUATUSH
D$81
\$8dH3
H[]A\A]A^A_
D$(u
|$0D
|$0D
D$(A
|$0H
D$0D
D$(H
T$0L
d$(f
|$0L
D$0L
D$(H
D$0D
T$0H
d$(L
AVAUATI
]A\A]A^
t9H9
ffff.
fffff.
AUATI
[]A\A]
AWAVAUATUS
D$(1
|$(dH3<%(
8[]A\A]A^A_
t$ A
t$ A
t$ A
AVAUATUI
	wNJ
[]A\A]A^
F f%
Bp<	
AWAVI
AUATI
D$x1
|$xdH3<%(
[]A\A]A^A_
D$PE1
d$(L
l$0L
t$8A
D$ H
D$HI
H9l$
D$Qs
D$Ps
D$ L
d$(L
l$0L
t$8H)
fffff.
AWAVM
AUATMc
|$x1
D$HH
|$xdH3<%(
[]A\A]A^A_
F f%
t$ I
D$`H
T$@L
D$(I
D$PH
D$ H
FZPQH
;T$D
t$81
l$0L
s6A9
t$ L
t$(L
l$0L
t$(I
5C8&
D$0*
l$ D
d$ I
Lcd$ 
L$D9
D$HA
|$0L
l$8H
t$ @
t$(H
t$HA
t$0A
\$HA9
D$YAUP1
L$@D
D$HH
T$PH
l$8M
l$8Lc
l$(L
t$0I
s#E9
t$ L
l$(L
D$(H
|$ H9
l$0L
t$8I
L;l$(
t$ L
l$0L
l$(L
t$0M
D$ H
l$0L
l$(L
t$0Mc
l$(L
t$0Mc
Bp<	
D$HD
T$(H
D$(H
|$0H
\$0D
L$ I
AWAVI
AUATUSH
9Qp|
D$0H
D$0H
L$pH
D$(M
L? =
\$^M
D$xM
|$ H
L$8L
A[XH
|$8M9
Ic<$M9
L$`H
T$XI
t$PA
L$HL
L$hQH
T$hH
L$hH
L$xH
D$@H
L$HD
D$(H
T? H
L$ H
A[XD9
D$xH
$H9X@
QLuR
H;YP
T? H
D$0E1
HcB H
HcB H
$H+S
[]A\A]A^A_
D$ M
T? H
|$@L
t$HH
D$(L
T$@H
D$@H
|$ H
L$8H
|$8M9
Ic<$M9
L$`H
T$XI
t$PL
L$HL
L$hQH
T$hH
L$hH
D$ H
L$8H
|$ L
t$0E1
D$pL
T$ H
L$8L
AYAZH
\$8M9
L$PH
t$HH
L$@L
L$X1
t$XI
VAUH
D$8H
D$p1
D$@H
D$01
\$LI
4$H;q
\$@E
L$@A
T$Lf9
D$NH
9u0~
PpA;T$
A;T$
A;D$<A
A;D$
,$L9i
A9D$$
m0D9
m0D9
PpA;T$
A;T$
L$HAWL
D$ H
AZA[
T$@H
D$8~
D$0H
\$0H
$H+W
m0D9
PpA;T$
A;T$
\$0H
T$ M
l$(H
A9T$$
|$fI
L$XL
d$@D
|$HI
t$PH
l$XI
d$@D
|$HL
t$PH
\$ D
m0D9
T$HL
T$HL
\$@A
t$ 9u0
PpA;T$$v'H
A;T$$w
T$HA
D$,H
T$HL
\$@L
T$HI
l$PL
T$PL
\$HL
L$@L
\$HH
\$@L
\$ 9
T$PtCH
T$HL
HcL$PH
T$HL
\$@A
t$ 9u0
A9D$0
D$ H
|$(H9|$(s.H
D$ H
D$0A
A;D$0
\$ D
m0D9
t$ 9u0
PpA;T$
A;T$
D$(H
T? H
D$xI
H8IcD$0H
D$8M
l$8I
D$ H
\?"L
l$PL
\$@M
L$HD
|$XI
L$HL
L$ H
T$PA
l$PD
|$XL
d$`H
D$ H
L$8H
t$(L
\$8M9
L$HH
T$@H
t$PH
t$X1
L$XH
L$XH
D$@I
D$(H
AYtD
D$0H
D$pH
\$4D
m0D9
t$49u0
t$0H
D$ H
D$xH
D$(H
AYtD
D$0H
t$09u0
D$ H
D$xH
t$ 9u0~
PpA;T$
A;T$
T? H
\$0M
;Cpw
D$ M
$H9H
t$0L
D$HI
D$PI
D$pH
|$0H
D$@H;
D$hHcB H
0"B#
t$hL
D$hH
HcA`H
D$hH
D$@H
B f%
B f%
D$@H
D$0H
$H+Q
$H+G
D$HI+F
H9T$
D$PH
t$0A
D$XI
D$`A
D$ H
9C8H
|$0M
$H9X
D$pA
t$01
\$xI
D$ L
u$A9v0
t$0L
\$xL
D$xH
\$$D
m0D9
t$$9u0
t$0H
\$xI
H8IcD$0H
t$09u0
D$xH
\$$D
m0D9
t$$9u0
t$0H
\$xH
H8IcD$0H
\$0M
D$ A
|$@L
t$HL
l$0I
BE;]pv
]tE;^
D;[8
L$`H
T$XL
T$`1
L$`L
D$ M
l$8H
D$ H
D$ H
D$ M
D$ H
L$0H
\$xL
D$ A
t$0I
D$ I
\$8A
D$@A
T$4H
t$@A
T$@t
T$<H
$H9H
D$HH
D$PH
D$PL
D$@PAUL
T$hL
L$XM
|$0L
SL;Gp
B:4+
D$ M
$H;H
L$ 1
D$ H
$H9C
$H9H
T? H
$H9H(
|$0D
D$ H
\$0H
D$ I
D$ H
<1t9<2
L$ f
t$ H
<Dt0
D$0IcT$
D$ H
D$@9
L$0M
$H+O
D$ H
L$(H
D$0H
T$@1
AZA[
|$0M
$H+O
D$0;Xp
t$ @
D$HH
D$ I
D$PH
L$<E
D$0IcD$@=
A+D$<H
l$(u
t$$9
$+D$
L9,$
D$0H
\$0H
$H+Q
;Cpv
t$01
FYtD
D$0H
D$pH
D$xH
t Ic^0L
t$0A
T? H
D$ M
Ico0L
D$ H
t$@E
A;D$<A
D$8AYAZ
4$~$I
D$HD
D$0A
D$0H
D$,L
t$@Hc
T$@H
L$0H
9Aps
T$ I
L$XM
L$fM
A;G0}
D$ H
L$<A[[D9
T? H
IcL$<H)
l$(H
l$(H
L$hH
D$ H
$H9H
A;D$0
D$ H
D$HH
\$ D
m0D9
t$0H
L$PL
L$XH
F f%
T$@D
+YPA
d$@L
D$HH
|$ H
L$HH
|$ L
d$@I
APARE1
L$(H
AYAZH
L$ L
L$(C
T? H
L$(H
_AXH
L$hH
t$0L
D$@H
D$PH
L$(H
AXAY
Ic^0L
HcU0H
T$HL
\$@H
T$4I
D$HL
T$HL
T$HL
T$HL
T$HL
T$HL
T? H
McL$,Ic\$0H
T$PL
\$HL
T$PL
D$,H
F f%
H9D$@
D$0H
\$0H
$H+Q
;Cpv
T$PL
T$PL
L$HH
T$HH
L$8H
_AXD
L$@L
T$HE
D$XN
T$PL
L$`1
T$`H
T$@H
L$8H
D$XY
L$`M
l$@A
\$0H
D$@H
Ic\$0H
T$HL
T$HL
SAPj
Hc]0H
D$ M
<2tl<Dt4
+t5f
A9X8u
Ic^0L
<$H9x
\$@H
D$@H
D$@1
t$HH
4$H9p
D$@H
t$PH
D$XH
T$@D
D$X1
\$PSL
L$PL
D$HH
F f%
L$PI
CYPL
\$XL
T$@L
$H+G
D$(H
IcO@H
McG0L
HcP H
VHcI
McO@L
D$ H
t$0H
D$ H
D$PH
t$0I
D$XI
D$`A
L$0A
D$pH
t$0A
T$0H
D$PH
t$0A
D$XI
D$`A
D$ H
L$XL
d$@L
t$PH
l$XH
|$HI
|$HL
t$PH
|$8H
L$HAWL
D$ H
d$@D
|$HL
t$PH
$H9C
Ic^0L
L$0H
L$0H
D$@H
d$@D
|$HL
t$PH
D$HI+F
D$HH
FxI+FpH
E ;E$
HcB H
FxI+FpH
0"B#
t$hL
D$hH
HcA`H
$I+D$
|$(H9|$(s)H
D$8H
Hc]0H
T? H
AYAZ
t$fH
T$XL
L$PH
T$(H
D$ A[YH
\$PL
IcN@L
McF0H
T? H
t$09u0
T$@H
T$PL
\$HD
T$(E
L$PH
D$ AYAZH
\$HL
T$HH
T$HH
IcV0L
T$0H
F f%
F f%
T$HH
T$HH
|$@I
D$ H
HcP H
VHcI
McN@L
D$xH
A[[D
t$0H
D$@H
D$pM
T? H
AXAY
Ic^0L
@t3H
Hc]0H
T? H
L$0H
D$(H
L$ H
D$ H
D$ M
D$HL
L$@L
D$HL
L$@L
L$HI
T$@H
Ic^0L
T? H
L$HI
L$HI
L$0H
t Ic^0L
D$@H
t$0H
t Icn0L
\$xM
T? H
AWAVAUATI
YYdH
T$HH
D$8L
L$PH
L$@@
L$@H9L$8A
L$@L
|$HL
t$PH
D$HL
|$8I)
|$@I9
L;|$@
|$@D
t$PH
A^XH9T$8
[]A\A]A^A_
D$8H
L$@H9
T$HA
|$_H
D$HE
T$@H
|$8H
|$PH
D$@I
H;T$8H
H9T$8H
t$PH
L$8H9L$@
T$@L
L$HI
D$8I+G@H
D$xI
HcH@h
Lc@01
A[[H
D$pL
D$xH;
|$8H
D$0H9|$0L
t$`I
t$pH
D$hH
t$hH
t$pH
t$8H9
D$_E1
T$ H
D$,x
D$@H
t$8H9
t$PH
H9D$8H
L$8H9L$@
-U{%
T$@H
l$HL
t$PH
D$@H
t$8H9
|$HL
t$PH
t$@H9t$8A
D$@D
|$HA
t$PL
H9D$8H
D$HD
D$HL
t$8H
D$@I9
D$@I9
|$_H
l$ L
t$0H
|$,L
SATL
L$@D
D$LH
T$0H
H9t$
D$HD
|$PH
D$@I
H9T$8H
t$PH
H9T$8H
|$PH
D$@H;G
L$8A
D$@@
H9D$8H
t$PH
D$H1
D$PH
|$PH
t$PH
H9D$8
L$PH9A
H9D$8H
^_8D$
L$PH
t$8A
D$@@
t$PH
H9D$8H
|$PH
D$@I
H9T$8H
t$PH
H9T$8H
t$8H9t$@
d$8rE
t$PH
D$HH
T$@H
|$8H
|$_1
D$`PH
T$XL
D$PH
L$HH
t$@H
t$0E
|$8H9|$0D
D$gPL
L$HH
t$@L
D$PH
T$XL
t$0<
F f%
t$0H
t$0H
vXH=
vKH=
v>H=
v1H=
v$H=
D$0H
L$0H
|$`I
t$pH
D$hH
D$`H
t$PH
H9D$x
HXH9HP
|$0H
D$0H
t$xH9
D$0H
L$xH9
T$0H
T$0H
D$0H
|$xH9|$0
t$0H
|$xH9
t$PH
T$ D
D$gPH
t$@L
D$PH
L$HH
T$XH
AYAZH
T$ D
\$`H+\$@
D$@H9D$8
|$HA
t$PL
5cc%
H9T$8H
T$@H
|$8H9
5eb%
t$PH
H9T$8H
xXH9xP
t$0<
F f%
L$PH
D$@H;A
-4`%
t$8A
t$PH
H9D$8H
D$HL
%x_%
D$HL
T$@H
|$8H9
t$PH
L$PH
D$@H;A
-L]%
t$8A
D$@@
H9D$8H
t$PH
D$@I9
D:7u
t$PH
t$PH
H9T$8H
|$PH
H9T$8H
H9T$8H
t$PH
D$PL
L9t$8
L9t$8L
t$PH
--W%
L$PH
D$@H;A
t$8A
t$PH
H9D$8H
t$PH
D$@H;F
|$8A
D$@@
H9D$8H
t$PH
-*U%
t$8A
D$@@
t$PH
H9D$8H
H9D$8
t$PH
H9D$8H
D$XD
D$PH
|$PH
t$PH
H9D$8
L$PH9A
H9D$8H
AZA[
H9D$8
H9D$8H
AXAYt
|$PH
H9T$8H
H9T$8H
t$PH
L$PH
uHH9D$8v
L$PH
-]N%
H9D$8vtH
H9D$8H
t$PH
|$PH
H9T$8H
t$PH
H9T$8H
D$PL
-oK%
L9t$8
t$PH
L9t$8L
-fJ%
t$PH
L9t$8
t$PH
|$PH
t$PH
H9D$8
t$PH9F
H9D$8H
t$PH
t$PH
AYAZ
t$PH
t$PH
A]A^
t$8H9t$@
t$@H
t$PH
H9t$8H
HcH@hD
Lc@01
HcH@h6
Lc@01
L9t$8
t$PH
t$PH
|$8H9|$@
t$PH
H9T$8H
D$@H
L$8H9
t$PH
H9T$8H
t$HH
D$PD
|$8H9|$@
t$PH
H9t$8H
t$8H9t$@
t$PH
H9T$8H
-w5%
Bp<	@
t$PH
t$PH
t$PH
AWAVAUATUSH
L$XH
l$8H
D$ I
D$hH
D$XH
H+D$
I9D$@~YH
[]A\A]A^A_
T$XH
D$(H
*D$ A
D$TA
H9t$
T$XH
T$XH
D$`I
D$0H
T$XH
D$0H
D$XH
D$(H
|$(H
H+l$ H
l$ H
D$HH
L$(H
D$ H
D$XH
-!*%
D$(H
L$PH
@ H9D$(H
D$pL
L$hH
L$xH
T$h1
D$ H
t$XL)
t$XH
v`H9
t$ I)
D$TD
l$PH
|$XE
D$THk
D$XH
D$xL)
L;t$p
D$pL)
D$pL
t$hH
D$xL
|$`L
\$XH9
D$hL
T$`I)
T$XH
T$`H
T$XH
T$hH
AZA[
D$`H
L$XH
L$`L
D$xH
L$XH
l$`u&
D$`H
T$XH
jXH;j`
D$(H
D$(H
D$(H
l$TD
l$PLc
@u!H
\$XH
L$HL
|$`L
WAUH
L$`1
L;t$
l$@@
t$XH
D$ H+FXI9
|$PH
L+L$
D$XH
L$pH
T$XL
L$pL
D$hH
T$XL
D$XM
l$@H
D$8H
L9t$
t$PI
t$(H
l$ H
D$XH
t$0H
D$XL
H+T$
D$@H
T$0H
AXAY
T$XH
|$ L
|$ H
D$XH
t$hL
L$xL
D$pH
t$pH
T$hL
AXAY
L+D$
D$ H
t$ L
D$8H
|$`I
D$XH
t$@LcL$XL
D$(H
T$HI
H+T$ I9
|$ H
D$(D
L+l$
T$XH
L+t$
LcL$X
L$ M
T$pI)
D$hH
D$hH
L$XH
T$0I
D$8L
T$pH
T$XH
D$XH
l$ LcL$XL+l$0O
L;T$
D$XH
D$0L
H9D$
D$0H
D$XH)
L$ H
@ubH
D$XH
xHH9xp
D$XH
x@H9xh
D$0L
H;D$ 
l$TM
D$pH
t$xL
T$pL
t$xH
D$0H9D$ 
D$xH+D$0H
D$ H
t$0H
|$ H
Hct$XH
t$xH+t$0H
L+l$
T$XH
l$`H
D$XH
@tHH
|$hH9|$p
D$HL
T$xL
\$`L
\$`M
L$XH
D$xH
L$`H
D$xH
L$`H
T$XH
D$hI
D$`u
t$hL+p
D$ H+l$
H+D$
D$ H
L$ H
H+l$
|$hH+p
AWAVI
AUATI
L$ H
D$XH
L+[P
L;|$
D$8L
NBXL
D$0A;F0
D$ H
L$ H
AYAZ
H9D$
dH3<%(
[]A\A]A^A_
T$XL
D$ H
D$ 1
\$HL
d$PH
D$ M
t$ L
\$HM
d$PL
t$@H
u	I9
H+CPL9
H+D$
H+T$
H+T$
D$0A;F0
D$ H
|$8H
|$\H
|$XH
D$PL
|$8H
\$XE
D$PH
D$PH
D$hH
D$8I
|$`L
D$xH
t$(H9t$h
D$8H
|$(H
D$\H
L$PH
D$@H
DD$H
t$`H
D$pH
D$xH
|$@H
HT$pH
D$`H
|$@H
HT$pH
D$(D
L$XH
D$(E
L;l$(s&
L$ H
T$(L
|$ M
D$0A;F0
D$@L
L$ L
D$@L
L$ L
\$(L
d$8D
D$`PD
D$(H
T$ L
AYAZ
L$HL
D$@L
L$HL
L$ L
D$@H;
L;l$(s9
D$`H
t$@H
D$(H
D$xI
\$(A
D$`PD
D$xL
l$@I
L;l$p
D$(H
D$xH
H|$pH
D$(L
L$HI
D$ I
\$(L
d$8D
T$XE
D$PH
D$PH
D$(H
D$@H
L$ H
kxH)
t$XH
\$(L
D$PH
D$@L
L$ L
D$@H
D$PH
l$PL
D$@L
L$ L
D$@H
l$PL
D$PH
t$`H
CXH;p
H;p H
D$@H
H9V8
|$(H
D$(H
L$(E1
\$8I
A[^L
L$HH
L$@L
L$HL
D$8H
L$@H
T$(M
D$XE
D$PH
T$HL
D$@L
L$ H
D$@H
L$PH
D$(H
D$(tb
T$(L
T$(L
L$@H
L$8H
L$8H
T$(H
L$@M
L9D$
D$(L
L$8H
L9|$
L$8H
AWAVE
AUATI
~$Hc
tIH9z
I9<$vVA
H9:u
I9<$A
([]A\A]A^A_
AWAVI
AUATI
[]A\A]A^A_
AWAVM
AUATI
S`L9
CPL9
SXI9
H+SHH
C8H+C(
[]A\A]A^A_
KXL+KHL
H+s(H
H+SHH
K8H+K(
AVAUATUSL
f8L;f0
u+[1
]A\A]A^
[]A\A]A^
C`H9CXt
C0H9C8H
FS81
PQM)
C`H9CXt
C0H9C8H
FS81
PQM)
F`H9FX
PAP1
ATUSH
=wnH
[]A\
]t/H)
[]A\
AWAVI
AUATUSH
D$(1
{t3H
L$(dH3
8[]A\A]A^A_
T$ H
D$ H)
AWAVAUATUSH
rGHc
[]A\A]A^A_
t&L9
t3E1
[]A\A]A^A_
]A\A]A^A_
wbE1
[]A\A]A^A_
AUAT
H9\$
dH3<%(
([]A\A]
AWAVI
AUATI
[]A\A]A^A_
[]A\A]A^A_
AWAV
AUATI
D$(H
D$(I
D$(I
~XMc
nXtXE
I9nXtCH
^_I9nX
I9nXtsH
I+FHH
V8I+V(
I9nXt4H
I+FHH
8[]A\A]A^A_
8[]A\A]A^A_
M+NH
I+V(H
V8I9
AYAZL
n`H9
I+FHI
I+VHH
I+VHI
N8I+N(H
8[]A\A]A^A_
fff.
AWAVI
AUATE
D$8M9
D$8D
H[]A\A]A^A_
H9C8
K`H9
SXH9
T$(H
T$ L
ATAUH
t$@1
t$HAWL
L$PL
D$HH
H[]A\A]A^A_
T$(H
D$(H
AWAVAUATI
|$8H
D$ H
|$8I
D$xH
D$pH
l$8H
D$@H
D$PH
D$hH
|$pM
H;\$
T$0f
D$`L
L$XL
L$XL
D$`L
\$0A
t$ H
D$`L
L$XL
L$XL
D$`L
\$0A
H9\$
T$PA
t$ H
D$`L
L$XL
L$XL
D$`L
\$0A
H9\$
\$pH9
I9G@
t$pH
L$(H
@ H9
D$pH
d$(H
D$@H
D$pH
H9\$
D$(H;
H;\$
|$8H
H+t$xH
D$hH
D$Pf
t$pH
d$(H
d$(L
l$@E
H;D$0
D$HA
D;d$
|$8H
T$hH
t$PH
t$ H
t$PH
t$ H
I9GH
|$8H
D$xH
T$HH
|$8H
t$ H
AYAZtTH
|$8H
T$XH
L$PI
L$PI
T$XH
D$`H
D$`H
T$PI
|$8H
t$pH
|$8H
T$`H
T$`I
D$HH
d$(H
D$0H
\$PH
D$pH
\$XI
L9t$
L;t$
D$(H;
L;t$
D$`I
|$8H
L$PH
H+t$xH
D$hH
t$HH
d$(H
D$(A
l$0L
d$@A
T$@H
|$8L
t$ H
AXAYtLH
|$8H
|$PI
\$`f
|$8H
t$XH
t$HH
|$8H
D$XI
t*E1
D9t$(
d$0I
D$0D
L$`D
T$XD
L$HH
|$0I
L$`D
T$XD
L$HH
d$(L
|$8A
D$xI+EHH
D$(H
A;GXv
\$ H
[]A\A]A^A_
D$xH
W(H)
D$hH+D$
\$x@
I+EHH
I9]Xt7H
I+EHH
H9l$
I9]Xt
I+UHH
I+EHH
|$8H
I+UHH
I+EHH
|$8H
|$hH9
I+EHH
I9]Xt7H
I+EHH
H;l$h
I+EHH
\I9]Xt
I+UHH
I+EHH
|$8H
I+UHH
I+EHH
|$8H
d$(I9]X
T$xI+UHH
D$xI+EHH
|$0H
I9]X
T$xI+UHH
D$xI+EHH
\$(H
|$8H
\$8H
APAVH
t$(L
D$@H
t$ 1
D$HL
D$HL
|$81
|$8A
\$8L
D$(I
,(fE
W8D9
L$(H
W8D9
E;gT
E;gXv
D$0H
HcD$
l$PH
APSH
L$PH
t$@H
fE;w8
t$ 1
D$`L
D$`L
l$PH
|$81
T$(H
fA;_8r
l$0D
L$HH
T$(H
L$8f
L$HH
M8fD9
L$HH
M8fD9
D$@1
;\$0
l$0M
T$@H
t$(I
l$0L
d$@A
|$8D
D$HH
HcD$@H
D$PH
APASL
D$`H
t$XH
D$8H
AZA[
L$(H
T$@H
t$ 1
D$pL
T$`L
L$XL
D$pH
T$`L
L$XL
D$xH
\$8A
D$`H
D$XH
t$ 1
HcD$HH
t$ 1
L$@H
T$@A
l$P1
]`I)G@I)GHI9]XH
T$xI+UHH
D$xI+EHH
|$0H
I;]XtSH
T$xI+UHH
D$xI+EHH
l$xH
H9l$
I;]Xt
I+UHH
I+EHH
I;]Xt
I+UHH
I+EHH
|$8H
|$8H
\$8A
D$xI
-._$
\$xH
D$hH
|$8H
D$hH
T$`H
t$ 1
T$HH
|$pH
D$@1
l$PA
L$(H
D$0H
|$8H
APARL
AYAZ
L$XL
A[A]
|$8H
|$xI
tuE1
t8E1
fffff.
ffff.
+tRw<@
&t^@
!t^H
]tRv@@
AVAUA
S`H9SXt
SX[]A\A]A^
S`H9SXt
[]A\A]
ffff.
S`H9SXt
SX[]A\
{tP%
dH3<%(
ffff.
ffffff.
l$8D
\$HH
L$0H
H+T$(E
L$ H)
AWAVI
AUATI
ffff.
AWAVAUATUSH
v8dH
D$81
T$4E1
t$ H
T$4E
D$0A
D$8dH3
H[]A\A]A^A_
C8f.
t$ A
K8H)
C0H)
VAVH
\$(H
L9[X
\$(H
PAR1
L9[X
\$(H)
AQV1
\$(L
|$(M)
D$8dH3
[]A\A]A^A_
|$81
|$81
|$81
|$8A
fffff.
fffff.
t/I9
42I9
ATUH
H;C8tHH
C`H9CXI
ffffff.
AWAVI
AUATI
D$pL
L$(1
F`H9FXA
{`L9
L;{Xt
D$(dH3
8[]A\A]A^A_
fffff.
fffff.
ATUS
[]A\
fff.
AVAUI
ATUH
dH3<%(
[]A\A]A^
AWAVAUATUSH
E0[L
]A\A]A^A_
D#E(E!
AUATUSH
[]A\A]
q(L9
AWAVAUATUSH
([]A\A]A^A_
AWAVAUATUSH
D$(1
d$ H
T$ H
D$(dH3
8[]A\A]A^A_
ffffff.
ATUI
r0dH
[]A\
AWAVI
AUATUSH
D$(1
D$ H
-toA
t$ H
\$(dH3
8[]A\A]A^A_
~w4H
~v	H
AWAVAUATI
D$HH
D$ dH
D$x1
D$hH
D$@H
D$pH
$H;D$(
D$0H
D$8f%
H9|$0
t$0J
tSE1
d$8M
d$8H
t$PD
D$@H
$H;D$(
\$xdH3
[]A\A]A^A_
d$0%
D$pt
t$X1
A9N(
HcD$XH
T$@1
|$X9
HcD$XH
=~	$
D$XH
L$@H
T$PH
L$hH
T$pL
LcD$
AWAVI
AUATI
([]A\A]A^A_
ffff.
AWAVAUATI
L;x }WKc
A9E`
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
ATUI
]A\H
AUATUS
7H9N ~cA
A9up|
[]A\A]
[]A\A]
ffff.
ATUS
[]A\
[]A\
[]A\H
AVAUATUA
H9J ~gA
A9vp|
[]A\A]A^
AWAVAUATI
[]A\A]A^A_
]A\A]A^A_
[]A\A]A^A_
]A\A]A^A_
ffffff.
A;H`
ffffff.
AWAVI
AUATI
D$0H
[]A\A]A^A_
OxA;GpH
d$(1
$H9P 
d$(H
<$[t
L$8I
t$@L
L$XL
t$PXZH
D$HH
|$HL
t$XL
L$XH
T$PE1
|$HL
t$8H
D$`H
D$hH
D$pH
D$xA
	t"H
AWAVI
AUATH
L$(H
D$8I
G`I9GXH
W8I9
GXH9D$
I+GHI
H;\$
T$$H
M+oH
H[]A\A]A^A_
H[]A\A]A^A_
AWAVI
AUATH
L$(H
D$8I
G`I9GXA
W8I9
GXH9D$
I+GHI
H;\$
T$$H
M+wHH
|$(I)
[]A\A]A^A_
W8I9
GXH9D$
I+GHI
T$$H
d$(I
M+gHI)
AWAVI
AUATI
D$x1
D$8H
D$<H
D$`H
V8I9
AZA[H
V`H9
I+FHH
t$8L
I9nXH
 t!Lcl$LN
D$(I+FHH
I;nXt;H
D$(I+FHH
V8I+V(
D$\A
L$\t
T$\H
I9FXtUE
I9FX
|$xdH3<%(
[]A\A]A^A_
L$(A
M9nX
D$(I+FHH
V8H+T$0
M;nXt@H
D$(I+FHH
T$0H
I+V(
D$<A
F0I9F8
D$ H
f`M9fX
V8I9
FXL9
I+FHI
t$8L
d$ I
M+fHI
M+nH
D$ M
L$ A
F`I9FXH
|$(A
L$ A
F`I9FXM
F0I9F8H
FV81
PQM)
L$\A
T$(L
N`M9NXt
M;NX
I+FHH
M;NX
I+FHH
L$0H
I+N(H
FXI9
F0H9
F`I9FXt
D$0@
V`I+n
I9VX
F8I+F
F`I9FXt
ATVAU
L$ I
$I;FX
V8I9
FXH9
I+FHH
T$8L
l$(I
|$ I
I+FHI
D$(I+FHI
A[A]H
D$ A
H;D$ H
T$ s
D$ L)
f`M9fXH
D$ I
M9fXH
 tGH
D$`Lcl$L%
|$ J
D$LA;
M;fX
D$ I+FHH
I+V(
M;fX
D$ I+FHH
F`I9FXtHM
N`I9NXI
PQM)
n`I9nXL
~8L;|$0I
I;nX
l$0H
|$0<-L
|$0H
T$hH
$I9FX
D;x`
D$`A
I+FHH
$I9FXt8H
I+FHH
I+N(H
D$0I
l$@I
I9FXL
F8I;F0t	
$I;FXt
F0I9F8H
FV81
PQM)
L$@D
D$8L
n`M9nXL
M;nXt,H
M;nX
I+FHH
t$@H
I+V(
M;nX
I+VHI
I+FHH
V8H+T$@
t<Ic
F8H)
F`I9FXt
F`I9FXM
F0I9F8H
FV81
PQM)
F`I9FXt
D$0A
|$8A
D$LH
V`I9VXM
t$0H)
|$0H
T$hH
D$pH=
l$8A
D$\E
N`H9
I9NXt
T$(I+VHH
N8I+N(
T$(I+VHH
D$0H
T$(H
I+VH
I+N(1
T$(I+VHH
N8H+L$0
I+VHH
L$0I+N(H
I+VH1
t$(H
F`I9FXt
F0I9F8H
FV81
PQM)
H;D$ 
t$(H
0I9nX
I+VHL
I+N(H
$I9FXt
F0I9F8H
FV81
PQM)
I+VH1
T$ I+VHH
T$ H
I+VH
I+N(1
T$hH
t$pI
|$pI
D$hA
|$pI
D$hI
t$HD
 XZH
$I;FX
D$(A
I+FHI
AWAUH
t$HL
F`I9FXt
D$ A
I+FHI
AULcl$TL
t$HD
I9NXM
~8L9|$0I
I;NXM
~8t-H
F`I9FXt
l$8H
D$p 
I9NXt
n`I9nXI
I;nXt
D$8H
I;nXI
I+FHH
V8H+T$@
I;nX
I+FHH
L$@H
I+N(H
D$@H
I+VHH
I+N(1
F`I+n
I9FXt
F`I9FXM
F0I9F8H
FV81
PQM)
D$0I
F8I+F
F`I9FXt
UVAW
I9FXt
F0I9F8H
FV81
PQM)
I9FXM
I9~Xt
D$\H
T$hH
D$pH=
D$hI
I;NXt
AUAWPVA
F`I9FXt
F`I9FXt
F0I9F8H
FV81
PQM)
I;nXt
ATAWP@
F`I9FXt
PVQWVH
F`I9FXt
PVQWV
F`I9FXt
F0I9F8H
FV81
PQM)
D$@I
F`I9FXt
F0I9F8H
FV81
PQM)
F`I9FXI
F0I9F8H
FV81
PQM)
T$0I
F`I9FXI
F0I9F8H
FV81
PQM)
M;nXt
AUAWL
D$pH
D$0I
D$0I
F`I9FXt
I+VHH
L$@I+N(H
H+L$@I+VHH
AWAVM
AUATI
D$81
D$(H
D$(M
E`H9EX
H+EHH
t$8dH34%(
H[]A\A]A^A_
m`L9mXH
L$$H
T$0H
|$0L
D$0H
H+U8L
H+UHH
L9U8sW
L;U8w
D$$A
T$0D
E`H9EXt
E0H9E8H
FU81
PQM)
E`H9EXt
E0H9E8H
FU81
PQM)
E`H9EXL
E0H9E8L
FU81
PQM)
L;mXH
U`H+]
H9UXt
D$$H
ffffff.
AWAVI
AUATUSH
T$@D
D$(H
D$XH
D$xI
W8I9
A\A]H
o`L9
I+GHH
M9oXH
|$ H
M9oX
I9G0
=wmH
|$XA
H9D$X
d$hE
D$hH9
d$hH
G8H9D$X
|$ A
|$ H
|$ H
D$xH
|$@H
[]A\A]A^A_
M9oXI
I9G0
D$hE
M9oX
t$8M
-z~#
M9oXtPH
"t@<
G8E1
I;G0
M9oX
M9oXttA
ASR1
L$`H
0M9oXt"H
D$8H
l$XH
D$PH
D$0H
D$(H
T$PH
t$0H
l$(E1
AYAZt
t	I9
M9oX
M9oX
G0L)
L$dE
M9oX
D$0H
WRAPVARH)
0M9oXt
t$8L
D$8I
G8E1
o8H9
H9|$PH
H9T$PH
L$pH
t$pH9t$P
|$pH
t$8H
D$ H
D$ H
M9oX
D$xI
-:n#
D$ H
ED$ RL
D$ H
-^l#
@8|$c
D$8H
D$ H
D$@A
D$xI
L$PH
D$@A
D$@A
D$ H
5Ae#
M9oX
G0L)
L$PH
d$hH
uNIc
M9oXt,E
G0L)
8D$(M
OXL9
G0I9G8H
FW81
PQM)
H+D$PH9
M9oX
M9oX
PAP1
usM9oX
M9oXt
G0I9G8H
FW81
L$pH
M9oX
G0H)
PAQ1
M9oXt
G0H)
t$hH
M9oXt
D$PH
D$PA
M9oX
t$<]H
]t H
H9D$PI
M9oXt
D$PE
|$`A
M9oX
M9oX
G0Mc
T$hH
t$8H
D$8H
W(M9oX
d$hE1
WXL9
D$pL)
M9oXt
|$PE
T$`A
PATV
:uvA
]uOHc
M9oXH
M9oXt
D$8H
t$8H
L$PH
A[A]
D$0H
D$HL
d$hH
t$8H
H9D$PH
M9oX
\$0H
PVRWVL
5_H#
M9oXI
M9oX
I9W0
M9oX
L$pL
D$PH
L$xH)
M9oX
D$PH
D$ AXAY
|$PH
t$XH
g8I)
M9oXt
VPAT1
L$PH
|$PH
5 A#
T$pM
D$PH
M9oXt!I
QVPWH
M9oXt
VPRH
M9oXt
QVRW
d$PL
uuM9oXtDA
d$hH
M9oXI
8-uH
utM9oX
M9oXI
M9oXt
G0I9G8H
FW81
o0L)
M9oXt
L+d$0M9oXt
VPU1
D$ H
M9oXH
M9oXE
AZA[
M9oXt
G0I9G8H
FW81
PQM)
AWAVI
AUATUSH
L$ D
D$XL
L$HH
D$0I9
C0H+C(L)
s8H;s0
D$8H
D$`H
D$hH
D$xH
D$@L
I;F0I
t$HL
T$@H
t$xL
D$(H
D$(H
D$81
A8H;A0
t$(H
H9p0H
D$(H
D$(H
D$PH
|$0H;{XH
T$xH
D$`H
D$hH
D$8L
5i-#
D$81
G8I9
L$ H
T$@L
L$HL
D$XL
t$HE1
T$@L
D$0L
k0L)
H;CX
C0H9
<\tt<]u
D$0I
t$8H9
<[t1
t$8SE1
W8H9
L;cXt?H
H+CHH
C8H+D$HH
[]A\A]A^A_
t$(L
H+L$HH+SHH
L$0H
H;KXH
L$0H
H;KXH
S0H)
C8E1
S0E1
L$`j
D$0H;CX
H+L$HH+SHH
H+CHH
S8H+T$H
t$(L
t$(L
L;cXH
t$xH
D$0H;CXt
C0H)
k0L)
L;cXt
\$(1
D$0H;CXt
C0H9C8L
FS81
D$0H;CXt
S0H9S8
FC8L
D$0L)
H;CXt
D$0H;CXt
C0H9C8H
FS81
t$xH
D$0H;CXt
C0H9C8H
FS81
C`H9CXt
C0H9C8H
FS81
L$0H
H;KXH
AWAVAUATI
S8H9
S`H9
H+CHI
HcT$|
K8H;K0D
dH3<%(
[]A\A]A^A_
S`H9SXH
S`H9SX
H+CHH
C`H9CXtBH
H+CHH
S8L)
S`H9SX
H+CHH
S`H9SX
H+CHH
D$ZH
H9sXH
D$ H
d$(D
l$\H
D$0H
D$8H
D$HH
H9sX
D$XH
{8E1
l$ L
|$YL
L;c0
d$(M
H9CXH
H+CHH
S8H+T$
H9CXt
C0H9C8H
FS81
PQM)
H9CX
u,L9s(
C0L)
H9s0
H9CXH
L;|$
L9c0
|$Z#
<2@8<1
D$ZH
KXH;L$
H9CX
L$0L
D$ZH
d$(M
d$(L
T$8H
L$8H
T$0E1
H9sXH
H;S0s
D$dL
L$8H
d$(A
D$@H
H9CX
T$0H
L$8H
H9CXH
C0H9C8H
FS81
H9CXI
H9CXA
L$@H
T$HH
A[A^
C0H9
H;sXt
k`L9kXL
s8M9
L;kXL
L;kX
H+CHH
H+S(
L;kXtAH
H+CHH
S8H+T$
L9sXH
L9sX
H+CHH
c`L9cX
H+CHH
S L+{(H
L;cX
H+CHH
S8L)
C8AU1
A^A_
L9sX
s0M)
s`L9sX
L9sX
L9sXH
H9CXt
C0H9C8H
FS81
PQM)
C0I9
H9CX
PAQ1
H+SHH
H+L$
S`L+k
H9SXt
L$0D
H+CHH
H+SHH
H+SH
H9C0
 t	I
H+D$ H
T$ZH
D$ L9
 tRM9
t$ L9
T$0H
H9CX
d$(I
T$`H
L$@H
T$`H
L$8H
T$0H
vXH=
vKH=
v>H=
v1H=
v$H=
d$(L
C`L+k
H9CXL
AUVAR
{`L9{Xt
L;{Xt|H
H+CHH
S L+s(H
L;{Xt?H
H+CHH
S8L)
H+SH1
H+CHH
H+K(
H+SHH
H+CHL
H+K(H
H9CX
L$hL
T$`A
T$`H
L$pL)
D$PH
APAV
H+SHH
L$8H
T$0E1
L$hD
T$`L
L$hE
H+CHL
H+K(H
s`L9sXL
L;sX
C0E1
VPAS
WAPH
0L9sX
H9CXt
C0H9C8H
FS81
PQM)
d$(H
t$@L
d$(I
d$(A
C`L+c
H9CXt
HcT$|I
H9CXt
C0H9C8H
FS81
H9CXt
C`H9CX
C`H9CXt
C0H9C8H
FS81
PQM)
C`H9CXL
C0H9C8H
FS81
PQM)
L;kXt
ATAVL
D$8H
C`H9CXL
C`H9CXt
C`H9CXt
C0H9C8H
FS81
PQM)
C`H9CXt
C0H9C8H
FS81
PQM)
C`H9CXL
AURH
D$8H
C`L+k
H9CXt
C`H9CXt
C0H9C8H
FS81
PQM)
H9CXt
ffff.
AWAVI
AUATUSH
D$0dH
S8H9
S`H9
H+CHI
t$0L
k`H9kXt
H;kXI
H+CHH
H;kXu
D$ H
D$LH
D$(H
D$XH
D$`L
c8L;c0
S8H9
CXH;D$
H+CHH
T$LL
D$0H
T$(H
T$@L
T$@L
\$8A
L$8L
H9CXD
H+CHH
H+S(
H9CXt:H
H+CHH
S8L)
H9CXt	f
H9CXt
C8H;C0s8
|$ M
D$HH
c8L;c0H
t$ D
dH34%(
[]A\A]A^A_
T$@L
T$@L
\$8A
L$hD
T$PL
H9CXL
\$8D
T$PD
L$ht
L$8D
T$hL
H9CXD
\$PD
H+CHH
H+S(
H9CXt`H
H+CHH
H9CXt
H9CXD
H9sXH
T$XH
t$`H
L$pD
T$hL
\$PD
T$hH
T$xL
\$pH
T$h;T$@D
L$PL
\$pD
H9CX
D$XH
H9CX
H+SHH
L$PL
\$8L)
L$PL
H+SHI
H+K(H
L$PL
\$8H
L$PL
CXH;D$
H+SHH
L$hD
T$PL
\$8H
L$hD
T$PL
T$PL
\$8D
T$XH
t$`L
D$xH
L$pL
L$hD
T$PL
\$@D
T$PL
L$hH
L$pL
S0H9
L$hD
T$Pf
H+SHI
H+K(H
L$hD
T$PL
\$8H
L$hD
T$PL
C8D)
H+SHH
K8D)
C`H9CXt
C0H9C8H
FS81
S0H9
H9sXtT
T$PL
\$8I
APV1
T$PL
\$8H
T$PL
L$@D
T$PL
C`H9CXt
S`L)
H9SXt
C`L)
H9CXt
AWAVI
AUATI
t$HH
D$@H
D$@H9
\$@H
t$HE1
H+T$
D${H
D$`H
|${,
|${/
L$`L
T$8H
D$@H
t	I9
D${H
D$`A
D$@H
D$dP
L$`H
T$8H
t$hL
T$`H+T$
D$dP
L$`L
H+T$
|$P1
|$h1
D$XH
D$`H+D$
APASA
T$XH
|$hL
H+T$
D$dL
PAWL
L$`H
T$8H
D$pH
A9]X
t$ Lc
T$8L
L$0L
\$(D
T$8H
L$0L
\$(D
T$pH
T$PH+T$
A9]XH
D$@H
|$`I
D$dL
L$`H
T$8H
H+T$
[]A\A]A^A_
H+T$
D$dP
H+T$
D${H
H+T$
H+T$
H+T$
AWAVAUATI
\$hH
AUE1
D$XH
D$X^_L
D$XH
D$XAXAZL
D$XH
H;P@L
D$d@
D$XH
\$@H
([]A\A]A^A_
l$81
l$d1
([]A\A]A^A_
\$PH
([]A\A]A^A_
H;P@L
pHH9ppH
D$XA[A_L
D$XH
D$X^_L
AWAVI
AUATUSH
L$HL
D$hH
D$pL
OXH9
|$xH
L$PI
L$XI
L$@L
L$0L
D$(H
L$xQL
L$pL
D$hH
L$PH
H+]HH
H+AHH
<=u<
L$(H
L$0L
L$8QL
L$8H
D$0H
L$(H
D$0H
L$(H
T$ H
D$ I
D$(I
WXH9
|$PL
\$xL
L$XH
D$0H
t$@L
D$pH
L$(H
L$0L
D$0H
_AXE
D$0H
L$(H
D$0H
L$(H
T$ H
D$ I
D$(I
D$0I
WXH9
|$PL
L$xL
D$XH
t$HH
D$ H
D$ H
H+GHH
D$ H
H+AHH
D$0L
D$@H
OXH9
\$XL
T$PH
t$@L
L$0L
D$(H
L$ H
t$HVL
T$`H
\$pASSATUAUL
L$pL
D$hH
L$`H
H+]HH
H+AHH
L$x9
d$(H
D$PH
L+eHI
H+EHH
L$0H
A[A\E1
D$8H
|$0M
t$@H
L$xL
T$ H9
|$(H
|$hH
L$pH
d$(D
|$8H
T$pH
D$pL
D$8H
t$@H
L$xH
t$8L
H+XHH
L$(L
\$ L+@HI
|$8SL
D$ L
AYAZL
\$ M
D$0A
D$XI
D$ @
H+hHH
l$xH
L$(L
H+hH
L$8H
T$h1
|$PA
l$ A
D$(M
H+hHH
T$xL
L$ L
H+hH
T$hH
_AXL
T$xD
l$(A
H+]HH
H+AHH
D$HH
I+mHH
H+AHH
I+mHH
L+hH
t$@H
t$8L
OXH9
\$XL
T$PH
t$@L
L$0L
D$(H
L$ H
t$HVL
T$`H
\$pASSATUAUL
L$pL
D$hH
L$`H
\$PH
\$PA
T$(H
H;D$(w
\$(H
H+]HH
H+AHH
T$8SH
AYAZL
L$XD
D$PL
L$XD
D$PL
L$xL
T$ I
l$PL
(t?H
D$8L
D$XPL
L$pH
L$@H
<(tC<
t*<$
t!< 
H;D$P
D$((<(
D$XtE<
D$(#
D$($t#@
D$( t
(t	@
L$HL
<itJ<ltF
\$ H
D$(L
I+GHI
L$xL
\$xM
GHI)
D$xH
AXAY
\$xI
\$ H
L$HL
H+D$
L$8E
"t*I
l$(L
D$(<(
\$8SP
D$XPH
\$@L
t$(H
\$ H9
D$PI
D$XH
L$PI
L$xH
D$@H
L$HL
MXE1
\$0L
D$PH
L$0M
t$@H
L$xH
t$8H
EHH9
|$hJ
D$(E
L$pH
D$ ;EX
|$(t&H
T$pH
D$pH
D$PL
D$PL
\$(H
\$8H
L$HL
L$HL
\$ H9
NXH9
\$HL
T$@H
t$0L
L$(L
D$ H
t$8VL
T$PH
\$`ASSATUAUL
L$hL
D$`H
L$XH
T$8H
NXH9
\$@L
T$0H
t$(L
L$ L
t$0L
T$@H
\$XASSATUAUL
L$`L
D$XH
D$hH9
H+L$8H9
T$8H
[]A\A]A^A_
D$@H
x	DD
D$XA
D$x%
L$PWI
PAWL
L$xH
D$PH
D$ H
D$ H
L$8H+L$@H
</u{
D$x%
L$HL
L$ L
AXAY
D$ H
D$@1
D$ H
|$(H
|$PI
|$PH
H+AHH
L$0L
L$0H
|$PI
PAWL
L$xH
D$PH
D$@H
D$0I
D$XI
D$(L
T$(L
D$(H
t$XH9t$P
T$@H
L$HL
T$xL
T$xL
D$dE
 t'L
@t'L
 t'L
@t'L
T$pH
D$pI
T$0H
t$ H)
H+T$@H
H9l$
L$HL
L$HL
L$pL
 t'L
@t'L
 t'L
@t'L
L9d$ L
L9d$ 
L$0D
|$(L
L$0D
	B(I
H9BPs
L$pL
L$HL
L$pL
D$hH
L$(I
!B(I
D!`(
D$0fE
L$xH
\$pH
I9FXt
I9FXt
L$pH
D$PA
L$PH
D$(H
D$(H
D$PH
t$PI
L$PH
L$(H
\$8H
D$@H
L$HL
|$0L
I+uHH
T$0H
L$(L
D$(1
AWAVI
AUATI
D$@L
E f%
E f%
B f%
|$@H
D$0H
L$ 1
[]A\A]A^A_
v?D9
U(A9
E;M(H
D$8D
D$8H
\t,H
vfA9
8H9Q
L$HM
d$8L
GxI+GpH
L$8M
GXI9GP
\$(H
IcO@H
McG0L
L$PH
L$PH
T$HH
IcO@H
McG0L
D$(H
D$(H
D$XH
L$(E
D$XH
D$XH
D$XH
D$XH
L$ H
D$XH
\$8H
D$(H
D$HH
D$hH
D$PH
D$8H
t$hH
D$8L
D$PL
t$PH
t$0L
D$(H
\$(H
~2Hc
t$PH
H;E@H
t$8L
\$XH
l$ E1
+u5A
|$|D
t$|D
l$@A
D$0H
D$01
D$@E
"T$0
D$(L
IcT$@H
t$PH
t$0L
t#IcT$@H
A	EdL
IcL$@L
McD$0H
IcL$@L
McD$0H
A[A]I
t$hH
D$xI
D$0H
\$`D
L$pD
T$pL
T$pL
\$`H
D$pH
\$`I
D$ E
D$`L
\$0A
r E9
D$pD
D$ 1
;D$ 
D$@H
T$(E1
T$pL
T$pL
D$xL
@@WAUL
EXE1
@uUH
UXH)
t"IcW@H
EXM9
EXE1
H)P8H
D$(H
T$pL
\$`D
T$pD
IcO@L
McG0H
t$XL
AWAVAUATUSH
D$(H
8[]A\A]A^A_
T$ 1
RAWAVL
L$0L
D$(H
8[]A\A]A^A_
fffff.
AWAVAUATUSH
|$ H
A9\$(~3Hc
A9\$(I
x_Lc
([]A\A]A^A_
AWAVAUATI
C IcW(H
~5E1
G Ic
E9o(
HcT$
L94$
HcT$
L94$L
[]A\A]A^A_
WxHc
AWAVAUATUSH
WxHc
J H;
twH;
[]A\A]A^A_
B H;
t	H;
[]A\A]A^A_
re_exec.c
(skipped)
E_DEBUG_FLAGS
(i & 0x3F) == 3
    \%lu: %ld(%ld)..%ld%s
%4ld <%.*s%.*s%s%.*s>%*s|
Wide character (U+%lX) in %s
    \%lu: %ld(%ld)..%ld
../../inline.h
string
 and 
%s%s REx%s %s against %s
UTF-8 %s%s%s...
utf8
! is_utf8_pat
panic: Unexpected op %u
! reginfo->is_utf8_pat
not compiled under -Dr
startpos
prog
regmatch start
%3ld:%*s%s(%ld)
%*s  %sTRIE failed...%s
Infinite recursion in regex
rexi->data->what[n] == 'L'
push STACKINFO %d at %s:%d
PUSH
o->op_type == OP_NULL
o->op_targ == OP_LEAVE
o->op_type == OP_ENTER
  re EVAL PL_op=0x%lx
REGMARK
Matching embedded
next
cur_curlyx
%*s  trying longer...
%*s  %sBRANCH failed...%s
st->u.curlym.B
%lx %d
regexp memory corruption
%*s#%-3d %-10s %s
    %*spush %s%s%s%s%s
corrupted regexp pointers
st != yes_state
    %*spop (yes) %s%s%s%s%s
%sMatch successful!%s
%*s  %sfailed...%s
    %*spop %s%s%s%s%s
sv_err
sv_mrk
pop  STACKINFO %d at %s:%d
REGERROR
 Fail transition to 
 Charid:%3u CP:%4lx 
%sState: %4lx, word=%lx
 - legal
 - fail
 - accepting
No match.
panic: unknown regstclass %d
 at offset 
Found
Did not find
Contradicts
  String too short...
  Not at start...
  String too long...
  String not equal...
  %s %s substr %s%s%s
%ld (rx_origin now %ld)...
rx_origin <= last1
  %s %s substr %s%s
; giving up...
  looking for /^/m anchor
  Did not find /%s^%s/m...
  Could not match STCLASS...
  try at offset...
Matching
mg->mg_type == 'g'
!prog->nparens
prog->intflags & 0x00000100
corrupted regexp program
_pm_setre
%sChecking for float_real.%s
%sMatch failed%s
PL_valid_types_PVX[((svtype)((_svpvx)->sv_flags & 0xff)) & 0xf]
!((((_svpvx)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svpvx)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svpvx)->sv_flags & 0xff)) == SVt_PVLV))
!(((svtype)((_svpvx)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (_svpvx)->sv_any)->xio_flags & 64))
PL_valid_types_IVX[((svtype)((_svivx)->sv_flags & 0xff)) & 0xf]
!((((_svivx)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svivx)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svivx)->sv_flags & 0xff)) == SVt_PVLV))
rex=0x%lx offs=0x%lx: restoring capture indices to:
    \%lu: %s   ..-1 undeffing
PL_valid_types_PVX[((svtype)((_svcur)->sv_flags & 0xff)) & 0xf] || ((svtype)((_svcur)->sv_flags & 0xff)) == SVt_REGEXP
!((((_svcur)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svcur)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svcur)->sv_flags & 0xff)) == SVt_PVLV))
!(((svtype)((_svcur)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (_svcur)->sv_any)->xio_flags & 64))
!((((_svvalid)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVLV))
((svtype)((_svtail)->sv_flags & 0xff)) != SVt_PVAV
((svtype)((_svtail)->sv_flags & 0xff)) != SVt_PVHV
!(((_svtail)->sv_flags & (0x00008000|0x00004000)) == (0x00008000|0x00004000))
PL_valid_types_PVX[((svtype)((sv)->sv_flags & 0xff)) & 0xf] || ((svtype)((sv)->sv_flags & 0xff)) == SVt_REGEXP
!((((sv)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((sv)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((sv)->sv_flags & 0xff)) == SVt_PVLV))
!(((svtype)((sv)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (sv)->sv_any)->xio_flags & 64))
panic: isFOO_lc() has an unexpected character class '%d'
Malformed UTF-8 character (fatal)
Matched non-Unicode code point 0x%04lX against Unicode property; may not be portable
panic: paren_elems_to_push, %i < 0, maxopenparen: %i parenfloor: %i REGCP_PAREN_ELEMS: %u
panic: paren_elems_to_push offset %lu out of range (%lu-%ld)
rex=0x%lx offs=0x%lx: saving capture indices:
(((svtype)((re)->sv_flags & 0xff)) == SVt_REGEXP || ((re)->sv_flags & (0xff|0x00004000|0x00008000|0x01000000)) == (SVt_PVLV|0x01000000))
Copy on write: regexp capture, type %d
((prog->saved_copy)->sv_flags & 0x00004000)
min >= 0 && min <= max && min <= strend - strbeg
prev_prev_char_pos < prev_char_pos
((svtype)((sv)->sv_flags & 0xff)) == SVt_PVCV || ((svtype)((sv)->sv_flags & 0xff)) == SVt_PVFM
((svtype)((av)->sv_flags & 0xff)) == SVt_PVAV
panic: invalid PL_utf8_foldclosures structure
PL_valid_types_IVX[((svtype)((_svuvx)->sv_flags & 0xff)) & 0xf]
!((((_svuvx)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svuvx)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svuvx)->sv_flags & 0xff)) == SVt_PVLV))
(((struct regnode_string *)p)->str_len) == reginfo->is_utf8_pat ? PL_utf8skip[*(const U8*)((((struct regnode_string *)p)->string))] : 1
panic: regrepeat() node %d='%s' has an unexpected character class '%d'
panic: regrepeat() called with unrecognized node type %d='%s'
%*s  %s can match %ld times out of %ld...
  Setting an EVAL scope, savestack=%ld
((svtype)((_gvgp)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_gvgp)->sv_flags & 0xff)) == SVt_PVLV
((((_gvgp)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_gvgp)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_gvgp)->sv_flags & 0xff)) == SVt_PVLV))
%*s  %sfailed to match trie start class...%s
%*s  %smatched empty string...%s
%*s  %sState: %4lx Accepted: %c 
Charid:%3x CP:%4lx After State: %4lx%s
%*s  %sgot %ld possible matches%s
  Clearing an EVAL scope, savestack=%ld..%ld
(trie->wordinfo[st->u.trie.nextword].len - trie->prefixlen) >= st->u.trie.firstchars
%*s  %sTRIE matched word #%d, continuing%s
%*s  %sonly one match left, short-circuiting: #%d <%s>%s
Use of \b{} or \B{} for non-UTF-8 locale is wrong.  Assuming a UTF-8 locale
(U8*) locinput < (U8*) reginfo->strend
S_reghop3((U8*)locinput, -1, (U8*)(reginfo->strbeg)) < (U8*) reginfo->strend
Pattern subroutine nesting without pos change exceeded limit in regex
EVAL without pos change exceeded limit in regex
(*S_CvDEPTHp((const CV *)newcv))
!(((XPVCV*)({ void *_p = (((CV*)(cv))->sv_any); _p; }))->xcv_flags & 0x0008)
cx->cx_u.cx_subst.sbu_type & 0x10
Pad 0x%lx[0x%lx] set_cur    depth=%d
%s scope %ld (savestack=%ld) at %s:%d
JUMPLEVEL set catch %d => %d (for %p) at %s:%d
CX %ld %s %s (scope %ld,%ld) at %s:%d
o->op_type == OP_NEXTSTATE || o->op_type == OP_DBSTATE || (o->op_type == OP_NULL && ( o->op_targ == OP_NEXTSTATE || o->op_targ == OP_DBSTATE ) )
(reginfo->info_aux_eval->pos_magic)->mg_type == 'g'
((svtype)((_svmagic)->sv_flags & 0xff)) >= SVt_PVMG
PL_valid_types_NVX[((svtype)((_svnvx)->sv_flags & 0xff)) & 0xf]
!((((_svnvx)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svnvx)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svnvx)->sv_flags & 0xff)) == SVt_PVLV))
PL_valid_types_RV[((svtype)((_svrv)->sv_flags & 0xff)) & 0xf]
!((((_svrv)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVLV))
!(((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (_svrv)->sv_any)->xio_flags & 64))
((svtype)((_svstash)->sv_flags & 0xff)) >= SVt_PVMG
rex->engine && rex->engine->op_comp
((svtype)((_rerefcnt_inc)->sv_flags & 0xff)) == SVt_REGEXP
rex=0x%lx offs=0x%lx: \%lu: set %ld tmp; maxopenparen=%lu
rex=0x%lx offs=0x%lx: \%lu: set %ld..%ld
%*s  whilem: matched %ld out of %d..%d
%*s  whilem: empty match detected, trying continuation...
%swhilem: Detected a super-linear match, switching on caching%s...
%*s  whilem: (cache) already tried at this position...
%*s  whilem: failed, trying continuation...
Complex regular subexpression recursion limit (%d) exceeded
%*s  CURLYM now matched %ld times, len=%ld...
%*s  CURLYM trying tail with matches=%ld...
%*s  CURLYM Fast bail next target=0x%lX c1=0x%lX c2=0x%lX
%*s  CURLYM Fast bail next target=0x%X c1=0x%X c2=0x%X
st->u.curly.min <= st->u.curly.max
n == (32767) || locinput == li
%*s  EVAL trying tail ... %lx
%sMatch possible, but length=%ld is smaller than requested=%ld, failing!%s
%*s  %ssubpattern success...%s
%*s  %ssetting cutpoint to mark:%-p...%s
    %*spop (no final) %s%s%s%s%s
!result || locinput - reginfo->strbeg >= 0
(my_perl->Iutf8_swash_ptrs)[0]
Perl_swash_fetch(my_perl, (my_perl->Iutf8_swash_ptrs)[0],(U8 *) "\xE1\xBA\x9E",(1))
((c)->flags) == TRADITIONAL_BOUND
S_reghop3((U8*)s, -1, (U8*)(reginfo->strbeg)) < (U8*) reginfo->strend
(U8*) s < (U8*) reginfo->strend
panic: find_byclass() node %d='%s' has an unexpected character class '%d'
PL_valid_types_PVX[((svtype)((sv_points)->sv_flags & 0xff)) & 0xf] || ((svtype)((sv_points)->sv_flags & 0xff)) == SVt_REGEXP
!((((sv_points)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((sv_points)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((sv_points)->sv_flags & 0xff)) == SVt_PVLV))
!(((svtype)((sv_points)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (sv_points)->sv_any)->xio_flags & 64))
!((sv_points)->sv_flags & 0x00000800) || !(*({ SV *const _svrv = ((SV *)({ void *_p = (sv_points); _p; })); ((PL_valid_types_RV[((svtype)((_svrv)->sv_flags & 0xff)) & 0xf]) ? (void) (0) : __assert_fail ("PL_valid_types_RV[((svtype)((_svrv)->sv_flags & 0xff)) & 0xf]", "re_exec.c", 2446, __PRETTY_FUNCTION__)); ((!((((_svrv)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVLV))) ? (void) (0) : __assert_fail ("!((((_svrv)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVLV))", "re_exec.c", 2446, __PRETTY_FUNCTION__)); ((!(((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (_svrv)->sv_any)->xio_flags & 64))) ? (void) (0) : __assert_fail ("!(((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (_svrv)->sv_any)->xio_flags & 64))", "re_exec.c", 2446, __PRETTY_FUNCTION__)); &((_svrv)->sv_u.svu_rv); }))
 Scanning for legal start char...
Matches word #%lx at position %ld. Trying full pattern...
Pattern failed. Looking for new start point...
Intuit: trying to determine minimum start position...
prog->substrs->data[0].min_offset >= 0
prog->substrs->data[0].max_offset >= 0
prog->substrs->data[1].min_offset >= 0
prog->substrs->data[1].max_offset >= 0
prog->substrs->data[2].min_offset >= 0
prog->substrs->data[2].max_offset >= 0
! ( (prog->substrs->data[0].utf8_substr || prog->substrs->data[0].substr) && (prog->substrs->data[1].utf8_substr || prog->substrs->data[1].substr)) || (prog->substrs->data[1].min_offset >= prog->substrs->data[0].min_offset)
Can't match, because target string needs to be in UTF-8
((svtype)((_bmuseful)->sv_flags & 0xff)) >= SVt_PVIV
({ const SV *const _svvalid = (const SV*)(_bmuseful); if ((_svvalid)->sv_flags & 0x40000000 && !(((_svvalid)->sv_flags & (0x00008000|0x00004000)) == (0x00008000|0x00004000))) ((!((((_svvalid)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVLV))) ? (void) (0) : __assert_fail ("!((((_svvalid)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVLV))", "re_exec.c", 729, __PRETTY_FUNCTION__)); ((_svvalid)->sv_flags & 0x40000000); })
!((_bmuseful)->sv_flags & 0x00000100)
  substrs[%d]: min=%ld max=%ld end shift=%ld useful=%ld utf8=%d [%s]
  Looking for check substr at fixed offset %ld...
panic: end_shift: %ld pattern:
  At restart: rx_origin=%ld Check offset min: %ld Start shift: %ld End shift %ld Real end Shift: %ld
  doing 'check' fbm scan, [%ld..%ld] gave %ld
prog->minlen >= other->min_offset
strpos + start_shift <= check_at
((must)->sv_flags & 0x00000400)
  skipping 'other' fbm scan: %ld > %ld
  doing 'other' fbm scan, [%ld..%ld] gave %ld
; about to retry %s at offset %ld (rx_origin now %ld)...
 at offset %ld (rx_origin now %ld)...
  Check-only match: offset min:%ld max:%ld check_at:%ld rx_origin:%ld rx_origin-check_at:%ld strend:%ld
  Found /%s^%s/m, about to restart lookup for check-string with rx_origin %ld...
  Found /%s^%s/m, rescanning for anchored from offset %ld (rx_origin now %ld)...
  Found /%s^%s/m with rx_origin %ld...
  (multiline anchor test skipped)
  looking for class: start_shift: %ld check_at: %ld rx_origin: %ld endpos: %ld
  This position contradicts STCLASS...
rx_origin + start_shift <= check_at
  about to retry anchored at offset %ld (rx_origin now %ld)...
  about to look for /%s^%s/m starting at rx_origin %ld...
  about to look for %s substr starting at offset %ld (rx_origin now %ld)...
  By STCLASS: moving %ld --> %ld
  Does not contradict STCLASS...
({ const SV *const _svvalid = (const SV*)(_bmuseful); if ((_svvalid)->sv_flags & 0x40000000 && !(((_svvalid)->sv_flags & (0x00008000|0x00004000)) == (0x00008000|0x00004000))) ((!((((_svvalid)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVLV))) ? (void) (0) : __assert_fail ("!((((_svvalid)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVLV))", "re_exec.c", 1402, __PRETTY_FUNCTION__)); ((_svvalid)->sv_flags & 0x40000000); })
({ const SV *const _svvalid = (const SV*)(_bmuseful); if ((_svvalid)->sv_flags & 0x40000000 && !(((_svvalid)->sv_flags & (0x00008000|0x00004000)) == (0x00008000|0x00004000))) ((!((((_svvalid)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVLV))) ? (void) (0) : __assert_fail ("!((((_svvalid)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVLV))", "re_exec.c", 1412, __PRETTY_FUNCTION__)); ((_svvalid)->sv_flags & 0x40000000); })
({ const SV *const _svvalid = (const SV*)(_bmuseful); if ((_svvalid)->sv_flags & 0x40000000 && !(((_svvalid)->sv_flags & (0x00008000|0x00004000)) == (0x00008000|0x00004000))) ((!((((_svvalid)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVLV))) ? (void) (0) : __assert_fail ("!((((_svvalid)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVLV))", "re_exec.c", 1416, __PRETTY_FUNCTION__)); ((_svvalid)->sv_flags & 0x40000000); })
  ... Disabling check substring...
Intuit: %sSuccessfully guessed:%s match at offset %ld
({ const SV *const _svvalid = (const SV*)(_bmuseful); if ((_svvalid)->sv_flags & 0x40000000 && !(((_svvalid)->sv_flags & (0x00008000|0x00004000)) == (0x00008000|0x00004000))) ((!((((_svvalid)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVLV))) ? (void) (0) : __assert_fail ("!((((_svvalid)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svvalid)->sv_flags & 0xff)) == SVt_PVLV))", "re_exec.c", 1443, __PRETTY_FUNCTION__)); ((_svvalid)->sv_flags & 0x40000000); })
%sMatch rejected by optimizer%s
GPOS ganch set to strbeg[%ld]
fail: ganch-gofs before earliest possible start
Regex match can't succeed, so not even tried
matched, but failing for REXEC_FAIL_ON_UNDERFLOW
String too short [regexec_flags]...
rex=0x%lx saving  offs: orig=0x%lx new=0x%lx
startpos == reginfo->ganch - prog->gofs
Did not find anchored character...
Did not find %s substr %s%s...
Matching stclass %.*s against %s (%d bytes)
Contradicts stclass... [regexec_flags]
%sString shorter than required trailing substring, cannot match.%s
%sString does not contain required trailing substring, cannot match.%s
%sString does not contain required substring, cannot match.%s
rex=0x%lx freeing offs: 0x%lx
rex=0x%lx rolling back offs: freeing=0x%lx restoring=0x%lx
S_reg_set_capture_string
S_setup_eval_state
S_sv_or_pv_pos_u2b
S_MgBYTEPOS
my_regexec
S_CvDEPTHp
S_regcppush
S_regrepeat
S_av_top_index
S_setup_EXACTISH_ST_c1_c2
S_regcppop
S_reg_check_named_buff_matched
S_debug_start_match
S_sv_only_taint_gmagic
S_regmatch
S_regtry
S_dump_exec_pos
S_backup_one_WB
S_backup_one_SB
S_find_byclass
S_ReANY
S_to_byte_substr
S_to_utf8_substr
my_re_intuit_start
re_comp.c
*(d - 1) == '('
*(d - 1) == ')'
Overwriting end of array!
extra_size >= regarglen[op]
*(p - 1) == '['
dquote_static.c
*start == '\\'
**s == 'o'
Missing braces on \o{}
Missing right brace on \o{
Number with no digits
Non-octal character
\x{%04lX}
\x{%02X}
start <= end
\x{%02lX}-\x{%02lX}
cp_list
%16s
|%4d
|%4s
inst
|%*s%-4s
 - %s
reg_insert
reginsert
INF 
SF_FL_BEFORE_SEOL
SF_FL_BEFORE_MEOL
SF_IS_INF
SF_HAS_PAR
SF_IN_PAR
SF_HAS_EVAL
SCF_DO_SUBSTR
SCF_DO_STCLASS_AND
SCF_DO_STCLASS_OR
SCF_DO_STCLASS
SCF_WHILEM_VISITED_POS
SCF_TRIE_RESTUDY
SCF_SEEN_ACCEPT
SCF_TRIE_DOING_RESTUDY
SCF_IN_DEFINE
 Whilem_c: %ld Lcp: %ld %s
UTF8
NATIVE
tuuu
E_TRIE_MAXBUF
re_trie_maxbuff
*uc != 0xDF
revcharmap
%*s %4lX :
%5s| 
W%4x| 
%*s:%3X=%4lX | 
%*s| 
%*sChar : 
%*sState+-
--------
%.*s
%*s%4lX : 
%*lX
 (%4lX)
 (%4lX) W%4X
Base
Match
%*sChar : %-6s%-6s%-4s 
%*sword_info N:(prev,len)=
%*s#%4lX|
 W%4X
 @%4lX 
+%2lX[ 
   .
 %d:(%d,%d)
reg2Lanode
regarglen[op] == 2
reganode
regarglen[op] == 1
reg_node
regarglen[op] == 0
Use "%c" instead of "\c{"
Sequence "\c{" invalid
*s == '8' || *s == '9'
%d%lu%4p
don't 
%s in regex m/%d%lu%4p%s/
inline_invlist.c
! S__invlist_len(invlist)
oplist
s >= rx->subbeg
Regexp
[%d]
 {%d,%d}
[%d/%d]
 '%-p'
%s%ld
: FAIL
: ACCEPT - EMPTY STRING
%d[%+d]
:%-p
{loc}
%s][%s
{non-utf8-latin1-all}
{above_bitmap_all}
{outside bitmap}
{utf8}
%.*s...
{utf8 locale}
[illegal type=%d])
{gcb}
{sb}
{wb}
 /%s/
tail
~ %s (%d) %s %s
tsdy
~ %s (%d) -> %s
reg 
Unterminated verb pattern
COMMIT
PRUNE
SKIP
THEN
Sequence (?R) not terminated
Illegal pattern
Expecting close bracket
|    |
%*s%*s Recurse #%lu to %ld
Sequence (? incomplete
!(pRExC_state->opend)
lsbr
NADA
Unmatched (
Unmatched )
Junk on end of regexp
! (node_p && cp_count)
Missing braces on \N{}
Non-hex character
Missing right brace on \x{}
clas
# comment
Unmatched '%c' in POSIX class
*t == c
word
alph
spac
grap
asci
blan
cntr
alnu
lowe
uppe
digi
prin
punc
xdigit
posixcc[skip] == ':'
posixcc[skip+1] == ']'
Unmatched '[' in POSIX class
Zero length \N{}
Empty \%c{}
Missing right brace on \%c{}
%s%.*s%s
main
%s::%s
%cutf8::%d%lu%4p
**s == 'x'
Need exactly 3 octal digits
Invalid [] range "%d%lu%4p"
False [] range "%*.*s"
! invert
False [] range "%d%lu%4p"
(?[...]) not valid in locale
Syntax error in (?[...])
Expecting '(?flags:(?[...'
Unexpected ')'
fence_ptr
Unexpected character
top_ptr
\x{%lX}-\x{%lX}
atom
Unmatched [
Internal urp
Quantifier follows nothing
Reference to invalid group 0
Unterminated \g... pattern
Unterminated \g{...} pattern
Trailing \
len >= 127
Internal disaster
brnc
piec
Invalid quantifier in {,}
Nested quantifiers
 (%ld nodes)
%4ld:%*s%s
 (0)
 (FAIL)
 (%ld)
%*s%s 
(%lu)
(checking floating
(checking anchored
anchored %s%s at %ld 
anchored utf8 %s%s at %ld 
floating %s%s at %ld..%lu 
 noscan
 isall
stclass %s 
(MBOL)
(SBOL)
(GPOS)
GPOS:%lu 
plus 
implicit 
minlen %ld 
with eval 
r->extflags: 
UNICODE
LOCALE
ASCII-RESTRICTED
ASCII-MORE_RESTRICTED
UNKNOWN CHARACTER SET
%s[none-set]
r->intflags: 
%*sPeep>%3d: %s (%d)
%*sjoin>%3d: %s (%d)
%*sskip:>%3d: %s (%d)
%*smerg>%3d: %s (%d)
%*sfinl>%3d: %s (%d)
((scan)->type) == 66
%*sexpect IFTHEN>%3d: %s (%d)
%*sscan>%3d: %s (%d)
%*snext>%3d: %s (%d)
%*sBranch>%3d: %s (%d)
!and_withp
%*s%s%s
%*s- %s (%d)
 -> %s
	=> %s	
%*s- %s (%d) <SCAN FINISHED>
%*sfnew>%3d: %s (%d)
data
min >= 0
EXACTF_invlist
flags & 0x1000
%*sfend>%3d: %s (%d)
!frame
 for split
msixxn
Couldn't get
expr
!new_patternp
Precompiled pattern%s
%sCompiling REx%s %s
pat[s] == '('
!pRExC_state->runtime_code_qr
pat[src->start] == '('
pat[src->end] == ')'
Starting first pass (sizing)
Regexp out of space
Restudying
%*sfirst:>%3d: %s (%d)
, %lu
first at %ld
study_chunk
ENTER "study_chunk"
RExC_seen: 
REG_ZERO_LEN_SEEN 
REG_LOOKBEHIND_SEEN 
REG_GPOS_SEEN 
REG_CANY_SEEN 
REG_RECURSE_SEEN 
REG_TOP_LEVEL_BRANCHES_SEEN 
REG_VERBARG_SEEN 
REG_CUTGROUP_SEEN 
REG_RUN_ON_COMMENT_SEEN 
REG_UNFOLDED_MULTI_SEEN 
REG_GOSTART_SEEN 
LEAVE "study_chunk"
synthetic stclass "%s".
Multi Top Level
Final program:
Offsets: [%lu]
%lu:%lu[%lu] 
utf8 
%sFreeing REx:%s %s
ri->regstclass
panic: regfree data code '%c'
[:alpha:]
[:^alpha:]
[:lower:]
[:^lower:]
[:upper:]
[:^upper:]
[:punct:]
[:^punct:]
[:print:]
[:^print:]
[:alnum:]
[:^alnum:]
[:graph:]
[:^graph:]
[:cased:]
[:^cased:]
[:blank:]
[:^blank:]
[:xdigit:]
[:^xdigit:]
[:cntrl:]
[:^cntrl:]
[:ascii:]
[:^ascii:]
UTF8 mismatch! Converting to utf8 for resizing and compile
panic: reg_node overrun trying to emit %d, %p>=%p
%s:%d: (op %s) %s %lu (len %lu) (max %lu).
** (%d) offset of node %d is %d.
value of node is %d in Offset macro
(pRExC_state->parse) <= (pRExC_state->end)
Group name must start with a non-digit word character
panic: no svname in reg_scan_name
Reference to nonexistent named group
panic: bad flag %lx in reg_scan_name
((! ((((sizeof(cp) == 1) || !(((unsigned long)(cp)) & ~0xFF))) ? (_Bool)1 : (_Bool)0)) || (PL_charclass[(U8) (cp)] & (1U << (19))))
Perl folding rules are not up-to-date for 0x%02X; please use the perlbug utility to report; in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
Non-octal character '%c'.  Resolved as "\o{%.*s}"
( (*uv) < 0x80 ? 1 : (*uv) < 0x800 ? 2 : (*uv) < 0x10000 ? 3 : (*uv) < 0x200000 ? 4 : (*uv) < 0x4000000 ? 5 : (*uv) < 0x80000000 ? 6 : (*uv) < 0x1000000000UL ? 7 : 13 ) < *s - start
! (((node)->flags) & (0x02 |0x20))
((node)->flags) & (0x02 |0x20|0x04)
%s(%d): (op %s) %s copy %lu -> %lu (max %lu).
** (%d) size of node %d is %d.
value of node is %d in Length macro
%s(%d): (op %s) %s %lu <- %lu (max %lu).
PL_valid_types_PVX[((svtype)((data->last_found)->sv_flags & 0xff)) & 0xf] || ((svtype)((data->last_found)->sv_flags & 0xff)) == SVt_REGEXP
!((((data->last_found)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((data->last_found)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((data->last_found)->sv_flags & 0xff)) == SVt_PVLV))
!(((svtype)((data->last_found)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (data->last_found)->sv_any)->xio_flags & 64))
%*scommit: Pos:%ld/%ld Flags: 0x%lX
Last:'%s' %ld:%ld/%ld %sFixed:'%s' @ %ld %sFloat: '%s' @ %ld/%ld
panic! In trie construction, unknown node type %u %s
%*smake_trie start==%d, first==%d, last==%d, tail==%d depth=%d
PL_valid_types_PVX[((svtype)((zlopp)->sv_flags & 0xff)) & 0xf] || ((svtype)((zlopp)->sv_flags & 0xff)) == SVt_REGEXP
!((((zlopp)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((zlopp)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((zlopp)->sv_flags & 0xff)) == SVt_PVLV))
!(((svtype)((zlopp)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (zlopp)->sv_any)->xio_flags & 64))
!((zlopp)->sv_flags & 0x00000800) || !(*({ SV *const _svrv = ((SV *)({ void *_p = (zlopp); _p; })); ((PL_valid_types_RV[((svtype)((_svrv)->sv_flags & 0xff)) & 0xf]) ? (void) (0) : __assert_fail ("PL_valid_types_RV[((svtype)((_svrv)->sv_flags & 0xff)) & 0xf]", "re_comp.c", 2333, __PRETTY_FUNCTION__)); ((!((((_svrv)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVLV))) ? (void) (0) : __assert_fail ("!((((_svrv)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVLV))", "re_comp.c", 2333, __PRETTY_FUNCTION__)); ((!(((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (_svrv)->sv_any)->xio_flags & 64))) ? (void) (0) : __assert_fail ("!(((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (_svrv)->sv_any)->xio_flags & 64))", "re_comp.c", 2333, __PRETTY_FUNCTION__)); &((_svrv)->sv_u.svu_rv); }))
!((zlopp)->sv_flags & 0x00000800) || !(*({ SV *const _svrv = ((SV *)({ void *_p = (zlopp); _p; })); ((PL_valid_types_RV[((svtype)((_svrv)->sv_flags & 0xff)) & 0xf]) ? (void) (0) : __assert_fail ("PL_valid_types_RV[((svtype)((_svrv)->sv_flags & 0xff)) & 0xf]", "re_comp.c", 2338, __PRETTY_FUNCTION__)); ((!((((_svrv)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVLV))) ? (void) (0) : __assert_fail ("!((((_svrv)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVLV))", "re_comp.c", 2338, __PRETTY_FUNCTION__)); ((!(((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (_svrv)->sv_any)->xio_flags & 64))) ? (void) (0) : __assert_fail ("!(((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (_svrv)->sv_any)->xio_flags & 64))", "re_comp.c", 2338, __PRETTY_FUNCTION__)); &((_svrv)->sv_u.svu_rv); }))
(sizeof(uvc) == 1) || !(((unsigned long)(uvc)) & ~0x7FF)
error creating/fetching widecharmap entry for 0x%lX
!((zlopp)->sv_flags & 0x00000800) || !(*({ SV *const _svrv = ((SV *)({ void *_p = (zlopp); _p; })); ((PL_valid_types_RV[((svtype)((_svrv)->sv_flags & 0xff)) & 0xf]) ? (void) (0) : __assert_fail ("PL_valid_types_RV[((svtype)((_svrv)->sv_flags & 0xff)) & 0xf]", "re_comp.c", 2377, __PRETTY_FUNCTION__)); ((!((((_svrv)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVLV))) ? (void) (0) : __assert_fail ("!((((_svrv)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVLV))", "re_comp.c", 2377, __PRETTY_FUNCTION__)); ((!(((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (_svrv)->sv_any)->xio_flags & 64))) ? (void) (0) : __assert_fail ("!(((svtype)((_svrv)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (_svrv)->sv_any)->xio_flags & 64))", "re_comp.c", 2377, __PRETTY_FUNCTION__)); &((_svrv)->sv_u.svu_rv); }))
%*sTRIE(%s): W:%d C:%d Uq:%d Min:%d Max:%d
%*sCompiling trie using list compiler
panic! In trie construction, no char mapping for %ld
%*sState :Word | Transition Data
%*s%s
------:-----+-----------------
%*sCompiling trie using table compiler
%*sAlloc: %d Orig: %ld elements, Final:%ld. Savings of %%%5.2f
%*sStatecount:%lx Lasttrans:%lx
%*sMJD offset:%lu MJD length:%lu
%*sNew Start State=%lu Class: [
%*sPrefix State: %lu Idx:%lu Char='%s'
%*sState|-----------------------
(((ssc)->type) == 19 && ((ssc)->next_off) == 1)
Character following "\c" must be printable ASCII
"\c%c" is more clearly written simply as "%s"
'%.*s' resolved to '\o{%.*s}%c'
Regexp modifier "%c" may appear a maximum of twice
Regexp modifier "%c" may not appear twice
Regexp modifiers "%c" and "%c" are mutually exclusive
Regexp modifier "%c" may not appear after the "-"
(! ((pRExC_state->emit) == (regnode *) & (pRExC_state->emit_dummy)))
Useless (%s%c) - %suse /%c modifier in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
Useless (%sc) - %suse /gc modifier in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
Useless use of (?-p) in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
Having more than one /%c regexp modifier is deprecated
Sequence (%d%lu%4p...) not recognized
((svtype)((invlist)->sv_flags & 0xff)) == SVt_INVLIST
Sequence (?#... not terminated
0 == *((*({ SV *const _svpvx = ((SV *)({ void *_p = (invlist); _p; })); ((PL_valid_types_PVX[((svtype)((_svpvx)->sv_flags & 0xff)) & 0xf]) ? (void) (0) : __assert_fail ("PL_valid_types_PVX[((svtype)((_svpvx)->sv_flags & 0xff)) & 0xf]", "inline_invlist.c", 76, __PRETTY_FUNCTION__)); ((!((((_svpvx)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svpvx)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svpvx)->sv_flags & 0xff)) == SVt_PVLV))) ? (void) (0) : __assert_fail ("!((((_svpvx)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svpvx)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svpvx)->sv_flags & 0xff)) == SVt_PVLV))", "inline_invlist.c", 76, __PRETTY_FUNCTION__)); ((!(((svtype)((_svpvx)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (_svpvx)->sv_any)->xio_flags & 64))) ? (void) (0) : __assert_fail ("!(((svtype)((_svpvx)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (_svpvx)->sv_any)->xio_flags & 64))", "inline_invlist.c", 76, __PRETTY_FUNCTION__)); &((_svpvx)->sv_u.svu_pv); })))
PL_valid_types_PVX[((svtype)((invlist)->sv_flags & 0xff)) & 0xf] || ((svtype)((invlist)->sv_flags & 0xff)) == SVt_REGEXP
((XPV*) (invlist)->sv_any)->xpv_len_u.xpvlenu_len == 0 || (*({ const SV *const _svcur = (const SV *)(invlist); ((PL_valid_types_PVX[((svtype)((_svcur)->sv_flags & 0xff)) & 0xf] || ((svtype)((_svcur)->sv_flags & 0xff)) == SVt_REGEXP) ? (void) (0) : __assert_fail ("PL_valid_types_PVX[((svtype)((_svcur)->sv_flags & 0xff)) & 0xf] || ((svtype)((_svcur)->sv_flags & 0xff)) == SVt_REGEXP", "re_comp.c", 8037, __PRETTY_FUNCTION__)); ((!((((_svcur)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svcur)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svcur)->sv_flags & 0xff)) == SVt_PVLV))) ? (void) (0) : __assert_fail ("!((((_svcur)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((_svcur)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((_svcur)->sv_flags & 0xff)) == SVt_PVLV))", "re_comp.c", 8037, __PRETTY_FUNCTION__)); ((!(((svtype)((_svcur)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (_svcur)->sv_any)->xio_flags & 64))) ? (void) (0) : __assert_fail ("!(((svtype)((_svcur)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (_svcur)->sv_any)->xio_flags & 64))", "re_comp.c", 8037, __PRETTY_FUNCTION__)); &(((XPV*) ({ void *_p = ((_svcur)->sv_any); _p; }))->xpv_cur); })) <= ((XPV*) (invlist)->sv_any)->xpv_len_u.xpvlenu_len
(pRExC_state->rxi)->data->what[n] == 's'
panic: attempting to append to an inversion list, but wasn't at the end of the list, final=%lu, start=%lu, match=%c
i % 2 != 0 || ! (((regnode_charclass_posixl*) ((regnode_charclass_posixl*) and_with))->classflags & (1U << (i))) || ! (((regnode_charclass_posixl*) ((regnode_charclass_posixl*) and_with))->classflags & (1U << (i + 1)))
PL_regkind[((node)->type)] == 19
! (((ssc)->flags) & ~(0x10|0x02))
! (((ssc)->flags) & (0x04 | 0x08)) || (pRExC_state->contains_locale)
oplist->op_type == OP_PADAV || oplist->op_type == OP_RV2AV
n < pRExC_state->num_code_blocks
Overloaded qr did not return a REGEXP
panic: Unknown flags %d in named_buff_iter
panic: Unknown flags %d in named_buff_scalar
panic: Unknown flags %d in named_buff
(STRLEN)rx->sublen >= (STRLEN)((s - rx->subbeg) + i)
((svtype)((sv)->sv_flags & 0xff)) >= SVt_PVMG
Corrupted regexp opcode %d > %d
<S:%lu/%ld W:%lu L:%lu/%lu C:%lu/%lu>
~ attach to %s (%ld) offset to %ld
In '(*VERB...)', the '(' and '*' must be adjacent
Unterminated verb pattern argument
Unknown verb pattern '%d%lu%4p'
Verb pattern '%.*s' may not have an argument
Verb pattern '%.*s' has a mandatory argument
In '(?...)', the '(' and '?' must be adjacent
Sequence %.3s... not terminated
Sequence (%.*s...) not recognized
Sequence (?%c... not terminated
panic: reg_scan_name returned NULL
panic: paren_name hash element allocation failed
PL_valid_types_PVX[((svtype)((sv_dat)->sv_flags & 0xff)) & 0xf] || ((svtype)((sv_dat)->sv_flags & 0xff)) == SVt_REGEXP
!((((sv_dat)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((sv_dat)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((sv_dat)->sv_flags & 0xff)) == SVt_PVLV))
!(((svtype)((sv_dat)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (sv_dat)->sv_any)->xio_flags & 64))
PL_valid_types_IV_set[((svtype)((sv_dat)->sv_flags & 0xff)) & 0xf]
Sequence (?%c...) not implemented
Sequence (?&... not terminated
Reference to nonexistent group
panic: Sequence (?{...}): no code block found
Eval-group not allowed at runtime, use re 'eval'
Sequence (?(%c... not terminated
Switch condition not recognized
panic: regbranch returned NULL, flags=%#lx in regex m/%d%lu%4p%s/
(?(DEFINE)....) does not allow branches
Switch (?(condition)... not terminated
Switch (?(condition)... contains too many branches
Unknown switch condition (?(...))
%*s%*s Setting open paren #%ld to %d
%*s%*s Setting close paren #%ld to %d
~ tying lastbr %s (%ld) to ender %s (%ld) offset %ld
~ converting ret %s (%ld) to ender %s (%ld) offset %ld
((node_p) ? (_Bool)1 : (_Bool)0) ^ ((code_point_p) ? (_Bool)1 : (_Bool)0)
\N{NAME} must be resolved by the lexer
Invalid hexadecimal number in \N{U+...}
panic: reg returned NULL to grok_bslash_N, flags=%#lx in regex m/%d%lu%4p%s/
Use \x{...} for more than two hex characters
POSIX syntax [%c %c] belongs inside character classes in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
POSIX class [:%d%lu%4p:] unknown
POSIX syntax [%c %c] is reserved for future extensions
panic: grok_bslash_N set RESTART_UTF8
\N in a character class must be a named character: \N{...}
Ignoring zero length \N{} in character class in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
\N{} in inverted character class or as a range end-point is restricted to one character
Using just the first character returned by \N{} in character class in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
Property '%d%lu%4p' is unknown
Invalid escape in the specified encoding
Invalid escape in the specified encoding in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
Unrecognized escape \%c in character class
Unrecognized escape \%c in character class passed through in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
False [] range "%d%lu%4p" in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
namedclass == (((((15) * 2)))+2) || namedclass == (((((15) * 2)))+3)
False [] range "%*.*s" in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
Both or neither range ends should be Unicode in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
Ranges of ASCII printables should be some subset of "0-9", "A-Z", or "a-z" in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
! (! ((index_start) & 1)) || (S_invlist_array((my_perl->IXPosix_ptrs)[1])[index_start+1] - S_invlist_array((my_perl->IXPosix_ptrs)[1])[index_start] == 10) || (S_invlist_array((my_perl->IXPosix_ptrs)[1])[index_start+1] - S_invlist_array((my_perl->IXPosix_ptrs)[1])[index_start] == 11 && S_invlist_array((my_perl->IXPosix_ptrs)[1])[index_start] == 0x19D0)
Ranges of digits should be from the same group of 10 in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
"%.*s" is more clearly written simply as "%s" in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
panic: regclass returned NULL to handle_sets, flags=%#lx in regex m/%d%lu%4p%s/
The regex_sets feature is experimental in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
panic: Read past end of '(?[ ])'
(pRExC_state->parse) < (pRExC_state->end) && ((int)*(const U8*)((pRExC_state->parse))) == ')'
Unexpected '(' with no preceding operator
(! ((current)->sv_flags & 0x00000100))
Unexpected binary operator '%c' with no preceding operand
(! ((lhs)->sv_flags & 0x00000100))
(! ((rhs)->sv_flags & 0x00000100))
Operand with no preceding operator
Incomplete expression within '(?[ ])'
panic: regclass returned NULL to regatom, flags=%#lx in regex m/%d%lu%4p%s/
panic: reg returned NULL to regatom, flags=%#lx in regex m/%d%lu%4p%s/
\C is deprecated in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
'%d%lu%4p' is an unknown bound type
Using /u for '%.*s' instead of /%s in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
Sequence %.2s... not terminated
Reference to nonexistent or unclosed group
Unrecognized escape \%.*s passed through in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
Unescaped left brace in regex is deprecated, passed through in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
(((sizeof(ender) == 1) || !(((unsigned long)(ender)) & ~0xFF)) && ((PL_charclass[(U8) (ender)] & ((1U << (2)) | (1U << (14)))) == ((1U << (2)) | (1U << (14))))) || (((sizeof('s') == 1) || !(((unsigned long)('s')) & ~0xFF)) && ((PL_charclass[(U8) ('s')] & ((1U << (2)) | (1U << (14)))) == ((1U << (2)) | (1U << (14)))))
(((sizeof(*(s-1)) == 1) || !(((unsigned long)(*(s-1))) & ~0xFF)) && ((PL_charclass[(U8) (*(s-1))] & ((1U << (2)) | (1U << (14)))) == ((1U << (2)) | (1U << (14))))) || (((sizeof('s') == 1) || !(((unsigned long)('s')) & ~0xFF)) && ((PL_charclass[(U8) ('s')] & ((1U << (2)) | (1U << (14)))) == ((1U << (2)) | (1U << (14)))))
panic: regatom returned NULL, flags=%#lx in regex m/%d%lu%4p%s/
Quantifier in {,} bigger than %d
Quantifier {n,m} with n > m can't match in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
Useless use of greediness modifier '%c' in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
panic: regpiece returned NULL, flags=%#lx in regex m/%d%lu%4p%s/
%d%lu%4p matches null string many times in regex; marked by <-- HERE in m/%d%lu%4p <-- HERE %d%lu%4p/
floating utf8 %s%s at %ld..%lu 
%*sstudy_chunk stopparen=%ld recursed_count=%lu depth=%lu recursed_depth=%lu scan=%p last=%p
%*sPeep:Pos:%ld/%ld Flags: 0x%lX
(((sizeof(*s) == 1) || !(((unsigned long)(*s)) & ~0xFF)) && ((PL_charclass[(U8) (*s)] & ((1U << (2)) | (1U << (14)))) == ((1U << (2)) | (1U << (14))))) || (((sizeof('s') == 1) || !(((unsigned long)('s')) & ~0xFF)) && ((PL_charclass[(U8) ('s')] & ((1U << (2)) | (1U << (14)))) == ((1U << (2)) | (1U << (14)))))
(((sizeof(*(s+1)) == 1) || !(((unsigned long)(*(s+1))) & ~0xFF)) && ((PL_charclass[(U8) (*(s+1))] & ((1U << (2)) | (1U << (14)))) == ((1U << (2)) | (1U << (14))))) || (((sizeof('s') == 1) || !(((unsigned long)('s')) & ~0xFF)) && ((PL_charclass[(U8) ('s')] & ((1U << (2)) | (1U << (14)))) == ((1U << (2)) | (1U << (14)))))
Looking for TRIE'able sequences. Tail node is: 
(First==%d,Last==%d,Cur==%d,tt==%s,nt==%s,nnt==%s)
%*s- %s (%d) <NOTHING BRANCH SEQUENCE>
%*sset:Pos:%ld/%ld Flags: 0x%lX
%*sinf:Pos:%ld/%ld Flags: 0x%lX
%*sframe-new:Pos:%ld/%ld Flags: 0x%lX
Quantifier unexpected on zero-length expression in regex m/%d%lu%4p/
PL_valid_types_PVX[((svtype)((last_str)->sv_flags & 0xff)) & 0xf] || ((svtype)((last_str)->sv_flags & 0xff)) == SVt_REGEXP
!((((last_str)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((last_str)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((last_str)->sv_flags & 0xff)) == SVt_PVLV))
!(((svtype)((last_str)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (last_str)->sv_any)->xio_flags & 64))
panic: unexpected varying REx opcode %d
panic: unexpected simple REx opcode %d
Variable length lookbehind not implemented
Lookbehind longer than %lu not implemented in regex m/%d%lu%4p%s/
%*sframe-end:Pos:%ld/%ld Flags: 0x%lX
%*spre-fin:Pos:%ld/%ld Flags: 0x%lX
%*spost-fin:Pos:%ld/%ld Flags: 0x%lX
Assembling pattern from %d elements%s
expr->op_type == OP_PUSHMARK || (expr->op_type == OP_NULL && expr->op_targ == OP_PUSHMARK) || expr->op_type == OP_PADRANGE
Eval-group in insecure regular expression
(pRExC_state->utf8) && ((qr)->sv_flags & 0x20000000)
%sre-parsing pattern for runtime code:%s %s
((qr_ref)->sv_flags & 0x00000800)
((svtype)((qr)->sv_flags & 0xff)) == SVt_REGEXP && (S_ReANY((const REGEXP *)((REGEXP*)qr))->engine)->op_comp
src->end < r2->code_blocks[i2].start
r1->code_blocks[i1].start > r2->code_blocks[i2].start
src->end < r1->code_blocks[i1].start
PL_valid_types_PVX[((svtype)((code_blocksv)->sv_flags & 0xff)) & 0xf]
!((((code_blocksv)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((code_blocksv)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((code_blocksv)->sv_flags & 0xff)) == SVt_PVLV))
!(((svtype)((code_blocksv)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (code_blocksv)->sv_any)->xio_flags & 64))
panic: reg returned NULL to re_op_compile for sizing pass, flags=%#lx
Required size %ld nodes
Starting second pass (creation)
(S_ReANY((const REGEXP *)(rx))->xpv_len_u.xpvlenu_pv - p) < 16
PL_valid_types_PVX[((svtype)((rx)->sv_flags & 0xff)) & 0xf] || ((svtype)((rx)->sv_flags & 0xff)) == SVt_REGEXP
!((((rx)->sv_flags & (0x00004000|0x00008000)) == 0x00008000) && (((svtype)((rx)->sv_flags & 0xff)) == SVt_PVGV || ((svtype)((rx)->sv_flags & 0xff)) == SVt_PVLV))
!(((svtype)((rx)->sv_flags & 0xff)) == SVt_PVIO && !(((XPVIO*) (rx)->sv_any)->xio_flags & 64))
%s %lu bytes for offset annotations.
panic: reg returned NULL to re_op_compile for generation pass, flags=%#lx
%*sStclass Failtable (%lu states): 0
REG_UNBOUNDED_QUANTIFIER_SEEN 
((char*)(my_perl->Iscopestack_name)[(my_perl->Iscopestack_ix)-1] == (char*)"study_chunk") || (!__extension__ ({ size_t __s1_len, __s2_len; (__builtin_constant_p ((my_perl->Iscopestack_name)[(my_perl->Iscopestack_ix)-1]) && __builtin_constant_p ("study_chunk") && (__s1_len = strlen ((my_perl->Iscopestack_name)[(my_perl->Iscopestack_ix)-1]), __s2_len = strlen ("study_chunk"), (!((size_t)(const void *)(((my_perl->Iscopestack_name)[(my_perl->Iscopestack_ix)-1]) + 1) - (size_t)(const void *)((my_perl->Iscopestack_name)[(my_perl->Iscopestack_ix)-1]) == 1) || __s1_len >= 4) && (!((size_t)(const void *)(("study_chunk") + 1) - (size_t)(const void *)("study_chunk") == 1) || __s2_len >= 4)) ? __builtin_strcmp ((my_perl->Iscopestack_name)[(my_perl->Iscopestack_ix)-1], "study_chunk") : (__builtin_constant_p ((my_perl->Iscopestack_name)[(my_perl->Iscopestack_ix)-1]) && ((size_t)(const void *)(((my_perl->Iscopestack_name)[(my_perl->Iscopestack_ix)-1]) + 1) - (size_t)(const void *)((my_perl->Iscopestack_name)[(my_perl->Iscopestack_ix)-1]) == 1) && (__s1_len = strlen ((my_perl->Iscopestack_name)[(my_perl->Iscopestack_ix)-1]), __s1_len < 4) ? (__builtin_constant_p ("study_chunk") && ((size_t)(const void *)(("study_chunk") + 1) - (size_t)(const void *)("study_chunk") == 1) ? __builtin_strcmp ((my_perl->Iscopestack_name)[(my_perl->Iscopestack_ix)-1], "study_chunk") : (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) ("study_chunk"); int __result = (((const unsigned char *) (const char *) ((my_perl->Iscopestack_name)[(my_perl->Iscopestack_ix)-1]))[0] - __s2[0]); if (__s1_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) ((my_perl->Iscopestack_name)[(my_perl->Iscopestack_ix)-1]))[1] - __s2[1]); if (__s1_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) ((my_perl->Iscopestack_name)[(my_perl->Iscopestack_ix)-1]))[2] - __s2[2]); if (__s1_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) ((my_perl->Iscopestack_name)[(my_perl->Iscopestack_ix)-1]))[3] - __s2[3]); } } __result; }))) : (__builtin_constant_p ("study_chunk") && ((size_t)(const void *)(("study_chunk") + 1) - (size_t)(const void *)("study_chunk") == 1) && (__s2_len = strlen ("study_chunk"), __s2_len < 4) ? (__builtin_constant_p ((my_perl->Iscopestack_name)[(my_perl->Iscopestack_ix)-1]) && ((size_t)(const void *)(((my_perl->Iscopestack_name)[(my_perl->Iscopestack_ix)-1]) + 1) - (size_t)(const void *)((my_perl->Iscopestack_name)[(my_perl->Iscopestack_ix)-1]) == 1) ? __builtin_strcmp ((my_perl->Iscopestack_name)[(my_perl->Iscopestack_ix)-1], "study_chunk") : (- (__extension__ ({ const unsigned char *__s2 = (const unsigned char *) (const char *) ((my_perl->Iscopestack_name)[(my_perl->Iscopestack_ix)-1]); int __result = (((const unsigned char *) (const char *) ("study_chunk"))[0] - __s2[0]); if (__s2_len > 0 && __result == 0) { __result = (((const unsigned char *) (const char *) ("study_chunk"))[1] - __s2[1]); if (__s2_len > 1 && __result == 0) { __result = (((const unsigned char *) (const char *) ("study_chunk"))[2] - __s2[2]); if (__s2_len > 2 && __result == 0) __result = (((const unsigned char *) (const char *) ("study_chunk"))[3] - __s2[3]); } } __result; })))) : __builtin_strcmp ((my_perl->Iscopestack_name)[(my_perl->Iscopestack_ix)-1], "study_chunk")))); }))
minlen: %ld r->minlen:%ld maxlen:%ld
study_chunk_recursed_count: %lu
%sUsing REx %ssubstr:%s "%s%.60s%s%s"
panic: re_dup unknown data code '%c'
my_regfree
my_re_intuit_string
S_put_range
my_regprop
S_dumpuntil
my_regdump
my_reg_numbered_buff_length
my_reg_numbered_buff_fetch
my_reg_named_buff_all
my_reg_named_buff_scalar
my_reg_named_buff_nextkey
my_reg_named_buff_firstkey
my_reg_named_buff_exists
my_reg_named_buff_fetch
S_ssc_finalize
S_ssc_is_cp_posixl_init
S_ssc_and
S_get_ANYOF_cp_list_for_ssc
S_ssc_or
S_ssc_union
S_ssc_clear_locale
S_ssc_intersection
S_invlist_clone
S_ssc_add_range
S__make_exactf_invlist
S_ssc_cp_and
S_dump_trie
S_dump_trie_interim_table
S_dump_trie_interim_list
S_make_trie
S_join_exact
S_study_chunk
S_invlist_set_len
S_invlist_extend
S__invlist_array_init
S_invlist_max
S_ssc_anything
S_setup_longest
S_scan_commit
S_construct_ahocorasick_from_trie
S_regtail_study
S_reg_node
S_reginsert
S_regtail
S_reganode
S_regatom
S_regpiece
S_regbranch
S_parse_lparen_question_flags
S_set_ANYOF_arg
S_populate_ANYOF_from_invlist
S_alloc_maybe_populate_EXACT
S_invlist_iterfinish
S__invlist_contains_cp
S_add_above_Latin1_folds
S_reg_recode
S_form_short_octal_warning
S_grok_bslash_x
S_grok_bslash_o
S_grok_bslash_N
S_regpposixcc
S_regclass
S_invlist_array
S_get_invlist_offset_addr
S__invlist_len
S_get_invlist_iter_addr
S_invlist_iterinit
S_av_top_index
S_regex_set_precedence
S_could_it_be_a_POSIX_class
S_handle_regex_sets
S_reg_scan_name
S_re_croak2
S_regnode_guts
S_reg2Lanode
=!<,>
S_reg
S_ReANY
get_regex_charset_name
S_pat_upgrade_to_utf8
S_compile_runtime_code
S_concat_pat
my_re_op_compile
re.c
re::install
re::regmust
S_ReANY
;*3$"
re.so.debug
7zXZ
5y~F]
?}Ra
&XN$
	UIa
oxhg
>IxK_
 d,w
fTn8
I!-8
J5-J
VlD~
zUGO
zs)S
s&=t
&APX
pYbC~
bBqN
OB4\"
_1!@
N>I|
kG}4
	|EU
Q]5`?:
&	`4
3GXO
_)N/
tkFS
s[jQL
Vtow
f@QO
&N(C
Vf@i
A	Yop
v6\X
N"4{
4sgQm4
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.bss
.gnu_debuglink
.gnu_debugdata
