P(41@
!A>@_
*HCP8N
{tLoPH]
gxOmY{#S
y&q"_
;{!U
]T~|
(1$r
7svS
__gmon_start__
_fini
__cxa_finalize
_Jv_RegisterClasses
nids_register_chksum_ctl
csum_partial
ip_fast_csum
ip_compute_csum
my_udp_check
my_tcp_check
ip_frag_exit
free
gettimeofday
ip_frag_init
calloc
nids_params
memcpy
test_malloc
stderr
fwrite
__memcpy_chk
ip_defrag_stub
ip_options_compile
nids_killtcp_seq
libnet_build_tcp
libnet_build_ipv4
libnet_write
nids_killtcp
raw_init
libnet_init
puts
__syslog_chk
inet_ntoa
__strcpy_chk
nids_warnings
__sprintf_chk
__strcat_chk
nids_dispatch
nids_pcap_handler
pcap_dispatch
g_async_queue_push
g_thread_create_full
nids_errbuf
__strncat_chk
pcap_geterr
g_async_queue_pop
g_thread_exit
nids_getfd
pcap_fileno
nids_exit
tcp_exit
scan_exit
usleep
g_async_queue_length
pcap_close
nids_run
pcap_loop
nids_init
pcap_compile
pcap_setfilter
pcap_datalink
nids_linkoffset
tcp_procs
tcp_init
scan_init
g_thread_init
g_async_queue_new
pcap_lookupdev
pcap_open_offline
openlog
pcap_open_live
__errno_location
strerror
set_all_promisc
process_icmp
process_tcp
nids_unregister_ip_frag
unregister_callback
nids_unregister_ip
nids_unregister_udp
nids_register_ip_frag
nids_register_ip
nids_register_udp
nids_tcp_timeouts
tcp_check_timeouts
nids_last_pcap_header
nids_last_pcap_data
g_async_queue_lock
g_async_queue_length_unlocked
g_async_queue_unlock
g_async_queue_push_unlocked
nids_next
pcap_next
nids_no_mem
detect_scan
nids_discard
init_hash
nids_free_tcp_stream
nids_unregister_tcp
nids_register_tcp
realloc
memmove
after
nids_find_tcp_stream
mkhash
find_stream
pause
__fprintf_chk
socket
ioctl
read
srand
libgthread-2.0.so.0
libnsl.so.1
libglib-2.0.so.0
librt.so.1
libnet_autobuild_ipv6
__snprintf_chk
libnet_build_ipv6_hbhopts
libnet_pblock_probe
libnet_pblock_append
libnet_pblock_delete
libnet_pblock_update
libnet_build_ipv6_destopts
libnet_build_ipv6_routing
libnet_build_ipv6_frag
libnet_build_ipv6
libnet_build_ipv4_options
libnet_pblock_find
memset
libnet_autobuild_ipv4
libnet_get_ipaddr4
libnet_pblock_setflags
libnet_pblock_record_ip_offset
libnet_pblock_swap
libnet_pblock_insert_before
libnet_build_tcp_options
libnet_stats
libnet_getfd
libnet_getdevice
libnet_getpacket_size
libnet_getpbuf_size
libnet_getpbuf
libnet_clear_packet
libnet_destroy
getuid
geteuid
__strdup
libnet_select_device
libnet_open_link
libnet_open_raw6
libnet_open_raw4
libnet_pblock_p2p
libnet_pblock_coalesce
libnet_do_checksum
libnet_pblock_new
libnet_close_raw6
libnet_close_raw4
setsockopt
getsockopt
libnet_hex_aton
__ctype_b_loc
__strtol_internal
libnet_get_ipaddr6
in6addr_error
strncpy
libnet_name2addr6
inet_pton
gethostbyname2
libnet_addr2name6_r
inet_ntop
gethostbyaddr
libnet_name2addr4
inet_addr
gethostbyname
libnet_addr2name4
libnet_addr2name4_r
libnet_write_raw_ipv6
sendto
libnet_write_raw_ipv4
libnet_write_link
libnet_close_link
libnet_get_hwaddr
snprintf
libnet_in_cksum
libnet_ip_check
libnet_toggle_checksum
libnet_check_iface
libnet_ifaddrlist
fopen
fgets
strchr
ferror
fclose
strlen
strncmp
libpcap.so.0.9
libpthread.so.0
libc.so.6
__stack_chk_fail
_edata
__bss_start
_end
libnids.so.1.21
GLIBC_2.1.3
GLIBC_2.4
GLIBC_2.1
GLIBC_2.3
GLIBC_2.3.4
GLIBC_2.0
v Iu
[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
F	:B	u
\[^_]
\[^_]
\[^_]
[^_]
[^_]
p^_]
L[^_]
[^_]
thre
ad: 
disp
atchf
Libn
ids 
not 
init
iali
[^_]
Libn
ids 
not 
init
iali
loopf
[^_]
Libn
ids 
not 
init
iali
thre
ad: 
Libn
ids 
not 
init
iali
[^_]
,[^_]
link
 typ
e un
knowf
<@t9
;BH~Y
thre
ad: 
Libn
ids 
not 
init
iali
nextf
,[^_]
;B(~
,[^_]
:Ga}
:Gb}
:Ga~
[^_]
[^_]
t19:tN;B
[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
tCs	
Aa8E
:Nb}
[^_]
[^_]
[^_]
[^_]
\[^_]
l[^_]
,[^_]
,[^_]
,[^_]
,[^_]
[^_]
[^_]
[^_]
[^_]
E0+B
,[^_]
,[^_]
,[^_]
,[^_]
,[^_]
u0+r
[^_]
F@card
shar
[^_]
[^_]
[^_]
,[^_]
[^_]
[^_]
0[^]
,[^_]
<[^_]
<[^_]
} t*
t_<.tX
t4<.t0
L[^_]
\[^_]
\[^_]
,[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
ip_frag_init
ip_evictor: memcount
ip_create
ip_frag_create
ip_defrag
ip_glue
ip_defrag_stub
%s, packet (apparently) from %s to %s
Murphy - you never should see this message !
Invalid IP fragment list: fragment over size
Max number of TCP streams reached
Too much data in TCP receive queue
%s,from %s:%hu to  %s:%hu
%s,from %s to %s
Scan from %s. Scanned ports: 
:%hu,
scan type: SYN
scan type: NULL
scan type: FIN
flags=0x%x
various flags
Unknown warning number ?
libnids
Oversized IP packet
Overlapping IP fragments
Invalid IP header
Source routed IP frame
Invalid TCP header
Invalid TCP flags
detect_scan
scan_init
tcp_init
add_tcp_closing_timeout
add2buf
gdb me ...
tcp_queue
test_malloc
Out of memory in %s.
/dev/urandom
%s(): not yet implemented
%s(): IP packet too large
%s(): payload inconsistency
%s(): options list is too large %d
%s(): IPv4 data pblock not found
libnet_autobuild_ipv6
libnet_build_ipv6_hbhopts
libnet_build_ipv6_destopts
libnet_build_ipv6_routing
libnet_build_ipv6_frag
libnet_build_ipv6
libnet_build_ipv4_options
libnet_build_ipv4
%s(): TCP data pblock not found
libnet_build_tcp_options
libnet_build_tcp
%s(): UID or EUID of 0 required
%s(): unsupported injection type
%s(): malloc(): %s
libnet_init
libnet_pblock_coalesce
libnet_pblock_append
libnet_pblock_find
libnet_pblock_new
libnet_pblock_probe
%s(): couldn't find protocol block
%s(): packet assembly cannot find a layer 2 header
%s(): packet assembly cannot find an IPv4 header
%s(): packet assembly cannot find an IPv6 header
%s(): suddenly the dungeon collapses -- you die
%s(): ptag refers to different type than expected (%d != %d)
%s(): can't resize pblock buffer: %s
%s(): memcpy would overflow buffer
%s(): SOCK_RAW allocation failed: %s
%s(): set SO_BROADCAST failed: %s
%s(): set IP_HDRINCL failed: %s
%s(): get SO_SNDBUF failed: %s
%s(): set SO_SNDBUF failed: %s
libnet_open_raw6
libnet_open_raw4
%s(): not yet Implemented
%s(): socket(): %s
%s(): ioctl(): %s
%s(): %s
%s(): invalid IPv6 address
%s(): %s
%s(): value greater than 255
%d.%d.%d.%d
%s(): expecting dots and decimals
libnet_get_ipaddr4
libnet_get_ipaddr6
libnet_name2addr6
libnet_name2addr4
%s(): %d bytes written (%s)
%s(): packet is too large (%d bytes)
%s(): unsuported injection type
libnet_write_raw_ipv6
libnet_write_raw_ipv4
libnet_write
libnet_get_hwaddr: can't figure out a device to use
libnet_write_link(): only %d bytes written (%s)
unknown physical layer type 0x%x
%s: set SO_BROADCAST failed: %s
socket: %s
ioctl: %s
SIOCGIFHWADDR: %s
libnet_open_link
%s(): header length can't be zero
%s(): can't compute GRE checksum (wrong flags_ver bits: 0x%x )
%s(): unsuported protocol %d
libnet_do_checksum
%s() socket: %s
%s() ioctl: %s
%s(): %s is down
%s(): socket error: %s
/proc/net/dev
%s(): ferror: %s
%s(): fopen(proc_dev_file) failed: %s
%s(): ioctl(SIOCGIFCONF) error: %s
%s(): SIOCGIFADDR: dev=%s: %s
%s(): strdup not enough memory
%s(): no network interface found
%s(): can't find interface for IP %s
libnet_select_device
libnet_ifaddrlist
libnet_check_iface
libnids.so.1.21.debug
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.ctors
.dtors
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.data
.bss
.gnu_debuglink
