__gmon_start__
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
free
PyArg_ParseTupleAndKeywords
PyEval_SaveThread
plugin_flush
PyEval_RestoreThread
PyMem_Free
_Py_NoneStruct
__stack_chk_fail
PyArg_ParseTuple
plugin_log
PyGILState_Ensure
PyString_FromString
PyObject_CallFunction
PyGILState_Release
PyErr_Print
PyErr_Clear
PyTuple_New
ConfigType
PyFloat_FromDouble
PyBool_FromLong
__snprintf_chk
PyObject_GetAttrString
PyUnicodeUCS4_AsEncodedString
PyString_AsString
PyCallable_Check
malloc
__strdup
plugin_register_complex_read
PyExc_TypeError
PyErr_SetString
plugin_register_flush
plugin_register_notification
plugin_register_write
plugin_register_log
PyExc_RuntimeError
PyErr_Format
plugin_unregister_flush
plugin_unregister_notification
plugin_unregister_write
plugin_unregister_read
plugin_unregister_log
strcmp
cpy_log_exception
PyErr_Fetch
PyErr_NormalizeException
PyObject_Str
PyObject_Size
strlen
PyObject_CallFunctionObjArgs
Py_Finalize
Py_IsInitialized
PyEval_InitThreads
sigemptyset
sigaddset
pthread_sigmask
plugin_thread_create
plugin_unregister_shutdown
sigaction
PyEval_AcquireThread
PyImport_ImportModule
stdin
PyRun_InteractiveLoopFlags
PyEval_ReleaseThread
raise
pause
strcasecmp
PyUnicodeUCS4_SetDefaultEncoding
cf_util_get_string
PyList_Append
Py_Initialize
PyType_Ready
PluginDataType
ValuesType
NotificationType
SignedType
PyLong_Type
UnsignedType
PySys_SetArgv
PyList_SetSlice
Py_InitModule4_64
PyModule_AddObject
PyModule_AddIntConstant
sstrncpy
PyList_New
PyInt_FromLong
PyList_SetItem
PyErr_Occurred
PyDict_New
meta_data_toc
meta_data_type
meta_data_get_string
PyDict_SetItemString
meta_data_get_signed_int
PyLong_FromLongLong
meta_data_get_unsigned_int
PyLong_FromUnsignedLongLong
meta_data_get_double
meta_data_get_boolean
_Py_TrueStruct
_Py_ZeroStruct
module_register
plugin_register_complex_config
plugin_register_init
plugin_register_shutdown
PyObject_Repr
PyString_Concat
plugin_get_ds
PyString_ConcatAndDel
PyDict_Size
PySequence_Size
plugin_dispatch_notification
hostname_g
cdtime
PyDict_Items
meta_data_create
PyList_Size
PyType_IsSubtype
PyLong_AsUnsignedLongLong
PyFloat_Type
PyFloat_AsDouble
meta_data_add_double
PyLong_AsLongLong
meta_data_add_signed_int
meta_data_add_boolean
PyNumber_Check
meta_data_add_string
PyNumber_Long
meta_data_add_unsigned_int
plugin_get_interval
PyNumber_Float
plugin_write
meta_data_destroy
plugin_dispatch_values
libpython2.7.so.1.0
libdl.so.2
libc.so.6
_edata
__bss_start
_end
python.so
GLIBC_2.4
GLIBC_2.2.5
GLIBC_2.3.4
="x 
fffff.
fffff.
D$81
D$0L
L$(H
D$$H
Hct$$H
T$0H
L$8dH3
[]A\A]
AWAVAUI
ATUH
5Ru 
Hc}(E1
[]A\A]A^A_
fffff.
[]A\
$tSI
[]A\
D$(L
L$ L
D$0H
D$8H
T$(H
t$0H
l$PH
D$0H
D$8H
D$8H
D$ I
L$@H
L$(L
D$ H
t$ H
l$0H
D$ H
D$(H
D$(H
[]A\A]
=io 
=Yo 
=qn 
L$(L
D$ H
l$0H
t$ H
D$ H
D$(H
D$ H
D$(H
[]A\
[]A\A]
ffff.
ffff.
=1k 
ffff.
=1k 
ffff.
=ak 
ffff.
ATUSH
[]A\A]A^A_
ffff.
ffff.
ffff.
AWAVI
AUATUSH
d$ H
D$(1
D$ M
D$ H
D$(dH3
8[]A\A]A^A_
|$ H
AWAVAUATUSH
0D9c(
0D9c(
([]A\A]A^A_
=x^ 
57^ 
[]A\A]
AUATUH
[]A\A]
AVAUI
ATUSH
D$x1
t$PH
D$OH
D$0H
D$pH
D$(H
D$hH
D$ H
D$`H
D$PH
D$PH
D$PH
T$XH
|$XH
D$PH
L$8H
L$8H
L$xdH3
[]A\A]A^A_
D$PH
=!T 
D$PH
D$PH
T$ H
D$PH
T$(H
D$PH
T$0H
D$PH
T(@1
fffff.
D$81
D$0L
L$ L
D$(H
D$ H
D$ H
D$(H
D$(H
D$0H
D$0H
L$8dH3
D$ H
|$ H
D$(H
|$(H
D$0H
|$0H
tHH;
[]A\
[]A\
D$XL
L$`H
D$@H
D$8H
D$xH
D$(H
D$pH
D$hH
|$`H
t$xH
t$hH
t$`H
t$pH
D$XH
T$`H
D$lL
D$XH
D$pH
D$PH
D$HH
D$8H
D$(H
D$xH
t$xH
D$pH
ffffff.
ATUSH
z*u(H
 []A\
ffff.
D$xL
D$XH
D$`H
D$PH
D$hH
D$HH
D$@H
D$0H
D$ H
D$pH
D$hH
D$pH
D$xH
D$pH
D$xH
D$`1
ATUSH
 u_H
 []A\
D$dH
D$dH
D$XH
D$hH
D$PH
D$pH
D$HH
D$xH
D$8H
D$(H
YD$hf
D$dH
D$pH
D$xH
[]A\
5Y6 
fff.
ATUSH
 []A\
ATUSH
[]A\
[]A\
ATUSH
[]A\
[]A\
AUATUSH
[]A\A]
[]A\A]
[]A\A]
AWAVAUATUSH
H;-W/ 
P0L9
[]A\A]A^A_
AWAVAUATI
localhosH
D$pH
D$xH
D$xH
D$hH
D$`H
D$XH
D$PH
D$@H
D$0H
D$ H
D$pH
|$pH
e@A9
D$pH
[]A\A]A^A_
AWAVAUATI
localhosH
D$xH
D$hH
D$pH
D$pH
D$XH
D$PH
D$xH
D$HH
D$@H
D$0H
D$ H
D$hH
|$hH
D$pH
l$@9
D$hH
[]A\A]A^A_
|$pL
D$HI
|etiet
NONO
python.%s
__module__
python.%p
O|dOet
O|Oet
NamelessException
__name__
shutdown callback
python
init callback
readline
interactive session init
<stdin>
python initialization
path
collectd
LOG_DEBUG
LOG_INFO
LOG_NOTICE
LOG_WARNING
LOG_ERROR
NOTIF_FAILURE
NOTIF_WARNING
NOTIF_OKAY
Interactive
Encoding
setting default encoding
LogTraces
traceback
format_exception
ModulePath
Import
importing module
Module
loading module
flush callback
notification callback
write callback
read callback
plugin
timeout
identifier
interval
name
debug
info
notice
warning
error
unregister_log
unregister_init
unregister_config
unregister_read
unregister_write
unregister_notification
unregister_flush
unregister_shutdown
callback needs a be a callable object.
This function needs a string or a callable object as its only parameter.
Unable to unregister %s callback '%s'.
Unhandled python exception in %s: %s: %s
python: Plugin loaded but not configured.
python: Error creating thread for interactive interpreter.
python: Interactive interpreter exited, stopping collectd ...
python plugin: Unable to convert "%s" to a python object.
python plugin: Unable to append "%s" to python module path.
python plugin: Error importing module "%s".
python plugin: Ignoring unknown config key "%s".
python plugin: Found a configuration for the "%s" plugin, but the plugin isn't loaded or didn't register a configuration callback.
cpy_write_callback: Unknown value type %d.
value building for write callback
>O|OOO
argument 1 must be str
<collectd.Config node 
<collectd.Config root node 
parent
values
children
collectd.Config
|etetetetetd
Dataset %s not found
|etetetetetetdi
(type=
,type_instance=
,plugin=
,plugin_instance=
,host=
,time=
|etOetetetetddO
,interval=
,values=
,meta=
type not set
,severity=
,message=
Cannot delete this attribute
building meta data
et|etOetetetetdiO
values must be list or tuple
unknown data type %d for %s
meta must be a dict
type
message
plugin_instance
type_instance
host
time
severity
meta
destination
dispatch
collectd.Unsigned
collectd.Signed
collectd.Notification
collectd.Values
collectd.PluginData
error dispatching notification, read the logs
type %s needs %d values, got %i
error dispatching values, read the logs
;*3$"
register_shutdown(callback[, data][, name]) -> identifier
Register a callback function for collectd shutdown.
'callback' is a callable object that will be called once collectd is
    shutting down.
'data' is an optional object that will be passed back to the callback
    function if it is called.
'name' is an optional identifier for this callback. The default name
    is 'python.<module>'.
    Every callback needs a unique identifier, so if you want to
    register this callback multiple time from the same module you need
    to specify a name here.
'identifier' is the full identifier assigned to this callback.
The callback function will be called with no parameters except for
    data if it was supplied.
register_flush(callback[, data][, name]) -> identifier
Register a callback function for flush messages.
'callback' is a callable object that will be called every time a plugin
    requests a flush for either this or all plugins.
'data' is an optional object that will be passed back to the callback
    function every time it is called.
'name' is an optional identifier for this callback. The default name
    is 'python.<module>'.
    Every callback needs a unique identifier, so if you want to
    register this callback multiple time from the same module you need
    to specify a name here.
'identifier' is the full identifier assigned to this callback.
The callback function will be called with two or three parameters:
timeout: Indicates that only data older than 'timeout' seconds is to
    be flushed.
id: Specifies which values are to be flushed.
data: The optional data parameter passed to the register function.
    If the parameter was omitted it will be omitted here, too.
register_notification(callback[, data][, name]) -> identifier
Register a callback function for notifications.
'callback' is a callable object that will be called every time a notification
    is dispatched.
'data' is an optional object that will be passed back to the callback
    function every time it is called.
'name' is an optional identifier for this callback. The default name
    is 'python.<module>'.
    Every callback needs a unique identifier, so if you want to
    register this callback multiple time from the same module you need
    to specify a name here.
'identifier' is the full identifier assigned to this callback.
The callback function will be called with one or two parameters:
notification: A copy of the notification that was dispatched.
data: The optional data parameter passed to the register function.
    If the parameter was omitted it will be omitted here, too.
register_write(callback[, data][, name]) -> identifier
Register a callback function to receive values dispatched by other plugins.
'callback' is a callable object that will be called every time a value
    is dispatched.
'data' is an optional object that will be passed back to the callback
    function every time it is called.
'name' is an optional identifier for this callback. The default name
    is 'python.<module>'.
    Every callback needs a unique identifier, so if you want to
    register this callback multiple time from the same module you need
    to specify a name here.
'identifier' is the full identifier assigned to this callback.
The callback function will be called with one or two parameters:
values: A Values object which is a copy of the dispatched values.
data: The optional data parameter passed to the register function.
    If the parameter was omitted it will be omitted here, too.
register_read(callback[, interval][, data][, name]) -> identifier
Register a callback function for reading data. It will just be called
in a fixed interval to signal that it's time to dispatch new values.
'callback' is a callable object that will be called every time something
    is logged.
'interval' is the number of seconds between between calls to the callback
    function. Full float precision is supported here.
'data' is an optional object that will be passed back to the callback
    function every time it is called.
'name' is an optional identifier for this callback. The default name
    is 'python.<module>'.
    Every callback needs a unique identifier, so if you want to
    register this callback multiple time from the same module you need
    to specify a name here.
'identifier' is the full identifier assigned to this callback.
The callback function will be called without parameters, except for
data if it was supplied.
register_config(callback[, data][, name]) -> identifier
Register a callback function for config file entries.
'callback' is a callable object that will be called for every config block.
'data' is an optional object that will be passed back to the callback
    function every time it is called.
'name' is an optional identifier for this callback. The default name
    is 'python.<module>'.
    Every callback needs a unique identifier, so if you want to
    register this callback multiple time from the same module you need
    to specify a name here.
'identifier' is the full identifier assigned to this callback.
The callback function will be called with one or two parameters:
config: A Config object.
data: The optional data parameter passed to the register function.
    If the parameter was omitted it will be omitted here, too.
register_init(callback[, data][, name]) -> identifier
Register a callback function that will be executed once after the config.
file has been read, all plugins heve been loaded and the collectd has
forked into the background.
'callback' is a callable object that will be executed.
'data' is an optional object that will be passed back to the callback
    function when it is called.
'name' is an optional identifier for this callback. The default name
    is 'python.<module>'.
    Every callback needs a unique identifier, so if you want to
    register this callback multiple time from the same module you need
    to specify a name here.
'identifier' is the full identifier assigned to this callback.
The callback function will be called without parameters, except for
data if it was supplied.
register_log(callback[, data][, name]) -> identifier
Register a callback function for log messages.
'callback' is a callable object that will be called every time something
    is logged.
'data' is an optional object that will be passed back to the callback
    function every time it is called.
'name' is an optional identifier for this callback. The default name
    is 'python.<module>'.
    Every callback needs a unique identifier, so if you want to
    register this callback multiple time from the same module you need
    to specify a name here.
'identifier' is the full identifier assigned to this callback.
The callback function will be called with two or three parameters:
severity: An integer that should be compared to the LOG_ constants.
message: The text to be logged.
data: The optional data parameter passed to the register function.
    If the parameter was omitted it will be omitted here, too.
Unregisters a callback. This function needs exactly one parameter either
the function to unregister or the callback identifier to unregister.
flush([plugin][, timeout][, identifier]) -> None
Flushes the cache of another plugin.
This function sends a string to all logging plugins.
This is a tuple of child nodes. For most nodes this will be
empty. If this node represents a block instead of a single line of the config
file it will contain all nodes in this block.
This is a tuple (which might be empty) of all value, ie words
following the keyword in any given line in the config file.
Every item in this tuple will be either a string or a float or a bool,
depending on the contents of the configuration file.
This is the keyword of this item, ie the first word of any
given line in the config file. It will always be a string.
This represents the parent of this node. On the root node
of the config tree it will be None.
This represents a piece of collectd's config file.
It is passed to scripts with config callbacks (see "register_config")
and is of little use if created somewhere else.
It has no methods beyond the bare minimum and only exists for its
data members
This is a long by another name. Use it in meta data dicts
to choose the way it is stored in the meta data.
This is a long by another name. Use it in meta data dicts
to choose the way it is stored in the meta data.
The Notification class is a wrapper around the collectd notification.
It can be used to notify other plugins about bad stuff happening. It works
similar to Values but has a severity and a message instead of interval
and time.
Notifications can be dispatched at any time and can be received with register_notification.
Some kind of description what's going on and why this Notification was generated.
The severity of this notification. Assign or compare to
NOTIF_FAILURE, NOTIF_WARNING or NOTIF_OKAY.
A Values object used for dispatching values to collectd and receiving values from write callbacks.
write([destination][, type][, values][, plugin_instance][, type_instance][, plugin][, host][, time][, interval]) -> None.  Dispatch a value list.
Write this instance to a single plugin or all plugins if 'destination' is obmitted.
This will bypass the main collectd process and all filtering and caching.
Other than that it works similar to 'dispatch'. In most cases 'dispatch' should be
used instead of 'write'.
dispatch([type][, values][, plugin_instance][, type_instance][, plugin][, host][, time][, interval]) -> None.  Dispatch a value list.
Dispatch this instance to the collectd process. The object has members
for each of the possible arguments for this method. For a detailed explanation
of these parameters see the member of the same same.
If you do not submit a parameter the value saved in its member will be submitted.
If you do provide a parameter it will be used instead, without altering the member.
These are the meta data for this Value object.
It has to be a dictionary of numbers, strings or bools. All keys must be
strings. int and long objects will be dispatched as signed integers unless
they are between 2**63 and 2**64-1, which will result in a unsigned integer.
You can force one of these storage classes by using the classes
collectd.Signed and collectd.Unsigned. A meta object received by a write
callback will always contain Signed or Unsigned objects.
These are the actual values that get dispatched to collectd.
It has to be a sequence (a tuple or list) of numbers.
The size of the sequence and the type of its content depend on the type
member your types.db file. For more information on this read the types.db
man page.
If the sequence does not have the correct size upon dispatch a RuntimeError
exception will be raised. If the content of the sequence is not a number,
a TypeError exception will be raised.
The interval is the timespan in seconds between two submits for
the same data source. This value has to be a positive integer, so you can't
submit more than one value per second. If this member is set to a
non-positive value, the default value as specified in the config file will
be used (default: 10).
If you submit values more often than the specified interval, the average
will be used. If you submit less values, your graphs will have gaps.
This is an internal class that is the base for Values
and Notification. It is pretty useless by itself and was therefore not
exported to the collectd module.
The name of the plugin that read the data. Setting this
member to an empty string will insert "python" upon dispatching.
The type of this value. This type has to be defined
in your types.db. Attempting to set it to any other value will
raise a TypeError exception.
Assigning a type is mandetory, calling dispatch without doing
so will raise a RuntimeError exception.
The hostname of the host this value was read from.
For dispatching this can be set to an empty string which means
the local hostname as defined in the collectd.conf.
This is the Unix timestap of the time this value was read.
For dispatching values this can be set to 0 which means "now".
This means the time the value is actually dispatched, not the time
it was set to 0.
python.so.debug
7zXZ
Y3N+
3lON
gCc=
`"(BX_
o+Da
SqT#
?J-g2X
 uu{
:R'z
'p(_
*2R .
l_A=
b1fcU
8.e<
d'pj
WV%B
;m$l
9HWn
X-Eo
3}ME2
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.data
.bss
.gnu_debuglink
.gnu_debugdata
