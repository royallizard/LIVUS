n@@D 
0q4m
`qOd
{1&/
__gmon_start__
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
jv_free
jq_util_input_get_current_line
jq_util_input_get_current_filename
jv_get_kind
jv_null
jv_number
jv_invalid_with_msg
jv_copy
jv_array_get
jv_number_value
jv_array
jv_array_append
jv_array_length
mktime
jv_string
__stack_chk_fail
stderr
jv_dumpf
jq_get_debug_cb
jq_get_input_cb
jv_invalid_has_msg
jv_string_explode
jv_false
jv_true
jv_string_sized
jv_object_set
jv_array_set
jv_dump_string_trunc
jv_kind_name
jv_string_fmt
jv_equal
jv_string_value
jv_string_length_bytes
OnigSyntaxPerl_NG
OnigEncodingUTF8
onig_new
onig_region_new
onig_search
jv_object
onig_foreach_name
onig_region_free
onig_free
jv_string_concat
onig_error_code_to_str
jq_get_jq_origin
jq_get_prog_origin
jq_get_lib_dirs
jq_halt
jv_invalid
strchr
jv_dump_string
strlen
jv_string_append_str
jv_string_append_buf
__assert_fail
jv_mem_calloc
memset
jv_cmp
jv_group
jv_sort
jv_string_length_codepoints
jv_object_length
jv_contains
jv_bool
jv_has
jv_delpaths
jv_getpath
jv_setpath
jv_string_indexes
jv_string_implode
jv_string_split
memcmp
jv_keys_unsorted
jv_keys
jv_parse
jv_parse_sized
jv_object_merge_recursive
jv_array_concat
jv_object_merge
lgamma_r
modf
frexp
ldexp
significand
scalbln
scalb
round
nexttoward
nextafter
nearbyint
logb
log1p
lgamma
fmod
fmin
fmax
fdim
expm1
exp10
erfc
drem
tgamma
sqrt
remainder
log2
log10
hypot
exp2
cbrt
atanh
atan2
atan
asinh
asin
acosh
acos
jq_parse_library
gettimeofday
localtime_r
strftime
gmtime_r
strptime
__ctype_b_loc
getenv
jv_load_file
__printf_chk
jv_object_get
putchar
jv_dump
puts
jv_mem_free
strcmp
jv_mem_alloc
strcpy
jv_object_has
jv_object_delete
jv_object_iter
jv_object_iter_key
jv_object_iter_next
jv_object_iter_valid
jv_identical
jv_mem_realloc
memmove
jv_array_slice
jq_report_error
jq_next
jv_nomem_handler
jv_get
jv_invalid_get_msg
jv_get_refcnt
jv_object_iter_value
jq_format_error
fwrite
__fprintf_chk
jq_init
jv_mem_alloc_unguarded
jq_set_error_cb
jq_get_error_cb
jq_set_nomem_handler
jq_start
jq_teardown
jq_compile_args
jq_compile
jq_set_attrs
jq_set_attr
jq_get_attr
jq_dump_disassembly
jq_set_input_cb
jq_set_debug_cb
jq_halted
jq_get_exit_code
jq_get_error_message
jv_string_hash
snprintf
fgets
rand
exit
jq_testsuite
stdin
fopen
perror
memcpy
jv_is_integer
jv_array_sized
jv_string_empty
jv_string_append_codepoint
jv_string_vfmt
__vsnprintf_chk
jv_string_slice
jv_array_indexes
jv_object_contains
jv_array_contains
strstr
__tls_get_addr
abort
malloc
jv_mem_calloc_unguarded
jv_mem_strdup
jv_mem_strdup_unguarded
jv_mem_uninit_setup
jv_mem_uninitialised
qsort
jv_set
__fxstat
fdopen
feof
ferror
fread
fclose
__errno_location
strerror
jv_parser_new
jv_parser_set_buf
jv_parser_next
jv_parser_free
jv_parser_remaining
__snprintf_chk
jq_set_colors
__strncpy_chk
strspn
stdout
jv_show
fflush
strncpy
strrchr
jq_realpath
__xstat
dirname
jq_parse
clearerr
memchr
getuid
getpwuid
pathconf
memmem
jq_util_input_init
jq_util_input_set_parser
jq_util_input_free
jq_util_input_add_input
jq_util_input_errors
jq_util_input_get_position
jq_util_input_next_input_cb
jq_util_input_next_input
jq_yy_flush_buffer
fileno
isatty
jq_yyget_extra
jq_yyget_lineno
jq_yyget_column
jq_yyget_in
jq_yyget_out
jq_yyget_leng
jq_yyget_text
jq_yyset_extra
jq_yyset_lineno
jq_yyset_column
jq_yyset_in
jq_yyset_out
jq_yyget_debug
jq_yyset_debug
jq_yyget_lval
jq_yyset_lval
jq_yyget_lloc
jq_yyset_lloc
jq_yyalloc
jq_yy_create_buffer
jq_yylex_init
jq_yylex_init_extra
jq_yyrealloc
jq_yyrestart
jq_yy_switch_to_buffer
jq_yy_scan_buffer
jq_yy_scan_bytes
jq_yy_scan_string
jq_yypush_buffer_state
jq_yylex
getc
jq_yyfree
jq_yy_delete_buffer
jq_yypop_buffer_state
jq_yylex_destroy
libm.so.6
libonig.so.5
libc.so.6
__environ
ld-linux-x86-64.so.2
libjq.so.1
GLIBC_2.3
GLIBC_2.23
GLIBC_2.29
GLIBC_2.2.5
GLIBC_2.14
GLIBC_2.4
GLIBC_2.3.4
u+UH
AUATUH
]A\A]
]A\A]
AUATI
[]A\A]A^
AVAUATSH
D$ H
D$PH
D$0H
L$0H
\$8H
D$@L
L$HH
T$PL
\$XH
L$(H
T$ H
[A\A]A^A_
D$81
D$(H
L$8dH3
H[]A\A]
A\A]A^
 [A\A]
ATUH
 []A\
AVAUI
]A\A]A^
]A\A]A^
[]A\A]
[]A\A]
[]A\
[]A\
[]A\
[]A\
[]A\
[]A\
AWAVAUATUSH
t$ H
H;\$
t$ H
H;\$
D$(L
[]A\A]A^A_
AVATI
]A\A^A_
AUATUSH
t$PL
L$xH
T$XH
|$xH
[]A\A]A^A_
|$xL
|$PH
l$xL
AXAY
D$hH
T$pL
|$XH
l$PL
t$@I
t$XH
T$pH
L$@1
T$ H
D$8I
T$HI
*+(H
t$HM
|$8H
D$8I
Hc8H
|$8L
D$8H
D$ H
D$ L
L$(L
D$ H
D$ L
L$(H
Jc<0H
t$HH
|$8L
t$pH
|$hH
D$hI
T$pHc
H;\$`t
|$PH
|$xH
D$hH
l$@E1
t$pH
|$hI
D$hH
D$hH
|$PH
|$xH
D94$
t$ H
|$PH
|$xH
t$ H
D$hH
D$hH
|$PH
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AWAVAUI
D$81
L$8dH3
[]A\A]A^A_
AVAUATI
l$@L
]A\A]A^A_
A]A^A_H
AVAUATUSL
D$(H
t$ H
T$(H
L$ L
h[]A\A]A^A_
l$ H
|$(H
|$(H
A\A]A^A_f
D$PH
|$@H
T$HH
\$ H
D$0I
D9|$
t$8H
D$H9D$L
|$@H
t$ H
D$PH
T$XH
h[]A\A]A^A_
t$8H
t$XH
|$PH
D$PH
AVATI
]A\A^A_
A]A^A_
]A\A]A^A_
ATUH
[]A\
AVAUATUSH
[]A\A]A^A_
A\A]
A\A]
AWAVAUATUSH
D$ H
t,HcT$
[]A\A]A^A_
[]A\A]A^A_
D$0H
D$(L
D$0H
L$8L
D9t$$
T$(H
T$0I
T$(L
D9t$
4*Hc
AVAUI
]A\A]A^A_
D$8H
|$HH
T$(I
l$PL
T$0L
t$@H
|$8L
D$8H
t$HH
T$(L
t$ H
l$XL
|$HL
t$(H
D$8H
T$@H
h[]A\A]A^A_
h[]A\A]A^A_
t([L
]A\A]A^
]A\A]A^
t([L
]A\A]A^
]A\A]A^
t$[L
]A\A]A^
A\A]A^
[]A\A]A^
A]A^!
AVATI
t$0L
]A\A^A_
AVATI
t$0L
A\A^A_
AWAVAUI
([]A\A]A^A_
[]A\A]
[]A\A]
[]A\A]A^A_
]A\A]A^A_
AVAUATI
t$@L
]A\A]A^A_
]A\A]A^A_
A]A^A_f
[]A\A]A^A_
<$H)
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
AUATI
]A\A]A^
[]A\A]A^
]A\A]A^
AVATI
]A\A^A_
]A\A^A_
ATUSH
\$`L
|$hH
[]A\A]A^A_
([]A\A]A^A_
]A\A]A^A_
([]A\A]A^A_
]A\A]A^A_
AVAUATI
l$@L
]A\A]A^A_
]A\A]A^A_
]A\A]A^A_
]A\A]A^A_
]A\A]A^A_
]A\A]A^A_
]A\A]A^A_
AUATUH
]A\A]A^
A\A]A^
AUATUH
]A\A]A^
A\A]A^
AVATI
]A\A^A_
(]A\A^A_
AUATI
l$@L
]A\A]A^
A\A]A^
]A\A]A^
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AUATI
l$@L
]A\A]A^
A\A]A^
]A\A]A^
AUATI
l$@L
]A\A]A^
A\A]A^
]A\A]A^
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AUATI
l$@L
]A\A]A^
A\A]A^
]A\A]A^
AUATI
l$@L
]A\A]A^
A\A]A^
]A\A]A^
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AUATI
l$@L
]A\A]A^
A\A]A^
]A\A]A^
AUATI
l$@L
]A\A]A^
A\A]A^
]A\A]A^
AUATI
l$@L
]A\A]A^
A\A]A^
]A\A]A^
AVAUATI
t$`H
\$hL
|$pL
([]A\A]A^A_
([]A\A]A^A_
AUATI
l$@L
]A\A]A^
A\A]A^
]A\A]A^
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AUATI
l$@L
]A\A]A^
A\A]A^
]A\A]A^
AUATI
l$@L
]A\A]A^
A\A]A^
]A\A]A^
AVATI
]A\A^A_
]A\A^A_
AUATI
l$@L
]A\A]A^
A\A]A^
]A\A]A^
AUATI
l$@L
]A\A]A^
A\A]A^
]A\A]A^
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AUATI
l$@L
]A\A]A^
A\A]A^
]A\A]A^
AUATI
l$@L
]A\A]A^
A\A]A^
]A\A]A^
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AUATI
l$@L
]A\A]A^
A\A]A^
]A\A]A^
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AUATI
l$@L
]A\A]A^
A\A]A^
]A\A]A^
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
AVATI
]A\A^A_
]A\A^A_
 []A\
D$X1
L$XdH3
h[]A\A]
l$ H
)D$ 
)D$0
)D$@
[A\A]A^A_]
D$X1
L$XdH3
h[]A\A]
l$ H
)D$ 
)D$0
)D$@
[A\A]A^A_]
D$X1
\$XdH3
h[]A\A]A^A_
\$ L
)D$0
)D$ 
)D$@H
 tWL
|$<o
HcT$0
D$4A
HcT$0
AWAVAUATI
T$pL
T$(H
D$0H
D$@1
D$P1
D$`H
D$`L
L$hH
L$XH
T$PH
L$HH
T$@H
L$8H
T$0H
L$(H
T$ H
T$pL
\$xA
[]A\A]A^A_
AVAUATUH
H9\$
([]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
A]A^A_
AWAVAUA
ATUSH
([]A\A]A^A_
tgATUH
AUATE1
H9kP
[]A\A]
ATE1
AUATUH
[]A\A]
CPH9
[]A\A]A^A_
9C`u
!tMH
AVAUI
A\A]A^
D$h1
D$xL
ATUH
D$XH
[]A\A]
D$XH
]A\A]A^
[]A\A]
]A\A]A^
AUATU
A\A]A^
HcD$
[]A\A]A^A_
AWAVAUATUSH
[]A\A]A^A_
AVAUI
ATUSH
D$(L
T$0H
[]A\A]A^A_
AVAUI
[]A\A]A^A_
AWAVAUATUSH
L$(H
D$0H
\$@H
T$XH
T$PL
\$XH
L$(H
T$ H
D$@H
D$@H
D$ H
T$ L
\$(H
D$@L
L$HH
T$@H
t$8H
|$0H
L$ L
D$@H
[]A\A]A^A_
AWAVAUI
A^A_
AUATH
A\A]A^A_
A\A]A^A_
AVAUI
A\A]A^
ATUSH
([]A\A]A^A_
AVAUI
ATUSH
([]A\A]A^A_
AVAUATUSH
A\A]A^
$t8H
AWAVAUI
ATUH
T$(H
D$0H
D$(M
L$0L
D$(I
T$0L
A\A]A^A_
$ufL
L$0H
T$(H
D$(I
]A\A]A^
AWAVAUI
A^A_
A\A]A^A_
A\A]A^A_
AUATUH
A\A]A^A_
A\A]A^A_
AWAVAUI
A\A]A^A_
A\A]A^A_
AWE1
AUATUSH
|$ H
t$8H
D$(H
T$0M
L$ H
D$`H
l$xM
l$81
oGh1
)D$p
|$pH
t$xA
L$hH
T$`H
D$`H
T$hH
t$0H
L$hH
|$(H
D$(H
T$0H
D$ L
D$ H
L$(H
L$0H
[]A\A]A^A_
D$ H
D$pH
T$xM
l$xM
l$xM
D$xI
l$xM
D$Pf
oL$p
l$Xtk
|$xL
t$HA
t$0H
|$(L
D$(H
|$8H
l$XM
t$HH
d$@I
|$LI
t$PI
<(H)
t$PH
\$XD
|$LL
d$@H
D$(I
t$0I
|$8H
D$(I
t$HH
AWAVAUATUSH
[]A\A]A^A_
[]A\A]A^A_
AWAVAUI
A]A^A_
([]A\A]A^A_
AVAUATUSH
T$0H
L$8dH
D$x1
t$(H
)D$PH
l$P1
'u6f.
D$PI
T$0H
L$8L
|$PH
D$PH
l$`H
|$PL
D$`H
|$`H
\$HL
|$`H
T$ L
|$`H
|$`H
|$`H
t$hL
d$@H
l$PM
|$PH
L$8H
T$0H
L$xdH3
[]A\A]A^A_
AVAUI
ATUH
L$HL
L$0L
\$8H
D$8L
t$0H
T$(H
D$8L
T$@L
\$HH
A]A^A_
AVAUATI
L$HL
D$@H
T$ L
D$0H
L$8H
T$@L
\$HH
D$0H
L$ H
L$(H
[]A\A]A^A_
ATUSL
([]A\A]A^A_
]A\A]
AWAVAUATI
[]A\A]A^A_
AVAUATUH
A]A^A_
AWAVAUI
A\A]A^A_
AWAVAUATUSH
L$ H
|$@H
t$@L
T$HL
D$(L
|$@H
t$HH
D$@H
d$@H
M9mP
M9mP
S8fA
D$<H
l$@M
t$(A
|$@D
t$HH
D$ H
D$<H
X[]A\A]A^A_
L9l$H
M9mP
}XfA
|$ H
|$ H
T$ J
T$0H
T$0H
L$0fB
L$0H
 u=H
T$0H
T$0H
L$(f
d$@H
|$XH
l$xI
M9mP
t$hH
T$pH
D$8L
L$@H
D$LZ1
D$hI
AWAVAUM
L$ H
T$(H
D$H1
D$8L
T$@H
D$8PL
\$0H
T$ L
|$0H
D$(H
\$HdH3
X[]A\A]A^A_
D$(H
D$0H
A9\$8
$IcD$
IcT$
[]A\
O8HcWHH
w;HcI
HcGHH
AUATUSH
HcoH
[]A\A]
HcSHI
[]A\A]
s8Hc
6HcWHH
9F8~4H
AWAVI
[]A\A]A^A_
AWAVI
[]A\A]A^A_
[]A\A]A^A_
AVAUI
U8HcD$
E9|$
~#E1
E;l$
([]A\A]A^A_
w@Hc
AVAUI
;k@|-H
S8Hc
[]A\A]A^
AUATSHcOLH
HcKLH
[A\A]
AUATUSH
HcOLH
HcSLH
[]A\A]
GLH	
AWAVI
AUATI
D;o@|tH
k8Ic
[]A\A]A^A_
AVAUI
t$PL
[]A\A]A^A_
[]A\A]A^A_
AUATUSH
HcGD;GPu 
HcCD9CPt&9CLu
HcCD9CPu
HcSPH
;CDu
[]A\A]
]A\A]
HcC@H
AWAVI
AUATUSH
v0E1
[]A\A]A^A_
o$$L
A9NL
D$ H
D$ L
L$(H
D$@H
T$HfA
\$PH
vpE1
fhE1
v0E1
IcNLE1
E8Lc
F8Lcl
F8Ncl(
T$ L
o,$A
t$(H
D$(H
D$0H
L$<I
T$ H
L$PL
D$XL
t$@H
T$HA
t$hL
t$hH
t$PH
L$`L
D$hH
T$XA
t$xL
t$xH
L$pL
D$xH
t$`H
T$hA
t$pH
T$xA
t$@H
T$HL
T$ H
T$ H
]A\A]
D$(I
D$XI
D$hI
T$pL
[]A\
[]A\A]
AWAVI
l$pH
[]A\A]A^A_
D$(H
D$HH
l$XL
\$`H
t$hL
t$HL
d$8L
d$Pf
t$8H
|$ H
|$ H
L$0H
T$(H
D9|$D
l$XH
\$`H
t$hL
d$8L
t$0H
t$PH
|$pH
t$xH
[]A\
AWAVAUATUSL
|$7L
|$<f
D$@H
goodbye
D$<hell
D$Bhellf
T$FH
|$BH
|$HI
D$ H
D$ L
L$(H
D$ H
D$ L
L$(H
D$ H
D$ L
L$(H
l$PH
zVuTL
[]A\A]A^A_
]A\A]
AWAVAUATUSH
D$hH
|$hL
 u"H
%%FAIL
GNORE MSI3G
%%FAIL II3
|$hL
|$h1
t$pL
|$hH
T$0I
D$(I
|$(L
D$@H
D$@L
L$HH
l$0L
L$@L
D$0L
D$0H
D$0H
D$@H
T$@L
\$HH
D$PL
D$@H
|$0L
t$8H
T$pH
t$$1
[]A\A]A^A_
|$(L
|$(L
ATUH
[]A\A]A^A_
AUATUSH
A\A]
AWAVAUATA
H+L$
([]A\A]A^A_
uHHc
[]A\A]
[]A\A]
AWAVAUATI
[]A\A]A^A_
([]A\A]A^A_
AVAUI
[]A\A]A^A_
AUATUSHc
udD9
[]A\A]
[]A\A]
ucD;|$
[]A\A]A^A_
[]A\A]
]A\A]
AUATM
t9E9l$
[]A\A]A^A_
]A\A]A^
 AUI
[]A\A]A^A_
AUHc
[]A\A]
[]A\A]
A\A]
AUATI
]A\A]
AWAVI
ATUS
([]A\A]A^A_
t$(H
T$0H
L$8L
D$@L
)D$P
)L$`
)T$p
 ATI
uCA9
]A\A]A^
uO[D
]A\A]A^
A\A]
ATUH
AWAVATI
]A\A^A_
ATUS
[]A\
AWAVAUA
A]A^A_
[]A\
ATUH
D$+H
L$0fD
D$8H
l$,H
|$ H
|$HH
|$@L
|$HL
|$ L
D$@Mc
D;t$,|
D$0H
D$8H
X[]A\A]A^A_
t$8H
A\A]A^A_
]A\A]
AWAVAUATI
~CE1
[]A\A]A^A_
AUATI
D$(1
|$ A
T$$H
|$$9
L$(dH3
8[]A\A]A^A_
t$ I
D;t$$}[
D;t$$|
o$$H
o,$H
AUATI
]A\A
AWAVI
ATUSH
[]A\A]A^A_
AWAVAUATUSH
t$ H
l$(H
d$ L
t$(H
[]A\A]A^A_
AVAUATUSH
([]A\A]A^A_
AWAVI
ATUSH
[]A\A]A^A_
[]A\
AUATUSH
D$(1
Hc\$
d$$H
D9l$
L$(dH3
8[]A\A]A^A_
Lcd$
T$$J
AWAVI
A]A^A_
AUATI
]A\A]A^
A\A]A^
]A\A]
AWAVAUI
[]A\A]A^A_
AWAVI
[]A\A]A^A_
 AUI
ATUH
uAE9
[]A\A]A^A_
[]A\A]A^A_
 AUATUH
D;d$
D$ L
T$(L
[]A\A]A^A_
[]A\A]A^A_
AWAVI
X[]A\A]A^A_
\$0E1
D$8I
T$ H
l$@H
l$ H
D;t$
l$@L
l$HH
|$8H
d$ L
|$8I
AWAVAUI
[]A\A]A^A_
AUATI
]A\A]
AWAVAUATUH
[]A\A]A^A_
AWAVAUI
ATUH
T$8H
|$8L
\$8L
T$0H
D$(H
D$(L
t$0L
L$ L
[]A\A]A^A_
t$ H
L$ L
AWAVAUATUSH
t$ H
L$(dH
D$81
l$(H
\$ L
tsI9
t$4H
t$(H
L$8dH3
H[]A\A]A^A_
AWAVAUE1
ATUH
[]A\A]A^A_
H#D$
L$ 1
D$TD
D$ H
|$HH
D;d$0
L$P9L$TA
\$HI
D$Pf
D$TH
)T$ H
)d$0
D$XI
l$H1
oD$ f
l$(f
;\$H
oD$0H
T$XL
d$8f
|$ H
L$Tf9L$P
AUATUSH
L$8H
t$ H
D$HE
t$ 1
d$8L
t$ H
|$0H
t$(H
t$PH
|$HH
D$HH
T$PA
D9l$D
t$8H
D$HH
T$PH
h[]A\A]A^A_
H9D$
AWE1
AUATI
$t/L
[]A\A]A^A_
AWAVAUI
L$ H
D$4H
t$ H
T$0H
D9t$
D$09D$4
t$ H
[]A\A]A^A_
AWAVAUATUSH
|$(H
t$0H
T$8H
l$ H
|$8H
\$8H
|$(H
t$0H
l$ D
|$(H
t$ H
[]A\A]A^A_
AWAVAUI
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATI
[]A\A]A^A_
AUATI
[]A\A]
AWAVI
[]A\A]A^A_
D$(1
L$(dH3
8[]A\A]A^A_
L$$L
D$ H
t$$A9
D;l$$|C
D9l$$~
T$ H
~ND)
D;l$
AUATUSH
t$ H
T$`H
L$HdH
D$PH
l$HL
D$@A
D$(H
T$8H
L$@9L$0
D$8H
|$(H
t$ I
t$HL
D$0L
T$(H
L$8I
T$ H
t$XH
T$(H
L$8H
D$PH
|$(H
|$(H
l$ H
t$HH
l$ L
l$XH
|$PL
|$PL
t$XH
t$XH
[]A\A]A^A_
|$(I
t$PL
t$XL
D$`H
D$pH
D$(H
t$PL
D$8L
t$0H
|$(H
D$(H
t$@H
|$8H
D$8H
9\$H
t$xH
|$pL
D$pH
t$hH
|$`L
D$`H
\$ 1
d$`H
t$ E1
t$HL
|$hH
t$HL
\$pL
|$xD
l$H1
D$8L
|$0L
D$HL
|$HH
t$hH
t$xH
t$0H
t$@H
AWAVI
]A\A]A^A_
]A\A]A^A_
A\A]A^A_
D$ H
T$ M
\$(H
A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
AWAVAUI
A\A]A^A_
A]A^A_
[]A\A]A^A_
AWAVAUATI
[]A\A]A^A_
[]A\A]A^A_
AWAVAUI
ATUH
([]A\A]A^A_
[]A\A]A^A_
AWAVAUATUSH
|$@H
t$HH
T$0H
|$0H
|$@H
t$H9
|$0H
t$8A
|$@H
|$0H
[]A\A]A^A_
|$@H
|$0H
t$8I
|$@H
|$0H
t$0H
|$@H
|$0H
|$@H
|$0H
t$8I
|$ H
|$@H
t$HH
|$0H
t$8H
D9|$,
AUATUH
E +C H
[]A\A]
[]A\A]A^A_
AVAUI
A\A]A^A_
([]A\A]A^A_
([]A\A]A^A_
([]A\A]A^A_
AWAVI
D$(H
[]A\A]A^A_
H;\$ 
AVAUI
ATUSH
[]A\A]A^A_
AUATI
[]A\A]A^A_
[]A\A]A^A_
AVAUI
SHcB
091t
IcT$
[]A\A]A^
[]A\A]A^
AVHc
AUATI
E9l$
~#Ic
]A\A]A^
IcD$
IcD$
AVAUATD
[]A\A]A^A_
[]A\A]A^A_
]A\A]A^A_
uH-2
[]A\A]
AUATI
tMIcE
]A\A]A^
AVAUATUSH
0t_@
	wPI
t$xE1
D$|E
t$(L
l$0H)
[]A\A]A^A_
t!Hc
t$()
D$|D9
D$DE
L$(9
~8HcT$x
T$8H
D$0H
HcD$ H
T$0L
t$8M
T$0H
L$HH
D$0H
D$ L
t$8H
D9l$(~H
D$(H
D$0E
L$D1
D$8H
T$ H
D$`H
D$HH
D$pH
D$hH
D$PH
D$XL
t$0H
t$`H
t$HL
D$pH
L$hH
T$XH
t$PL
T$8D
~	A)
T$8L
L$(9L$@
99:t
IcT$
D$0HcP
D$0H
P9fH
l$xE)
D$ E1
D$|f
D$0D
T$XH
t$PL
|$HD
|$H)
T$(D
T$(I
T$(D
T$(D
T$(D
T$(D
l$(M
D$0H
L9|$
t$@M
D$0H
l$(I
HcT$xD
D$(A
IcD$
D$(1
T$8D
|$ )
9t$@
IcT$
*HcU
*HcP
t$(H
9t$@
t$(9t$@
D9L$@@
\$ H
T$ H
IcT$
t$(9t$@
D$ H
L$x1
t!Hc
D$ A
IcT$
D$0HcP
D$0H
T$8D
D$(D
T$8D
D$(D
T$DD
D$8L
L$(D
D$8D
T$8D
D$(D
T$0D
D$(D
L$ E
t$(E1
9t$@A
T$(I
HcT$|H
l$(D
D$0I
T$(D
T$(D
D9|$@D
D$0I
T$(D
T$(D
T$ E
+T$0D
T$(D
T$(D
D$ E
\$ H
|$PD
T$DD
D$8L
L$ D
D$8D
T$DE
+T$ 
\$ H
D9l$@H
\$ H
t$(H
9t$@
AWAVAUATUH
L$ L
L$(dH
D$x1
D$pH
T$tL
L$lH
t$pL
|$tI
/D$p
D$_1
T$XH
D$HH
"\$_H
t$0fH
D$<H
D$pf
D$ H
|$xdH3<%(
[]A\A]A^A_
D$ fH
t$8E1
D$HH
+D$h
T$XI
D$<D
T$XH
D$@t
T$XL
|$@I
D$pu
\$8A
\$<I
D$0H
\$0L
:98t
D)T$8
T$@L
T$XI
T$@I
T$0E
|$@M
D$0H
IcT$
D$8)
uCHcW
H;\$0
T$8H
:98t
T$<A
D$(H
/T$p
\$8E1
\$8A
L$0E
D$pf
\$HH
D$pf
D$pz
t M9
IcD$
\$0E
HcT$
L$pH
D$pf
D$0H
D$pf
IcD$
T$8A
T$8H
\$0M
D$pvy
D$<M
L$pH
\$Hf
D$pf
dH34%(
(]A\
AWAVAUATSH
[A\A]A^A_]
{@Vt7
k`[]A\
HcWpdH
<ftq
dH34%(
9Kpu
AWAVATUSH
T$0H
L$8L
D$@L
)D$P
)L$`
)T$p
[]A\A^A_
AUATUH
[]A\A]
[]A\A]
[]A\A]
[]A\A]
ATUSHcG(
[]A\
C HcC(
HcGp
ChHcCp
AWAVAUATUSH
D$X1
D$@H
|$@H
D$@H
D$@H
T$HH
|$XdH3<%(
h[]A\A]A^A_
|$@H
)L$@
|$@H
|$@H
t$@H
t$HH
|$@H
D$@H
\$@H
ehHc]pL
|$@H
D$@H
/u6A
}@VL
t$ L
|$@H
HcE(
HcE(L
HcE(L
HcE(H
}@VL
D$@H
D$@H
HcE(H
HcE(L
HcE(H
D$@H
HcE(L
HcE(
HcE(L
HcE(H
}@[tGH
}@[L
HcE(L
{tGH
}@{L
\$ H
HcE(H
\$ H
\$ H
\$ H
HcE(H
\$ H
D$ H
D$ L
L$(H
\$8H
AWAVI
AUATA
[]A\A]A^A_
t%SH
AUATI
[]A\A]
AVAUI
D$X1
D$XdH3
`[]A\A]A^
AWAVI
D$X1
t$+I
D$+"I
D$,L
L$+L
L$,A
|$0L
D$+\
D$+r
D$+\
D$+f
D$+\
D$+n
D$+\
D$+t
D$+\
D$+b
D$+\
|$0H
D$4A
D$+"
D$XdH3
h[]A\A]A^A_
AWAVAUM
t3E1
[]A\A]A^A_
,t$ H
D$0H
D$,H
D;|$0
D$PH
|$,L
T$HH
D$`H
|$pH
|$`L
|$`L
9D$,
T$,H
T$XI
D$0H
D$0L
L$8H
D$HH
D$hL
|$0L
L$@H
L$@M
t$XL
t$@L
T$PH
t$XD
D$@H
L$lE
T$,H
D$,D
|$,H
T$,I
D$HH
L$@H
L$@M
t$XL
t$@L
|$hE
t$XM
t$@L
T$PH
t$XH
L$@H
L$@M
t$XL
t$@L
t$XL
t$@L
D$PH
D$PL
|$xL
|$xL
D$hE
|$xL
|$xL
|$xL
AVAUL
ATUH
[]A\A]A^A_
[]A\A]A^A_
D$H1
D$HdH3
P[]A\A]A^
;[A\A]
D$X1
L$XdH3
h]A\A]A^
AWAVAUATI
[]A\A]A^A_
w[tUH
v+H)
AUATUSH
|$0H
D$@H
[]A\A]A^A_
|$0H
t$8I
D$HH
|$ H
9\$,
T$ I
|$HL
t$@H
|$0H
t$8I
[]A\A]A^A_
|$0H
[]A\A]A^A_
|$HL
t$0H
\$8L
[]A\A]A^A_
AWAVAUATUH
t$ H
D$@H
T$(H
D$PH
D$HH
D$8H
D$XdH
|$(H
T$0I
d$(H
D$`L
D$HH
D$pH
D$@H
t$0L
T$0I
t$PH
t$XH
L$0H
L$hH
T$`H
T$`1
t$ H
D$(H
d$hL
l$pL
|$(1
D$PH
D$hH
t$0L
L$8H
T$0H
T$0H
T$@H
\$@L
D$8H
T$0H
T$0H
T$HH
\$HL
t$pH
t$ H
D$8H
L$@H
T$0H
T$0H
[]A\A]A^A_
t$PH
|$xI
t$`H
D$XH
|$pH
t$hH
l$`H
\$XH
T$`H
t$ I
t$`H
|$XI
t$pH
|$pI
t$`H
|$XL
t$pH
AWAVAUATUSL
L$PL
D$XH
t$@H
T$HdH
)L$ H
D$xH
\$hL
t$pf
|$pH
|$PH
|$@H
t$HH
AQAPL
D$ H
L$`A
T$ H
D$ H
T$(H
9D$x
|$PH
|$@H
[]A\A]A^A_
T$8I
t$8L
T$`H
t$8L
L$`L
T$ H
L$(L
D$ H
D$ H
T$8I
\$8L
T$8I
t$8L
T$8I
|$@H
|$PH
AWAVAUI
D$X1
SQAWAVL
T$ L
\$(L
\$XdH3
h[]A\A]A^A_
T$ I
D$ L
D$<L
L$<H
T$ L
|$@H
|$@H
D$ H
D$ L
L$(H
AWAVI
AUATUH
D$(1
L$(dH3
8[]A\A]A^A_
H9\$ vjH
H9\$ w
ATUH
u	Hc
IcT$(
[]A\A]A^
9G(|'
AWAVI
AUATUH
L$XL
D$`L
)D$p
D$81
D$(H
D$$0
t$ L
D$8dH3
[]A\A]A^A_
t$ Hc
C D)
D;c(
D$ H
HcC,;C(}{H
9s,t
AWAVAUATI
[]A\A]A^A_
AVE1
AUATI
]A\A]A^
]A\A]A^
ATUH
D$8I
T$@I
[]A\
S@[]A\
S@[]A\
S@[]A\
HcS(H
ATSH
H9D$
([A\
H9D$
H9D$
AWAVE1
AUATU1
[]A\A]A^A_
A\A]A^A_
GLAVAUL
o@ATUH
HcT$
J;L$
fA;4Ju
[]A\A]A^A_
AVAUATI
[]A\A]A^
ATUH
[]A\A]
[]A\
ATUH
C0[]A\
AUATUSH
D$(I
[]A\A]
]A\A]
[]A\A]
HcVT
NXHc
tBHcST
AWAVI
AUATUSH
f;TE
SpIcshA
IcChM
H[]A\A]A^A_
D$$A
IcC4M
H9T$
T$(L
T$(L
t;Mc
B$I)
D$(A
L9t$(u
IcC4L
IcB A
HcD$$L
IcC4H
HcD$$L
\$(I
T$0L
\$8L
D$0M
tgUH
H;8t
tsSH
AUATUH
A\A]A^A_
AUATUSH
t$(H
T$0H
D$@H
D$0H
T$0L
\$8H
D$@L
L$HH
L$(H
T$ I
A]A^A_
AUATUH
A\A]A^A_
AUATI
]A\A]A^A_
[]A\A]A^A_
AUATUSH
A\A]A^A_
AUATI
 ]A\A]
8w5H
>"t+H
umH)
"u3H
AWAVI
ATUS
t$ dH
D$X1
|$0D
D$ 1
L$XdH3
h[]A\A]A^A_
D$,1
D$,L
ATUL
D$(1
t1=)
L$(dH3
8[]A\A]A^A_
|$ L
D$ H
|$ I
AWAVAUATUSH
T$PL
|$`L
t$hH
T$XH
t$(L
|$0H
D$8H
Hc\$
w9Mc
D$HH
\$ L
\$HH
f;<S
\$ I
D$ L
t$0H
t$(L
D$8I9
d$ J
L$(L
l$0H
HcD$
HcD$
\$@H
T$@H
T$@A
L$PH
T$hL
t$`L
t`HcD$
L;l$8t
H;|$Xt
[]A\A]A^A_
D$PH
L$hH
T$`L
L$PH
T$hL
H;|$Xt#L
D$@H
t$ D
D$@H
t$ D
D$@H
t$ D
t$ H
D$@t
D$XH
L$PM
T$hL
t$`L
L$PH
T$hL
t$`L
L$pH
L$pI
L$pH
T$pH
D$pL
L$pH
\$pI
D$pL
L$pH
\$pI
D$pL
L$PH
T$pH
L$PH
L$PH
L$PH
T$pI
t$pL
D$pH
L$pH
\$xH
D$pH
L$pH
\$xH
D$pH
L$pH
\$xH
t$PI
D$pH
t$PH
D$pH
D$pL
L$xL
D$pH
D$pL
L$xH
AXAYH
AZA[H
t$`H
T$pH
L$`H
D$pH
L$pH
\$xH
t$pH
D$pH
T$pL
\$xH
D$pH
L$pH
\$xH
T$pH
t$PH
D$pL
L$PH
AYAZH
T$xH
D$pL
L$xH
L$`H
L$PH
D$p1
L$pH
\$xH
D$pH
L$pH
\$xH
t$PH
D$pH
L$pH
\$xH
D$pH
L$pH
\$xH
L$PH
T$pI
t$pL
D$p1
L$pH
\$xH
L$PH
D$p1
D$pL
|$pH
t$PH
L$pH
L$PH
T$hL
L$PH
D$p1
L$pH
\$xH
_AXH
L$PH
T$pI
L$PH
L$PH
T$hH
t$`I
L$PH
T$hH
t$`I
t$PH
AUATI
Ict$
([]A\A]
ATUH
[]A\
[]A\
mktime requires array inputs
invalid gmtime representation
break
is not a string
Regex failure: 
offset
captures
cannot be negated
%s (%s) and %s (%s) %s
cannot be divided (remainder)
cannot be subtracted
halt_error/1: number required
src/builtin.c
text
is not valid in a csv row
html
%%%02X
can not be escaped for shell
base64
base64d
is not valid base64 data
trailing base64 byte found
 is not a valid format
cannot be iterated over
have wrong length
has no length
cannot be divided
has no keys
cannot be parsed as a number
only strings can be parsed
cannot be multiplied
cannot be added
<builtin>
HOME
/.jq
!nerrors
empty
rangevar
rangestart
range
builtins/0
builtins
acos
acosh
asin
asinh
atan
atan2
atanh
cbrt
exp2
floor
hypot
log10
log2
remainder
sqrt
tgamma
ceil
copysign
drem
erfc
exp10
expm1
fabs
fdim
fmax
fmin
fmod
lgamma
log1p
logb
nearbyint
nextafter
nexttoward
rint
round
scalb
scalbln
significand
trunc
ldexp
frexp
modf
lgamma_r
_plus
_negate
_minus
_multiply
_divide
_mod
tojson
fromjson
tonumber
tostring
keys_unsorted
startswith
endswith
ltrimstr
rtrimstr
split
explode
implode
_strindices
setpath
getpath
delpaths
_equal
_notequal
_less
_greater
_lesseq
_greatereq
contains
utf8bytelength
type
isinfinite
isnan
isnormal
sort
_sort_by_impl
_group_by_impl
_min_by_impl
_max_by_impl
halt
halt_error
get_search_list
get_prog_origin
get_jq_origin
_match_impl
modulemeta
_input
debug
stderr
strptime
strftime
strflocaltime
mktime
gmtime
input_filename
input_line_number
mktime requires parsed datetime inputs
mktime not supported on this platform
modulemeta input module name must be a string
explode input must be a string
cannot be matched, as it is not a string
 is not a valid modifier string
only strings have UTF-8 byte length
cannot be divided (remainder) because the divisor is zero
jv_get_kind(input) == JV_KIND_STRING
cannot be csv-formatted, only array
cannot be tsv-formatted, only array
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.!~*'()
cannot be sorted, as they are not both arrays
cannot be sorted, as it is not an array
cannot have their containment checked
implode input must be an array
split input and separator must be strings
cannot be divided because the divisor is zero
endswith() requires string inputs
startswith() requires string inputs
localtime() requires numeric inputs
error converting number of seconds since epoch to datetime
strflocaltime/1 requires parsed datetime inputs
strflocaltime/1 requires a string format
strflocaltime/1: unknown system failure
gmtime() requires numeric inputs
errror converting number of seconds since epoch to datetime
strftime/1 requires parsed datetime inputs
strftime/1 requires a string format
strftime/1: unknown system failure
strptime/1 requires string inputs and arguments
date "%s" does not match format "%s"
def halt_error: halt_error(5);
def error: error(.);
def map(f): [.[] | f];
def select(f): if f then . else empty end;
def sort_by(f): _sort_by_impl(map([f]));
def group_by(f): _group_by_impl(map([f]));
def unique: group_by(.) | map(.[0]);
def unique_by(f): group_by(f) | map(.[0]);
def max_by(f): _max_by_impl(map([f]));
def min_by(f): _min_by_impl(map([f]));
def add: reduce .[] as $x (null; . + $x);
def del(f): delpaths([path(f)]);
def _assign(paths; value): value as $v | reduce path(paths) as $p (.; setpath($p; $v));
def _modify(paths; update): reduce path(paths) as $p (.; label $out | (setpath($p; getpath($p) | update) | ., break $out), delpaths([$p]));
def map_values(f): .[] |= f;
# recurse
def recurse(f): def r: ., (f | r); r;
def recurse(f; cond): def r: ., (f | select(cond) | r); r;
def recurse: recurse(.[]?);
def recurse_down: recurse;
def to_entries: [keys_unsorted[] as $k | {key: $k, value: .[$k]}];
def from_entries: map({(.key // .Key // .name // .Name): (if has("value") then .value else .Value end)}) | add | .//={};
def with_entries(f): to_entries | map(f) | from_entries;
def reverse: [.[length - 1 - range(0;length)]];
def indices($i): if type == "array" and ($i|type) == "array" then .[$i]
  elif type == "array" then .[[$i]]
  elif type == "string" and ($i|type) == "string" then _strindices($i)
  else .[$i] end;
def index($i):   indices($i) | .[0];       # TODO: optimize
def rindex($i):  indices($i) | .[-1:][0];  # TODO: optimize
def paths: path(recurse(if (type|. == "array" or . == "object") then .[] else empty end))|select(length > 0);
def paths(node_filter): . as $dot|paths|select(. as $p|$dot|getpath($p)|node_filter);
def any(generator; condition):
        [label $out | foreach generator as $i
                 (false;
                  if . then break $out elif $i | condition then true else . end;
                  if . then . else empty end)] | length == 1;
def any(condition): any(.[]; condition);
def any: any(.);
def all(generator; condition):
        [label $out | foreach generator as $i
                 (true;
                  if .|not then break $out elif $i | condition then . else false end;
                  if .|not then . else empty end)] | length == 0;
def all(condition): all(.[]; condition);
def all: all(.);
def isfinite: type == "number" and (isinfinite | not);
def arrays: select(type == "array");
def objects: select(type == "object");
def iterables: arrays, objects;
def booleans: select(type == "boolean");
def numbers: select(type == "number");
def normals: select(isnormal);
def finites: select(isfinite);
def strings: select(type == "string");
def nulls: select(type == "null");
def values: select(. != null);
def scalars: select(. == null or . == true or . == false or type == "number" or type == "string");
def scalars_or_empty: select(. == null or . == true or . == false or type == "number" or type == "string" or ((type=="array" or type=="object") and length==0));
def leaf_paths: paths(scalars);
def join($x): reduce .[] as $i (null;
            (if .==null then "" else .+$x end) +
            ($i | if type=="boolean" or type=="number" then tostring else .//"" end)
        ) // "";
def _flatten($x): reduce .[] as $i ([]; if $i | type == "array" and $x != 0 then . + ($i | _flatten($x-1)) else . + [$i] end);
def flatten($x): if $x < 0 then error("flatten depth must not be negative") else _flatten($x) end;
def flatten: _flatten(-1);
def range($x): range(0;$x);
def fromdateiso8601: strptime("%Y-%m-%dT%H:%M:%SZ")|mktime;
def todateiso8601: strftime("%Y-%m-%dT%H:%M:%SZ");
def fromdate: fromdateiso8601;
def todate: todateiso8601;
def match(re; mode): _match_impl(re; mode; false)|.[];
def match($val): ($val|type) as $vt | if $vt == "string" then match($val; null)
   elif $vt == "array" and ($val | length) > 1 then match($val[0]; $val[1])
   elif $vt == "array" and ($val | length) > 0 then match($val[0]; null)
   else error( $vt + " not a string or array") end;
def test(re; mode): _match_impl(re; mode; true);
def test($val): ($val|type) as $vt | if $vt == "string" then test($val; null)
   elif $vt == "array" and ($val | length) > 1 then test($val[0]; $val[1])
   elif $vt == "array" and ($val | length) > 0 then test($val[0]; null)
   else error( $vt + " not a string or array") end;
def capture(re; mods): match(re; mods) | reduce ( .captures | .[] | select(.name != null) | { (.name) : .string } ) as $pair ({}; . + $pair);
def capture($val): ($val|type) as $vt | if $vt == "string" then capture($val; null)
   elif $vt == "array" and ($val | length) > 1 then capture($val[0]; $val[1])
   elif $vt == "array" and ($val | length) > 0 then capture($val[0]; null)
   else error( $vt + " not a string or array") end;
def scan(re):
  match(re; "g")
  |  if (.captures|length > 0)
      then [ .captures | .[] | .string ]
      else .string
      end ;
# If input is an array, then emit a stream of successive subarrays of length n (or less),
# and similarly for strings.
def _nwise(a; $n): if a|length <= $n then a else a[0:$n] , _nwise(a[$n:]; $n) end;
def _nwise($n): _nwise(.; $n);
# splits/1 produces a stream; split/1 is retained for backward compatibility.
def splits($re; flags): . as $s
#  # multiple occurrences of "g" are acceptable
  | [ match($re; "g" + flags) | (.offset, .offset + .length) ]
  | [0] + . +[$s|length]
  | _nwise(2)
  | $s[.[0]:.[1] ] ;
def splits($re): splits($re; null);
# split emits an array for backward compatibility
def split($re; flags): [ splits($re; flags) ];
# If s contains capture variables, then create a capture object and pipe it to s
def sub($re; s):
  . as $in
  | [match($re)]
  | if length == 0 then $in
    else .[0]
    | . as $r
#  # create the "capture" object:
    | reduce ( $r | .captures | .[] | select(.name != null) | { (.name) : .string } ) as $pair
        ({}; . + $pair)
    | $in[0:$r.offset] + s + $in[$r.offset+$r.length:]
    end ;
# If s contains capture variables, then create a capture object and pipe it to s
def sub($re; s; flags):
  def subg: [explode[] | select(. != 103)] | implode;
  # "fla" should be flags with all occurrences of g removed; gs should be non-nil if flags has a g
  def sub1(fla; gs):
    def mysub:
      . as $in
      | [match($re; fla)]
      | if length == 0 then $in
        else .[0] as $edit
        | ($edit | .offset + .length) as $len
        # create the "capture" object:
        | reduce ( $edit | .captures | .[] | select(.name != null) | { (.name) : .string } ) as $pair
            ({}; . + $pair)
        | $in[0:$edit.offset]
          + s
          + ($in[$len:] | if length > 0 and gs then mysub else . end)
        end ;
    mysub ;
    (flags | index("g")) as $gs
    | (flags | if $gs then subg else . end) as $fla
    | sub1($fla; $gs);
def sub($re; s): sub($re; s; "");
# repeated substitution of re (which may contain named captures)
def gsub($re; s; flags): sub($re; s; flags + "g");
def gsub($re; s): sub($re; s; "g");
########################################################################
# range/3, with a `by` expression argument
def range($init; $upto; $by):
    def _range:
        if ($by > 0 and . < $upto) or ($by < 0 and . > $upto) then ., ((.+$by)|_range) else . end;
    if $by == 0 then $init else $init|_range end | select(($by > 0 and . < $upto) or ($by < 0 and . > $upto));
# generic iterator/generator
def while(cond; update):
     def _while:
         if cond then ., (update | _while) else empty end;
     _while;
def until(cond; next):
     def _until:
         if cond then . else (next|_until) end;
     _until;
def limit($n; exp):
  if $n < 0 then exp
  else label $out | foreach exp as $item ($n; .-1; $item, if . <= 0 then break $out else empty end)
  end;
def isempty(g): 0 == ((label $go | g | (1, break $go)) // 0);
def first(g): label $out | g | ., break $out;
def last(g): reduce g as $item (null; $item);
def nth($n; g): if $n < 0 then error("nth doesn't support negative indices") else last(limit($n + 1; g)) end;
def first: .[0];
def last: .[-1];
def nth($n): .[$n];
def combinations:
    if length == 0 then [] else
        .[0][] as $x
          | (.[1:] | combinations) as $y
          | [$x] + $y
    end;
def combinations(n):
    . as $dot
      | [range(n) | $dot]
      | combinations;
# transpose a possibly jagged matrix, quickly;
# rows are padded with nulls so the result is always rectangular.
def transpose:
  if . == [] then []
  else . as $in
  | (map(length) | max) as $max
  | length as $length
  | reduce range(0; $max) as $j
      ([]; . + [reduce range(0;$length) as $i ([]; . + [ $in[$i][$j] ] )] )
	        end;
def in(xs): . as $x | xs | has($x);
def inside(xs): . as $x | xs | contains($x);
def input: _input;
def repeat(exp):
     def _repeat:
         exp, _repeat;
     _repeat;
def inputs: try repeat(_input) catch if .=="break" then empty else .|error end;
# like ruby's downcase - only characters A to Z are affected
def ascii_downcase:
  explode | map( if 65 <= . and . <= 90 then . + 32  else . end) | implode;
# like ruby's upcase - only characters a to z are affected
def ascii_upcase:
  explode | map( if 97 <= . and . <= 122 then . - 32  else . end) | implode;
# Streaming utilities
def truncate_stream(stream):
  . as $n | null | stream | . as $input | if (.[0]|length) > $n then setpath([0];$input[0][$n:]) else empty end;
def fromstream(i):
  foreach i as $item (
    [null,false,null,false];
    if ($item[0]|length) == 0 then [null,false,.[2],.[3]]
    elif ($item|length) == 1 and ($item[0]|length) < 2 then [null,false,.[0],.[1]]
    else . end |
    . as $state |
    if ($item|length) > 1 and ($item[0]|length) > 0 then
      [.[0]|setpath(($item|.[0]); ($item|.[1])),
      true,
      $state[2],
      $state[3]]
    else .
    end;
    if ($item[0]|length) == 1 and ($item|length == 1) and .[3] then .[2] else empty end,
    if ($item[0]|length) == 0 then $item[1] else empty end
    );
def tostream:
  {string:true,number:true,boolean:true,null:true} as $leaf_types |
  . as $dot |
  if $leaf_types[$dot|type] or length==0 then [[],$dot]
  else
    # We really need a _streaming_ form of `keys`.
    # We can use `range` for arrays, but not for objects.
    keys_unsorted as $keys |
    $keys[-1] as $last|
    ((# for each key
      $keys[] | . as $key |
      $dot[$key] | . as $dot |
      # recurse on each key/value
      tostream|.[0]|=[$key]+.),
     # then add the closing marker
     [[$last]])
  end;
# Assuming the input array is sorted, bsearch/1 returns
# the index of the target if the target is in the input array; and otherwise
#  (-1 - ix), where ix is the insertion point that would leave the array sorted.
# If the input is not sorted, bsearch will terminate but with irrelevant results.
def bsearch(target):
  if length == 0 then -1
  elif length == 1 then
     if target == .[0] then 0 elif target < .[0] then -1 else -2 end
  else . as $in
    # state variable: [start, end, answer]
    # where start and end are the upper and lower offsets to use.
    | [0, length-1, null]
    | until( .[0] > .[1] ;
             if .[2] != null then (.[1] = -1)               # i.e. break
             else
               ( ( (.[1] + .[0]) / 2 ) | floor ) as $mid
               | $in[$mid] as $monkey
               | if $monkey == target  then (.[2] = $mid)   # success
                 elif .[0] == .[1]     then (.[1] = -1)     # failure
                 elif $monkey < target then (.[0] = ($mid + 1))
                 else (.[1] = ($mid - 1))
                 end
             end )
    | if .[2] == null then          # compute the insertion point
         if $in[ .[0] ] < target then (-2 -.[0])
         else (-1 -.[0])
         end
      else .[2]
      end
  end;
# Apply f to composite entities recursively, and to atoms
def walk(f):
  . as $in
  | if type == "object" then
      reduce keys_unsorted[] as $key
        ( {}; . + { ($key):  ($in[$key] | walk(f)) } ) | f
  elif type == "array" then map( walk(f) ) | f
  else f
  end;
# SQL-ish operators here:
def INDEX(stream; idx_expr):
  reduce stream as $row ({};
    .[$row|idx_expr|
      if type != "string" then tojson
      else .
      end] |= $row);
def INDEX(idx_expr): INDEX(.[]; idx_expr);
def JOIN($idx; idx_expr):
  [.[] | [., $idx[idx_expr]]];
def JOIN($idx; stream; idx_expr):
  stream | [., $idx[idx_expr]];
def JOIN($idx; stream; idx_expr; join_expr):
  stream | [., $idx[idx_expr]] | join_expr;
def IN(s): reduce (first(select(. == s)) | true) as $v (false; if . or $v then true else false end);
def IN(src; s): reduce (src|IN(s)) as $v (false; if . or $v then true else false end);
def pow10: "Error: pow10/0 not found at build time"|error;
&&amp;
<&lt;
>&gt;
'&apos;
"&quot;
''\''
escape_string
builtins_bind
?456789:;<=
 !"#$%&'()*+,-./0123
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
%04d 
params
 %s:%d
 %04d
 $%s:%d
%*s[params: 
%*s%s:%d:
#INVALID
LOADK
DUPN
DUP2
PUSHK_UNDER
LOADV
LOADVN
STOREV
STORE_GLOBAL
INDEX
INDEX_OPT
EACH
EACH_OPT
FORK
FORK_OPT
JUMP
JUMP_F
BACKTRACK
APPEND
INSERT
RANGE
SUBEXP_BEGIN
SUBEXP_END
PATH_BEGIN
PATH_END
CALL_BUILTIN
TAIL_CALL_JQ
CLOSURE_REF
CLOSURE_CREATE_C
CLOSURE_PARAM_REGULAR
DEPS
MODULEMETA
GENLABEL
DESTRUCTURE_ALT
STOREVN
src/compile.c
0 && "Unknown function type"
bc && bc == target->compiled
block_is_single(binder)
binder.first->symbol
break_distance >= 0
i->op == CLOSURE_PARAM
*anonlabel
block_is_const(b)
target.last
block_is_single(b)
!a->next
!b->prev
%s/%i
is_data
relpath
metadata
left.first->op == DUP
left.first->next != NULL
jq: error: $%s is not defined
i->op == CLOSURE_CREATE
curr->op == CALL_JQ
actual_args == desired_args
collect
reduce
foreach
@lambda
__jq
curr == b.last
curr->bound_by == curr
param->op == CLOSURE_PARAM
param->bound_by == param
!curr->arglist.first
bc && target && target->compiled
jv_get_kind(*vars) == JV_KIND_OBJECT
(opcode_describe(binder.first->op)->flags & bindflags) == (bindflags & ~OP_BIND_WILDCARD)
binder.first->bound_by == 0 || binder.first->bound_by == binder.first
opcode_describe(op)->length == 1
opcode_describe(LOADK)->flags & OP_HAS_CONSTANT
(opcode_describe(STORE_GLOBAL)->flags & (OP_HAS_CONSTANT | OP_HAS_VARIABLE | OP_HAS_BINDING)) == (OP_HAS_CONSTANT | OP_HAS_VARIABLE | OP_HAS_BINDING)
opcode_describe(PUSHK_UNDER)->flags & OP_HAS_CONSTANT
opcode_describe(op)->flags & OP_HAS_BRANCH
opcode_describe(b.first->op)->flags & OP_HAS_BRANCH
opcode_describe(op)->flags & OP_HAS_BINDING
block_has_only_binders(binder, bindflags)
opcode_describe(op)->flags & OP_HAS_VARIABLE
block_is_single(import) && import.first->op == DEPS
block_is_const(metadata) && block_const_kind(metadata) == JV_KIND_OBJECT
left.first->next->op == SUBEXP_BEGIN
left.first->next->next->op == LOADK
jq: error: break used outside labeled control structure
jq: error: %s/%d is not defined
opcode_describe(i->op)->flags & OP_IS_CALL_PSEUDO
0 && "Unknown type of parameter"
curr->bound_by->op == CLOSURE_CREATE_C
curr->op != CLOSURE_REF && curr->op != CLOSURE_PARAM
function compiled to %d bytes which is too long
curr->bound_by->op == CLOSURE_CREATE || curr->bound_by->op == CLOSURE_PARAM
arg->op == CLOSURE_REF && arg->bound_by->op == CLOSURE_CREATE
curr->imm.target->bytecode_pos != -1
curr->imm.target->bytecode_pos > pos
0 && "codegen not implemented for this operation"
bc->globals->ncfunctions == ncfunc
nesting_level
expand_call_arglist
compile
block_compile
gen_array_matcher
block_get_unbound_vars
gen_import_meta
block_bind_referenced
block_bind_library
block_count_actuals
block_count_formals
block_bind_subblock
block_bind_each
inst_join
gen_op_bound
gen_op_var_fresh
gen_op_unbound
inst_set_target
gen_op_targetlater
gen_op_target
block_const
block_const_kind
gen_op_pushk_under
gen_const_global
gen_const
gen_op_simple
src/execute.c
fp->retaddr == 0
var < fr->bc->nlocals
jq->curr_frame
closure < fr->bc->nclosures
n2 == n1 + 1
jv_is_valid(val)
path_len >= 0
path_len == 0
jq->stk_top == 0
jq->fork_top == 0
jq->curr_frame == 0
src/exec_stack.h
jq->err_cb
	<halted>
 || 
	<backtracking>
0 && "invalid instruction"
jv_is_valid(v)
jq->subexp_nest > 0
Range bounds must be numeric
V%d = 
 (%d)
Cannot iterate over %s (%s)
jq: error: out of memory
jq: error: %s
<top-level>
jq: %d compile %s
JQ_ORIGIN
PROGRAM_ORIGIN
JQ_LIBRARY_PATH
!jq->halted
fp->retaddr >= bc->code && fp->retaddr < bc->code + bc->codelen
subfn_idx < fr->bc->nsubfunctions
nargs == new_frame->bc->nclosures
s->limit == 0 && "stack freed while not empty"
jv_get_kind(jq->error) == JV_KIND_NULL
jv_get_kind(*var) == JV_KIND_ARRAY
jv_get_kind(objv) == JV_KIND_OBJECT
Cannot use %s (%s) as object key
Invalid path expression with result %s
Invalid path expression near attempt to access element %s of %s
Invalid path expression near attempt to iterate through %s
opcode == EACH || opcode == EACH_OPT
Function takes too many arguments
jq->stk_top == frame_current(jq)->retdata
jv_get_kind(args) == JV_KIND_ARRAY || jv_get_kind(args) == JV_KIND_OBJECT
jv_get_kind(args) == JV_KIND_ARRAY
jv_get_kind(attrs) == JV_KIND_OBJECT
jq_halt
jq_set_attrs
args2obj
jq_compile_args
stack_reset
jq_reset
frame_push
make_closure
path_append
jq_next
jq_report_error
frame_local_var
frame_current
frame_pop
stack_restore
stack_popn
stack_pop
stack_push
{"a':"12"}
src/jq_test.c
jv_get_refcnt(a) == 1
before == after
hello%d%s
hello42!
jq: error
%%FAIL
%%FAIL IGNORE MSG
Disassembly:
*** Expected 
, but got 
*** Superfluous result: 
fopen
jv_get_kind(v) == JV_KIND_INVALID
Expected separator between values at line 1, column 9 (while parsing '{"a':"12"}')
strcmp(jv_string_value(v), "Expected separator between values at line 1, column 9 (while parsing '{\"a':\"12\"}')") == 0
jv_get_kind(a) == JV_KIND_ARRAY
jv_array_length(jv_copy(a)) == 0
jv_array_length(jv_copy(a)) == 1
jv_number_value(jv_array_get(jv_copy(a), 0)) == 42
jv_equal(jv_copy(a), jv_copy(a))
jv_equal(jv_copy(a2), jv_copy(a2))
jv_equal(jv_copy(a), jv_copy(a2))
jv_equal(jv_copy(a2), jv_copy(a))
!jv_equal(jv_copy(a), jv_copy(a2))
!jv_equal(jv_copy(a2), jv_copy(a))
jv_array_length(jv_copy(a)) == 2
jv_get_kind(subarray) == JV_KIND_ARRAY
jv_array_length(jv_copy(subarray)) == 1
jv_number_value(jv_array_get(jv_copy(subarray), 0)) == 42
jv_get_kind(sub2) == JV_KIND_ARRAY
jv_array_length(jv_copy(sub2)) == 2
jv_number_value(jv_array_get(jv_copy(sub2), 0)) == 42
jv_number_value(jv_array_get(jv_copy(sub2), 1)) == 19
jv_array_length(jv_copy(a3)) == 3
jv_number_value(jv_array_get(jv_copy(a3), 0)) == 42
jv_array_length(jv_array_get(jv_copy(a3), 1)) == 1
jv_number_value(jv_array_get(jv_copy(a3), 2)) == 19
jv_array_length(jv_copy(a4)) == 1
jv_array_length(jv_copy(a4)) == 2
jv_array_length(jv_copy(a5)) == 2
jv_array_length(jv_array_get(jv_copy(a), 1)) == 1
jv_equal(jv_string("foo"), jv_string_sized("foo", 3))
jv_string_length_bytes(jv_copy(shortstr)) == (int)strlen(nasty)
jv_string_length_bytes(jv_copy(longstr)) == (int)sizeof(nasty)
jv_equal(jv_copy(a1), jv_copy(a2))
jv_equal(jv_copy(a2), jv_copy(a1))
!jv_equal(jv_copy(a1), jv_copy(b))
jv_string_hash(jv_copy(a1)) == jv_string_hash(jv_copy(a1))
jv_string_hash(jv_copy(a1)) == jv_string_hash(jv_copy(a2))
jv_string_hash(jv_copy(b)) != jv_string_hash(jv_copy(a1))
jv_equal(jv_string("hello42!"), jv_string_fmt("hello%d%s", 42, "!"))
jv_string_length_bytes(jv_copy(str)) == sizeof(big) - 1
!strcmp(big, jv_string_value(str))
jv_number_value(jv_object_get(jv_copy(o1), jv_string("foo"))) == 42
jv_number_value(jv_object_get(jv_copy(o1), jv_string("bar"))) == 24
jv_number_value(jv_object_get(jv_copy(o2), jv_string("foo"))) == 420
jv_number_value(jv_object_get(jv_copy(o2), jv_string("bar"))) == 240
Testing '%s' at line number %u
*** Test program compiled that should not have at line %u: %s
*** Erroneous test program failed with wrong message (%s) at line %u: %s
*** Test program failed to compile at line %u: %s
*** Input is invalid on line %u: %s
*** Expected result is invalid on line %u: %s
*** Insufficient results for test at line number %u: %s
jv_equal(jv_copy(expected), jv_copy(reparsed))
 for test at line number %u, %s
%d of %d tests passed (%d malformed)
run_jq_tests
jv_test
n@src/jv.c
out < s->data + maxlength
c->count > 0
array
boolean
<invalid>
null
0 && "invalid kind"
iter != ITER_FINISHED
Invalid UTF-8 string
new_slot
size > 0 && (size & (size - 1)) == 0
jv_get_kind(a) == JV_KIND_STRING
jv_get_kind(o) == JV_KIND_OBJECT
i + jvp_array_offset(a) < array->length
s->alloc_length >= jvp_string_length(s)
slot == -1 || (slot >= 0 && slot < jvp_object_size(object))
jv_get_kind(b) == JV_KIND_STRING
jv_get_kind(key) == JV_KIND_STRING
jv_get_kind(j) == JV_KIND_NUMBER
jv_get_kind(j) == JV_KIND_STRING
jv_get_kind(object) == JV_KIND_OBJECT
jv_get_kind(jvp_object_get_slot(object,iter)->string) == JV_KIND_STRING
jv_get_kind(s) == JV_KIND_STRING
jv_get_kind(x) == JV_KIND_INVALID
jv_get_kind(inv) == JV_KIND_INVALID
jv_get_kind(j) == JV_KIND_ARRAY
Out of bounds negative array index
jv_get_kind(b) == JV_KIND_ARRAY
0 <= start && start <= end && end <= len
jv_get_kind(k) == JV_KIND_STRING
jv_get_kind(n) == JV_KIND_NUMBER
jvp_refcnt_unshared(new_object.u.ptr)
jvp_refcnt_unshared(object.u.ptr)
!jvp_object_find_slot(new_object, slot->string, new_bucket)
!jvp_object_find_slot(*object, key, bucket)
jv_get_kind(a) == JV_KIND_OBJECT
jv_get_kind(b) == JV_KIND_OBJECT
jv_get_kind(sep) == JV_KIND_STRING
jvp_invalid_free
jv_object_iter_key
jv_object_iter_next
jv_object_iter
jv_object_contains
jv_object_merge_recursive
jv_object_merge
jv_object_length
jvp_object_delete
jv_object_delete
jvp_object_rehash
jvp_object_free
jvp_object_unshare
jvp_object_write
jv_object_set
jv_object_has
jvp_string_equal
jvp_object_size
jvp_object_get_slot
jvp_object_mask
jvp_object_ptr
jvp_object_read
jv_object_get
jvp_object_new
jvp_string_remaining_space
jv_string_slice
jv_string_value
jv_string_hash
jv_string_implode
jv_string_explode
jv_string_split
jv_string_indexes
jv_string_length_codepoints
jvp_string_ptr
jv_string_length_bytes
jvp_string_copy_replace_bad
jvp_array_slice
jv_array_slice
jv_array_concat
jvp_array_free
jvp_refcnt_unshared
jv_array_set
jvp_array_offset
jvp_array_ptr
jvp_array_read
jv_array_get
jvp_array_length
jv_array_length
jv_number_value
jv_invalid_get_msg
jv_kind_name
error: cannot allocate memory
src/jv_aux.c
Cannot index %s with %s
jv_is_valid(t)
Cannot delete fields from %s
jv_is_valid(k)
jv_get_kind(objects) == JV_KIND_ARRAY
jv_get_kind(keys) == JV_KIND_ARRAY
jv_array_length(jv_copy(objects)) == jv_array_length(jv_copy(keys))
Start and end indices of an array slice must be numbers
Start and end indices of an string slice must be numbers
Cannot index %s with string "%s"
0 <= start && start <= end && end <= array_len
A slice of an array can only be assigned another array
Cannot update field at %s index of %s
jv_array_length(jv_array_get(jv_copy(paths), i)) > start
Cannot delete %s element of array
Cannot delete %s field of object
Cannot check whether %s has a %s key
Path must be specified as an array
0 && "jv_keys passed something neither object nor array"
0 && "invalid kind passed to jv_cmp"
Paths must be specified as an array
Path must be specified as array, not %s
jv_group
sort_items
jv_sort
jv_cmp
jv_keys
jv_dels
delpaths_sorted
jv_has
jv_set
parse_slice
Infinity
[%Co
O8M2
vH7B
W4vC
?aCoc
@Could not open %s: %s
It's a directory
Error reading from %s
Expected separator between values
(p->curr_buf == 0 || p->curr_buf_pos == p->curr_buf_length) && "previous buffer not exhausted"
Expected another array element
Unmatched ']' at the top-level
Unmatched ']' in the middle of an object
Expected a separator between values
Objects must consist of key:value pairs
Missing value in key:value pair
',' not as part of an object or array
Unmatched '}' at the top-level
Expected string key before ':'
Expected another key-value pair
Expected another key:value pair
Unmatched '}' in the middle of an array
Potentially truncated top-level numeric value
Invalid string: control characters from U+0000 through U+001F must be escaped
Invalid \uXXXX\uXXXX surrogate pair escape
Exceeds depth limit for parsing
Invalid characters in \uXXXX escape
Expected escape character at end of string
p->stackpos > 1 && jv_get_kind(p->stack[p->stackpos-2]) == JV_KIND_OBJECT
%s at line %d, column %d (need RS to resync)
p->curr_buf_pos == p->curr_buf_length
Unfinished abandoned text at EOF at line %d, column %d
Unfinished string at EOF at line %d, column %d
%s at EOF at line %d, column %d
Unfinished JSON term at EOF at line %d, column %d
Potentially truncated top-level numeric value at EOF at line %d, column %d
true
false
Invalid numeric literal
Invalid literal
src/jv_parse.c
p->stackpos <= p->stacklen
p->stackpos < p->stacklen
p->tokenpos <= p->tokenlen
p->tokenpos < p->tokenlen
output produced
Expected value before ','
':' should follow a key
Object keys must be strings
Unmatched '}'
Invalid escape
Unmatched ']'
':' not as part of an object
Truncated value
Invalid \uXXXX escape
Malformed BOM
!jv_is_valid(*out)
k == JV_KIND_NULL
!jv_is_valid(p->next)
%s at line %d, column %d
Unexpected extra JSON values
Expected JSON value
%s (while parsing '%s')
tokenadd
push
parse_token
stream_token
scan
jv_parser_next
jv_parser_set_buf
src/jv_print.c
c != -1
\u%04x\u%04x
<skipped: too deep>
<invalid:
0 && "Invalid value"
[34;1m
0123456789;
[1;30m
[0;39m
[0;32m
[1;39m
jv_get_kind(str) == JV_KIND_STRING
jvp_dump_string
jv_dump_term
src/jv_unicode.c
min <= start
in <= end
length > 0
codepoint >= 0 && codepoint <= 0x10FFFF
out - start == jvp_utf8_encode_length(codepoint)
jvp_utf8_encode
jvp_utf8_next
jvp_utf8_backtrack
????????????????????????????????????????????????????????????????
Modules must be named by relative paths using '/', not '\' (%s)
Relative paths to modules may not traverse to parent directories (%s)
module names must not have equal consecutive components: %s
Module search path must be an array
jv_get_kind(search_path) == JV_KIND_ARRAY
!jv_is_valid(as) || jv_get_kind(as) == JV_KIND_STRING
jq: error loading data file %s: %s
Module path must be a string
src/linker.c
$ORIGIN/
%s/%s
jq/main
%s/%s/%s%s
module not found: %s (%s)
module not found: %s
.json
search
jq: error: %s
unknown error
deps
process_dependencies
build_lib_search_chain
src/locfile.c
pos < l->length
line-1 < l->nlines
line < l->nlines
%s at %s, line %d:
%.*s%*s
jq: error: %s
<unknown location>
locfile_line_length
locfile_get_line
jq: error: Could not open file %s: %s
Could not find home directory.
jv_get_kind(path) == JV_KIND_STRING
cb == jq_util_input_next_input_cb
Input error: %s
<stdin>
src/util.c
Could not expand %s. (%s)
!jv_is_valid(state->slurped)
<unknown>
%s:%lu
Unknown input filename
Unknown input line number
jq_util_input_get_position
jq_util_input_set_parser
expand_path
src/lexer.l
state
"%.*s"
flex scanner jammed
input in flex scanner failed
start-condition stack underflow
jq_yyset_lineno called with no buffer
jq_yyset_column called with no buffer
out of dynamic memory in jq_yy_create_buffer()
out of dynamic memory in jq_yyensure_buffer_stack()
out of dynamic memory in jq_yy_scan_buffer()
out of dynamic memory in jq_yy_scan_bytes()
bad buffer in jq_yy_scan_bytes()
out of memory expanding start-condition stack
fatal flex scanner internal error--end of buffer missed
fatal error - scanner input buffer overflow
out of dynamic memory in yy_get_next_buffer()
fatal flex scanner internal error--no action found
)]})enter
 !"#$%
()*+,-
./01
src/parser.y
funcname
_modify
syntax error, unexpected %s
syntax error
unexpected
*label-%s
_assign
Division by zero?
Remainder by zero?
Import path must be constant
recurse
line
file
module
import
include
then
else
elif
catch
__loc__
memory exhausted
$end
$undefined
INVALID_CHARACTER
IDENT
FIELD
LITERAL
FORMAT
".."
"%="
"=="
"!="
"//"
"as"
"def"
"module"
"import"
"include"
"if"
"then"
"else"
"elif"
"reduce"
"foreach"
"end"
"and"
"or"
"try"
"catch"
"label"
"break"
"__loc__"
"|="
"+="
"-="
"*="
"/="
"//="
"<="
">="
"?//"
QQSTRING_START
QQSTRING_TEXT
QQSTRING_INTERP_START
QQSTRING_INTERP_END
QQSTRING_END
FUNCDEF
NONOPT
$accept
TopLevel
Module
Imports
FuncDefs
Import
ImportWhat
ImportFrom
FuncDef
Params
Param
QQString
ElseBody
ExpD
Term
Args
RepPatterns
Pattern
ArrayPats
ObjPats
ObjPat
Keyword
MkDict
MkDictPair
jq_parse_library
gen_binop
EFFGGHHIIJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJKKLLLMNNOOPPRQSQTTTUUVVVWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWXXYZZ[[\\\]]^^_______```````````````````aaaabbbbbbbb
)5<>@ACJNQW
HKL<:)
JWWJ>
<>Q`ab	
 !"#$%&'/012345678:;J
@AMQMIJNH;JJXYS<?
:BB0?D?J
??D0JJJJJJJJJJJJJJJJJJJJJJJJ:>ACZ[\Q
I;;=T
>OPJ
J/*+-
a5VWV=VVa
<>Q^_`(/:BJ:?B
U<<JJV/?0B??J
?0D?\JBBJ:
P?JJJJ,VV\\\=?\_\::BJ
;;?\:;JJJ\U=;=J=
iQ`bI
kcUOld
!#%&L
<=6405@7
?;213:
 !"#$%&'()*+,-.9
syntax error, unexpected %s, expecting %s or %s
syntax error, unexpected %s, expecting %s or %s or %s
syntax error, unexpected %s, expecting %s or %s or %s or %s
syntax error, unexpected %s, expecting %s
jq: error: %s (Unix shell quoting issues?)
Module metadata must be constant
Possibly unterminated 'if' statement
Possibly unterminated 'try' statement
Module metadata must be an object
break requires a label to break to
try .["field"] instead of .field for unusually named fields
May need parentheses around object key expression
jq: error: library should only have function definitions, not a main expression
block_has_only_binders_and_imports(*answer, OP_IS_CALL_PSEUDO)
:*3$"
3p869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3h869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3c869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3s869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3e869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3p869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3h869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3c869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3s869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3e869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3p869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3h869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3c869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3s869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3e869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3p869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3h869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3c869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3s869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3e869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3p869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3h869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3c869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3s869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3e869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3p869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3h869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3c869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3s869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3e869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3p869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3h869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3c869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3s869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3e869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
GA!stack_realign
GA+stack_clash
GA*cf_protection
GA+omit_frame_pointer
GA*GOW
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
3p869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3h869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3c869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3s869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3e869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3p869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3h869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3c869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3s869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3e869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3p869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3h869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3c869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3s869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3e869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3p869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3h869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3c869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3s869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3e869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3p869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3h869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3c869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3s869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3e869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3p869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3h869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3c869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3s869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3e869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3p869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3h869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3c869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3s869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3e869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3p869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3h869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3c869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3s869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3e869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3p869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3h869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3c869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3s869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3e869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3p869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3h869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3c869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3s869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3e869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3p869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3h869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3c869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3s869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
3e869
gcc 9.0.1 20190129
GA*GOW
GA+stack_clash
GA*cf_protection
GA*FORTIFY
GA+GLIBCXX_ASSERTIONS
GA+omit_frame_pointer
GA!stack_realign
libjq.so.1.0.4-1.6-2.fc30.x86_64.debug
.data
.rodata
.shstrtab
.plt.sec
.dynamic
.note.gnu.build-id
.eh_frame
.gnu.hash
.fini
.gnu_debuglink
.dynsym
.gnu.version
.rela.dyn
.data.rel.ro
.gnu.version_r
.eh_frame_hdr
.dynstr
.gnu.build.attributes
.bss
.tbss
.init
.rela.plt
.got
.text
.fini_array
.init_array
.note.gnu.property
