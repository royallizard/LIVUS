/lib64/ld-linux-x86-64.so.2
i{a;&
.3MK
TJZ`_1
_sQB
tTCjIL3
+[si
1C)C
y@zj
libm.so.6
_ITM_deregisterTMCloneTable
__gmon_start__
_Jv_RegisterClasses
_ITM_registerTMCloneTable
libjemalloc.so.1
malloc_usable_size
libdl.so.2
libpthread.so.0
fsync
__errno_location
accept
fcntl
connect
libc.so.6
epoll_create
socket
fflush
__printf_chk
srand
fopen
gai_strerror
strncmp
__strdup
perror
__isoc99_sscanf
epoll_wait
__read_chk
inet_ntop
signal
strncpy
puts
time
__stack_chk_fail
putchar
listen
abort
stdin
strtoll
getpid
chmod
__assert_fail
strtod
strtol
isatty
fgets
strlen
getaddrinfo
memset
strstr
tcsetattr
bind
memcmp
getsockopt
poll
__fprintf_chk
stdout
fputc
memcpy
fclose
__vsnprintf_chk
setsockopt
strcasecmp
getpeername
__ctype_b_loc
getenv
stderr
ioctl
__snprintf_chk
__memset_chk
strncasecmp
strtoull
fileno
usleep
fwrite
fread
gettimeofday
epoll_ctl
__memcpy_chk
strchr
getsockname
tcgetattr
__ctype_toupper_loc
__ctype_tolower_loc
__cxa_finalize
freeaddrinfo
__xpg_strerror_r
__sprintf_chk
memmove
fopen64
strcmp
__libc_start_main
snprintf
sysconf
__cxa_atexit
_edata
__bss_start
_end
sdscpy
anetPeerToString
__libc_csu_fini
sdsfromlonglong
listRelease
redisFormatCommandArgv
listAddNodeHead
aeResizeSetSize
aeCreateTimeEvent
redisContextSetTimeout
linenoisePrintKeyCodes
sdsdup
sdsll2str
anetNonBlock
redisReaderCreate
zmalloc_enable_thread_safeness
anetUnixNonBlockConnect
hex_digit_to_int
redisvCommand
aeGetSetSize
redisFreeKeepFd
redisAppendFormattedCommand
redisReaderGetReply
redisBufferWrite
anetSockName
sdsjoin
linenoiseSetMultiLine
redisCommandArgv
linenoiseEditBackspace
bytesToHuman
sdscatprintf
anetWrite
sdssplitlen
commandHelp
redisCheckSocketError
redisvAppendCommand
aeDeleteTimeEvent
zmalloc_get_rss
aeDeleteFileEvent
anetUnixGenericConnect
sdsupdatelen
anetGenericResolve
redisConnectWithTimeout
zmalloc_set_oom_handler
redisReaderFeed
listRewindTail
listRewind
anetUnixServer
anetTcpConnect
anetSetSendBuffer
sdsMakeRoomFor
compute_something_fast
zlibc_free
aeGetFileEvents
sdssplitargs
listAddNodeTail
redisGitDirty
redisGitSHA1
sdsmapchars
linenoiseEditDeletePrevWord
zmalloc
anetRead
anetBlock
anetTcpServer
aeProcessEvents
sdsrange
linenoiseEditMoveLeft
redisGetReplyFromReader
listReleaseIterator
anetSendTimeout
sdsfree
listNext
__redisSetError
__data_start
sdsRemoveFreeSpace
redisContextConnectUnix
linenoiseHistoryLoad
linenoiseEditMoveRight
linenoiseSetCompletionCallback
sdsnewlen
redisConnectFd
redisContextConnectBindTcp
anetTcpNonBlockConnect
linenoise
used_memory_mutex
anetResolve
aeDeleteEventLoop
sdscmp
redisBuildId
_IO_stdin_used
listIndex
listSearchKey
redisConnectUnix
sdstolower
linenoiseHistorySetMaxLen
zmalloc_get_smap_bytes_by_field
linenoiseEditInsert
linenoiseHistoryAdd
anetEnableTcpNoDelay
listCreate
anetSetBlock
zmalloc_get_private_dirty
sdscpylen
redisFree
__libc_csu_init
redisConnectBindNonBlock
redisKeepAlive
anetKeepAlive
aeCreateEventLoop
sdsclear
zrealloc
linenoiseAddCompletion
redisFormatCommand
listRotate
linenoiseEditMoveHome
sdscat
redisSetTimeout
sdstoupper
sdstrim
redisConnectUnixWithTimeout
listInsertNode
redisConnectNonBlock
listDelNode
linenoiseHistorySave
redisConnectUnixNonBlock
anetUnixConnect
sdscatvprintf
aeWait
anetTcp6Server
freeReplyObject
redisContextConnectTcp
linenoiseEditDelete
listDup
crc64
anetTcpKeepAlive
anetTcpAccept
zmalloc_get_fragmentation_ratio
anetResolveIP
sdscatlen
zcalloc
sdsIncrLen
anetUnixAccept
aeMain
sdsfreesplitres
listGetIterator
aeSetBeforeSleepProc
sendSync
redisAppendCommandArgv
redisCommand
is_hex_digit
redisBufferRead
aeCreateFileEvent
linenoiseClearScreen
sdscatrepr
linenoiseEditHistoryNext
zmalloc_used_memory
zfree
sdscatsds
linenoiseEditMoveEnd
sdsempty
aeGetApiName
redisReaderFree
redisConnect
redisGetReply
sdsAllocSize
sdsgrowzero
redisEnableKeepAlive
aeStop
anetDisableTcpNoDelay
zstrdup
redisvFormatCommand
sdsull2str
sdscatfmt
sdsnew
__redisAppendCommand
GLIBC_2.2.5
GLIBC_2.7
GLIBC_2.14
GLIBC_2.3.2
GLIBC_2.4
GLIBC_2.3.4
GLIBC_2.3
%zn!
%rn!
%jn!
%bn!
%Zn!
%Rn!
%Jn!
%Bn!
%:n!
%2n!
%*n!
%"n!
%zm!
%rm!
%jm!
%bm!
%Zm!
%Rm!
%Jm!
%Bm!
%:m!
%2m!
%*m!
%"m!
%zl!
%rl!
%jl!
%bl!
%Zl!
%Rl!
%Jl!
%Bl!
%:l!
%2l!
%*l!
%"l!
AWAVA
AUATH
D$8H
T$0H
D$@H
T$8H
T$@H
T$HH
D$0H
d$4H
D$@H
L$0H
l$HH
L$8H
L$@H
L$HH
hu`A9
~oHc
[]A\A]A^A_
<xu7A
<pu<A
<su,A
<ruZE
<iu<A
<nu3E
HiD$0@B
D$8H
HiL$0@B
L$8H
Hit$0@B
t$8H
HiD$0@B
D$8H
H+D$
H;D$
HiD$0@B
D$8H
H+D$
HiD$0@B
D$8H
==|!
d$PI
=W{!
D$(1
H;P r
D$,H
=Au!
t$,E
HiD$0@B
D$8H
|$,H
=!s!
t$,D
|$,H
HiD$0@B
D$8H
H+D$
HiD$0@B
D$8I
Li|$0@B
HiL$0@B
L$8H
=1p!
=Dn!
fffff.
fffff.
fffff.
=QL!
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
[]A\A]A^
[]A\A]A^
fff.
AUATI
[]A\A]
AVAUE
ATUL
l$@dH
D$H1
t$HdH34%(
P[]A\A]A^
AUAT1
[]A\A]
AUATL
D$H1
8su>H
L$HdH3
X[]A\A]
AVAUA
ATUI
VUUUA
[]A\A]A^
ATUI
D$H1
\$HdH3
P[]A\
AVAUI
ATUI
D$x1
L$xdH3
[]A\A]A^
tbAUATA
[]A\A]
[]A\A]
tbAUATA
[]A\A]
[]A\A]
AWAVI
AUATA
[]A\A]A^A_
fff.
AVAUI
ATUI
[]A\A]A^
ffffff.
AUATI
[]A\A]
AUATI
[]A\A]
fff.
ATUH
StDI
[]A\
fff.
fffff.
ffffff.
fff.
AUATUSH
[]A\A]
AVAUI
ATUH
[]A\A]A^
fffff.
AUATH
[]A\A]
fff.
ffff.
fff.
AWAVI
AUATI
[]A\A]A^A_
D$0H
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
ffffff.
AWAVI
AUATUSH
T$pH
L$xL
D$X1
D$0H
D$`H
d$@H
|$XdH3<%(
[]A\A]A^A_
D$(H
D$(H
T$0H
T$(<sH
/v3H
T$0H
T$0H
D$(Hc2
L$0H
T$0H
AVAUI
ATUI
wBH)
A\A]A^
AWAVA
AUATUS
T$(H
uAHc
T$ H
D;l$8}vA
[]A\A]A^A_
t$<Hc
D$0A
[]A\A]A^A_
[]A\A]A^A_
Hct$<H
fffff.
tKHc
ATUSH
fffff.
ATUI
[]A\
@tcH
AWAVI
AUATI
D$(1
D$'H
|$(dH3<%(
8[]A\A]A^A_
D$'	
5wLH
5v;H
D$'I
fff.
AWAVI
AUATH
H;\$
[]A\A]A^A_
AUATI
[]A\A]
fff.
fff.
AUATI
uBH;+H
[]A\A]
fff.
fff.
ATUI
D$ H
[]A\
[]A\
[]A\
AUATI
D$ H
D$ H
[]A\A]
t	H9
=#:!
=I;!
AUATI
[]A\A]
[]A\A]H
IcT$
[]A\A]H
IcT$
]A\A]
D$(H
I9\$ 
5c9!
=q8!
=b9!
t*Hc
=N8!
AWAVAUATI
D$81
L$8dH3
H[]A\A]A^A_
D$ L
tdE1
L;} r
AVAUATUSH
[]A\A]A^
]A\A]A^
[]A\A]A^
L;c M
]A\A]A^
[]A\A]A^1
=i3!
fff.
AVAUATUA
=x3!
5f3!
[]A\A]A^
ATUH
tQH9
vLL)
[]A\
AWAV
AUATI
 9-K/!
%G/!
([]A\A]A^A_
=#.!
AWAVAUATUSH
D$HL
D$PH
\$(H
D$PH
D$XH
D$pI
D$xI
D$*1
\$PH
l$dH
D$pH
ECHO
D$xH
012H
34567890H
12345678H
L$HH
H+D$
=S(!
T$(H
AWAVH
AUATUSH
D$HH
d$@H
D$XH
T$0H
^D$@
D$(H
D$(H
T$<H
D$0H
D$(H
E H9
D$<H
=:%!
=a#!
E(IcU
|$XK
M;l$ L
D$(M
\$ L
D$(H
M;l$ L
=4 !
l$H1
D$(H
fffff.
ffffff.
ATUH
<$-tbI
[]A\
AVAUATUA
~cH)
[]A\A]A^
AWAVI
AUATA
([]A\A]A^A_
AWAVI
AUATUS
[]A\A]A^A_
ffff.
AWAVAUATUSH
?~LH
dH34%(
fffff.
ffff.
ATUI
uhH)-
[]A\
[]A\
H)-^
tSSH
fff.
=9	!
[]A\
AWAVH
AUATI
[]A\A]A^A_
ATUI
 []A\
ffff.
ATUA
tyHcC
k8~+A
[]A\
fff.
AUATUSHc
~7A)
[]A\A]
ffff.
AWAVAUATUSH
$uaH
t#D	+A
A;,$L
([]A\A]A^A_
AUATUSH
([]A\A]
x*Hc
AWAVI
AUATI
[]A\A]A^A_
t)SH;2u
H93t
ffffff.
AWAVAUATUSH
D$(1
t$(dH34%(
8[]A\A]A^A_
H9D$
H+L$
fff.
fff.
H9] w
AVAUI
ATUI
ufIcT$
[]A\A]A^
]A\A]A^
ffff.
ATUA
[]A\
fffff.
ffff.
ATUI
C(tHI
uEIcT$
[]A\
[]A\
u~Hc
ffffff.
fffff.
AWAVI
AUATUSH
D$ "\a"
l$0L
[]A\A]A^A_
4$H)
L;T$
D$ "\r"
D$ "\n"
l$ L
D$ "\t"
D$ "\b"
ffff.
AWAVAUATUSH
\$h1
t<<%
gfff
<.u-I
t$8H
D$8H
D$@H
D$HA
|$ L
L$(L
L$(M
gfff
|$(h
|$(l
\$hdH3
x[]A\A]A^A_
gfff
L9|$
D;t$
<ltUI
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
ffffff.
AWAVA
AUATI
gfff
gfffH
H9l$
u5Ic
([]A\A]A^A_
ffffff.
ATUA
[]A\
ATUA
[]A\
ATUA
[]A\
AUATI
[]A\A]
ffff.
fff.
fff.
ATUSH
[]A\
fff.
ATUSD
[]A\
AUATUSH
([]A\A]
ffffff.
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
ffffff.
fff.
T$0H
L$8L
D$@L
L$Ht7
)D$P
)L$`
)T$p
ffffff.
AUAT
[]A\A]
ATUH
[]A\
[]A\
[]A\
ffffff.
AVAUA
ATUI
VUUUA
x(E1
[]A\A]A^
ATUSH
H=@B
[]A\
fffff.
AWAVM
AUATL
\$pL
l$@H
|$0H
l$0H
D$8H
|$8M
L$,A
[]A\A]A^A_
fffff.
AWAVI
AUAT1
[]A\A]A^A_
AUATI
[]A\A]
AWAVAUATUSH
D$x1
t$0H
D$0L
HcT$(
D$xdH3
[]A\A]A^A_
K@Lc
t$0H
l$ E
l$ L
|$4H
T$0L
C(HcT$(
t$ H
H;K8H
HcT$
ATUH
D$81
[u?H
L$8dH3
@[]A\
D$H1
D$ H
D$(H
L$HdH3
ATUS
[]A\
AUATI
[]A\A]
[]A\A]
fffff.
W8H;W
G H;G@r
G(H;G8t
fffff.
G8H9G(t
AWAVAUATUSH
+GPH
+CPH
CPxnA9
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
G(H9
fffff.
fff.
ATUH
 uLH
L)e8H
[]A\
AVAUH
ATUSH
    L
 []A\A]A^
fffff.
AVAUD
ATUSE
tCA9
[]A\A]A^
]A\A]A^
AWAVAUATUSH
[]A\A]A^A_
\$XH
D$pH
D$Bf
D$XH
|$TH
D$>L
d$PH
D$ H
D$(H
D$?H
D$><	
D$xL
D$xH
L$@H
D$HL
|$XL
t$xL
D$xH
t$xL
|$XH
D$?<	
uHH9l$@
H9l$@v
D$HH
t$`H
|$XH
D$xH
L$@H
AWAVAUATUS
Lcd$
[]A\A]A^A_
~:f.
[]A\
AWAVA
AUATL
[]A\A]A^A_
accept: %s
setsockopt TCP_NODELAY: %s
setsockopt SO_REUSEADDR: %s
bind: %s
listen: %s
setsockopt: %s
unable to bind socket
creating socket: %s
fcntl(F_GETFL): %s
fcntl(F_SETFL,O_NONBLOCK): %s
setsockopt SO_KEEPALIVE: %s
setsockopt TCP_KEEPIDLE: %s
setsockopt TCP_KEEPINTVL: %s
setsockopt TCP_KEEPCNT: %s
setsockopt SO_SNDBUF: %s
setsockopt SO_SNDTIMEO: %s
connect: %s
sds.c
\x%02x
sh->free >= (unsigned int)incr
sh->len >= (unsigned int)(-incr)
sdsIncrLen
Error: %s
2.8.19
 (git:%s
-dirty
SELECT %d
%lld
Unknown reply type: %d
[%s]:%d
%s:%d
redis %s
[%d]
(error) %s
(integer) %lld
(nil)
(empty list or set)
%%s%%%dd) 
ERROR,
MOVED
help 
Reading from standard input
[1m%s
[0m 
[90m%s
[33msummary:
[0m %s
[33msince:
[0m %s
[33mgroup:
[0m %s
Error reading from stdin: %s
errors: %lld, replies: %lld
zset
bytes
items
members
fields
DBSIZE
Couldn't determine DBSIZE!
SCAN %llu
I/O error
SCAN error: %s
redis-cli.c
reply->element[0]->type == 1
reply->element[1]->type == 2
TYPE %s
none
STRLEN
LLEN
HLEN
ZCARD
%s %s
-------- summary -------
%s:%d: %s
%s: %s
AUTH %s
SYNC
Error writing to master
SYNC with master failed: %s
info
cluster
nodes
client
graph
doctor
shutdown
monitor
psubscribe
psync
select
auth
argc > 0
Can't open file '%s': %s
EVAL
Error opening '%s': %s
%lluB
%.2fK
%.2fM
%.2fG
generic
not connected> 
127.0.0.1
FAKETTY
--help
--raw
--no-raw
--csv
--latency
--latency-history
--slave
--stat
--scan
--pattern
--intrinsic-latency
--rdb
--pipe
--pipe-timeout
--bigkeys
--eval
--version
redis-cli %s
PING
 -- %.2f seconds range
!c->err
Reconnecting (%d)...
INFO
ERROR: %s
db%d:keys
%-11s
used_memory
connected_clients
 %-8s
blocked_clients
total_commands_processed
%ld (+%ld)
%-19s
total_connections_received
 %-12s
bgsave_in_progress
aof_rewrite_in_progress
SAVE+AOF
SCAN %llu MATCH %s
HOME
%s/.rediscli_history
Invalid argument(s)
quit
exit
connect
clear
(%.2fs)
APPEND
key value
Append a value to a key
2.0.0
AUTH
password
Authenticate to the server
1.0.0
BGREWRITEAOF
BGSAVE
BITCOUNT
key [start] [end]
Count set bits in a string
2.6.0
BITOP
BITPOS
key bit [start] [end]
2.8.7
BLPOP
key [key ...] timeout
BRPOP
BRPOPLPUSH
source destination timeout
2.2.0
CLIENT GETNAME
2.6.9
CLIENT KILL
ip:port
2.4.0
CLIENT LIST
CLIENT PAUSE
2.9.50
CLIENT SETNAME
connection-name
CONFIG GET
parameter
CONFIG RESETSTAT
CONFIG REWRITE
2.8.0
CONFIG SET
parameter value
DEBUG OBJECT
DEBUG SEGFAULT
Make the server crash
DECR
DECRBY
key decrement
Delete a key
DISCARD
DUMP
ECHO
Echo the given string
EVALSHA
EXEC
1.2.0
Determine if a key exists
key seconds
key timestamp
FLUSHALL
FLUSHDB
Get the value of a key
GETBIT
key offset
GETRANGE
key start end
GETSET
HDEL
key field [field ...]
HEXISTS
key field
HGET
Get the value of a hash field
HGETALL
HINCRBY
key field increment
HINCRBYFLOAT
HKEYS
Get all the fields in a hash
HMGET
HMSET
HSCAN
HSET
key field value
HSETNX
HVALS
Get all the values in a hash
INCR
key increment
[section]
LASTSAVE
LINDEX
key index
LINSERT
key BEFORE|AFTER pivot value
Get the length of a list
key value [value ...]
LPUSHX
LRANGE
key start stop
LREM
key count value
Remove elements from a list
LSET
key index value
LTRIM
MIGRATE
MONITOR
key db
key value [key value ...]
1.0.1
MSETNX
MULTI
2.2.3
PERSIST
PEXPIRE
key milliseconds
PEXPIREAT
key milliseconds-timestamp
PFADD
key element [element ...]
2.8.9
PFCOUNT
PFMERGE
Ping the server
PSETEX
key milliseconds value
PSUBSCRIBE
pattern [pattern ...]
PTTL
PUBLISH
channel message
Post a message to a channel
PUBSUB
PUNSUBSCRIBE
[pattern [pattern ...]]
QUIT
Close the connection
RANDOMKEY
RENAME
key newkey
Rename a key
RENAMENX
RESTORE
key ttl serialized-value
source destination
RPUSH
RPUSHX
SADD
key member [member ...]
SCRIPT EXISTS
script [script ...]
SCRIPT FLUSH
SCRIPT KILL
SCRIPT LOAD
script
SDIFF
Subtract multiple sets
SDIFFSTORE
destination key [key ...]
SELECT
Set the string value of a key
SETBIT
key offset value
key seconds value
SETRANGE
SHUTDOWN
[NOSAVE] [SAVE]
SINTER
Intersect multiple sets
SINTERSTORE
SISMEMBER
key member
SLAVEOF
host port
SLOWLOG
subcommand [argument]
2.2.12
SMEMBERS
Get all the members in a set
SMOVE
source destination member
SORT
SPOP
SRANDMEMBER
key [count]
SREM
SSCAN
channel [channel ...]
SUNION
Add multiple sets
SUNIONSTORE
SYNC
TIME
TYPE
[channel [channel ...]]
UNWATCH
Forget about all watched keys
ZADD
ZCOUNT
key min max
ZINCRBY
key increment member
ZINTERSTORE
ZLEXCOUNT
ZRANGE
key start stop [WITHSCORES]
ZRANGEBYLEX
ZRANGEBYSCORE
1.0.5
ZRANK
ZREM
ZREMRANGEBYLEX
ZREMRANGEBYRANK
ZREMRANGEBYSCORE
ZREVRANGE
ZREVRANGEBYSCORE
ZREVRANK
ZSCAN
ZSCORE
ZUNIONSTORE
sorted_set
pubsub
transactions
scripting
hyperloglog
redis-cli %s
Usage: redis-cli [OPTIONS] [cmd [arg [arg ...]]]
  -h <hostname>      Server hostname (default: 127.0.0.1).
  -p <port>          Server port (default: 6379).
  -s <socket>        Server socket (overrides hostname and port).
  -a <password>      Password to use when connecting to the server.
  -r <repeat>        Execute specified command N times.
  -i <interval>      When -r is used, waits <interval> seconds per command.
                     It is possible to specify sub-second times like -i 0.1.
  -n <db>            Database number.
  -x                 Read last argument from STDIN.
  -d <delimiter>     Multi-bulk delimiter in for raw formatting (default: \n).
  -c                 Enable cluster mode (follow -ASK and -MOVED redirections).
  --raw              Use raw formatting for replies (default when STDOUT is
                     not a tty).
  --no-raw           Force formatted output even when STDOUT is not a tty.
  --csv              Output in CSV format.
  --stat             Print rolling stats about server: mem, clients, ...
  --latency          Enter a special mode continuously sampling latency.
  --latency-history  Like --latency but tracking latency changes over time.
                     Default time interval is 15 sec. Change it using -i.
  --slave            Simulate a slave showing commands received from the master.
  --rdb <filename>   Transfer an RDB dump from remote server to local file.
  --pipe             Transfer raw Redis protocol from stdin to server.
  --pipe-timeout <n> In --pipe mode, abort with error if after sending all data.
                     no reply is received within <n> seconds.
                     Default timeout: %d. Use 0 to wait forever.
  --bigkeys          Sample Redis keys looking for big keys.
  --scan             List all keys using the SCAN command.
  --pattern <pat>    Useful with --scan to specify a SCAN pattern.
  --intrinsic-latency <sec> Run a test to measure intrinsic system latency.
                     The test will run for the specified amount of seconds.
  --eval <file>      Send an EVAL command using the Lua script at <file>.
  --help             Output this help and exit.
  --version          Output version and exit.
Examples:
  cat /etc/passwd | redis-cli -x set mypasswd
  redis-cli get mypasswd
  redis-cli -r 100 lpush mylist x
  redis-cli -r 100 -i 1 info | grep used_memory_human:
  redis-cli --eval myscript.lua key1 key2 , arg1 arg2 arg3
  redis-cli --scan --pattern '*:12345*'
  (Note: when using --eval the comma separates KEYS[] from ARGV[] items)
When no command is given, redis-cli starts in interactive mode.
Type "help" in interactive mode for information on available commands.
-> Redirected to slot [%d] located at %s:%d
Can't set the socket in non blocking mode: %s
Error reading from the server: %s
Error reading replies from server
Last reply received from server.
Error writing to the server: %s
All data transferred. Waiting for the last reply...
No replies for %d seconds: exiting.
# Scanning the entire keyspace to find biggest keys as well as
# average sizes per key type.  You can use -i 0.1 to sleep 0.1 sec
# per 100 SCAN commands (not usually needed).
Failed to allocate memory for largest key names!
Non ARRAY response from SCAN!
Invalid element count from SCAN!
Failed to allocate storage for keys!
Error getting type for key '%s' (%d: %s)
Invalid reply type (%d) for TYPE on key '%s'!
Unknown type '%s' for key '%s'
Error getting size for key '%s' (%d: %s)
Warning:  %s on '%s' failed (may have changed type)
[%05.2f%%] Biggest %-6s found so far '%s' with %llu %s
Failed to allocate memory for key!
[%05.2f%%] Sampled %llu keys so far
Sampled %llu keys in the keyspace!
Total key length in bytes is %llu (avg len %.2f)
Biggest %6s found '%s' has %llu %s
%llu %ss with %llu %s (%05.2f%% of keys, avg size %.2f)
Could not connect to Redis at 
Error reading bulk length while SYNCing
SYNC with master, discarding %llu bytes of bulk transfer...
SYNC done. Logging commands from master.
Error reading RDB payload while SYNCing
redis-cli %s
Type: "help @<group>" to get a list of commands in <group>
      "help <command>" for help on <command>
      "help <tab>" to get a list of possible help topics
      "quit" to exit
Reading messages... (press Ctrl-C to quit)
Entering slave output mode...  (press Ctrl-C to quit)
SYNC sent to master, writing %llu bytes to '%s'
Transfer finished with success.
I/O Error reading RDB payload from socket
Error writing data to file: %s
Unrecognized option or bad number of args for: '%s'
[2Kmin: %lld, max: %lld, avg: %.2f (%lld samples)
------- data ------ --------------------- load -------------------- - child -
keys       mem      clients blocked requests            connections          
Max latency so far: %lld microseconds.
%lld total runs (avg latency: %.4f microseconds / %.2f nanoseconds per run).
Worst run took %.0fx longer than the average latency.
Asynchronously rewrite the append-only file
Asynchronously save the dataset to disk
operation destkey key [key ...]
Perform bitwise operations between strings
Find first bit set or clear in a string
Remove and get the first element in a list, or block until one is available
Remove and get the last element in a list, or block until one is available
Pop a value from a list, push it to another list and return it; or block until one is available
Get the current connection name
Kill the connection of a client
Get the list of client connections
Stop processing commands from clients for some time
Set the current connection name
Get the value of a configuration parameter
Reset the stats returned by INFO
Rewrite the configuration file with the in memory configuration
Set a configuration parameter to the given value
Return the number of keys in the selected database
Get debugging information about a key
Decrement the integer value of a key by one
Decrement the integer value of a key by the given number
Discard all commands issued after MULTI
Return a serialized version of the value stored at the specified key.
script numkeys key [key ...] arg [arg ...]
Execute a Lua script server side
sha1 numkeys key [key ...] arg [arg ...]
Execute all commands issued after MULTI
Set a key's time to live in seconds
Set the expiration for a key as a UNIX timestamp
Remove all keys from all databases
Remove all keys from the current database
Returns the bit value at offset in the string value stored at key
Get a substring of the string stored at a key
Set the string value of a key and return its old value
Delete one or more hash fields
Determine if a hash field exists
Get all the fields and values in a hash
Increment the integer value of a hash field by the given number
Increment the float value of a hash field by the given amount
Get the number of fields in a hash
Get the values of all the given hash fields
key field value [field value ...]
Set multiple hash fields to multiple values
key cursor [MATCH pattern] [COUNT count]
Incrementally iterate hash fields and associated values
Set the string value of a hash field
Set the value of a hash field, only if the field does not exist
Increment the integer value of a key by one
Increment the integer value of a key by the given amount
Increment the float value of a key by the given amount
Get information and statistics about the server
Find all keys matching the given pattern
Get the UNIX time stamp of the last successful save to disk
Get an element from a list by its index
Insert an element before or after another element in a list
Remove and get the first element in a list
Prepend one or multiple values to a list
Prepend a value to a list, only if the list exists
Get a range of elements from a list
Set the value of an element in a list by its index
Trim a list to the specified range
Get the values of all the given keys
host port key destination-db timeout [COPY] [REPLACE]
Atomically transfer a key from a Redis instance to another one.
Listen for all requests received by the server in real time
Move a key to another database
Set multiple keys to multiple values
Set multiple keys to multiple values, only if none of the keys exist
Mark the start of a transaction block
subcommand [arguments [arguments ...]]
Inspect the internals of Redis objects
Remove the expiration from a key
Set a key's time to live in milliseconds
Set the expiration for a key as a UNIX timestamp specified in milliseconds
Adds the specified elements to the specified HyperLogLog.
Return the approximated cardinality of the set(s) observed by the HyperLogLog at key(s).
destkey sourcekey [sourcekey ...]
Merge N different HyperLogLogs into a single one.
Set the value and expiration in milliseconds of a key
Listen for messages published to channels matching the given patterns
Get the time to live for a key in milliseconds
subcommand [argument [argument ...]]
Inspect the state of the Pub/Sub subsystem
Stop listening for messages posted to channels matching the given patterns
Return a random key from the keyspace
Rename a key, only if the new key does not exist
Create a key using the provided serialized value, previously obtained using DUMP.
Remove and get the last element in a list
Remove the last element in a list, append it to another list and return it
Append one or multiple values to a list
Append a value to a list, only if the list exists
Add one or more members to a set
Synchronously save the dataset to disk
cursor [MATCH pattern] [COUNT count]
Incrementally iterate the keys space
Get the number of members in a set
Check existence of scripts in the script cache.
Remove all the scripts from the script cache.
Kill the script currently in execution.
Load the specified Lua script into the script cache.
Subtract multiple sets and store the resulting set in a key
Change the selected database for the current connection
key value [EX seconds] [PX milliseconds] [NX|XX]
Sets or clears the bit at offset in the string value stored at key
Set the value and expiration of a key
Set the value of a key, only if the key does not exist
Overwrite part of a string at key starting at the specified offset
Synchronously save the dataset to disk and then shut down the server
Intersect multiple sets and store the resulting set in a key
Determine if a given value is a member of a set
Make the server a slave of another instance, or promote it as master
Manages the Redis slow queries log
Move a member from one set to another
key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern ...]] [ASC|DESC] [ALPHA] [STORE destination]
Sort the elements in a list, set or sorted set
Remove and return a random member from a set
Get one or multiple random members from a set
Remove one or more members from a set
Incrementally iterate Set elements
Get the length of the value stored in a key
Listen for messages published to the given channels
Add multiple sets and store the resulting set in a key
Internal command used for replication
Return the current server time
Get the time to live for a key
Determine the type stored at key
Stop listening for messages posted to the given channels
Watch the given keys to determine execution of the MULTI/EXEC block
key score member [score member ...]
Add one or more members to a sorted set, or update its score if it already exists
Get the number of members in a sorted set
Count the members in a sorted set with scores within the given values
Increment the score of a member in a sorted set
destination numkeys key [key ...] [WEIGHTS weight] [AGGREGATE SUM|MIN|MAX]
Intersect multiple sorted sets and store the resulting sorted set in a new key
Count the number of members in a sorted set between a given lexicographical range
Return a range of members in a sorted set, by index
key min max [LIMIT offset count]
Return a range of members in a sorted set, by lexicographical range
key min max [WITHSCORES] [LIMIT offset count]
Return a range of members in a sorted set, by score
Determine the index of a member in a sorted set
Remove one or more members from a sorted set
Remove all members in a sorted set between the given lexicographical range
Remove all members in a sorted set within the given indexes
Remove all members in a sorted set within the given scores
Return a range of members in a sorted set, by index, with scores ordered from high to low
key max min [WITHSCORES] [LIMIT offset count]
Return a range of members in a sorted set, by score, with scores ordered from high to low
Determine the index of a member in a sorted set, with scores ordered from high to low
Incrementally iterate sorted sets elements and associated scores
Get the score associated with the given member in a sorted set
Add multiple sorted sets and store the resulting sorted set in a new key
cliOutputHelp
reconnectingInfo
sendScan
zmalloc: Out of memory trying to allocate %zu bytes
/proc/%d/stat
/proc/self/smaps
Private_Dirty:
00000000
2.8.19buildhw-07.phx2.fedoraproject.org-1425066366000000000
epoll
+tPOu
w!X|
HY{'
{VI!
D"A/oyu
w!hy
QguI
aco-nz
	6RtcZO"
H$BQ
XS&Y+
s3o\
\D2%4
u<~{
,6a<
;(uu
z`%1Is}
KM^bM
L	-	
='2T
URdN
.wM^
p&S@
!Y%E
>?Wn
sVwES
-oX"'
+7a_
Rg|/
)hiredis.c
parent->type == 2
prv->type == 2
cur->idx < prv->elements
r->buf != ((void *)0)
Out of memory
"\%c"
"%c"
"\x%02x"
eEfFgGaA
$%zu
pos == totlen
Server closed the connection
task->type == 6 || task->type == 5 || task->type == 1
Protocol error, got %s as reply type byte
No support for nested multi bulk replies with depth > 7
__redisSetError
redisFormatCommandArgv
redisvFormatCommand
diouxX
moveToNextTask
processItem
redisReaderFeed
createStringObject
createArrayObject
createIntegerObject
createNilObject
%s: 
fcntl(F_GETFL)
fcntl(F_SETFL)
getsockopt(SO_ERROR)
poll(2)
Can't create socket: %s
Can't get addr: %s
setsockopt(TCP_NODELAY)
Can't bind socket: %s
setsockopt(SO_RCVTIMEO)
setsockopt(SO_SNDTIMEO)
[%dB
[%dA
[%dC
%d;%d
dumb
TERM
[999C
[%dD
cons25
emacs
Linenoise key codes debugging mode.
Press keys to see scan codes. Type 'quit' at any time to exit.
'%c' %02x (%d) (type quit to exit)
;*3$"
redis-cli.debug
7zXZ
->iT
o:16C\
4o}22
WU6k'
L_i)
H=`S
Tc6N
3vWf
)o5I
7}_B
7H'=
+:Oz
EGG}
IE6X
T)Yi
Yth<
f_+Y
3A1<Z
9A{A
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.data
.bss
.gnu_debuglink
.gnu_debugdata
