6}tlRo
wsC="Cz
__gmon_start__
__cxa_finalize
_Jv_RegisterClasses
_ZN13bx_devmodel_c8init_memEP8bx_mem_c
__gxx_personality_v0
_ZN13bx_devmodel_c4initEv
_ZN13bx_devmodel_c5resetEj
_ZN9bx_keyb_c14resetinternalsEj
theKeyboard
_ZN9bx_keyb_c5resetEj
_ZN9bx_keyb_c14activate_timerEv
_ZN9bx_keyb_c20set_kbd_clock_enableEh
_ZN9bx_keyb_c11kbd_enQ_immEh
_ZN12logfunctions5panicEPKcz
_ZN14bx_keyb_stub_c11paste_bytesEPhi
pluginlog
_ZN14bx_keyb_stub_c12gen_scancodeEj
_ZN14bx_keyb_stub_c12mouse_motionEiiij
_ZN13bx_devmodel_cD0Ev
_ZTV13bx_devmodel_c
_ZN12logfunctionsD2Ev
_ZdlPv
_ZN13bx_devmodel_cD1Ev
_ZN9bx_keyb_c14controller_enQEhj
_ZN12logfunctions6ldebugEPKcz
_ZN9bx_keyb_c14get_kbd_enableEv
_ZN9bx_keyb_c20set_aux_clock_enableEh
_ZN9bx_keyb_c12read_handlerEPvjj
bx_devices
_ZN9bx_keyb_c7kbd_enQEh
_ZN12logfunctions4infoEPKcz
_ZN9bx_keyb_c19paste_delay_changedEj
libkeyboard_LTX_plugin_fini
_ZN9bx_keyb_c9mouse_enQEh
_ZN12logfunctions5errorEPKcz
_ZN9bx_keyb_c16mouse_enQ_packetEhhhh
_ZN9bx_keyb_c19create_mouse_packetEb
_ZN9bx_keyb_c12mouse_motionEiiij
_ZN9bx_keyb_c21mouse_enabled_changedEj
_ZN9bx_keyb_c17kbd_ctrl_to_mouseEh
bx_dbg
genlog
_ZN9bx_keyb_c15kbd_ctrl_to_kbdEh
bx_gui
_ZN9bx_keyb_c12gen_scancodeEj
bx_keymap
_ZN11bx_keymap_c12getBXKeyNameEj
scancodes
translation8042
strlen
_ZN9bx_keyb_c17service_paste_bufEv
_ZN11bx_keymap_c13findAsciiCharEh
_ZdaPv
_ZN9bx_keyb_c8periodicEj
_ZN9bx_keyb_c13timer_handlerEPv
_ZN9bx_keyb_c11paste_bytesEPhi
_ZN9bx_keyb_c13write_handlerEPvjjj
bx_pc_system
_ZN14bx_pc_system_c14set_enable_a20Ej
_ZN14bx_pc_system_c5ResetEj
_ZN14bx_pc_system_c14get_enable_a20Ev
_ZN9bx_keyb_c17kbd_param_handlerEP10bx_param_cil
_ZN10bx_param_c14get_param_pathEPci
_ZN8bx_gui_c21mouse_enabled_changedEj
__stack_chk_fail
_Unwind_Resume
_ZN9bx_keyb_cC2Ev
_ZN12logfunctionsC2Ev
_ZTV9bx_keyb_c
_ZN12logfunctions3putEPc
_ZN12logfunctions7settypeEi
_ZN9bx_keyb_c4initEv
pluginRegisterIRQ
pluginRegisterIOReadHandler
pluginRegisterIOWriteHandler
_ZN14bx_pc_system_c14register_timerEPvPFvS0_EjjjPKc
_ZN8bx_gui_c19register_statusitemEPKc
_ZN14bx_param_num_c11set_handlerEPFlP10bx_param_cilE
_ZN14bx_keyb_stub_cD0Ev
_ZN14bx_keyb_stub_cD1Ev
_ZN9bx_keyb_cD0Ev
_ZN9bx_keyb_cD1Ev
_ZN9bx_keyb_cC1Ev
libkeyboard_LTX_plugin_init
_Znwm
pluginRegisterDeviceDevmodel
_ZTI9bx_keyb_c
_ZTS9bx_keyb_c
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTI14bx_keyb_stub_c
_ZTS14bx_keyb_stub_c
_ZTI13bx_devmodel_c
_ZTVN10__cxxabiv121__vmi_class_type_infoE
_ZTS13bx_devmodel_c
_ZTI12logfunctions
_ZTVN10__cxxabiv117__class_type_infoE
_ZTS12logfunctions
_ZTV14bx_keyb_stub_c
libstdc++.so.6
libm.so.6
libc.so.6
libgcc_s.so.1
_edata
__bss_start
_end
libbx_keyboard.so.0
GCC_3.0
GLIBC_2.4
GLIBC_2.2.5
CXXABI_1.3
GLIBCXX_3.4
%z] 
%r] 
%j] 
%b] 
%Z] 
%R] 
%J] 
%B] 
%:] 
%2] 
%*] 
%"] 
=sZ 
=wV 
=_V 
51Z 
dt,H
-*T 
l$ H
t$ H
t$ H
t$ H
t$ H
t$ H
t$ H
t$ H
t$ H
Pt\I
t$ H
t$ H
l$ H
l$ H
l$ H
l$ H
l$ H
l$ L
t$(L
|$0H
AUATUSH
-U< 
[]A\A]
-;; 
ATUSH
%M. 
=a. 
[]A\A]A^
internal keyboard buffer full (imm)
%s called in %s stub. you must not have loaded the %s plugin
controller_enQ(%02x) source=%02x
controller_enq(): controller_Q full!
get_kbd_enable(): getting kbd_clock_enabled of: %02x
[mouse] read from 0x%02x returns 0x%02x
read from port 60h with outb empty
unknown address in io read to keyboard port %x
internal keyboard buffer full, ignoring scancode.(%02x)
kbd_enQ: putting scancode 0x%02x in internal buffer
will paste characters every %d keyboard ticks
[mouse] internal mouse buffer full, ignoring mouse data.(%02x)
Ignoring useless mouse_motion call:
This should be fixed in the gui code.
MOUSE: kbd_ctrl_to_mouse(%02xh)
[mouse] Sampling rate set: %d Hz
wheel mouse mode request rejected
[mouse] Resolution set to %d counts per mm
MOUSE: unknown last command (%02xh)
[mouse] wrap mode: Ignoring command %0X02.
[mouse] Mouse enabled (stream mode)
[mouse] Mouse disabled (stream mode)
mouse: invalid resolution_cpmm
[mouse] Warning: Read Data command partially supported.
[mouse] kbd_ctrl_to_mouse(): got value of 0x%02x
controller passed byte %02xh to keyboard
setting delay to 250 mS (unused)
setting delay to 500 mS (unused)
setting delay to 750 mS (unused)
setting delay to 1000 mS (unused)
setting repeat rate to %.1f cps (unused)
Received scancodes set out of range: %d
Expecting scancode set info...
identify keyboard command received
reset-disable command received
kbd_ctrl_to_kbd(): got value of 0x%02x
keyboard: gen_scancode with scancode_translate cleared
gen_scancode(): writing translated %02x
gen_scancode(): writing raw %02x
service_paste_buf: ptr at %d out of %d
paste character 0x%02x ignored
pasting character 0x%02x. baseKey is %04x
service_keyboard: key in internal buffer waiting
service_keyboard: key(from mouse) in internal buffer waiting
service_keyboard(): no keys waiting
previous paste was not completed!  %d chars lost
keyboard: 8-bit write to %04x = %02x
write to port 60h, not ready for write
keyboard: scan convert turned off
write output port with value %02xh
write output port : %sable A20
write output port : processor reset requested!
=== unsupported write to port 60h(lastcomm=%02x): %02x
kbd: OUTB set and command 0x%02x encountered
keyboard BIOS name not supported
keyboard BIOS version not supported
'get controller version' not supported yet
io write to port 64h, command d0h (partial)
io write 0x64: command = 0xD3(write mouse outb)
io write 0x64: command = 0xD4 (write to mouse)
io write 0x64: write keyboard output buffer
io write 0x64: command = %02xh
io write 0x64: command 0xfe: reset cpu
io write to port 64h, useless command %02x
unsupported io write to keyboard port %x, value = %x
unknown address in bx_keyb_c::write()
keyboard_mouse.keyboard.paste_delay
kbd_param_handler called with unexpected parameter '%s'
Init $Id: keyboard.cc,v 1.121 2006/08/25 18:26:27 vruppert Exp $
8042 Keyboard controller (PS/2 mouse)
keyboard_mouse.keyboard.serial_delay
keyboard
paste_bytes
gen_scancode
mouse_motion
set_aux_clock_enable(%u)
s.controller_Qsize: %02X
READ(%02x) = %02x
num_elements = %d
kbd_enQ(0x%02x)
activating timer...
keyboard plugin_fini
mouse_enQ(%02x)
[mouse] Dx=%d Dy=%d Dz=%d
PS/2 mouse %s
  enable = %u
  allow_irq12 = %u
  aux_clock_enabled = %u
wheel mouse mode enabled
[mouse] Unknown resolution %d
[mouse] Scaling set to 1:1
[mouse] Scaling set to 2:1
[mouse] Mouse stream mode on.
[mouse] Mouse wrap mode off.
[mouse] Mouse wrap mode on.
[mouse] Mouse remote mode on.
[mouse] Read mouse ID
[mouse] Set Defaults
wheel mouse mode disabled
[mouse] Mouse reset
[mouse] Get mouse information
[mouse] ignoring 0xbb command
LED status set to %02x
Switched to scancode set %d
keyboard_mouse.keyboard.type
setting typematic info
reset-enable command received
got 0xFE (resend)
reset command received
released
pressed
gen_scancode(): %s %s
paste_bytes: %d bytes
 allow_irq12 set to %u
get keyboard command byte
write command byte
aux device disabled
aux device enabled
Self Test
keyboard disabled
keyboard enabled
write output port
keyboard_mouse.mouse.enabled
8042 Keyboard controller
keyboard_mouse.mouse.type
CAPS
SCRL
?9bx_keyb_c
14bx_keyb_stub_c
13bx_devmodel_c
12logfunctions
zPLR
CA?=;<XdDB@>
)Ye8*p
Zfq,
[g.- 
\h9/!
]i10#"
^jr2$
	_k3%
`l45&'
ams(t
bn:6
u+cvUVwxyz
{|O}KG~
oRSPLMH
EWNQJ7IFT
libbx_keyboard.so.0.0.0.debug
.shstrtab
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.gcc_except_table
.ctors
.dtors
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.data
.bss
.gnu_debuglink
