/lib/ld-linux.so.2
libxml2.so.2
_ITM_deregisterTMCloneTable
__gmon_start__
_Jv_RegisterClasses
_ITM_registerTMCloneTable
htmlParseChunk
xmlTextReaderHasValue
xmlNoNetExternalEntityLoader
xmlParseDocument
xmlParseChunk
xmlSchematronNewParserCtxt
xmlParseFile
xmlFreePattern
inputPush
xmlFreeStreamCtxt
xmlXPathIsNaN
xmlFreeTextReader
xmlFreeValidCtxt
xmlRelaxNGValidateDoc
xmlC14NDocDumpMemory
xmlValidGetValidElements
xmlMemoryStrdup
xmlAddEncodingAlias
xmlMemMalloc
xmlSaveTree
_init
xmlRelaxNGCleanupTypes
xmlSchemaParse
xmlFreeParserInputBuffer
xmlCtxtReadIO
xmlTextReaderConstNamespaceUri
xmlTextReaderIsEmptyElement
xmlXPathNewContext
xmlRelaxNGSetParserErrors
__xmlParserVersion
htmlDocDump
xmlTextReaderIsValid
xmlStreamPop
xmlSetCompressMode
xmlDocDumpFormatMemory
xmlSAXDefaultVersion
xmlXPathIsInf
xmlSchemaSetParserErrors
xmlPedanticParserDefault
__xmlParserDebugEntities
xmlDebugDumpDocument
xmlRelaxNGFreeParserCtxt
xmlParseDTD
xmlNodeSetContent
xmlCheckVersion
xmlFreeParserCtxt
xmlNewIOInputStream
xmlValidateDocument
xmlTextReaderConstValue
xmlReadFile
xmlDebugDumpEntities
htmlCreatePushParserCtxt
xmlReaderWalker
xmlSchematronFree
__xmlTreeIndentString
xmlMemSetup
xmlXPathFreeObject
htmlSaveFile
xmlSetExternalEntityLoader
xmlCopyDoc
xmlNewDoc
xmlSchemaFreeValidCtxt
xmlCleanupParser
_fini
xmlSchemaSetValidErrors
__xmlLoadExtDtdDefaultValue
xmlStrdup
xmlSchemaValidateStream
xmlStrndup
xmlSchemaFreeParserCtxt
xmlSaveToFilename
xmlFreeDoc
xmlValidateDtd
xmlTextReaderNodeType
xmlSchemaValidateDoc
__xmlGenericErrorContext
xmlNewParserCtxt
xmlCtxtReadMemory
xmlTextReaderSchemaValidate
xmlSchematronFreeParserCtxt
xmlTextReaderConstName
xmlPatternMatch
__xmlGenericError
xmlHasFeature
xmlDocGetRootElement
xmlEncodeEntitiesReentrant
xmlCtxtUseOptions
xmlSchematronValidateDoc
xmlSchemaFree
xmlCreatePushParserCtxt
xmlRelaxNGNewValidCtxt
xmlSaveClose
xmlPatterncompile
xmlTextReaderSetParserProp
xmlFree
xmlSchemaValidateSetFilename
xmlRelaxNGParse
xmlFreeDtd
htmlReadMemory
__xmlDoValidityCheckingDefaultValue
xmlSchematronFreeValidCtxt
xmlTextReaderConstLocalName
xmlDeregisterNodeDefault
xmlDocDumpMemory
xmlTextReaderCurrentNode
xmlGetIntSubset
xmlParserInputBufferCreateFilename
xmlTextReaderRelaxNGValidate
xmlTextReaderRead
xmlXPathFreeContext
xmlGetExternalEntityLoader
xmlShell
xmlXPathEval
xmlStreamPush
xmlReadFd
xmlStrcat
xmlSubstituteEntitiesDefault
xmlMemRealloc
xmlFreeEnumeration
htmlFreeParserCtxt
xmlSchemaNewValidCtxt
xmlReaderForMemory
xmlMemoryDump
xmlSchemaNewParserCtxt
xmlMemUsed
xmlUnlinkNode
xmlGetNodePath
xmlReadIO
xmlXIncludeProcessFlags
xmlLineNumbersDefault
xmlNewValidCtxt
xmlSaveFile
xmlTextReaderDepth
xmlNewDocNode
htmlReadFile
htmlSaveFileFormat
xmlDocSetRootElement
xmlRelaxNGSetValidErrors
xmlRegisterNodeDefault
xmlMemFree
__xmlGetWarningsDefaultValue
xmlCtxtReadFile
xmlRelaxNGFreeValidCtxt
xmlReaderForFile
xmlXPathOrderDocElems
xmlPatternGetStreamCtxt
xmlKeepBlanksDefault
xmlSaveToFd
xmlLoadCatalogs
xmlSchematronParse
xmlSchematronNewValidCtxt
xmlRelaxNGFree
xmlDocDumpFormatMemoryEnc
xmlReadMemory
xmlSaveDoc
xmlRelaxNGNewParserCtxt
xmlDocDumpMemoryEnc
libdl.so.2
libz.so.1
liblzma.so.5
libm.so.6
libc.so.6
_IO_stdin_used
__printf_chk
exit
__isoc99_sscanf
mmap64
putchar
stdin
__assert_fail
strtol
fgets
strlen
__fprintf_chk
stdout
fputc
fputs
fclose
__vsnprintf_chk
malloc
__xstat64
getenv
stderr
munmap
__snprintf_chk
fwrite
fread
gettimeofday
__fread_chk
fprintf
__vfprintf_chk
__cxa_finalize
fopen64
strcmp
__libc_start_main
snprintf
free
__stack_chk_fail
_edata
__bss_start
_end
LIBXML2_2.9.0
LIBXML2_2.5.6
LIBXML2_2.6.3
LIBXML2_2.6.18
LIBXML2_2.6.8
LIBXML2_2.5.7
LIBXML2_2.6.20
LIBXML2_2.6.21
LIBXML2_2.5.0
LIBXML2_2.6.0
LIBXML2_2.5.2
LIBXML2_2.5.8
LIBXML2_2.4.30
GLIBC_2.1.3
GLIBC_2.4
GLIBC_2.2
GLIBC_2.7
GLIBC_2.3.4
GLIBC_2.1
GLIBC_2.0
D$|1
D$ PWj
t$`j
tARj
y/PP
QQUV
QQUV
D$|e3
[^_]
XZWU
)~	W
CQQPU
t)PP
[^_]
L$Du
T$8t
D$L9E
[^_]
T$Dt
8-tm1
T$8t
T$8u
T$8t
T$8u
T$8t
T$8u
T$8t
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Lt,
T$Dt
T$Du
T$Dt
T$Du_
T$Dt
T$Dt
T$Du
T$Dt
T$Du
T$Dt
T$Du
T$Dt
T$Du
T$Dt
T$Dup
T$Dt
T$Dum
T$Dt
T$Dt
T$Du'
T$Dt
T$Du'
T$Dt
T$Du
T$Dt
T$Du
T$Dt
T$Du
T$Dt
T$Du
T$Dt
T$Du
T$Dt
T$Du
T$Dt
T$Du
T$Dt
T$Du
T$Dt
T$Du
T$Dt
T$Du
T$Dt
T$Du
T$Dt
T$Du
T$Dt
T$Du 
T$Dt
T$Du+
T$Dt
T$Du.
T$Dt
T$Du
T$Dt
T$Du
T$Dt
T$Du
T$Dt
T$Du
T$Dt
T$Du
T$Dt
T$Du
T$Dt
T$Du9
T$Dt
T$Du*
T$Dt
T$DuF
T$Ltu
T$Dt
T$Du_
T$Dt
T$Dua
T$Dt
T$Dt
T$Du
T$Dt
T$Du
T$Dt
T$Dt
T$Du 
T$Dt
T$Du 
T$Dt
T$Du#
T$Dt
T$Du
T$Dt
T$Du
T$Dt
T$Dt
T$Du-
T$Dt
T$Duh
T$Ht
d$$[^
d$$[^
UWVS
|$P~+
[^_]
D$$~z
d$<1
l$Xt
d$<[
D$ )
d$<[^_]
d$<[^_]
D$ 9
UWVS
:sU1
[^_]
d$,[^_]
d$,[^_]
9|$(t
d$<[^_]
UWVS
+T$,
d$<[^_]
UWVS
D$D)
d$,[^_]
UWVS
+T$,
d$<[^_]
UWVS
+T$,
d$<[^_]
UWVS
D$$e
[^_]
9t$ 
UWVS
t$<t
[^_]
[^_]
[^_]
UWVS
t$<t
[^_]
[^_]
[^_]
d$([
d$([
UWVS
d$,[^_]
d$,[^_]
D$L1
L$huK
D$Le3
d$P[^_
D$L1
L$huK
D$Le3
d$P[^_
D$8u2
d$([
d$([
d$([
UWVS
l$dt
d$<[^_]
;t$ |
D$$1
;t$ }-
d$<[^_]
D$DuV
d$([
8Tcr
UWVS
t$,U
[^_]
(null)
SAX.fatalError: 
SAX.error: 
SAX.warning: 
Loaded URL="%s" ID="%s"
 took %ld ms
	--html : use the HTML parser
	--memory : parse from memory
file:///etc/xml/catalog
%d %d %s %d %d
Node %s matches pattern %s
xmlStreamPush() failure
  pattern %s node %s
xmlStreamPop() failure
mmap failure for file %s
Pattern %s failed to compile
Compiling the schemas
Parsing and validating
Parsing
%s fails to validate
%s validates
%s : failed to parse
Unable to open %s
user_data
SAX generated a doc !
%s:%d: 
Entity: line %d: 
<pre>
</pre>
<b>validity warning</b>: 
</p>
<b>validity error</b>: 
<b>warning</b>: 
<b>error</b>: 
info
Xinclude processing
Out of memory for XPath
XPath evaluation failure
XPath set is empty
true
false
-Infinity
Copying
Freeing original
walking through the doc
failed to open %s
Saving
Can't write data
Failed to canonicalize
Failed to save
failed save to %s
Parsing DTD
Could not parse DTD %s
Validating against DTD
Validating
Freeing
SAX.isStandalone()
SAX.hasInternalSubset()
SAX.hasExternalSubset()
SAX.internalSubset(%s,
 %s,
SAX.externalSubset(%s,
SAX.resolveEntity(
SAX.getEntity(%s)
SAX.getParameterEntity(%s)
SAX.elementDecl(%s, %d, ...)
SAX.notationDecl(%s, %s, %s)
SAX.setDocumentLocator()
SAX.startDocument()
SAX.endDocument()
SAX.startElement(%s
, %s='
SAX.endElement(%s)
SAX.characters(%s, %d)
SAX.reference(%s)
SAX.pcdata(%.20s, %d)
SAX.comment(%s)
SAX.startElementNs(%s
, NULL
, %s
, '%s'
, %d, %d
, xmlns
='%s'
, %s:%s='
%.4s...', %d
SAX.endElementNs(%s
, NULL)
, '%s')
xmllint.c
node->_private != ((void *)0)
--debug
--shell
--copy
--recover
--huge
--noent
--noenc
--nsclean
--nocdata
--nodict
--version
%s: using libxml version %s
   compiled with: 
Threads 
Tree 
Output 
Push 
Reader 
Patterns 
Writer 
SAXv1 
FTP 
HTTP 
DTDValid 
HTML 
Legacy 
C14N 
Catalog 
XPath 
XPointer 
XInclude 
Iconv 
ISO8859X 
Unicode 
Regexps 
Automata 
Expr 
Schemas 
Schematron 
Modules 
MemDebug 
RunDebug 
Zlib 
Lzma 
--noout
--output
--htmlout
--nowrap
--html
--xmlout
--nodefdtd
--loaddtd
--dtdattr
--valid
--postvalid
--dtdvalid
--dtdvalidfpi
--dropdtd
--insert
--timing
--auto
--repeat
--push
--pushsmall
--memory
--testIO
--xinclude
--noxincludenode
--nofixup-base-uris
--compress
--nowarning
--pedantic
--debugent
--c14n
--c14n11
--exc-c14n
--catalogs
--nocatalogs
--encode
DVEnc
UTF-8
--noblanks
--maxmem
--format
--pretty
--stream
--walker
--sax1
--sax
--chkregister
--relaxng
--schema
--schematron
--nonet
--nocompact
--load-trace
--path
--pattern
--xpath
--oldxml10
Unknown option %s
SGML_CATALOG_FILES
XMLLINT_INDENT
Registration count off: %d
%d iterations
</body></html>
SAX.entityDecl(%s, %d, %s, %s, %s)
SAX.unparsedEntityDecl(%s, %s, %s, %s)
failed to load external entity "%s"
Ran out of memory needs > %d bytes
Usage : %s [options] XMLfiles ...
	Parse the XML files and output the result of the parsing
	--version : display the version of the XML library used
	--debug : dump a debug tree of the in-memory document
	--shell : run a navigating shell
	--debugent : debug the entities defined in the document
	--copy : used to test the internal copy implementation
	--recover : output what was parsable on broken XML documents
	--huge : remove any internal arbitrary parser limits
	--noent : substitute entity references by their value
	--noenc : ignore any encoding specified inside the document
	--noout : don't output the result tree
	--path 'paths': provide a set of paths for resources
	--load-trace : print trace of all external entities loaded
	--nonet : refuse to fetch DTDs or entities over network
	--nocompact : do not generate compact text nodes
	--htmlout : output results as HTML
	--nowrap : do not put HTML doc wrapper
	--valid : validate the document in addition to std well-formed check
	--postvalid : do a posteriori validation, i.e after parsing
	--dtdvalid URL : do a posteriori validation against a given DTD
	--dtdvalidfpi FPI : same but name the DTD with a Public Identifier
	--timing : print some timings
	--output file or -o file: save to a given file
	--repeat : repeat 100 times, for timing or profiling
	--insert : ad-hoc test for valid insertions
	--compress : turn on gzip compression of output
	--xmlout : force to use the XML serializer when using --html
	--nodefdtd : do not default HTML doctype
	--push : use the push mode of the parser
	--pushsmall : use the push mode of the parser using tiny increments
	--maxmem nbbytes : limits memory allocation to nbbytes bytes
	--nowarning : do not emit warnings from parser/validator
	--noblanks : drop (ignorable?) blanks spaces
	--nocdata : replace cdata section with text nodes
	--format : reformat/reindent the input
	--encode encoding : output in the given encoding
	--dropdtd : remove the DOCTYPE of the input docs
	--pretty STYLE : pretty-print in a particular style
	                 0 Do not pretty print
	                 1 Format the XML content, as --format
	                 2 Add whitespace inside tags, preserving content
	--c14n : save in W3C canonical format v1.0 (with comments)
	--c14n11 : save in W3C canonical format v1.1 (with comments)
	--exc-c14n : save in W3C exclusive canonical format (with comments)
	--nsclean : remove redundant namespace declarations
	--testIO : test user I/O support
	--catalogs : use SGML catalogs from $SGML_CATALOG_FILES
	             otherwise XML Catalogs starting from 
	         %s are activated by default
	--nocatalogs: deactivate all catalogs
	--auto : generate a small doc on the fly
	--xinclude : do XInclude processing
	--noxincludenode : same but do not generate XInclude nodes
	--nofixup-base-uris : do not fixup xml:base uris
	--loaddtd : fetch external DTD
	--dtdattr : loaddtd + populate the tree with inherited attributes 
	--stream : use the streaming interface to process very large files
	--walker : create a reader and walk though the resulting doc
	--pattern pattern_value : test the pattern support
	--chkregister : verify the node registration code
	--relaxng schema : do RelaxNG validation against the schema
	--schema schema : do validation against the WXS schema
	--schematron schema : do validation against a schematron
	--sax1: use the old SAX1 interfaces for processing
	--sax: do not build a tree but work just at the SAX level
	--oldxml10: use XML-1.0 parsing rules before the 5th edition
	--xpath expr: evaluate the XPath expression, imply --noout
Libxml project home page: http://xmlsoft.org/
To report bugs or get some help check: http://xmlsoft.org/bugs.html
xmlPatternMatch and xmlStreamPush disagree
Relax-NG schema %s failed to compile
XSD schema %s failed to compile
Document %s does not validate
%s validation generated an internal error
XPath Object is uninitialized
XPath object of unexpected type
could not get valid list of elements
No element can be inserted under root
%d element types can be inserted under root:
failed to walk through the doc
Failed to crate a reader from the document
Couldn't allocate validation context
Document %s does not validate against %s
SAX.ignorableWhitespace(%s, %d)
SAX.processingInstruction(%s, %s)
SAX.processingInstruction(%s, NULL)
SAX.attributeDecl(%s, %s, %d, %d, NULL, ...)
SAX.attributeDecl(%s, %s, %d, %d, %s, ...)
*(long*)node->_private == (long) 0x81726354
Out of memory in xmllint:registerNode()
MAX_PATHS reached: too many paths
Variable $SGML_CATALOG_FILES not set
<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN"
	"http://www.w3.org/TR/REC-html40/loose.dtd">
<html><head><title>%s output</title></head>
<body bgcolor="#ffffff"><h1 align="center">%s output</h1>
Schematron schema %s failed to compile
WXS schema %s failed to compile
deregisterNode
;*2$"(
xmllint.debug
7zXZ
k>HJ
+)-G
,6C	
i4i)]
bA65ot
eDTy
&m6yAY~
qa[R
s6@;
@4.o1
>rCa
ofdXC
IQ4qC
#DBD
Tb;Tl
X<c#?
p?`2
G$*,
OSjK
y@>bb
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.data
.bss
.gnu_debuglink
.gnu_debugdata
