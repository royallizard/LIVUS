(T~@Lp
A6@X
||%M
__gmon_start__
_init
_fini
__cxa_finalize
_Jv_RegisterClasses
value_get_as_float
value_new_float
value_new_error_NUM
goal_seek_initialize
goal_seek_newton
goal_seek_point
goal_seek_bisection
g_return_if_fail_warning
g_date_valid
go_nan
g_date_get_month
g_date_get_year
gnm_date_add_months
g_date_get_day
g_date_is_last_of_month
gnm_date_add_days
pow1p
go_coupdaybs
go_coupdaysnc
go_coupdays
pow1pm1
collect_floats_value
g_free
float_range_function2d
value_get_as_int
get_vdb
workbook_date_conv
datetime_value_to_serial
value_new_error_DIV0
datetime_value_to_g
g_date_is_leap_year
value_is_zero
value_new_error_VALUE
go_coup_cd
g_date_compare
go_date_days_between_basis
ceil
float_range_function
log1p
go_finite
value_peek_string
go_pow10
go_fake_trunc
value_get_as_bool
log10
value_new_int
get_cumprinc
get_cumipmt
go_date_g_to_serial
get_amordegrc
get_amorlinc
value_get_as_checked_bool
go_format_default_date
value_set_fmt
get_duration
get_mduration
annual_year_basis
yearfrac
get_yieldmat
go_plugin_depends
go_plugin_header
financial_functions
libm.so.6
libc.so.6
_edata
__bss_start
_end
plugin.so
GLIBC_2.1.3
GLIBC_2.0
d$0[^]
d$0[^]
d$ [^]
d$ [^]
[^_]
[^_]
d$$[]
d$<[^_]
[^_]
d$$1
d$$[]
z$u"
z$u"
d$p[^]
d$@[^]
d$@[^]
d$@[^]
d$@[^]
d$@[^]
d$0[^]
d$p[^]
[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
d$l[^_]
d$l[^_]
d$l[^_]
d$@[^]
d$@[^]
d$l[^_]
d$l[^_]
d$l[^_]
d$P[^]
d$P[^]
[^_]
d$41
d$$[]
z-u3
d$L[^_]
d$L[^_]
d$L[^_]
d$L[^_]
d$L[^_]
z&u$
d$|[^_]
d$|[^_]
d$|[^_]
z&u$
d$|[^_]
d$|[^_]
d$|[^_]
d$@[^]
~'9U
d$L[^_]
d$L[^_]
~'9U
d$L[^_]
d$L[^_]
d$$[]
d$|[^_]
d$|[^_]
d$L[^_]
d$L[^_]
d$|[^_]
d$|[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
d$L[^_]
d$L[^_]
d$<[^_]
d$<[^_]
d$<[^_]
d$<[^_]
d$L[^_]
d$L[^_]
d$L[^_]
d$L[^_]
d$L[^_]
d$L[^_]
d$l[^_]
d$l[^_]
[^_]
[^_]
[^_]
d$T[]
d$T[]
[^_]
d$d[]
d$P[^]
d$P[^]
d$P[^]
d$@[^]
d$@[^]
d$$[]
;u ~m
d$l[^_]
;u ~S
d$l[^_]
[^_]
v != NULL
goffice
gnumeric
1.10.11
accrint
ffff|fffb
accrintm
amordegrc
amorlinc
coupdaybs
fff|fb
coupdays
coupdaysnc
coupncd
coupnum
couppcd
cumipmt
cumprinc
dollarde
dollarfr
effect
euro
euroconvert
fss|bf
fvschedule
g_duration
intrate
ispmt
mduration
mirr
nominal
nper
oddfprice
fffffffff
oddfyield
oddlprice
oddlyield
ppmt
ffffff|f
pricedisc
pricemat
fff|fff
received
tbilleq
tbillprice
tbillyield
fffff|ff
xirr
AA|f
xnpv
yielddisc
yieldmat
ACCRINT:accrued interest
issue:date of issue
settlement:settlement date
ACCRINTM
ACCRINTM:accrued interest
maturity:maturity date
par:par value
basis:calendar basis
@{par} defaults to $1000.
ACCRINT
cost:initial cost of asset
period:subject period
rate:depreciation rate
AMORLINC
AMORDEGRC
eom:end-of-month flag
COUPDAYS
COUPDAYBS,COUPDAYSNC
COUPPCD,COUPDAYS,COUPDAYBS
COUPNUM:number of coupons
COUPNCD,COUPPCD
COUPNCD,COUPDAYS,COUPDAYBS
rate:interest rate per period
nper:number of periods
pv:present value
type:payment type
IPMT
CUMPRINC:cumulative principal
PPMT
life:number of periods
DDB,SLN,SYD
DDB:depreciation of an asset
DISC:discount rate
par:price per $100 face value
PRICEMAT
fraction:denominator
=DOLLARDE(0.03,16)
DOLLARFR
=DOLLARFR(0.25,8)
DOLLARDE
coupon:annual coupon rate
MDURATION
=EFFECT(19%,12)
NOMINAL
EURO:equivalent of 1 EUR
=EURO("DEM")
EUROCONVERT
n:amount
=EUROCONVERT(1,"DEM","ITL")
EURO
FV:future value
pmt:payment at each period
=FV(10%,10,1000,20000,0)
FVSCHEDULE:future value
principal:initial value
fv:future value
FV,PV
INTRATE:interest rate
RECEIVED
per:period number
=IPMT(10%,4,10,1e6)
values:cash flow
=IRR({100;100;200;-450})
=ISPMT(10%,4,10,1e6)
IRR,XIRR
NOMINAL:nominal interest rate
=NOMINAL(10%,6)
EFFECT
NPER:number of periods
=NPER(6%,0,-10000,20000,0)
PV,FV
value1:cash flow for period 1
value2:cash flow for period 2
=NPV(10%,100,100,-250)
ODDLPRICE,ODDFYIELD
price:price of security
ODDFPRICE,ODDLYIELD
YIELD,DURATION
PMT:payment for annuity
PV,FV,RATE,ISPMT
=PPMT(10%,4,10,1e6)
PRICE:price of a security
PRICEDISC:discounted price
PRICEMAT:price at maturity
PRICEDISC
PV:present value
=PV(10%,10,1000,20000,0)
RATE:rate of investment
=RATE(10,-1500,10000,0)
p:number of periods
=RRI(12,5000,10000)
PV,FV,RATE
INTRATE
SLN:depreciation of an asset
=SLN(10000,700,10)
DB,DDB,SYD
SYD:sum-of-years depreciation
=SYD(5000,200,5,2)
DB,DDB,SLN
TBILLPRICE,TBILLYIELD
TBILLEQ,TBILLYIELD
price:price
TBILLEQ,TBILLPRICE
VDB:depreciation of an asset
DB,DDB
XIRR:internal rate of return
dates:dates of cash flow
XNPV:net present value
YIELD:yield of a security
PRICE,DURATION
YIELDMAT:yield of a security
YIELDDISC,YIELD
munG
value_get_freq
first_interest:date of first interest payment
rate:nominal annual interest rate
par:par value, defaults to $1000
frequency:number of interest payments per year
basis:calendar basis, defaults to 0
calc_method:calculation method, defaults to TRUE
If @{first_interest} < @{settlement} and @{calc_method} is TRUE, then ACCRINT returns the sum of the interest accrued in all coupon periods from @{issue}  date until @{settlement} date.
If @{first_interest} < @{settlement} and @{calc_method} is FALSE, then ACCRINT returns the sum of the interest accrued in all coupon periods from @{first_interest}  date until @{settlement} date.
Otherwise ACCRINT returns the sum of the interest accrued in all coupon periods from @{issue}  date until @{settlement} date.
@{frequency} must be one of 1, 2 or 4, but the exact value does not affect the result.
@{issue} must precede both @{first_interest} and @{settlement}.
@{frequency} may be 1 (annual), 2 (semi-annual), or 4 (quarterly).
If @{basis} is 0, then the US 30/360 method is used.
If @{basis} is 1, then actual number of days is used.
If @{basis} is 2, then actual number of days is used within a month, but years are considered only 360 days.
If @{basis} is 3, then actual number of days is used within a month, but years are always considered 365 days.
If @{basis} is 4, then the European 30/360 method is used.
ACCRINT calculates the accrued interest from @{issue} to @{maturity}.
AMORDEGRC:depreciation of an asset using French accounting conventions
purchase_date:date of purchase
first_period:end of first period
salvage:value after depreciation
AMORDEGRC calculates the depreciation of an asset using French accounting conventions. Assets purchased in the middle of a period take prorated depreciation into account. This is similar to AMORLINC, except that a depreciation coefficient is applied in the calculation depending on the life of the assets.
Named for AMORtissement DEGRessif Comptabilite.
=AMORDEGRC(2400,DATE(1998,8,19),DATE(1998,12,30),300,1,0.14,1)
AMORLINC:depreciation of an asset using French accounting conventions
AMORLINC calculates the depreciation of an asset using French accounting conventions. Assets purchased in the middle of a period take prorated depreciation into account. 
Named for AMORtissement LINeaire Comptabilite.
=AMORLINC(2400,DATE(1998,8,19),DATE(1998,12,30),300,1,0.14,1)
COUPDAYBS:number of days from coupon period to settlement
COUPDAYBS calculates the number of days from the beginning of the coupon period to the settlement date.
=COUPDAYBS(DATE(2002,11,29),DATE(2004,2,29),4,0)
=COUPDAYBS(DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE)
COUPDAYS:number of days in the coupon period of the settlement date
COUPDAYS calculates the number of days in the coupon period of the settlement date.
=COUPDAYS(DATE(2002,11,29),DATE(2004,2,29),4,0)
=COUPDAYS(DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE)
COUPDAYSNC:number of days from the settlement date to the next coupon period
COUPDAYSNC calculates number of days from the settlement date to the next coupon period.
=COUPDAYSNC(DATE(2002,11,29),DATE(2004,2,29),4,0)
=COUPDAYSNC(DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE)
COUPNCD:the next coupon date after settlement
COUPNCD calculates the coupon date following settlement.
=COUPNCD(DATE(2002,11,29),DATE(2004,2,29),4,0)
=COUPNCD(DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE)
COUPNUM calculates the number of coupons to be paid between the settlement and maturity dates, rounded up.
=COUPNUM(DATE(2002,11,29),DATE(2004,2,29),4,0)
=COUPNUM(DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE)
COUPPCD:the last coupon date before settlement
COUPPCD calculates the coupon date preceding settlement.
=COUPPCD(DATE(2002,11,29),DATE(2004,2,29),4,0)
=COUPPCD(DATE(2002,11,29),DATE(2004,2,29),4,0,FALSE)
CUMIPMT:cumulative interest payment
start_period:first period to accumulate for
end_period:last period to accumulate for
CUMIPMT calculates the cumulative interest paid on a loan from @{start_period} to @{end_period}.
If @{type} is 0, the default, payment is at the end of each period.  If @{type} is 1, payment is at the beginning of each period.
CUMPRINC calculates the cumulative principal paid on a loan from @{start_period} to @{end_period}.
month:number of months in first year of depreciation
DB calculates the depreciation of an asset for a given period using the fixed-declining balance method.
factor:factor at which the balance declines
DDB calculates the depreciation of an asset for a given period using the double-declining balance method.
redemption:amount received at maturity
DISC calculates the discount rate for a security.
@{redemption} is the redemption value per $100 face value.
DOLLARDE:convert to decimal dollar amount
fractional_dollar:amount to convert
DOLLARDE converts a fractional dollar amount into a decimal amount.  This is the inverse of the DOLLARFR function.
DOLLARFR:convert to dollar fraction
decimal_dollar:amount to convert
DOLLARFR converts a fractional dollar amount into a fraction which is represented as the digits after the decimal point.  For example, 2/8 would be represented as .2 while 3/16 would be represented as .03.
DURATION:the duration of a security
yield:annual yield of security
DURATION calculates the duration of a security.
EFFECT:effective interest rate
nper:number of periods used for compounding
EFFECT calculates the effective interest rate using the formula (1+@{rate}/@{nper})^@{nper}-1.
currency:three-letter currency code
EURO calculates the national currency amount corresponding to 1 EUR for any of the national currencies that were replaced by the Euro on its introduction.
@{currency} must be one of ATS (Austria), BEF (Belgium), CYP (Cyprus), DEM (Germany), ESP (Spain), EUR (Euro), FIM (Finland), FRF (France), GRD (Greece), IEP (Ireland), ITL (Italy), LUF (Luxembourg), MTL (Malta), NLG (The Netherlands), PTE (Portugal), SIT (Slovenia), or SKK (Slovakia).
This function is not likely to be useful anymore.
EUROCONVERT:pre-Euro amount from one currency to another
source:three-letter source currency code
target:three-letter target currency code
full_precision:whether to provide the full precision; defaults to false
triangulation_precision:number of digits (at least 3) to be rounded to after conversion of the source currency to euro; defaults to no rounding
EUROCONVERT converts @{n} units of currency @{source} to currency @{target}.  The rates used are the official ones used on the introduction of the Euro.
If @{full_precision} is true, the result is not rounded; if it false the result is rounded to 0 or 2 decimals depending on the target currency; defaults to false.
@{source} and @{target} must be one of the currencies listed for the EURO function.
=EUROCONVERT(1,"DEM","ITL",FALSE)
=EUROCONVERT(1,"DEM","ITL",FALSE,3)
rate:effective interest rate per period
FV calculates the future value of @{pv} moved @{nper} periods into the future, assuming a periodic payment of @{pmt} and an interest rate of @{rate} per period.
schedule:range of interest rates
FVSCHEDULE calculates the future value of @{principal} after applying a range of interest rates with compounding.
=FVSCHEDULE(1000,{0.1;0.02;0.1})
G_DURATION:the duration of a investment
rate:effective annual interest rate
G_DURATION calculates the number of periods needed for an investment to attain a desired value.
G_DURATION is the OpenFormula function PDURATION.
investment:amount paid on settlement
INTRATE calculates the interest of a fully vested security.
=INTRATE(DATE(2008,4,15),DATE(2008,9,30),100000,103525,1)
IPMT:interest payment for period
IPMT calculates the interest part of an annuity's payment for period number @{per}.
guess:an estimate of what the result should be
IRR calculates the internal rate of return of a cash flow with periodic payments.  @{values} lists the payments (negative values) and receipts (positive values) for each period.
The optional @{guess} is needed because there can be more than one valid result.  It defaults to 10%.
ISPMT:interest payment for period
ISPMT calculates the interest payment for period number @{per}.
MDURATION:the Macauley duration of a security
MDURATION calculates the Macauley duration of a security.
MIRR:modified internal rate of return
finance_rate:interest rate for financing cost
reinvest_rate:interest rate for reinvestments
MIRR calculates the modified internal rate of return of a periodic cash flow.
NOMINAL calculates the nominal interest rate from the effective rate.
NPER calculates the number of periods of an investment based on periodic constant payments and a constant interest rate.
NPV calculates the net present value of a cash flow.
ODDFPRICE:price of a security that has an odd first period
first_interest:first interest date
ODDFPRICE calculates the price per $100 face value of a security that pays periodic interest, but has an odd first period.
ODDFYIELD:yield of a security that has an odd first period
ODDFYIELD calculates the yield of a security that pays periodic interest, but has an odd first period.
ODDLPRICE:price of a security that has an odd last period
last_interest:last interest date
ODDLPRICE calculates the price per $100 face value of a security that pays periodic interest, but has an odd last period.
ODDLYIELD:yield of a security that has an odd last period
ODDLYIELD calculates the yield of a security that pays periodic interest, but has an odd last period.
PMT calculates the payment amount for an annuity.
PPMT:interest payment for period
PPMT calculates the principal part of an annuity's payment for period number @{per}.
PRICE calculates the price per $100 face value of a security that pays periodic interest.
discount:annual rate at which to discount
PRICEDISC calculates the price per $100 face value of a bond that does not pay interest at maturity.
PRICEMAT calculates the price per $100 face value of a bond that pays interest at maturity.
PV calculates the present value of @{fv} which is @{nper} periods into the future, assuming a periodic payment of @{pmt} and an interest rate of @{rate} per period.
RATE calculates the rate of return.
RRI:equivalent interest rate for an investment increasing in value
RRI determines an equivalent interest rate for an investment that increases in value. The interest is compounded after each complete period.
Note that @{p} need not be an integer but for fractional value the calculated rate is only approximate.
This function is OpenFormula compatible.
RECEIVED:amount to be received at maturity
RECEIVED calculates the amount to be received when a security matures.
=RECEIVED(DATE(2008,4,15),DATE(2008,9,30),100000,4%,1)
SLN calculates the depreciation of an asset using the straight-line method.
SYD calculates the depreciation of an asset using the sum-of-years method.
TBILLEQ:bond-equivalent yield for a treasury bill
TBILLEQ calculates the bond-equivalent yield for a treasury bill.
TBILLPRICE:price of a treasury bill
TBILLPRICE calculates the price per $100 face value for a treasury bill.
TBILLYIELD:yield of a treasury bill
TBILLYIELD calculates the yield of a treasury bill.
no_switch:do not switch to straight-line depreciation
VDB calculates the depreciation of an asset for a given period range using the variable-rate declining balance method.
If @{no_switch} is FALSE, the calculation switches to straight-line depreciation when depreciation is greater than the declining balance calculation.
XIRR calculates the annualized internal rate of return of a cash flow at arbitrary points in time.  @{values} lists the payments (negative values) and receipts (positive values) with one value for each entry in @{dates}.
XNPV calculates the net present value of a cash flow at irregular times
YIELD calculates the yield of a security that pays periodic interest.
YIELDDISC:yield of a discounted security
YIELDDISC calculates the yield of a discounted security.
YIELDMAT calculates the yield of a security for which the interest is paid at maturity date.
d@cb
A >@
plugin.so.debug
.rodata
.shstrtab
.dynamic
.note.gnu.build-id
.eh_frame
.gnu.hash
.fini
.gnu_debuglink
.dynsym
.gnu.version
.rel.dyn
.data.rel.ro
.gnu.version_r
.jcr
.eh_frame_hdr
.dynstr
.ctors
.dtors
.bss
.init
.rel.plt
.got.plt
.got
.text
