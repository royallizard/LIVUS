tdt+
2 @@
/V1l
:w}L
X [0
r;xTh
	5Oj
KAK%
{"|n7
__gmon_start__
_init
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
ecryptfs_get_versions
to_hex
__sprintf_chk
from_hex
strtol
do_hash
NSS_NoDB_Init
PK11_HashBuf
PORT_GetError
__syslog_chk
ecryptfs_fetch_private_mnt
__asprintf_chk
fopen64
flockfile
malloc
fgets
strchr
fclose
free
perror
ecryptfs_private_is_mounted
setmntent
getmntent
strcmp
hasmntopt
endmntent
generate_passphrase_sig
strlen
__memcpy_chk
generate_payload
strncpy
ecryptfs_generate_key_payload
memset
ecryptfs_generate_sig_from_key_data
cryptfs_get_ctx_opts
ecryptfs_verbosity
ecryptfs_write_packet_length
ecryptfs_parse_packet_length
ecryptfs_init_messaging
ecryptfs_init_miscdev
ecryptfs_messaging_exit
ecryptfs_release_miscdev
ecryptfs_send_message
ecryptfs_send_miscdev
ecryptfs_run_daemon
ecryptfs_run_miscdev_daemon
__errno_location
parse_packet
request_key
keyctl_read_alloc
ecryptfs_find_key_mod
ecryptfs_recv_miscdev
read
init_miscdev_daemon
ecryptfs_register_key_modules
ecryptfs_free_key_mod_list
ecryptfs_get_version
system
ecryptfs_supports_passphrase
ecryptfs_supports_pubkey
ecryptfs_supports_plaintext_passthrough
ecryptfs_supports_hmac
ecryptfs_supports_filename_encryption
ecryptfs_supports_policy
ecryptfs_supports_xattr
ecryptfs_version_str_map
lseek64
__ctype_b_loc
ecryptfs_generate_passphrase_auth_tok
ecryptfs_passphrase_sig_from_blob
ecryptfs_passphrase_blob
ecryptfs_remove_auth_tok_from_keyring
keyctl_search
keyctl_unlink
strerror
ecryptfs_add_auth_tok_to_keyring
add_key
ecryptfs_add_blob_to_keyring
ecryptfs_add_passphrase_key_to_keyring
__ecryptfs_detect_wrapped_passphrase_file_version
ecryptfs_wrap_passphrase
PK11_GetBestSlot
PK11_ImportSymKey
PK11_ParamFromIV
PK11_CreateContextBySymKey
PK11_CipherOp
PK11_DigestFinal
PK11_DestroyContext
PK11_FreeSymKey
SECITEM_FreeItem
PK11_FreeSlot
umask
mkstemp64
fsync
rename
ecryptfs_wrap_passphrase_file
strrchr
ecryptfs_unwrap_passphrase
memcmp
ecryptfs_insert_wrapped_passphrase_into_keyring
ecryptfs_add_key_module_key_to_keyring
ecryptfs_read_salt_hex_from_rc
ecryptfs_parse_rc_file
free_name_val_pairs
ecryptfs_check_sig
ecryptfs_append_sig
getgid
getuid
fchown
ecryptfs_validate_keyring
keyctl
ecryptfs_disable_echo
tcgetattr
tcsetattr
ecryptfs_enable_echo
ecryptfs_get_passphrase
__printf_chk
stdin
putchar
stderr
__fprintf_chk
ecryptfs_get_wrapped_passphrase_filename
getpwuid
__xstat64
calloc
stack_push
stack_pop
stack_pop_val
add_transition_node_to_param_node
set_exit_param_node_for_node
ecryptfs_set_exit_param_on_graph
ecryptfs_destroy_nvp
ecryptfs_delete_nvp
do_transition
eval_param_tree
fwrite
ecryptfs_eval_decision_graph
ecryptfs_dump_param_node
fputc
ecryptfs_dump_transition_node
ecryptfs_dump_decision_graph
ecryptfs_insert_params
ecryptfs_insert_params_in_subgraph
ecryptfs_build_linear_subgraph
print_nvp_list
ecryptfs_nvp_list_union
process_comma_tok
__snprintf_chk
generate_nv_list
ecryptfs_parse_options
parse_options_file
__fxstat64
realloc
ecryptfs_parse_rc_file_fullpath
__strtoull_internal
strstr
ecryptfs_process_decision_graph
ecryptfs_process_key_gen_decision_graph
ecryptfs_fill_in_dummy_ops
opendir
readdir64
dlopen
dlsym
dlclose
closedir
passphrase_get_key_mod_ops
dlerror
strncmp
ecryptfs_parse_stat
passphrase_transition
ecryptfs_passphrase_ops
passphrase_param_nodes
libssl3.so
libsmime3.so
libnss3.so
libnssutil3.so
libplds4.so
libplc4.so
libnspr4.so
libpthread.so.0
libkeyutils.so.1
libdl.so.2
libc.so.6
__stack_chk_fail
_edata
__bss_start
_end
libecryptfs.so.1
GLIBC_2.1
GLIBC_2.0
KEYUTILS_0.3
GLIBC_2.2
NSS_3.3
NSS_3.2
GLIBC_2.3
GLIBC_2.8
GLIBC_2.1.3
GLIBC_2.4
GLIBC_2.3.4
UWVS
;l$,u
d$<[^_]
UWVS
t$Pe
L$,1
T$Tf
D$,e3
d$<[^_]
d$([
D$,1
D$(9
L$,e3
d$0[^_
UWVS
D$Xe
T$,1
L$,e3
d$<[^_]
UWVS
L$$e
[^_]
;l$$u
t$\e
D$,1
T$$f
|$,e3=
d$<[^_]
UWVS
D$<1
;D$l
|$<e3=
d$L[^_]
L$ =
d$4[^
d$ [^_
UWVS
D$\1
|$,B
|$\e3=
d$l[^_]
t5	r
|$,B
D$,<@
D$T=
D$,1
D$T1
UWVS
|$he
D$<1
t$<e35
d$L[^_]
UWVS
|$`e
D$<1
8sa1
L$<e3
d$L[^_]
UWVS
d$,[^_]
D$K<d
D$<u^
[^_]
UWVS
/sys
[^_]
[^_]
d$,[
UWVS
D$<1
L$<e3
d$L[^_]
[^_]
[^_]
D$<1
t$<e35
d$L[^_]
UWVS
[^_]
d$,1
[^_]
d$<[
D$l1
T$le3
d$p[^_
UWVS
D$(e
[^_]
D$H9D$$
D$|1
T$|e3
[^_]
D$K<
D$L9
[^_]
UWVS
D$|1
L$|e3
[^_]
UWVS
l$`e
D$<1
L$<e3
d$L[^_]
D$|1
\$|e3
[^_]
UWVS
T$<1
l$+u=
L$<e3
d$L[^_]
UWVS
D$<1
T$<e3
d$L[^_]
t$`e
D$L1
T$Le3
d$P[^_
UWVS
|$pe
D$L1
|$Le3=
d$\[^_]
D$|1
L$|e3
d$0[^_
d$0[^_
UWVS
D$,t6
d$L[^_]
UWVS
D$(e
D$L1
T$Le3
d$\[^_]
9}@~X
d$,[^_]
d$,1
[^_]
UWVS
l$X9
pPt#
D$ 9D$(
l$X1
d$<[^_]
d$<[^_]
UWVS
D$Le
D$l1
D$$t
L$le3
d$|[^_]
D$L9x@
L$8tC
~	;G@
;|$$t+
UWVS
D$,1
D$T1
d$<[^_]
UWVS
D$D1
d$,[^_]
UWVS
98~D
[^_]
D$T1
d$<1
[^_]
[^_]
d$<[^_]
UWVS
T$He
D$L1
9D$H
kt$(
T$Le3
d$\[^_]
[^_]
UWVS
[^_]
UWVS
[^_]
[^_]
UWVS
L$$9L$0
<(=u
9L$0
l$$)
[^_]
::tv
t$8r
UWVS
|$,1
[^_]
UWVS
D$,e
D$L%
L$ )
T$$9
[^_]
d$$[^
UWVS
|$He
d$,[^_]
:-tS
d$ [^_
UWVS
D$ ~p
;t$ t<
d$<1
[^_]
d$<[1
d$<1
[^_]
UWVS
D$T?B
L$\1
L$X1
T$$t,
D$(98
T$$t
;l$$w
L$\e3
d$l[^_]
D$$?B
UWVS
l$Xe
|$,1
t$,e35
d$<[^_]
D$$u
T$,tg
[^_]
d$,[
UWVS
D$,1
T$,e3
d$<[^_]
UWVS
[^_]
UWVS
D$|1
T$(1
T$|e3
[^_]
UWVS
L$L1
L$Le3
d$\[^_]
UWVS
[^_]
[^_]
UWVS
UWVS
d$,[^_]
d$,1
[^_]
[^_]
UWVS
|$Xe
D$,1
T$,e3
d$<[^_]
D$L1
\$Le3
d$\[^_]
%.2x
Private
%s/%s
asprintf
%s/.ecryptfs/%s.mnt
malloc
ecryptfs_sig=%s
/proc/mounts
setmntent
%s: PK11_HashBuf() error; SECFailure = [%d]; PORT_GetError() = [%d]
Passphrase size is invalid; [1] to [%d] is the valid range
Call into key module's get_blob failed; rc = [%d]
BUG: blob_size != blob_size_tmp; key module is having a hard time getting the two to match between get_blob() calls, and this has probably led to memory corruption. Bombing out.
Call into key module's get_key_data failed; rc = [%d]
Call into key module's get_key_sig failed; rc = [%d]
Error attempting to generate signature from key data; rc = [%d]
do_hash
Unsupported packet size: [%zu]
Five-byte packet length not supported
%s: Failed to register miscdev daemon with the eCryptfs kernel module; rc = [%d]
Error parsing packet length
ecryptfs_send_message
Failed to allocate memory: %m
Could not find key with signature: [%s]
Failed to locate desired key module
Failed to get size for decrypted key
Decrypted key size reported by key module decrypt function is 0
Decrypted key size reported by key module decrypt function is [%zu]; max is [%d]
Failed to write decrypted key via tag 65 packet
Error attempting to get encrypted key size from key module; rc = [%d]
Encrypted key size reported by key module encrypt function is 0
Failed to allocate memory: [%m]
Failed to encrypt key; rc = [%d]
Encrypted key size reported by key module encrypt function is [%zu]; max is [%d]
Failed to write encrypted key to tag 67 packet
Unrecognized packet type: [%d]
Failed to decrypt key; rc = [%d]
Invalid packet format
Failed to allocate memory
user
Failed to decrypt key
Failed to encrypt public key
Failed to send eCryptfs miscdev message; errno msg = [%m]
%s: Error attempting to read message from miscdev handle; errno msg = [%m]
%s: Received invalid packet from kernel; read_bytes = [%zu]; minimum possible packet site is [%d]
%s: Invalid packet. (1 + 4 + packet_len_size=[%zu] + packet_len=[%zu])=[%zu] != read_bytes=[%zu]
%s: Error whilst attempting to open [%s]; errno msg = [%m]
Failed to register key modules; rc = [%d]
Error while receiving eCryptfs message errno = [%d]; errno msg = [%m]
Messaging error threshold exceeded maximum of [%d]; terminating daemon
Received eCryptfs HELO message from the kernel
Received eCryptfs QUIT message from the kernel
Failed to send message in response to kernel request
Received unrecognized message type [%d]
/dev/ecryptfs
/dev/misc/ecryptfs
Failed to miscdevess packet
ecryptfs_init_miscdev
ecryptfs_recv_miscdev
/etc/mtab
sysfs
%s/fs/ecryptfs/version
passphrase
Userspace daemon support
plaintext passthrough
policy
filename encryption
gcm cipher block chaining
/sbin/modprobe ecryptfs 2>/dev/null
metadata in extended attribute
/dev/ecryptfs daemon interface
Error generating passphrase signature; rc = [%d]
Unable to allocate memory for auth_tok
Error generating payload for auth tok key; rc = [%d]
%s: Error attempting to generate passphrase authentication token blob; rc = [%d]
Failed to find key with sig [%s]: %m
Failed to unlink key with sig [%s]: %s
keyctl_search failed: %m errno=[%d]
Error adding key with sig [%s]; rc = [%d] "%m"
Error adding key to keyring - keyring is full
%s: Error attempting to generate the passphrase auth tok payload; rc = [%d]
%s: Error adding auth tok with sig [%s] to the keyring; rc = [%d]
Decrypted passphrase size is invalid; [1] to [%d] is the valid range
Error generating random salt: %s
%s: PK11_ImportSymKey() returned NULL
%s: PK11_CipherOp() error; SECFailure = [%d]; PORT_GetError() = [%d]
%s: PK11 error on digest final; SECFailure = [%d]; PORT_GetError() = [%d]
Wrong size of wrapped passphrase
Error attempting to open [%s] for reading
Error attempting to read encrypted passphrase from file [%s]; size = [%zd]
Error attempting to wrap passphrase file [%s]-> [%s]
Failed to detect wrapped passphrase version: %s
Error attempting to read encrypted passphrase from file [%s]; size = [%zu]
Unsupported wrapped passphrase file version: %u
Incorrect wrapping key for file [%s]
Wrong size of unwrapped passphrase
Error attempting to unwrap passphrase from file [%s]; rc = [%d]
Error attempting to add filename encryption key to user session keyring; rc = [%d]
Error attempting to add passphrase key to user session keyring; rc = [%d]
Error attempting to get blob from key module; rc = [%d]
Error initializing key from module; rc = [%d]
Error adding key with sig [%s]; rc = [%d]
Error attempting to parse .ecryptfsrc file; rc = [%d]
Can't change ownership of sig file; errno = [%d]; [%m]
Write of sig resulted in [%zu]; errno = [%d]; [%m]
Error attempting to link the user session keyring into the session keyring
Passphrase is too long. Use at most %u characters long passphrase.
%s/.ecryptfs/wrapped-passphrase
/dev/urandom
%s-XXXXXX
9988776655443322
Open resulted in [%d]; [%m]
%s: 
getpwuid
stat
ecryptfs_unwrap_passphrase
ecryptfs_wrap_passphrase
ecryptfs_add_passphrase_key_to_keyring
ecryptfs_passphrase_blob
%s: Cannot find key_mod for param_node with val = [%s]
No value supplied for parameter node with primary opt name [%s]
From param_node = [%p]; mnt_opt_names[0] = [%s]: Setting ECRYPTFS_PROCESSED to nvp with nvp->name = [%s]
%s: Value retrieved from node->default_val = [%s]
Error attempting to add key to keyring for key module [%s]; rc = [%d]
Too many transitions on node with primary alias [%s]
Transitioning from [%p]; name = [%s] to [%p]; name = [%s] per transition node's next_token
%s: Calling alloc_and_get_val() on node = [%p]; node->mnt_opt_names[0] = [%s]
%s: Called on node->mnt_opt_names[0] = [%s]
%s: node->val already set to [%s]
%s: Error attempting to retrieve value; rc = [%d]
%s: Value retrieved from default_val or from parameter list; returning
%s: Value retrieved from default_val or from parameter list for successive node at transition slot [%d]; returning
%s: ECRYPTFS_PARAM_FLAG_NO_VALUE set
%s: ctx->verbosity == 0 and STDIN_REQUIRED not set
%s: PARAMETER_SET and STDIN_REQUIRED not set
%s: DISPLAY_TRANSITION_NODE_VALS set
%s: DISPLAY_TRANSITION_NODE_VALS not set
%s: node->mnt_opt_names[0] = [%s]
; node->flags = [0x%.8x]
Wrong input, non-empty value required!
%s: ctx->get_string not defined
Error attempting to allocate nvp
Error attempting to allocate nvp entry for param_node->mnt_opt_names[%d] = [%s]
Error inserting param; param_node->mnt_opt_names[0] = [%s]; transition token index = [%d]
Key module [%s] returned error whilst retrieving parameter list; rc = [%d]
Key module [%s] has empty parameter list
linear_subgraph_exit_dummy_node
%s: Called on node [%s]
(null)
NULL
default
verbosity
%s:  node->tl[%d].val = [%s]
%s: ctx->get_string defined
%s: 
 %d) %s
Selection [%s]
Selection
%s [%s]
Verify %s
transition node [%d]:
param_node
mnt_opt_names[0] = [%s]
num_transitions = [%d]
---------------
transition_node
next_token = [%p]
Setting flag [0x%.8x]
ecryptfs_enter_linear_subgraph_tf
retrieve_val
alloc_and_get_val
eval_param_tree
Printing nvp list
name=%s
val=%s
Duplicates allowed for [%s]
key=
%s%s
File size too large
%s/.ecryptfsrc
Internal error: src_tmp->next != src_cursor->children[%d]
%s: fstat returned [%d] on fd [%d]
%s: read failed on fd [%d]; rc = [%d]
parse_options_file
ecryptfs_key_bytes=%s
Found another nvp match
max_key_bytes=
ecryptfs_cipher=%s
min_key_bytes=
ecryptfs_fnek_sig=%s
Out of memory
ecryptfs_sig=
ecryptfs_encrypted_view
ecryptfs_xattr_metadata
ecryptfs_hmac
ecryptfs_passthrough
name = [%s]; value = [%s]
dummy
another_key
blowfish
des3_ede
twofish
cast6
cast5
anubis
serpent
tnepres
xeta
xtea
khazad
arc4
ecryptfs_key_bytes
Select key bytes
ecryptfs_xattr
ecryptfs_fnek_sig
Existing key signature
ecryptfs_cipher
Select cipher
Comparing nvp->name = [%s] to key_module_select_node.mnt_opt_names[0] = [%s]
Error initializing key_bytes selection: there is no posibility left for used params
%s: Pushing onto stack; opt = [%s]
%s: Error initializing key_bytes param node; rc = [%d]
%s: No memory whilst attempting to write [%s]
Error attempting to get key module list; rc = [%d]
Key module [%s] does not have a subgraph transition node; attempting to build a linear subgraph from its parameter list
Error attempting to build linear subgraph for key module [%s]; excluding; rc = [%d]
Error attempting to add transition node to param node; rc = [%d]
Error attempting to insert allowed duplicate parameters into subgraph for key module; rc = [%d]
%s: Exceeded maximum number of transition nodes [%d] whilst constructing cipher list
%s: blocksize = %d; min keysize = %d; max keysize = %d
%s: Error initializing cipher list; rc = [%d]
%s: Error attempting to fill in decision graph; rc = [%d]
Key module [%s] does not have a key generation subgraph transition node
Internal check for another key
Enable HMAC integrity verification (y/N)
Enable plaintext passthrough (y/n)
Write metadata to extended attribute region (y/N)
Pass through encrypted versions of all files (y/N)
Filename Encryption Key (FNEK) Signature
ecryptfs_enable_filename_crypto
Enable filename encryption (y/n)
Select key type to use for newly created files
tf_ecryptfs_cipher
init_ecryptfs_cipher_param_node
get_enable_filename_crypto
fill_in_decision_graph_based_on_version_support
ecryptfs_process_decision_graph
%s: Dummy function substituted for unimplemented function in key module
ERROR: Could not open key_mod directory [%s]
Could not open library handle
Error attempting to get the symbol [get_key_mod_ops] from key module [%s]: err = [%s]. The key module is likely using the deprecated key module API.
Library function get_key_mod_ops() failed to return ops for [%s]
Error attempting to fill in missing  key module operations for [%s]; rc = [%d]
Error initializing key module [%s]; rc = [%d]
Library function get_key_mod_ops() failed to return ops for built-in key module in array position [%d]
Error initializing key module in array position [%d]
Preferring [%s] file over built-in module for key module with name [%s]
/lib/ecryptfs
get_key_mod_ops
ecryptfs_dummy_init
ecryptfs_dummy_get_gen_key_params
ecryptfs_dummy_get_gen_key_subgraph_trans_node
ecryptfs_dummy_get_params
ecryptfs_dummy_get_param_subgraph_trans_node
ecryptfs_dummy_get_blob
ecryptfs_dummy_get_key_data
ecryptfs_dummy_get_key_sig
ecryptfs_dummy_get_key_hint
ecryptfs_dummy_encrypt
ecryptfs_dummy_decrypt
ecryptfs_dummy_destroy
ecryptfs_dummy_finalize
%s: Invalid metadata size; must have at least [%zu] bytes; there are only [%zu] bytes
%s Invalid header size: [%zu]
%s: Magic eCryptfs marker not found in header.
%s: Invalid header content.
ecryptfs_parse_header_metadata
ecryptfs_parse_stat
passphrase_passwd_file
passphrase_passwd_fd
passphrase_passwd
Passphrase
passphrase_type
Provide passphrase directly
passphrase_salt
passfile
Passphrase File
passfd
Passphrase File Discriptor
0011223344556677
%s: Error whilst attempting to open [%s]; errno = [%m]
%s: Invalid file descriptor qualifier
%s: Error parsing file for passwd; rc = [%d]
%s: Cannot find [passwd] directive
Method for providing the passphrase
File containing passphrase (only use secure media)
File descriptor for file containing passphrase
Salt (hexadecimal representation)
tf_pass_file
;*2$"
libecryptfs.so.1.0.0.debug
7zXZ
a7T1
h\6?
)MBU`
7qYQ/
gu|q
1\vO,
M,/c
JAZM
QK3F
g?{Lm\
ap;T_
m46"RT
k2MC
iCUpa.
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.init
.plt
.plt.got
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.data
.bss
.gnu_debuglink
.gnu_debugdata
