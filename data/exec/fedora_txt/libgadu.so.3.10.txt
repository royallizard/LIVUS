gf0Z
[tOM
NFsu
u	rh
l;+!
j$0a
Kt+Zv
4p2c
g^Y~
z8h%
__gmon_start__
__cxa_finalize
_Jv_RegisterClasses
gg_chomp
strlen
gg_base64_encode
malloc
gg_urlencode
__stack_chk_fail
gg_proxy_auth
gg_proxy_enabled
gg_proxy_username
gg_proxy_password
__snprintf_chk
gg_base64_decode
calloc
strchr
gg_get_line
gg_http_hash
gg_vsaprintf
__vsnprintf_chk
gg_saprintf
gg_debug_common
gg_debug_handler_session
gg_debug_handler
gg_debug_level
gg_debug_file
__vfprintf_chk
stderr
gg_debug_session
__errno_location
gg_debug
gg_read_line
strerror
gg_crc32
gg_connect
inet_ntoa
socket
gg_local_ip
bind
ioctl
close
gg_dcc_set_type
gg_dcc_free
gg_dcc_voice_send
gg_fix32
gg_dcc_watch_fd
getsockopt
lseek
__read_chk
strncmp
gg_dcc_socket_create
listen
gg_dcc_voice_chat
gg_dcc_send_file
gg_dcc_get_file
gg_dcc_fill_file_info2
__xstat
open
strrchr
__ctype_toupper_loc
strncpy
gg_dcc_fill_file_info
gg_dcc_request
gg_send_message_ctcp
gg_dcc7_free
gg_dcc7_handle_reject
gg_dcc7_handle_accept
gg_dcc7_handle_new
gg_dcc7_reject
gg_send_packet
gg_dcc7_handle_id
gg_dcc7_send_file_fd
gg_dcc7_send_file
gg_file_hash_sha1
gg_dcc7_watch_fd
gg_dcc7_handle_info
inet_addr
strtol
gg_dcc7_accept
gg_image_queue_remove
__ctype_b_loc
gg_event_free
gg_pubdir50_free
gg_fix16
memcpy
memchr
__strdup
gg_watch_fd
gg_recv_packet
realloc
strcpy
memmove
gg_proxy_http_only
strcat
gg_dcc_ip
gg_dcc_port
gg_login_hash
gg_login_hash_sha1
getsockname
gg_http_free_fields
gg_http_stop
gg_http_free
gg_http_watch_fd
strstr
strncasecmp
gg_http_connect
gg_http_set_resolver
gg_proxy_host
gg_proxy_port
gg_userlist_get_free
gg_userlist_put_free
gg_userlist_remove_free
gg_free_search
gg_search_request_mode_0
gg_search_request_mode_1
gg_search_request_mode_2
gg_search_request_mode_3
gg_search_request_free
gg_change_info_request_new
gg_change_info_request_free
gg_resolve
gg_resolve_pthread_cleanup
gg_resolve_pthread
gg_pubdir50_handle_reply
gg_change_info
gg_remind_passwd2
gg_remind_passwd
gg_change_passwd3
gg_change_passwd2
gg_change_passwd
gg_unregister2
gg_unregister
gg_register2
gg_register
gg_search_watch_fd
gg_search
gg_userlist_remove_watch_fd
gg_userlist_remove
gg_userlist_put_watch_fd
gg_userlist_put
gg_userlist_get_watch_fd
gg_userlist_get
gg_token_free
gg_pubdir_free
gg_token_watch_fd
__isoc99_sscanf
gg_token
gg_pubdir_watch_fd
gg_remind_passwd3
gg_change_passwd4
gg_register3
gg_unregister3
random
gg_pubdir50_count
gg_pubdir50_type
gg_pubdir50_next
gg_pubdir50_seq
gg_pubdir50_seq_set
gg_pubdir50_get
strcasecmp
strcmp
gg_pubdir50_add
gg_pubdir50
gg_pubdir50_new
gg_libgadu_version
__sprintf_chk
gg_free_session
gg_login
gg_session_set_resolver
gg_write
gg_userlist_request
gg_remove_notify_ex
gg_remove_notify
gg_add_notify_ex
gg_add_notify
gg_notify
gg_notify_ex
gg_image_reply
__strcpy_chk
gg_image_request
gg_send_message_confer_richtext
rand
gg_send_message_confer
gg_send_message_richtext
gg_send_message
gg_change_status_descr_time
gg_change_status_descr
gg_change_status
gg_logoff
shutdown
gg_ping
gg_read
__memcpy_chk
gg_global_get_resolver
gg_global_set_custom_resolver
gg_global_set_resolver
gg_http_set_custom_resolver
gg_http_get_resolver
gg_session_set_custom_resolver
gg_session_get_resolver
pthread_cancel
pthread_join
pipe
pthread_create
waitpid
kill
_Unwind_Resume
pthread_setcancelstate
gethostbyname_r
__gcc_personality_v0
pthread_self
pthread_detach
pthread_exit
fork
gg_gethostbyname
libgcc_s.so.1
libpthread.so.0
libc.so.6
libgadu.so.3
GLIBC_2.4
GLIBC_2.3
GLIBC_2.3.4
GLIBC_2.7
GLIBC_2.2.5
GCC_3.0
GCC_3.3.1
a_&	
ATSubH
01234567H
89abcdefH
< t"H
l$ H
d$(L
l$0H
l$ L
t$(L
|$0H
fffff.
AWAVAUL
D$81
T$PH
D$@H
t$HH
L$XL
t$ L
D$`L
T$8dH3
x[]A\A]A^A_
|$ I
l$@H
\$8L
d$HL
l$PH
ffff.
T$0H
t$(H
L$8H
D$@L
D$ H
fff.
L$8H
D$@L
L$HI
D$ H
T$0H
L$8L
L$HI
D$ 1
AWAVAUI
ATUSH
([]A\A]A^A_
ffffff.
AUATA
[]A\A]
[]A\A]
[]A\A]
D$81
D$$fD
T$8dH3
\$@H
l$HL
d$PL
l$XL
t$`H
suyH
[]A\H
fffff.
l$ L
d$(L
l$0H
UDAG
$v0H
T$H1
L$LL
D$PL
Sx+SL
CT;CP
D$_<
Cx+CL
D$$H
D$_<
D$_H
D$$H
kTD;kPD
|$ H
SL;Sx
kTD;kPD
kTD;kPD
fff.
 []A\A]A^
|$ H
l$@H
\$8L
d$HL
l$PL
t$XL
|$`H
l$ A
ffff.
l$ A
ffff.
l$ A
ffff.
T$HH
|$0H
T$XH
T$hH
[]A\A]
[]A\A]
't=H
d$ H
'tFH
l$ L
d$(L
l$0H
d$ L
l$(L
t$0H
 []A\
[]A\A]
\$(H
l$0L
d$8L
l$@L
t$HL
|$PH
\$(H
l$0L
d$8L
l$@L
t$HL
|$PH
D$)@
L$@L
AUATUSH
D$x1
D$b1
T$xdH3
[]A\A]
ffffff.
*v2H
CL;CP
CL;CP
kLD;kPD
fffff.
d$ L
l$(L
t$0H
 []A\
H(H9
AWAVAUI
ATE1
t	Ic
t	Ic
[]A\A]A^A_
AWAVAUATM
|$(H
H[]A\A]A^A_
q	M9
|$(1
[]A\A]A^A_
H[]A\A]A^
D$ H
E L;d$ 
T$>I
T$(L
[]A\A]A^A_
|$(H
|$(1
|$(H
|$(H
|$(H
AVAUATUSH
	vSE
[]A\A]A^A_
T$PL
D$XH
|$X1
L$xH
L$|L
L$|H
t$	H
|$PD
HcD$XH
T$PL
47Hc
L$PL
L$PM
T$PL
T$PL
L$xI
D$`1
D$XH
T$PL
T$Pf
D$`A
t.HcL$XI
L$@A
T$`H
D$XH
T$PL
T$Pf
L$@A
HcL$XI
L$@A
T$XH
D$`H
T$PA
T$Pf
;D$X
L$@L
D$HH
D$HH
T$hA
L$@t9L
L$@L
L$@H
D$PH
|$h)L$XJ
T$XA
H;T$X
T$XI
D$XA
9D$X
L$XA9
L$@H
+T$XH
T$PtvH
T$PL
L$@f
T$PH
T$XI
D$HA
D$HI
T$`H
L$xL
L$@D
D$HH
L$@D
L$@D
D$HH
L$@L
L$PA
<$+D
D)D$`J
Clf=
T$PH
L$@H
L$@J
L$@J
D$h)D$`
L$|I
T$XL
|$XI
D$XA
L$@L
L$@D
D$HL
D$PH
L$@D
D$PH
L$@D
D$|H
D$xL
D$(H
D$xL
D$|L
|$ H
T$PL
Clf=
L$@A
T$|H
T$PA
L$@Hc
L$@t!Hc
L$@A
D$HL
D$PI
L$PL
fffff.
fffff.
{@Hc
Hc{PHc
HcCPH
\$8H
l$@L
d$HL
l$PL
t$XL
|$`H
l$ 1
fffff.
fffff.
fffff.
fffff.
ffff.
ffff.
ffff.
ffff.
fffff.
ffff.
fffff.
fffff.
fffff.
fffff.
\$(H
l$0L
d$8L
l$@L
t$HL
|$PH
ffff.
E(t'H
t$ H
L$ H
L$ I
D$(H
T$pL
T$pH
E(t+H
\$8H
l$@L
d$HL
l$PL
t$XL
|$`H
E(t)H
l$ L
d$(L
l$0L
t$8L
|$@H
E(t-H
\$(H
l$0L
d$8L
l$@L
t$HL
|$PH
AUATI
~+A9
A\A]A^
[]A\A]A^
[]A\
AVAUI
~GA9]
[]A\A]A^A_
ttHcU
[]A\A]A^1
AVAUATI
E9l$
T$ L
E9l$
t$ H
D$ I
|$ J
A9T$
|$ H
D$(H
t$(H
D$ I
A9T$
[]A\A]A^A_
AVAUATA
[]A\A]A^A_
[]A\A]A^A_
ffff.
ffff.
<span stI
S Shell I
Dlg 2'; I
font-sizAVI
or:#%02xI
e:9pt; "AUI
; font-fATI
amily:'MUH
<img namSH
yle="colH
%02x%02xH
e="%02x%H
02x%02x%H
02x%02x%H
02x%02x%H
L$\L
02x"f
T$xH
L$`H
t$pA
9T$\~
l$PA
9T$\Lc
t$`L
L$PD
t$`H
T$@D
T$@D
\$HA
tIHc
L$pI
T$@D
T$@D
[]A\A]A^A_
L$pH
t$`H
T$@E
D$	9D$\
tyIc
L$xA
T$(A
T$ A
t$`H
T$@D
\$HD
t$`H
T$@D
\$HD
9D$\
t$`H
D$8D
T$@D
D$8D
\$HD
t$`H
D$8D
T$@D
D$8D
\$HD
t$`H
T$@D
\$HD
fffff.
fffff.
AWAVAUATUH
D$ H
	tTH
[]A\A]A^A_
{xE1
46Hc
t$ H
tXIc
AVAUATU
T$@H
L$HL
D$PH
D$0M
D$ uv
h[]A\A]A^A_
[]A\A]A^A_
AVAUATUH
 []A\A]A^
 []A\A]A^
	uED
d$ H
	uED
d$ H
AUATUS
L$ H
|$(E1
8[]A\A]A^A_
[]A\A]A^A_
8[]A\A]A^A_
|$(H
[]A\A]A^A_
[]A\A]A^A_
AVAUA
ATUSH
L$ H
L$ H
t$4E1
|$81
teA)
H[]A\A]A^A_
[]A\A]A^A_
D$ H
H[]A\A]A^A_
|$8H
[]A\A]A^A_
[]A\A]A^A_
AVAUI
T$ 1
T$(H)
D$ M
T$(1
[]A\A]A^A_
D$5H
D$0H
T$ L
D$?A
\$HH
l$PL
d$XL
l$`L
t$hL
|$pH
\$ H
l$(L
d$0L
l$8L
t$@H
fff.
AWAVAUI
L$pH
D$pA
l$pH
t$`L
l$hH
L$p1
|$xA
L$hM
D$`H
|$h1
T$(H
L$ H
D$|H
[]A\A]A^A_
|$h1
T$8H
L$0H
T$(I
T$`H
D$|A
E<9D$|
OT$|A
D$|A
d$ L
l$(L
t$0H
T$,D
L$,M
\$0H
l$8L
d$@L
l$HL
t$PH
\$ H
l$(L
d$0H
D$<E1
T$0H
T$0A
L$0t
t$\@
D$<H
D$<1
T$PL
\$hH
l$pL
d$xL
D$\D
D$DD
L$0H
T$@L
l$ H
d$(L
l$0H
ffff.
AVAUATUH
x>A)
([]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
[]A\A]A^A_
AWAVAUATUSH
D	d$
D	d$
D	d$
D	d$
D	d$
D	d$
D3|$
D3t$
D3t$
D3l$
D3d$
D3\$
D3T$
D3L$
D3L$
D3D$
D3D$
D3D$
D3D$
D3D$
D3D$
D3D$
D3D$
D3D$
D3D$
D3D$
D3D$
D1L$
D3|$
D3|$
D3t$
D3l$
D3|$
D3T$
D3L$
D3L$
D3L$
D3D$
D3D$
D3D$
D3|$
D3\$
D3l$
D3l$
D3T$
D3T$
D3T$
D3T$
D3L$
D3D$
D3D$
D3|$
D3|$
D3t$
D3t$
D3l$
D3l$
D3d$
D3T$
D3L$
D3D$
[]A\A]A^A_
?wYH
l$ H
d$(L
l$0L
t$8L
|$@H
C?D9
fff.
[]A\
t$ L
l$ L
#EgdH
D$x1
D$xdH3
fffff.
StbH
d$ L
l$(L
t$0H
fff.
St:H
fffff.
AWAVAUI
|$X1
T$PH
|$HL
t$ H
D$XH
T$PL
|$PH
D$PE
|$X1
|$X1
[]A\A]A^A_
D$HH
|$PH
ffff.
\$ H
l$(L
d$0L
l$8L
t$@H
%s:%s
** gg_connect(%s, %d, %d);
Proxy-Authorization: Basic %s
// gg_utf8_to_cp() not enough memory
// gg_cp_to_utf8() not enough memory
// gg_read_line() error on read (errno=%d, %s)
// gg_read_line() eof reached
// gg_connect() socket() failed (errno=%d, %s)
// gg_connect() bind() failed (errno=%d, %s)
// gg_connect() ioctl() failed (errno=%d, %s)
// gg_connect() connect() failed (errno=%d, %s)
// gg_connect() connect() in progress
 &   ! ?
++ gg_dcc %s (fd=%d,len=%d)
 %.2x
** gg_dcc_free(%p);
write
** gg_dcc_watch_fd(%p);
read
// gg_dcc_watch_fd() dialin
SEND
++ gg_dcc_voice_send(%p, %p, %d);
// gg_dcc_voice_send() invalid argument
// gg_dcc_voice_send() write() failed
// gg_dcc_watch_fd() invalid argument
// gg_dcc_watch_fd() not enough memory
// gg_dcc_watch_fd() can't accept() new connection (errno=%d, %s)
// gg_dcc_watch_fd() new direct connection from %s:%d
// gg_dcc_watch_fd() can't set nonblocking (errno=%d, %s)
// gg_dcc_watch_fd() not enough memory for client data
// gg_dcc_watch_fd() GG_READING_UIN_%d
// gg_dcc_watch_fd() read() failed (errno=%d, %s)
// gg_dcc_watch_fd() read() failed, connection broken
// gg_dcc_watch_fd() read() failed (%d bytes, %d needed)
// gg_dcc_watch_fd() GG_SENDING_ACK
// gg_dcc_watch_fd() write() failed (errno=%d, %s)
// gg_dcc_watch_fd() write() failed (%d needed, %d done)
// gg_dcc_watch_fd() GG_STATE_READING_TYPE
// gg_dcc_watch_fd() callback
// gg_dcc_watch_fd() unknown dcc type (%.4x) from %ld
// gg_dcc_watch_fd() GG_STATE_READING_REQUEST
// gg_dcc_watch_fd() file transfer request
// gg_dcc_watch_fd() voice chat request
// gg_dcc_watch_fd() unknown dcc request (%.4x) from %ld
// gg_dcc_watch_fd() GG_STATE_READING_FILE_INFO
// gg_dcc_watch_fd() GG_STATE_SENDING_FILE_ACK
// gg_dcc_watch_fd() out of memory
// gg_dcc_watch_fd() GG_STATE_SENDING_VOICE_ACK
// gg_dcc_watch_fd() GG_STATE_READING_FILE_HEADER
// gg_watch_fd() read() failed (errno=%d, %s)
// gg_dcc_watch_fd() transfer refused
// gg_dcc_watch_fd() empty chunk, EOF
// gg_dcc_watch_fd() GG_STATE_READING_VOICE_HEADER
// gg_dcc_watch_fd() peer breaking connection
// gg_dcc_watch_fd() unknown request (%.2x)
// gg_dcc_watch_fd() GG_STATE_READING_VOICE_SIZE
// gg_dcc_watch_fd() invalid voice frame size (%d)
// gg_dcc_watch_fd() out of memory for voice frame
// gg_dcc_watch_fd() GG_STATE_READING_VOICE_DATA
// gg_dcc_watch_fd() GG_STATE_CONNECTING
// gg_dcc_watch_fd() connection failed (fd=%d,errno=%d(%s),foo=%d,res=%d(%s))
// gg_dcc_watch_fd() connected, sending uins
// gg_dcc_watch_fd() GG_STATE_READING_ACK
// gg_dcc_watch_fd() did't get ack
// gg_dcc_watch_fd() GG_STATE_SENDING_VOICE_REQUEST
// gg_dcc_watch_fd() GG_STATE_SENDING_REQUEST
// gg_dcc_watch_fd() GG_STATE_SENDING_FILE_INFO
// gg_dcc_watch_fd() GG_STATE_READING_FILE_ACK
// gg_dcc_watch_fd() GG_STATE_READING_VOICE_ACK
// invalid reply (%.2x), connection refused
// gg_dcc_watch_fd() GG_STATE_SENDING_FILE_HEADER
// gg_dcc_watch_fd() GG_STATE_SENDING_FILE
// gg_dcc_watch_fd() offset=%d, size=%d
// gg_dcc_watch_fd() read() reached eof on empty file
// gg_dcc_watch_fd() offset >= size, finished
// gg_dcc_watch_fd() read() failed. (errno=%d, %s)
// gg_dcc_watch_fd() read() reached eof
// gg_dcc_watch_fd() read() too much (read=%d, ofs=%d, size=%d)
// gg_dcc_watch_fd() reached EOF after cutting
// gg_dcc_watch_fd() write() failed (%s)
// gg_dcc_watch_fd() write() failed (connection reset)
// gg_dcc_watch_fd() chunk finished
// gg_dcc_watch_fd() GG_STATE_GETTING_FILE
// gg_dcc_watch_fd() ofs=%d, size=%d, read()=%d
// gg_dcc_watch_fd() write() failed (%d:fd=%d:res=%d:%s)
// gg_dcc_watch_fd() GG_STATE_???
** gg_create_dcc_socket(%d, %d);
// gg_create_dcc_socket() invalid arguments
// gg_create_dcc_socket() can't create socket (%s)
// gg_create_dcc_socket() no free port found
// gg_create_dcc_socket() trying port %d
// gg_create_dcc_socket() unable to listen (%s)
// gg_create_dcc_socket() bound to port %d
// gg_create_dcc_socket() not enough memory for struct
** gg_dcc_transfer(%s, %d, %ld, %ld, %s);
// gg_dcc_transfer() invalid arguments
// gg_dcc_transfer() not enough memory
// gg_dcc_transfer() connection failed
// gg_dcc_voice_chat() handing over to gg_dcc_transfer()
// gg_dcc_send_file() handing over to gg_dcc_transfer()
// gg_dcc_get_file() handing over to gg_dcc_transfer()
** gg_dcc_fill_file_info2(%p, "%s", "%s");
// gg_dcc_fill_file_info2() invalid arguments
// gg_dcc_fill_file_info2() stat() failed (%s)
// gg_dcc_fill_file_info2() that's a directory
// gg_dcc_fill_file_info2() open() failed (%s)
// gg_dcc_fill_file_info2() short name "%s", dos name "%s"
** gg_dcc7_free(%p)
** gg_dcc7_reject(%p, %d)
** gg_dcc7_listen(%p, %d)
%s %d
** gg_dcc7_watch_fd(%p)
** gg_dcc7_connect(%p, %p)
** gg_dcc7_accept(%p, %d)
** gg_dcc7_session_remove(%p, %p)
** gg_dcc7_postauth_fixup(%p)
// gg_dcc7_postauth_fixup() invalid parameters
** gg_dcc7_session_add(%p, %p)
// gg_dcc7_session_remove() invalid parameters
** gg_dcc7_session_find(%p, ..., %d)
** gg_dcc7_handle_reject(%p, %p, %p, %d)
// gg_dcc7_handle_reject() unknown dcc session
// gg_dcc7_handle_reject() invalid state
** gg_dcc7_handle_accept(%p, %p, %p, %d)
// gg_dcc7_handle_accept() unknown dcc session
// gg_dcc7_handle_accept() invalid state
** gg_dcc7_handle_new(%p, %p, %p, %d)
// gg_dcc7_handle_new() not enough memory
// gg_dcc7_handle_new() unable to add to session
// gg_dcc7_handle_packet() not enough memory
// gg_dcc7_handle_new() unknown dcc type (%d) from %ld
// gg_dcc7_reject() invalid parameters
** gg_dcc7_handle_id(%p, %p, %p, %d)
// checking dcc %p, state %d, type %d
// gg_dcc7_send_file_common() invalid parameters
// gg_dcc7_send_file_common() not enough memory
** gg_dcc7_request_id(%p, %d)
// gg_dcc7_request_id() not connected
** gg_dcc7_send_file_fd(%p, %d, %d, %u, "%s", %p)
** gg_dcc7_send_file(%p, %d, "%s", %p)
// gg_dcc7_send_file() invalid parameters
// gg_dcc7_send_file() stat() failed (%s)
// gg_dcc7_send_file() that's a directory
// gg_dcc7_send_file() open() failed (%s)
** gg_dcc7_listen_and_send_info(%p)
// gg_dcc7_listen() can't create socket (%s)
// gg_dcc7_listen() trying port %d
// gg_dcc7_listen() no free port found
// gg_dcc7_listen() unable to listen (%s)
** gg_dcc7_reverse_connect(%p)
// gg_dcc7_reverse_connect() already reverse connection
// gg_dcc7_reverse_connect() timeout, trying reverse connection
// gg_dcc7_watch_fd() invalid parameters
// gg_dcc7_watch_fd() not enough memory
// gg_dcc7_watch_fd() GG_STATE_LISTENING
// gg_dcc7_watch_fd() accept() failed (%s)
// gg_dcc7_watch_fd() connection from %s:%d
// gg_dcc7_watch_fd() can't set nonblocking (%s)
// gg_dcc7_watch_fd() GG_STATE_CONNECTING
// gg_dcc7_watch_fd() connection failed (%s)
// gg_dcc7_watch_fd() connected, sending id
// gg_dcc7_watch_fd() GG_STATE_READING_ID
// gg_dcc7_watch_fd() read() failed (%d, %s)
// gg_dcc7_watch_fd() invalid id
// gg_dcc7_watch_fd() GG_SENDING_ID
// gg_dcc7_watch_fd() write() failed (%d, %s)
// gg_dcc7_watch_fd() GG_STATE_SENDING_FILE (offset=%d, size=%d)
// gg_dcc7_watch_fd() offset >= size, finished
// gg_dcc7_watch_fd() lseek() failed (%s)
// gg_dcc7_watch_fd() read() failed (res=%d, %s)
// gg_dcc7_watch_fd() write() failed (%s)
// gg_dcc7_watch_fd() finished
// gg_dcc7_watch_fd() GG_STATE_GETTING_FILE (offset=%d, size=%d)
// gg_dcc7_watch_fd() read() failed (fd=%d, res=%d, %s)
// gg_dcc7_watch_fd() write() failed (fd=%d, res=%d, %s)
// gg_dcc7_watch_fd() GG_STATE_???
** gg_dcc7_handle_info(%p, %p, %p, %d)
// gg_dcc7_handle_info() unknown dcc session
// gg_dcc7_handle_info() unhandled transfer type (%d)
// gg_dcc7_handle_info() invalid IP address
// gg_dcc7_handle_info() invalid IP port
// gg_dcc7_handle_info() invalid state
// gg_dcc7_connect() invalid parameters
// gg_dcc7_connect() connection failed
// gg_dcc7_accept() invalid parameters
&lt;
&gt;
&quot;
&apos;
&amp;
** gg_event_free(%p);
** gg_watch_fd(%p);
8.0.0.7669
http://appmsg.gadu-gadu.pl
HTTP/1.
notoperating
// gg_watch_fd() connected
CONNECT %s:%d HTTP/1.0
//   %s
//   %s
%02x
255.255.255.255
userlist_reply=%p, len=%d
// gg_handle_recv_msg() packet out of bounds (1)
// gg_handle_recv_msg() packet out of bounds (1.5)
// gg_handle_recv_msg() not enough memory for recipients data
// gg_handle_recv_msg() packet out of bounds (2)
// gg_handle_recv_msg() not enough memory for richtext data
// gg_handle_recv_msg() packet out of bounds (3)
// gg_handle_recv_msg() packet out of bounds (4)
// gg_image_queue_parse() unknown image from %d, size=%d, crc32=%.8x
// gg_image_queue_parse() malformed packet from %d, unlimited filename
// gg_image_queue_parse() not enough memory for filename
// gg_handle_recv_msg() unknown payload 0x%.2x
// gg_watch_fd() not enough memory for event data
// gg_watch_fd() sending %d bytes of queued data
// gg_watch_fd() write() failed (errno=%d, %s)
// gg_watch_fd() sent all queued data
// gg_watch_fd() sent %d bytes of queued data, %d bytes left
// gg_watch_fd() GG_STATE_RESOLVING
// gg_watch_fd() resolving failed
// gg_watch_fd() resolved, connecting to %s:%d
// gg_watch_fd() connection failed (errno=%d, %s), critical
// gg_watch_fd() GG_STATE_CONNECTING_HUB
// gg_watch_fd() connection to proxy failed (errno=%d, %s)
// gg_watch_fd() connection to hub failed (errno=%d, %s)
// gg_watch_fd() connected to hub, sending query
// gg_watch_fd() out of memory for client version
GET %s/appsvc/appmsg_ver8.asp?fmnumber=%u&fmt=2&lastmsg=%d&version=%s HTTP/1.0
Host: appmsg.gadu-gadu.pl
=> -----BEGIN-HTTP-QUERY-----
=> -----END-HTTP-QUERY-----
// gg_watch_fd() sending query failed
// gg_watch_fd() GG_STATE_READING_DATA
// gg_watch_fd() received http header (%s)
// gg_watch_fd() invalid http reply, connection failed
// gg_watch_fd() out of memory for system message, ignoring
// gg_watch_fd() received http data (%s)
// gg_watch_fd() service unavailable
// gg_watch_fd() connection failed (errno=%d, %s), trying https
// gg_watch_fd() connection failed (errno=%d, %s)
// gg_watch_fd() GG_STATE_CONNECTING_GG
// gg_watch_fd() proxy request:
//   %s
// gg_watch_fd() can't send proxy request
// gg_watch_fd() GG_STATE_READING_KEY
// gg_watch_fd() proxy response:
//   %s
// gg_watch_fd() didn't receive packet (errno=%d, %s)
// gg_watch_fd() invalid packet received
// gg_watch_fd() challenge %.4x --> GG32 hash %.8x
// gg_watch_fd() challenge %.4x --> SHA1 hash: %s
// gg_watch_fd() detecting address
// gg_watch_fd() detected address to %s
// gg_watch_fd() unable to detect address
// gg_watch_fd() sending GG_LOGIN80 packet
Gadu-Gadu Client Build 8.0.0.8731
// gg_watch_fd() sending GG_LOGIN80BETA packet
// gg_watch_fd() sending GG_LOGIN70 packet
// gg_watch_fd() sending packet failed. (errno=%d, %s)
// gg_watch_fd() GG_STATE_READING_REPLY
// gg_watch_fd() login succeded
// gg_watch_fd() login failed
// gg_watch_fd() too many incorrect password attempts
// gg_watch_fd() invalid packet
// gg_watch_fd() GG_STATE_CONNECTED
** gg_watch_fd_connected(%p, %p);
// gg_watch_fd_connected() gg_recv_packet failed (errno=%d, %s)
** gg_handle_recv_msg(%p, %p);
// gg_handle_recv_msg() oops, silently ignoring the bait
// gg_handle_recv_msg() malformed packet, message out of bounds (0)
// gg_handle_recv_msg() received ctcp packet
** gg_handle_recv_msg80(%p, %p);
// gg_handle_recv_msg80() oops, silently ignoring the bait
// gg_handle_recv_msg80() malformed packet, message out of bounds (0)
// gg_handle_recv_msg80() malformed packet, attr out of bounds (1)
// gg_handle_recv_msg80() malformed packet, message out of bounds (2)
// gg_handle_recv_msg80() malformed packet, message out of bounds (3)
// gg_watch_fd_connected() received a notify reply
// gg_watch_fd_connected() incomplete packet
// gg_watch_fd_connected() not enough memory for notify data
// gg_watch_fd_connected() received a status change
// gg_watch_fd_connected() received a message ack
// gg_watch_fd_connected() received a pong
// gg_watch_fd_connected() received disconnection warning
// gg_watch_fd_connected() received disconnection acknowledge
// gg_watch_fd_connected() received XML event
// gg_watch_fd_connected() not enough memory for XML event data
// gg_watch_fd_connected() received pubdir/search reply
// gg_watch_fd_connected() received userlist reply
// gg_watch_fd_connected() not enough memory for userlist reply
// gg_watch_fd_connected() received dcc7 id packet
// gg_watch_fd_connected() received dcc7 accept
// gg_watch_fd_connected() received dcc7 request
// gg_watch_fd_connected() received dcc7 reject
// gg_watch_fd_connected() received dcc7 info
// gg_watch_fd_connected() received unknown packet 0x%.2x
// gg_watch_fd() watch_fd_connected failed (errno=%d, %s)
** gg_http_watch_fd(%p);
=> http, resolving done
=> http, connecting to %s:%d
Content-length: 
=> http, body_size=%d
%s %s HTTP/1.0
// gg_http_watch_fd() invalid arguments
=> http, resolver thread failed
=> http, connection failed (errno=%d, %s)
=> http, async connection failed (errno=%d, %s)
=> http, connected, sending request
=> http, write() failed (len=%d, res=%d, errno=%d)
=> http, partial header sent (led=%d, sent=%d)
=> http, request sent (len=%d)
=> http, reading header failed (errno=%d)
=> http, connection reset by peer
=> http, read %d bytes of header
=> http, not enough memory for header
=> http, header_buf=%p, header_size=%d
=> http, got all header (%d bytes, %d left)
=> -----BEGIN-HTTP-HEADER-----
=> -----END-HTTP-HEADER-----
=> http, didn't get 200 OK -- no results
=> http, content-length not found
=> http, oversized reply (%d bytes needed, %d bytes left)
=> http, not enough memory (%d bytes for body_buf)
=> http, reading body failed (errno=%d)
=> http, we're done, closing socket
=> http, connection closed while reading (have %d, need %d)
=> http, read %d bytes of body
=> http, too much data (%d bytes, %d needed), enlarging buffer
=> http, not enough memory for data (%d needed)
=> body_done=%d, body_size=%d
// gg_http_connect() invalid arguments
%s http://%s:%d%s HTTP/1.0
%s%s
// gg_http_connect() not enough memory for query
// gg_http_connect() resolver failed
// gg_http_connect() resolver = %p
// gg_http_connect() host not found
// gg_http_connect() connection failed (errno=%d, %s)
// gg_http_connect() some strange error
// gg_change_info() is obsolete. use gg_pubdir50() instead
// gg_remind_passwd2() is obsolete. use gg_remind_passwd3() instead!
// gg_remind_passwd() is obsolete. use gg_remind_passwd3() instead!
// gg_change_passwd3() is obsolete. use gg_change_passwd4() instead!
// gg_change_passwd2() is obsolete. use gg_change_passwd4() instead!
// gg_change_passwd() is obsolete. use gg_change_passwd4() instead!
// gg_unregister2() is obsolete. use gg_unregister3() instead!
// gg_unregister() is obsolete. use gg_unregister3() instead!
// gg_register2() is obsolete. use gg_register3() instead!
// gg_register() is obsolete. use gg_register3() instead!
// gg_search() is obsolete. use gg_search50() instead!
// gg_userlist_remove() is obsolete. use gg_userlist_request() instead!
// gg_userlist_put() is obsolete. use gg_userlist_request() instead!
// gg_userlist_get() is obsolete. use gg_userlist_request() instead!
=> token, watch_fd issued on failed session
=> token, not enough memory for results
=> token, not enough memory for token url
Host: %s
User-Agent: Mozilla/4.7 [en] (Win98; I)
=> token, gg_http_connect() failed mysteriously
=> token, not enough memory for token data
Host: register.gadu-gadu.pl
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/4.7 [en] (Win98; I)
Content-Length: 0
Pragma: no-cache
=> pubdir, watch_fd issued on failed session
=> pubdir, not enough memory for results
Tokens okregisterreply_packet.reg.dwUserId=
=> pubdir, success (okregisterreply, uin=%d)
=> remind, not enough memory for form fields
userid=%d&code=%u&tokenid=%s&tokenval=%s&email=%s
Host: retr.gadu-gadu.pl
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/4.7 [en] (Win98; I)
Content-Length: %d
Pragma: no-cache
=> remind, not enough memory for query
=> remind, gg_http_connect() failed mysteriously
=> change, not enough memory for form fields
fmnumber=%d&fmpwd=%s&pwd=%s&email=%s&tokenid=%s&tokenval=%s&code=%u
Host: register.gadu-gadu.pl
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/4.7 [en] (Win98; I)
Content-Length: %d
Pragma: no-cache
=> change, not enough memory for query
=> change, gg_http_connect() failed mysteriously
=> register, not enough memory for form fields
pwd=%s&email=%s&tokenid=%s&tokenval=%s&code=%u
=> register, not enough memory for form query
=> register, not enough memory for query
=> register, gg_http_connect() failed mysteriously
=> unregister, NULL parameter
=> unregister, not enough memory for form fields
fmnumber=%d&fmpwd=%s&delete=1&pwd=%s&email=deletedaccount@gadu-gadu.pl&tokenid=%s&tokenval=%s&code=%u
=> unregister, not enough memory for form query
=> unregister, not enough memory for query
=> unregister, gg_http_connect() failed mysteriously
=> token, http failure
=> token body "%s"
%d %d %d
=> token, parsing failed
http://
%s?tokenid=%s
register.gadu-gadu.pl
=> token, url parsing failed
/appsvc/regtoken.asp
POST
=> pubdir, http failure
=> pubdir, let's parse "%s"
success
results
=> pubdir, success (uin=%d)
=> pubdir, error.
=> remind, NULL parameter
=> remind, %s
/appsvc/fmsendpwd3.asp
retr.gadu-gadu.pl
=> change, NULL parameter
=> change, %s
/appsvc/fmregister3.asp
=> register, NULL parameter
=> register, %s
deletedaccount@gadu-gadu.pl
=> unregister, %s
** gg_pubdir50_seq_set(%p, %d);
// gg_pubdir50_seq_set() invalid arguments
** gg_pubdir50_get(%p, %d, "%s");
// gg_pubdir50_get() invalid arguments
** gg_pubdir50_add_n(%p, %d, "%s", "%s");
// gg_pubdir50_add_n() out of memory
// gg_pubdir50() invalid arguments
// gg_pubdir50() not connected
// gg_pubdir50() out of memory (%d bytes)
// gg_pubdir50_new() out of memory
** gg_pubdir50_handle_reply_sess(%p, %p, %p, %d);
// gg_pubdir50_handle_reply() invalid arguments
// gg_pubdir50_handle_reply() packet too short
// gg_pubdir50_handle_reply() unable to allocate reply
// gg_pubdir50_handle_reply() premature end of packet
** gg_pubdir50(%p, %p);
** gg_pubdir50_new(%d);
nextstart
1.9.0
</u>
</i>
</b>
</span>
<br>
** gg_login(%p);
// gg_send_packet(0x%.2x)
** gg_notify(%p, %p, %d);
** gg_change_status(%p, %d);
** gg_logoff(%p);
** gg_ping(%p);
** gg_recv_packet(%p);
// gg_recv_packet(%.2x)
** gg_login(%p: [uin=%u, async=%d, ...]);
// gg_login() not enough memory for session data
// gg_login() invalid arguments. uin and password needed
// gg_login() not enough memory for password
// gg_login() invalid arguments. unknown hash type (%d)
// gg_login() invalid arguments. unsupported resolver type (%d)
// gg_login() not enough memory for status
// gg_login() client requested TLS but no support compiled in
// gg_login() host "%s" not found
// gg_login() connection failed (errno=%d, %s)
// gg_login() critical error in gg_watch_fd()
// gg_login() could not login
// gg_login() resolving failed (errno=%d, %s)
// gg_login() direct connection failed (errno=%d, %s)
** gg_send_packet(%p, 0x%.2x, ...);
// gg_send_packet() not enough memory for packet header
// gg_send_packet() not enough memory for payload
// gg_send_packet() write() failed. res = %d, errno = %d (%s)
// gg_send_packet() partial write(), %d sent, %d left, %d total left
** gg_remove_notify_ex(%p, %u, %d);
** gg_add_notify_ex(%p, %u, %d);
** gg_notify_ex(%p, %p, %p, %d);
** gg_image_reply(%p, %d, "%s", %p, %d);
** gg_image_request(%p, %d, %u, 0x%.4x);
// gg_image_request() not enough memory for image queue
// gg_image_request() not enough memory for image
** gg_send_message_ctcp(%p, %d, %u, ...);
** gg_send_message_confer_richtext(%p, %d, %d, %p, %p, %p, %d);
** gg_send_message_confer(%p, %d, %d, %p, %p);
** gg_send_message_richtext(%p, %d, %u, %p, %p, %d);
** gg_send_message(%p, %d, %u, %p)
** gg_change_status_descr_time(%p, %d, "%s", %d);
** gg_change_status_descr(%p, %d, "%s");
// gg_recv_packet() header recv: resuming last read (%d bytes left)
// gg_recv_packet() header recv(%d,%p,%d) = %d
// gg_recv_packet() header recv() failed: connection broken
// gg_recv_packet() header recv() interrupted system call, resuming
// gg_recv_packet() header recv() incomplete header received
// gg_recv_packet() header recv() not enough memory
// gg_recv_packet() header recv() failed: errno=%d, %s
// gg_recv_packet() invalid packet length (%d)
// gg_recv_packet() resuming last gg_recv_packet()
// gg_recv_packet() not enough memory for packet data
// gg_recv_packet() body recv(%d,%p,%d) = %d
// gg_recv_packet() body recv() failed: connection broken
// gg_recv_packet() body recv() failed (errno=%d, %s)
// gg_recv_packet() %d bytes received, %d left
** gg_resolver_pthread_start(%p, %p, "%s");
// gg_resolver_pthread_start() invalid arguments
// gg_resolver_pthread_start() out of memory for resolver data
// gg_resolver_pthread_start() unable to create pipes (errno=%d, %s)
// gg_resolver_pthread_start() out of memory
// gg_resolver_pthread_start() unable to create thread
// gg_resolver_pthread_start() %p
** gg_resolver_fork_start(%p, %p, "%s");
// gg_resolver_fork_start() invalid arguments
// gg_resolver_fork_start() out of memory for resolver data
// gg_resolver_fork_start() unable to create pipes (errno=%d, %s)
// gg_resolver_fork_start() %p
zPLR
ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/
libgadu.so.3.10.0.debug
.data
.rodata
.shstrtab
.dynamic
.note.gnu.build-id
.gcc_except_table
.eh_frame
.gnu.hash
.fini
.gnu_debuglink
.dynsym
.gnu.version
.rela.dyn
.data.rel.ro
.gnu.version_r
.jcr
.eh_frame_hdr
.dynstr
.ctors
.dtors
.bss
.init
.rela.plt
.got.plt
.got
.text
