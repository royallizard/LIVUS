/lib/ld-linux.so.2
libjq.so.1
_ITM_deregisterTMCloneTable
__gmon_start__
_Jv_RegisterClasses
_ITM_registerTMCloneTable
jq_util_input_set_parser
jv_array
jq_teardown
jq_testsuite
jq_set_debug_cb
jv_array_append
jq_util_input_free
jv_dump_string
jv_free
jq_compile_args
jq_realpath
jv_copy
jv_invalid_has_msg
jq_set_input_cb
jq_util_input_next_input
jv_parse
jq_next
jv_object_set
jq_util_input_next_input_cb
jv_object
jv_dump
jq_dump_disassembly
jv_null
jq_util_input_get_position
jv_dumpf
jq_util_input_errors
jv_invalid_get_msg
jv_array_length
jv_load_file
jv_string_value
jq_util_input_add_input
jq_init
jv_string
jv_array_get
jv_parser_new
jv_string_length_bytes
jq_start
jv_get_kind
jq_set_attr
jq_util_input_init
libm.so.6
libonig.so.2
_fini
libc.so.6
_IO_stdin_used
fflush
__printf_chk
exit
__strdup
perror
putchar
strtol
isatty
dirname
__errno_location
__fprintf_chk
stdout
fputc
fputs
fclose
__ctype_b_loc
stderr
fileno
fwrite
strchr
__cxa_finalize
strcmp
strerror
__libc_start_main
ferror
__stack_chk_fail
_edata
__bss_start
_end
/builddir/build/BUILD/jq-1.5/.libs
GLIBC_2.3
GLIBC_2.3.4
GLIBC_2.1.3
GLIBC_2.4
GLIBC_2.1
GLIBC_2.0
Y[^_]
UWVS
D$|1
D$|e3
[^_]
D$L1
[^_]
D$L1
8-t;
UWVS
t$,U
[^_]
Use %s --help for help with command-line options,
or see the jq manpage, or online docs  at https://stedolan.github.io/jq
jq - commandline JSON processor [version %s]
Usage: %s [options] <jq filter> [file...]
	jq is a tool for processing JSON inputs, applying the
	given filter to its JSON text inputs and producing the
	filter's results as JSON on standard output.
	The simplest filter is ., which is the identity filter,
	copying jq's input to its output unmodified (except for
	formatting).
	For more advanced filters see the jq(1) manpage ("man jq")
	and/or https://stedolan.github.io/jq
	Some of the options include:
	 -c		compact instead of pretty-printed output;
	 -n		use `null` as the single input value;
	 -e		set the exit status code based on the output;
	 -s		read (slurp) all inputs into an array; apply filter to it;
	 -r		output raw strings, not JSON texts;
	 -R		read raw strings, not JSON texts;
	 -C		colorize JSON;
	 -M		monochrome (don't colorize JSON);
	 -S		sort keys of objects on output;
	 --tab	use tabs for indentation;
	 --arg a v	set variable $a to value <v>;
	 --argjson a v	set variable $a to JSON value <v>;
	 --slurpfile a f	set variable $a to an array of JSON texts read from <f>;
	See the manpage for more options.
jq: error (at %s) (not a string): %s
-L takes a parameter: (e.g. -L /search/path or -L/search/path)
%s: --indent takes one parameter
%s: --indent takes a number between -1 and 7
%s: --arg takes two parameters (e.g. --arg varname value)
%s: --argjson takes two parameters (e.g. --argjson varname text)
%s: invalid JSON text passed to --argjson
%s: --%s takes two parameters (e.g. --%s varname filename)
%s: Bad JSON in --%s %s %s: %s
Error: writing output failed: %s
DEBUG:
jq: error (at %s): %s
argfile
slurpfile
malloc
slurp
raw-output
compact-output
color-output
monochrome-output
ascii-output
unbuffered
sort-keys
raw-input
null-input
from-file
join-output
indent
stream
stream-errors
exit-status
name
value
argjson
debug-dump-disasm
debug-trace
help
version
jq-%s
run-tests
%s: Unknown option %s
$ORIGIN/lib
$ORIGIN/../lib/jq
~/.jq
JQ_LIBRARY_PATH
Error: out of memory
JQ_ORIGIN
VERSION_DIR
%s: %s
PROGRAM_ORIGIN
ignoring parse error: %s
;*2$"4
jq.debug
7zXZ
P7fc9Q
\Z0Sm
n>Pu
L}o(?
YVRaFL^f
_RU!
X/8qPk%
M'JH
"R|l
O9)%:
rp*w
]#?h
lX/-
m	Y 
.shstrtab
.interp
.note.ABI-tag
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.got
.data
.bss
.gnu_debuglink
.gnu_debugdata
