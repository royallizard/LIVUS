{SV+{rMQ
%*E.
__gmon_start__
_init
_fini
__cxa_finalize
_Jv_RegisterClasses
__stack_chk_fail
ast_module_unregister
ast_unregister_application
ast_config_AST_LOG_DIR
__snprintf_chk
ast_register_application2
__ctype_b_loc
ast_write
ast_log
__errno_location
strerror
__sprintf_chk
option_verbose
__ast_verbose
ast_options
ast_verbose_get_by_file
readdir
strlen
strncmp
ast_config_AST_SPOOL_DIR
ast_mkdir
opendir
gettimeofday
fopen
unlink
fgets
__ctype_tolower_loc
fclose
closedir
ast_localtime
strtol
strcmp
sscanf
ast_mktime
ast_module_register
ast_unregister_file_version
ast_register_file_version
ast_strftime
__fprintf_chk
fputc
rename
memcpy
ast_app_separate_args
ast_app_parse_options
ast_answer
ast_set_write_format
ast_set_read_format
ast_activate_generator
ast_frame_free
ast_waitfor
ast_read
sms_flags
sms_opt_args
libpthread.so.0
libc.so.6
__timezone
_edata
__bss_start
_end
GLIBC_2.4
GLIBC_2.3
GLIBC_2.3.4
GLIBC_2.2.5
%z} 
%r} 
%j} 
%b} 
%Z} 
%R} 
%J} 
%B} 
%:} 
%2} 
%*} 
%"} 
%z| 
%r| 
%j| 
ATSubH
=`z 
%<x 
AVAUATUSH
[]A\A]A^
AVAUATA
\$8A
<:D)
]A\A]A^A_
]A\A]A^A_
fff.
fff.
fffff.
=3j 
+t=@
[]A\
fffff.
[]A\
5)l 
[A\A]
AWAVA
AUATUSH
[]A\A]A^A_
ffffff.
ATUS~=I
[]A\A]L
[]A\A]L
ffffff.
AUATI
[]A\A]
AVAUATUSH
t$8H
D$@H
T$HH
t$hH
D$pH
T$xH
D$8H
t$XH
T$0H
D$`H
t$(L
gfffL
[]A\A]A^A_
|$8L
 t"I
00000000H
|$@L
|$HL
00000000H
L$hL
D$pL
L$xH
|$XD
fffff.
=9N 
ffff.
|$@H
|$@H
l$`H
\$XH
AWAVAUA
ATUSH
=?N 
l$pE
D$HH
D$HH
L$PI
T$XH
D$0L
L$(H
;Cd}#H
DCtf
;Cd|
[]A\A]A^A_
AVAUATUSH
CXu	H
|$0L
%:J 
D9sdv1D
jtfA
D9sdw
[]A\A]A^A_
|$ 1
D$(H
D$ H
D9khw
D9kdw
D9sdw
AVAUATUSH
=y? 
D$(H
T$HH
D$@H
D$`H
T$XH
D$0H
D9d$$
D9d$$
[]A\A]A^A_
D$@Hc
D$HHc
|$81
t$0H
|$PH
D$pA
D$lA
D$hA
D$dD
L$lH
D$$H
|$ 1
D$`L
T$hH
C!t4H
|$p1
D$xH
D$pH
ffffff.
AVAUI
\$'H
=|0 
[A\A]A^A_
%s/sms
app_sms.c
app_sms
 %02X
    -- SMS %s%s
%02X 
motx
mttx
%s/sms/%s
Sending %s
UD too long in %s
scts
%d-%d-%dT%d:%d:%d
Bad date/timein %s: %s
Cannot parse in %s: %s=%si
Cannot parse in %s: %s
Sending in 16 bit format(%s)
Sending in 8 bit format(%s)
Invalid 7 bit GSM data %s
Invalid 8 bit data %s
Invalid 16 bit data %s
%02d%02d%02d%02d
$Revision: 153710 $
%Y-%m-%dT%H:%M:%S
%s %c%c%c%s %s %s %s 
write() failed: %s
morx
mtrx
/%s.%s-%d
/.%s
oa=%s
da=%s
udh#
ud##
%04X
scts=%s
pid=%d
dcs=%d
vp=%d
srr=1
mr=%d
rp=1
Received to %s
    -- SMS-P2 Notify#%02X=%s
SMS_SUBMIT or SMS_DELIVERY
Unknown message type %02X
Requires queue name at least
Requires queue name
Queue name too long
 initial delay %dms
Address too long %s
Missing body for %s
Invalid 7 bit GSM data
Invalid 8 bit data
Invalid 16 bit data
waitfor failed
channel hangup
ast_read failed
No data, hanging up
Error %d, hanging up
UUUUUUUUUUUUUUUUUUUU
bad stop bit
msg too large
bad checksum
SMS/PSTN handler
Only doing %d samples (%d requested)
Failed to write frame to '%s': %s
UD too long / invalid UCS-2 hex in %s
Only ud can use ## format, %s
UD too long / invalid UCS-1 hex in %s
UDH too long / invalid hex in %s
Only ud and udh can use # format, %s
Invalid UTF-8 message even for UCS-2 (%s)
    -- SMS-P2 Body#%02X=[%.*s]
    -- SMS-P2 Date#%02X=%02d/%02d %02d:%02d
    -- SMS-P2 Origin#%02X=[%.*s]
    -- SMS-P2 Destination#%02X=[%.*s]
    -- SMS-P2 Par#%02X [%d]: %s
Mismatch receive unpacking %d/%d
 sms argc %d queue <%s> opts <%s> addr <%s> body <%s>
Unable to set to linear mode, giving up
Failed to activate generator on '%s'
    -- SMS protocol 2 detected
This paragraph is copyright (c) 2006 by Digium, Inc. In order for your module to load, it must return this key via a function called "key".  Any code which includes this paragraph must be licensed under the GNU General Public License version 2 or later (at your option).  In addition to Digium's general reservations of rights, Digium expressly reserves the right to allow other parties to license this paragraph under different terms. Any use of Digium, Inc. trademarks or logos (including "Asterisk" or "Digium") without express written permission of Digium, Inc. is prohibited.
  SMS(name,[a][s][t][p(d)][r][o],addr,body):
SMS handles exchange of SMS data with a call to/from SMS capable
phone or SMS PSTN service center. Can send and/or receive SMS messages.
Works to ETSI ES 201 912; compatible with BT SMS PSTN service in UK
and Telecom Italia in Italy.
Typical usage is to use to handle calls from the SMS service centre CLI,
or to set up a call using 'outgoing' or manager interface to connect
service centre to SMS()
name is the name of the queue used in /var/spool/asterisk/sms
Arguments:
 a  - answer, i.e. send initial FSK packet.
 s  - act as service centre talking to a phone.
 t  - use protocol 2 (default used is protocol 1).
 p(N)  - set the initial delay to N ms (default is 300).
         addr and body are a deprecated format to send messages out.
 r  - set the Status Report Request (SRR) bit.
 o  - the body should be coded as octets not 7-bit symbols.
Messages are processed as per text file message queues.
smsq (a separate software) is a command to generate message
queues and send messages.
NOTE: the protocol has tight delay bounds. Please use short frames
and disable/keep short the jitter buffer on the ATA to make sure that
respones (ACK etc.) are received in time.
Communicates with SMS service centres and SMS capable analogue phones
sms_exec
sms_generate
sms_writefile
sms_debug
sms_process
sms_messagerx2
sms_handleincoming_proto2
sms_handleincoming
sms_readfile
sms_log
a9c98e5d177805051735cb5b0b16b0a0
app_sms.so.debug
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.rela.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.ctors
.dtors
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.data
.bss
.gnu_debuglink
