td0L
w@@ 
{nL{	
GO{	
nj*R
%fg$w
_$X+
9!uqU
_%?U;
$B&UA
__gmon_start__
_init
_fini
__cxa_finalize
_Jv_RegisterClasses
strlen
strncmp
svn_config_enumerate2
svn_repos_authz_check_access
apr_pstrcat
svn_path_split
svn_config_enumerate_sections2
svn_config_get
strcmp
svn_cstring_split
strchr
svn_path_is_ancestor
svn_repos_authz_read
apr_palloc
svn_config_read
svn_ctype_table
svn_error__locate
svn_error_createf
svn_error_create
apr_hash_get
apr_hash_set
apr_hash_make
svn_repos_get_commit_editor5
svn_pool_create_ex
svn_delta_default_editor
apr_hash_first
apr_hash_this
apr_pstrdup
svn_string_dup
apr_hash_next
svn_repos_path
svn_path_basename
svn_repos_fs
svn_fs_abort_txn
svn_repos_fs_commit_txn
svn_error_clear
svn_fs_revision_prop
svn_create_commit_info
svn_repos_fs_change_node_prop
svn_fs_apply_textdelta
svn_fs_file_checksum
svn_checksum_parse_hex
svn_checksum_match
svn_checksum_to_cstring_display
dcgettext
svn_fs_node_created_rev
svn_path_join
apr_pool_destroy
svn_fs_check_path
svn_fs_make_file
svn_path_uri_decode
svn_fs_revision_root
svn_fs_copy
svn_fs_make_dir
svn_fs_delete
svn_fs_youngest_rev
svn_repos_fs_begin_txn_for_commit2
svn_prop_hash_to_array
svn_repos_fs_change_txn_props
svn_fs_txn_name
svn_fs_txn_root
memcmp
svn_repos__compare_files
svn_fs_contents_changed
svn_fs_file_length
svn_fs_file_contents
svn_stream_read
svn_fs_is_revision_root
svn_fs_revision_root_revision
svn_error__malfunction
svn_fs_props_changed
svn_fs_root_fs
svn_string_createf
svn_fs_revision_proplist
svn_fs_get_uuid
svn_string_create
svn_fs_node_proplist
svn_prop_diffs
svn_checksum_to_cstring
svn_txdelta_send_txstream
svn_fs_get_file_delta_stream
svn_fs_dir_entries
svn_fs_compare_ids
apr_pool_clear
svn_repos_dir_delta2
svn_path_dirname
svn_fs_is_txn_root
svn_fs_txn_root_base_revision
svn_fs_node_id
svn_repos_get_fs_build_parser
svn_repos_get_fs_build_parser2
svn_repos_load_fs
svn_repos_load_fs2
svn_repos_parse_dumpstream
svn_repos_parse_dumpstream2
svn_repos_dump_fs
svn_repos_dump_fs2
svn_repos_get_file_revs
svn_compat_wrap_file_rev_handler
svn_repos_get_file_revs2
svn_repos_history
svn_repos_history2
svn_repos_get_logs3
svn_compat_wrap_log_receiver
svn_compat_log_revprops_in
svn_repos_get_logs4
svn_repos_get_logs
svn_repos_get_logs2
svn_repos_fs_change_rev_prop2
svn_repos_fs_change_rev_prop3
svn_repos_fs_change_rev_prop
svn_repos_replay
svn_repos_replay2
svn_repos_dir_delta
svn_repos_link_path2
svn_repos_link_path3
svn_repos_link_path
svn_repos_set_path2
svn_repos_set_path3
svn_repos_set_path
svn_repos_begin_report
svn_repos_begin_report2
svn_repos_recover2
svn_repos_recover3
svn_repos_recover
svn_repos_get_commit_editor4
svn_repos_get_commit_editor3
svn_compat_wrap_commit_callback
svn_repos_get_commit_editor2
svn_repos_get_commit_editor
memset
svn_repos_verify_fs
svn_stream_empty
svn_delta_get_cancellation_editor
svn_stream_printf
svn_stringbuf_create
svn_string_compare
apr_psprintf
svn_stringbuf_appendcstr
svn_stringbuf_appendbytes
svn_stream_from_aprfile2
svn_stream_disown
svn_stream_copy3
svn_stream_write
svn_io_open_unique_file3
svn_txdelta_to_svndiff2
svn_io_file_seek
abort
svn_iter_apr_hash
svn_time_from_cstring
svn_time_to_cstring
svn_repos_fs_pack
svn_fs_pack
svn_repos_fs_get_mergeinfo
apr_array_push
apr_array_make
svn_fs_get_mergeinfo
svn_repos_fs_get_locks
svn_fs_get_locks
apr_hash_pool_get
svn_lock_dup
svn_repos_fs_unlock
svn_fs_get_access
svn_fs_access_get_username
svn_repos__hooks_pre_unlock
svn_fs_unlock
svn_repos__hooks_post_unlock
svn_repos_fs_lock
svn_repos__hooks_pre_lock
svn_fs_lock
svn_repos__hooks_post_lock
svn_repos_fs_revision_proplist
svn_repos_check_revision_access
svn_repos_fs_revision_prop
svn_property_kind
svn_prop_is_svn_prop
svn_prop_needs_translation
svn_utf__is_valid
svn_repos__hooks_pre_revprop_change
svn_fs_change_rev_prop
svn_repos__hooks_post_revprop_change
svn_fs_change_txn_props
svn_repos_fs_change_txn_prop
svn_fs_change_node_prop
svn_repos_fs_begin_txn_for_update
svn_fs_begin_txn2
svn_fs_change_txn_prop
svn_repos__hooks_start_commit
svn_repos_fs_begin_txn_for_commit
svn_repos__hooks_pre_commit
svn_fs_commit_txn
svn_repos__hooks_post_commit
svn_io_check_special_path
svn_io_check_resolved_path
svn_io_file_write_full
apr_file_pipe_create
apr_file_inherit_unset
svn_io_start_cmd
apr_file_close
svn_error_wrap_apr
svn_stringbuf_from_aprfile
apr_file_open
svn_io_wait_for_cmd
svn_stringbuf_createf
svn_string_create_from_buf
svn_utf_cstring_to_utf8
svn_repos_post_unlock_hook
svn_cstring_join
svn_path_local_style
svn_io_file_close
svn_repos_pre_unlock_hook
svn_repos_post_lock_hook
svn_repos_pre_lock_hook
svn_repos_post_revprop_change_hook
svn_io_file_open
svn_repos_pre_revprop_change_hook
svn_repos_post_commit_hook
svn_repos_pre_commit_hook
svn_fs__access_get_lock_tokens
apr_hash_count
svn_path_uri_autoescape
svn_stringbuf_appendstr
svn_repos_start_commit_hook
svn_error_quick_wrap
svn_fs_deltify_revision
svn_fs_apply_text
svn_mergeinfo_parse
svn_mergeinfo_sort
svn_mergeinfo_to_string
svn_fs_set_uuid
strtol
svn_txdelta_parse_svndiff
svn_stream_close
svn_stream_readline
__ctype_b_loc
svn_stringbuf_isempty
apr_atoi64
svn_log_entry_create
svn_fs_paths_changed2
svn_log_changed_path2_create
svn_fs_copied_from
svn_fs_history_prev
svn_fs_history_location
svn_stringbuf_set
svn_fs_node_history
apr_is_empty_array
svn_rangelist_dup
qsort
svn_mergeinfo_dup
svn_repos__prev_location
svn_fs_node_prop
svn_mergeinfo_diff
svn_mergeinfo_merge
svn_path_is_empty
svn_delta_noop_window_handler
svn_repos_node_from_baton
svn_repos_node_editor
svn_delta_path_driver
svn_path_is_child
svn_repos_abort_report
svn_io_file_getc
svn_io_file_read_full
svn_fs_close_root
svn_fs_get_lock
svn_repos_deleted_rev
svn_fs_closest_copy
apr_pstrmemdup
svn_repos_finish_report
svn_depth_to_word
svn_repos_delete_path
svn_repos_version
svn_repos_remember_client_capabilities
svn_repos_stat
svn_repos_get_committed_info
svn_repos_db_logs_lockfile
svn_repos_db_lockfile
svn_repos_svnserve_conf
svn_io_file_create
svn_io_file_lock2
svn_repos_hook_dir
svn_repos_lock_dir
svn_repos_conf_dir
svn_repos_db_env
svn_io_read_version_file
svn_fs_type
svn_fs_open
svn_repos_open
svn_io_dir_make
svn_io_dir_empty
svn_repos_hotcopy
svn_io_dir_walk
svn_io_dir_make_sgid
svn_fs_hotcopy
svn_io_write_version_file
svn_path_get_longest_ancestor
svn_path_compare_paths
svn_io_copy_file
svn_repos_db_logfiles
svn_fs_berkeley_logfiles
svn_fs_recover
svn_repos_has_capability
svn_repos_delete
svn_fs_delete_fs
svn_io_remove_dir2
svn_repos_upgrade
svn_fs_upgrade
svn_repos_find_root_path
svn_utf_cstring_from_utf8
svn_io_check_path
svn_dirent_is_root
svn_repos_create
svn_fs_create
apr_array_append
apr_array_copy
svn_repos_node_location_segments
svn_fs_node_origin_rev
svn_repos_trace_node_locations
svn_sort_compare_revisions
svn_fs_check_related
svn_repos_dated_revision
libsvn_fs-1.so.0
libsvn_fs_fs-1.so.0
libsvn_fs_base-1.so.0
libsvn_fs_util-1.so.0
libsvn_delta-1.so.0
libsvn_subr-1.so.0
libz.so.1
libsqlite3.so.0
libaprutil-1.so.0
libcrypt.so.1
libdb-4.7.so
libexpat.so.1
libapr-1.so.0
libpthread.so.0
libdl.so.2
libc.so.6
_edata
__bss_start
_end
libsvn_repos-1.so.0
GLIBC_2.1.3
GLIBC_2.3
GLIBC_2.0
?/t,
[^_]
[^_]
<&tT
[^_]
[^_]
L[^_]
[^_]
\[^_]
<&u6
[^_]
\[^_]
\[^_]
\[^_]
[^_]
[^_]
@[^]
l[^_]
<[^_]
P[^]
,[^_]
[^_]
[^_]
\[^_]
L[^_]
[^_]
<[^_]
:/tW
[^_]
<[^_]
\[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
[^_]
\[^_]
\[^_]
[^_]
[^_]
[^_]
,[^_]
,[^_]
,[^_]
[^_]
[^_]
L[^_]
[^_]
[^_]
:t-0
|r~c
0[^]
0[^]
|[^_]
[^_]
t	9}
[^_]
[^_]
[^_]
<[^_]
<[^_]
[^_]
[^_]
[^_]
[^_]
<[^_]
<[^_]
:tWk
l[^_]
<[^_]
[^_]
,[^_]
[^_]
[^_]
U$9U(
\[^_]
u t0
[^_]
[^_]
[^_]
[^_]
\[^_]
[^_]
[^_]
[^_]
[^_]
8/t$
|[^_]
|[^_]
[^_]
8/t$
w.;E
groups
aliases
$anonymous
$authenticated
subversion/libsvn_repos/authz.c
Rule '%s' has more than one inversion; double negatives are not permitted.
Authz rules with match string '~*' are not allowed, because they never match anyone.
An authz rule refers to group '%s', which is undefined
An authz rule refers to alias '%s', which is undefined
Unrecognized authz token '%s'.
The character '%c' in rule '%s' is not allowed in authz rules
Circular dependency between groups '%s' and '%s'
subversion/libsvn_repos/commit.c
Not authorized to open a commit editor.
No valid transaction supplied to close_edit
Checksum mismatch for resulting fulltext
(%s):
   expected checksum:  %s
   actual checksum:    %s
Got source path but no source revision for '%s'
Source url '%s' is from different repository
Access denied
svn:date
svn:author
subversion
Directory '%s' is out of date
File '%s' is out of date
Path '%s' not present
subversion/libsvn_repos/delta.c
target_path && source_path && edit_path
Delta depth 'exclude' not supported
Invalid editor anchoring; at least one of the input paths is not a directory and there was no source entry
Unable to open root of edit
target_path
svn:entry:committed-rev
svn:entry:committed-date
svn:entry:last-author
svn:entry:uuid
target_path && edit_path
(null)
source parent
Invalid %s directory '%s'
Invalid target path
svn:log
subversion/libsvn_repos/dump.c
Start revision %ld is greater than end revision %ld
End revision %ld is invalid (youngest revision is %ld)
WARNING: Referencing data in revision %ld, which is older than the oldest
WARNING: dumped revision (%ld).  Loading this dump into an empty repository
WARNING: will fail.
Node-copyfrom-rev: %ld
Node-copyfrom-path: %s
Unexpected node kind %d for '%s'
SVN-fs-dump-format-version: %d
* Verified revision %ld.
K %d
V %u
D %d
PROPS-END
Node-path: %s
Node-kind: file
Node-kind: dir
Node-action: change
Node-action: replace
Node-action: delete
Node-action: delete
Node-action: add
Text-copy-source-md5: %s
Text-copy-source-sha1: %s
Prop-delta: true
Prop-content-length: %u
Text-delta: true
Text-delta-base-md5: %s
Text-delta-base-sha1: %s
Text-content-length: %lld
Text-content-md5: %s
Text-content-sha1: %s
Content-length: %lld
!path || pb
Revision-number: %ld
Content-length: %u
UUID: %s
* Dumped revision %ld.
subversion/libsvn_repos/fs-wrap.c
Cannot unlock path '%s', no authenticated username available
Unlock succeeded, but post-unlock hook failed
Cannot lock path '%s', no authenticated username available.
Lock succeeded, but post-lock hook failed
Storage of non-regular property '%s' is disallowed through the repository interface, and could indicate a bug in your client
Cannot accept '%s' property because it is not encoded in UTF-8
Cannot accept non-LF line endings in '%s' property
Write denied:  not authorized to read all of revision %ld
Commit succeeded, but post-commit hook failed
/dev/null
Failed to start '%s' hook
start-commit
pre-commit
Commit
pre-revprop-change
Revprop change
pre-lock
Lock
pre-unlock
Unlock
%s hook failed (exit code %d)
 with output:
 with no output.
Error closing null file
post-unlock
post-lock
post-revprop-change
post-commit
LOCK-TOKENS:
%s|%s
subversion/libsvn_repos/hooks.c
Failed to run '%s' hook; broken symlink
Can't create pipe for hook '%s'
Can't make pipe read handle non-inherited for hook '%s'
Can't make pipe write handle non-inherited for hook '%s'
Can't create null stdout for hook '%s'
Error closing write end of stderr pipe
'%s' hook succeeded, but error output could not be read
[Error output could not be translated from the native locale to UTF-8.]
[Error output could not be read.]
'%s' hook failed (did not exit cleanly: apr_exit_why_e was %d, exitcode was %d).  
%s blocked by %s hook (exit code %d)
Error closing read end of stderr pipe
Repository has not been enabled to accept revision propchanges;
ask the administrator to create a pre-revprop-change hook
subversion/libsvn_repos/load.c
Dumpstream data appears to be malformed
Premature end of content data in dumpstream
------- Committed revision %ld >>>
------- Committed new rev %ld (loaded from original rev %ld) >>>
Relative source revision %ld is not available in current repository
Copy source checksum mismatch on copy from '%s'@%ld
 to '%s' in rev based on r%ld:
   expected:  %s
     actual:  %s
Malformed dumpstream: Revision 0 must not contain node records
     * replacing path : %s ...
Unrecognized node-action on node '%s'
<<< Started new transaction, based on original revision %ld
Unexpected EOF writing contents
Unsupported dumpfile version: %d
Dump stream contains a malformed header (with no ':') at '%.20s'
Dump stream contains a malformed header (with no value) at '%.20s'
Unrecognized record type in stream
Incomplete or unterminated property block
Sum of subblock sizes larger than total block content length
 done.
svn:mergeinfo
COPIED...
Node-path
Node-kind
Node-action
delete
replace
Node-copyfrom-rev
Node-copyfrom-path
Text-content-md5
Text-delta-base-md5
Text-copy-source-md5
     * editing path : %s ...
     * deleting path : %s ...
     * adding path : %s ...
Revision-number
SVN-fs-dump-format-version
Malformed dumpfile header
UUID
Content-length
Prop-content-length
Text-content-length
Prop-delta
true
PROPS-END
Text-delta
subversion/libsvn_repos/log.c
No such revision %ld
parent_baton && path
'%s' not found in filesystem
subversion/libsvn_repos/node_tree.c
subversion/libsvn_repos/replay.c
Filesystem path '%s' is neither a file nor a directory
subversion/libsvn_repos/reporter.c
Request depth 'exclude' not supported
Invalid length (%%%s) when about to read a string
Invalid depth (%c) for path '%s'
Working copy path '%s' does not exist in repository
Invalid report for top level of working copy
Two top-level reports with no target
Not authorized to open root of edit operation
Target path '%s' does not exist
Cannot replace a directory from within
Depth 'exclude' not supported for link
svn:entry:lock-token
+%u:%s
+%ld:
Unsupported report depth '%s'
+%u:%s%s%s%s%c%s
db-logs.lock
db.lock
svnserve.conf
Creating db logs lock file
Error opening db lockfile
hooks
locks
format
'%s' exists and is non-empty
Creating lock dir
Creating db lock file
unknown capability '%s'
fs-type
pre-1.4-compatible
fsfs
pre-1.5-compatible
Creating DAV sandbox dir
Creating hook directory
.tmpl
%s%s
Creating start-commit hook
Creating pre-commit hook
Creating pre-lock hook
Creating pre-unlock hook
Creating post-commit hook
Creating post-lock hook
Creating post-unlock hook
Creating conf directory
Creating svnserve.conf file
passwd
Creating passwd file
authz
Creating authz file
README.txt
Repository creation failed
subversion/libsvn_repos/repos.c
Expected repository format '%d' or '%d'; found format '%d'
'%s' is a subdirectory of an existing repository rooted at '%s'
Could not create top-level directory
#!/bin/sh
# START-COMMIT HOOK
# The start-commit hook is invoked before a Subversion txn is created
# in the process of doing a commit.  Subversion runs this hook
# by invoking a program (script, executable, binary, etc.) named
# 'start-commit' (for which this file is a template)
# with the following ordered arguments:
#   [1] REPOS-PATH   (the path to this repository)
#   [2] USER         (the authenticated user attempting to commit)
#   [3] CAPABILITIES (a colon-separated list of capabilities reported
#                     by the client; see note below)
# Note: The CAPABILITIES parameter is new in Subversion 1.5, and 1.5
# clients will typically report at least the "mergeinfo" capability.
# If there are other capabilities, then the list is colon-separated,
# e.g.: "mergeinfo:some-other-capability" (the order is undefined).
# The list is self-reported by the client.  Therefore, you should not
# make security assumptions based on the capabilities list, nor should
# you assume that clients reliably report every capability they have.
# The working directory for this hook program's invocation is undefined,
# so the program should set one explicitly if it cares.
# If the hook program exits with success, the commit continues; but
# if it exits with failure (non-zero), the commit is stopped before
# a Subversion txn is created, and STDERR is returned to the client.
# On a Unix system, the normal procedure is to have 'start-commit'
# invoke other programs to do the real work, though it may do the
# work itself too.
# Note that 'start-commit' must be executable by the user(s) who will
# invoke it (typically the user httpd runs as), and that user must
# have filesystem-level permission to access the repository.
# On a Windows system, you should name the hook program
# 'start-commit.bat' or 'start-commit.exe',
# but the basic idea is the same.
# The hook program typically does not inherit the environment of
# its parent process.  For example, a common problem is for the
# PATH environment variable to not be set to its usual value, so
# that subprograms fail to launch unless invoked via absolute path.
# If you're having unexpected problems with a hook program, the
# culprit may be unusual (or missing) environment variables.
# Here is an example hook script, for a Unix /bin/sh interpreter.
# For more examples and pre-written hooks, see those in
# the Subversion repository at
# http://svn.collab.net/repos/svn/trunk/tools/hook-scripts/ and
# http://svn.collab.net/repos/svn/trunk/contrib/hook-scripts/
REPOS="$1"
USER="$2"
commit-allower.pl --repository "$REPOS" --user "$USER" || exit 1
special-auth-check.py --user "$USER" --auth-level 3 || exit 1
# All checks passed, so allow the commit.
exit 0
#!/bin/sh
# PRE-COMMIT HOOK
# The pre-commit hook is invoked before a Subversion txn is
# committed.  Subversion runs this hook by invoking a program
# (script, executable, binary, etc.) named 'pre-commit' (for which
# this file is a template), with the following ordered arguments:
#   [1] REPOS-PATH   (the path to this repository)
#   [2] TXN-NAME     (the name of the txn about to be committed)
#   [STDIN] LOCK-TOKENS ** the lock tokens are passed via STDIN.
#   If STDIN contains the line "LOCK-TOKENS:\n" (the "\n" denotes a
#   single newline), the lines following it are the lock tokens for
#   this commit.  The end of the list is marked by a line containing
#   only a newline character.
#   Each lock token line consists of a URI-escaped path, followed
#   by the separator character '|', followed by the lock token string,
#   followed by a newline.
# The default working directory for the invocation is undefined, so
# the program should set one explicitly if it cares.
# If the hook program exits with success, the txn is committed; but
# if it exits with failure (non-zero), the txn is aborted, no commit
# takes place, and STDERR is returned to the client.   The hook
# program can use the 'svnlook' utility to help it examine the txn.
# On a Unix system, the normal procedure is to have 'pre-commit'
# invoke other programs to do the real work, though it may do the
# work itself too.
#   ***  NOTE: THE HOOK PROGRAM MUST NOT MODIFY THE TXN, EXCEPT  ***
#   ***  FOR REVISION PROPERTIES (like svn:log or svn:author).   ***
#   This is why we recommend using the read-only 'svnlook' utility.
#   In the future, Subversion may enforce the rule that pre-commit
#   hooks should not modify the versioned data in txns, or else come
#   up with a mechanism to make it safe to do so (by informing the
#   committing client of the changes).  However, right now neither
#   mechanism is implemented, so hook writers just have to be careful.
# Note that 'pre-commit' must be executable by the user(s) who will
# invoke it (typically the user httpd runs as), and that user must
# have filesystem-level permission to access the repository.
# On a Windows system, you should name the hook program
# 'pre-commit.bat' or 'pre-commit.exe',
# but the basic idea is the same.
# The hook program typically does not inherit the environment of
# its parent process.  For example, a common problem is for the
# PATH environment variable to not be set to its usual value, so
# that subprograms fail to launch unless invoked via absolute path.
# If you're having unexpected problems with a hook program, the
# culprit may be unusual (or missing) environment variables.
# Here is an example hook script, for a Unix /bin/sh interpreter.
# For more examples and pre-written hooks, see those in
# the Subversion repository at
# http://svn.collab.net/repos/svn/trunk/tools/hook-scripts/ and
# http://svn.collab.net/repos/svn/trunk/contrib/hook-scripts/
REPOS="$1"
TXN="$2"
# Make sure that the log message contains some text.
SVNLOOK=/usr/bin/svnlook
$SVNLOOK log -t "$TXN" "$REPOS" | \
   grep "[a-zA-Z0-9]" > /dev/null || exit 1
# Check that the author of this commit has the rights to perform
# the commit on the files and directories being modified.
commit-access-control.pl "$REPOS" "$TXN" commit-access-control.cfg || exit 1
# All checks passed, so allow the commit.
exit 0
#!/bin/sh
# PRE-REVPROP-CHANGE HOOK
# The pre-revprop-change hook is invoked before a revision property
# is added, modified or deleted.  Subversion runs this hook by invoking
# a program (script, executable, binary, etc.) named 'pre-revprop-change'
# (for which this file is a template), with the following ordered
# arguments:
#   [1] REPOS-PATH   (the path to this repository)
#   [2] REVISION     (the revision being tweaked)
#   [3] USER         (the username of the person tweaking the property)
#   [4] PROPNAME     (the property being set on the revision)
#   [5] ACTION       (the property is being 'A'dded, 'M'odified, or 'D'eleted)
#   [STDIN] PROPVAL  ** the new property value is passed via STDIN.
# If the hook program exits with success, the propchange happens; but
# if it exits with failure (non-zero), the propchange doesn't happen.
# The hook program can use the 'svnlook' utility to examine the 
# existing value of the revision property.
# WARNING: unlike other hooks, this hook MUST exist for revision
# properties to be changed.  If the hook does not exist, Subversion 
# will behave as if the hook were present, but failed.  The reason
# for this is that revision properties are UNVERSIONED, meaning that
# a successful propchange is destructive;  the old value is gone
# forever.  We recommend the hook back up the old value somewhere.
# On a Unix system, the normal procedure is to have 'pre-revprop-change'
# invoke other programs to do the real work, though it may do the
# work itself too.
# Note that 'pre-revprop-change' must be executable by the user(s) who will
# invoke it (typically the user httpd runs as), and that user must
# have filesystem-level permission to access the repository.
# On a Windows system, you should name the hook program
# 'pre-revprop-change.bat' or 'pre-revprop-change.exe',
# but the basic idea is the same.
# The hook program typically does not inherit the environment of
# its parent process.  For example, a common problem is for the
# PATH environment variable to not be set to its usual value, so
# that subprograms fail to launch unless invoked via absolute path.
# If you're having unexpected problems with a hook program, the
# culprit may be unusual (or missing) environment variables.
# Here is an example hook script, for a Unix /bin/sh interpreter.
# For more examples and pre-written hooks, see those in
# the Subversion repository at
# http://svn.collab.net/repos/svn/trunk/tools/hook-scripts/ and
# http://svn.collab.net/repos/svn/trunk/contrib/hook-scripts/
REPOS="$1"
REV="$2"
USER="$3"
PROPNAME="$4"
ACTION="$5"
if [ "$ACTION" = "M" -a "$PROPNAME" = "svn:log" ]; then exit 0; fi
echo "Changing revision properties other than svn:log is prohibited" >&2
exit 1
Creating pre-revprop-change hook
#!/bin/sh
# PRE-LOCK HOOK
# The pre-lock hook is invoked before an exclusive lock is
# created.  Subversion runs this hook by invoking a program 
# (script, executable, binary, etc.) named 'pre-lock' (for which
# this file is a template), with the following ordered arguments:
#   [1] REPOS-PATH   (the path to this repository)
#   [2] PATH         (the path in the repository about to be locked)
#   [3] USER         (the user creating the lock)
#   [4] COMMENT      (the comment of the lock)
#   [5] STEAL-LOCK   (1 if the user is trying to steal the lock, else 0)
# If the hook program outputs anything on stdout, the output string will
# be used as the lock token for this lock operation.  If you choose to use
# this feature, you must guarantee the tokens generated are unique across
# the repository each time.
# The default working directory for the invocation is undefined, so
# the program should set one explicitly if it cares.
# If the hook program exits with success, the lock is created; but
# if it exits with failure (non-zero), the lock action is aborted
# and STDERR is returned to the client.
# On a Unix system, the normal procedure is to have 'pre-lock'
# invoke other programs to do the real work, though it may do the
# work itself too.
# Note that 'pre-lock' must be executable by the user(s) who will
# invoke it (typically the user httpd runs as), and that user must
# have filesystem-level permission to access the repository.
# On a Windows system, you should name the hook program
# 'pre-lock.bat' or 'pre-lock.exe',
# but the basic idea is the same.
# Here is an example hook script, for a Unix /bin/sh interpreter:
REPOS="$1"
PATH="$2"
USER="$3"
# If a lock exists and is owned by a different person, don't allow it
# to be stolen (e.g., with 'svn lock --force ...').
# (Maybe this script could send email to the lock owner?)
SVNLOOK=/usr/bin/svnlook
GREP=/bin/grep
SED=/bin/sed
LOCK_OWNER=`$SVNLOOK lock "$REPOS" "$PATH" | \
            $GREP '^Owner: ' | $SED 's/Owner: //'`
# If we get no result from svnlook, there's no lock, allow the lock to
# happen:
if [ "$LOCK_OWNER" = "" ]; then
  exit 0
# If the person locking matches the lock's owner, allow the lock to
# happen:
if [ "$LOCK_OWNER" = "$USER" ]; then
  exit 0
# Otherwise, we've got an owner mismatch, so return failure:
echo "Error: $PATH already locked by ${LOCK_OWNER}." 1>&2
exit 1
#!/bin/sh
# PRE-UNLOCK HOOK
# The pre-unlock hook is invoked before an exclusive lock is
# destroyed.  Subversion runs this hook by invoking a program 
# (script, executable, binary, etc.) named 'pre-unlock' (for which
# this file is a template), with the following ordered arguments:
#   [1] REPOS-PATH   (the path to this repository)
#   [2] PATH         (the path in the repository about to be unlocked)
#   [3] USER         (the user destroying the lock)
#   [4] TOKEN        (the lock token to be destroyed)
#   [5] BREAK-UNLOCK (1 if the user is breaking the lock, else 0)
# The default working directory for the invocation is undefined, so
# the program should set one explicitly if it cares.
# If the hook program exits with success, the lock is destroyed; but
# if it exits with failure (non-zero), the unlock action is aborted
# and STDERR is returned to the client.
# On a Unix system, the normal procedure is to have 'pre-unlock'
# invoke other programs to do the real work, though it may do the
# work itself too.
# Note that 'pre-unlock' must be executable by the user(s) who will
# invoke it (typically the user httpd runs as), and that user must
# have filesystem-level permission to access the repository.
# On a Windows system, you should name the hook program
# 'pre-unlock.bat' or 'pre-unlock.exe',
# but the basic idea is the same.
# Here is an example hook script, for a Unix /bin/sh interpreter:
REPOS="$1"
PATH="$2"
USER="$3"
# If a lock is owned by a different person, don't allow it be broken.
# (Maybe this script could send email to the lock owner?)
SVNLOOK=/usr/bin/svnlook
GREP=/bin/grep
SED=/bin/sed
LOCK_OWNER=`$SVNLOOK lock "$REPOS" "$PATH" | \
            $GREP '^Owner: ' | $SED 's/Owner: //'`
# If we get no result from svnlook, there's no lock, return success:
if [ "$LOCK_OWNER" = "" ]; then
  exit 0
# If the person unlocking matches the lock's owner, return success:
if [ "$LOCK_OWNER" = "$USER" ]; then
  exit 0
# Otherwise, we've got an owner mismatch, so return failure:
echo "Error: $PATH locked by ${LOCK_OWNER}." 1>&2
exit 1
#!/bin/sh
# POST-COMMIT HOOK
# The post-commit hook is invoked after a commit.  Subversion runs
# this hook by invoking a program (script, executable, binary, etc.)
# named 'post-commit' (for which this file is a template) with the 
# following ordered arguments:
#   [1] REPOS-PATH   (the path to this repository)
#   [2] REV          (the number of the revision just committed)
# The default working directory for the invocation is undefined, so
# the program should set one explicitly if it cares.
# Because the commit has already completed and cannot be undone,
# the exit code of the hook program is ignored.  The hook program
# can use the 'svnlook' utility to help it examine the
# newly-committed tree.
# On a Unix system, the normal procedure is to have 'post-commit'
# invoke other programs to do the real work, though it may do the
# work itself too.
# Note that 'post-commit' must be executable by the user(s) who will
# invoke it (typically the user httpd runs as), and that user must
# have filesystem-level permission to access the repository.
# On a Windows system, you should name the hook program
# 'post-commit.bat' or 'post-commit.exe',
# but the basic idea is the same.
# The hook program typically does not inherit the environment of
# its parent process.  For example, a common problem is for the
# PATH environment variable to not be set to its usual value, so
# that subprograms fail to launch unless invoked via absolute path.
# If you're having unexpected problems with a hook program, the
# culprit may be unusual (or missing) environment variables.
# Here is an example hook script, for a Unix /bin/sh interpreter.
# For more examples and pre-written hooks, see those in
# the Subversion repository at
# http://svn.collab.net/repos/svn/trunk/tools/hook-scripts/ and
# http://svn.collab.net/repos/svn/trunk/contrib/hook-scripts/
REPOS="$1"
REV="$2"
mailer.py commit "$REPOS" "$REV" /path/to/mailer.conf
#!/bin/sh
# POST-LOCK HOOK
# The post-lock hook is run after a path is locked.  Subversion runs
# this hook by invoking a program (script, executable, binary, etc.)
# named 'post-lock' (for which this file is a template) with the 
# following ordered arguments:
#   [1] REPOS-PATH   (the path to this repository)
#   [2] USER         (the user who created the lock)
# The paths that were just locked are passed to the hook via STDIN (as
# of Subversion 1.2, only one path is passed per invocation, but the
# plan is to pass all locked paths at once, so the hook program
# should be written accordingly).
# The default working directory for the invocation is undefined, so
# the program should set one explicitly if it cares.
# Because the lock has already been created and cannot be undone,
# the exit code of the hook program is ignored.  The hook program
# can use the 'svnlook' utility to help it examine the
# newly-created lock.
# On a Unix system, the normal procedure is to have 'post-lock'
# invoke other programs to do the real work, though it may do the
# work itself too.
# Note that 'post-lock' must be executable by the user(s) who will
# invoke it (typically the user httpd runs as), and that user must
# have filesystem-level permission to access the repository.
# On a Windows system, you should name the hook program
# 'post-lock.bat' or 'post-lock.exe',
# but the basic idea is the same.
# Here is an example hook script, for a Unix /bin/sh interpreter:
REPOS="$1"
USER="$2"
# Send email to interested parties, let them know a lock was created:
mailer.py lock "$REPOS" "$USER" /path/to/mailer.conf
#!/bin/sh
# POST-UNLOCK HOOK
# The post-unlock hook runs after a path is unlocked.  Subversion runs
# this hook by invoking a program (script, executable, binary, etc.)
# named 'post-unlock' (for which this file is a template) with the 
# following ordered arguments:
#   [1] REPOS-PATH   (the path to this repository)
#   [2] USER         (the user who destroyed the lock)
# The paths that were just unlocked are passed to the hook via STDIN
# (as of Subversion 1.2, only one path is passed per invocation, but
# the plan is to pass all unlocked paths at once, so the hook program
# should be written accordingly).
# The default working directory for the invocation is undefined, so
# the program should set one explicitly if it cares.
# Because the lock has already been destroyed and cannot be undone,
# the exit code of the hook program is ignored.
# On a Unix system, the normal procedure is to have 'post-unlock'
# invoke other programs to do the real work, though it may do the
# work itself too.
# Note that 'post-unlock' must be executable by the user(s) who will
# invoke it (typically the user httpd runs as), and that user must
# have filesystem-level permission to access the repository.
# On a Windows system, you should name the hook program
# 'post-unlock.bat' or 'post-unlock.exe',
# but the basic idea is the same.
# Here is an example hook script, for a Unix /bin/sh interpreter:
REPOS="$1"
USER="$2"
# Send email to interested parties, let them know a lock was removed:
mailer.py unlock "$REPOS" "$USER" /path/to/mailer.conf
#!/bin/sh
# POST-REVPROP-CHANGE HOOK
# The post-revprop-change hook is invoked after a revision property
# has been added, modified or deleted.  Subversion runs this hook by
# invoking a program (script, executable, binary, etc.) named
# 'post-revprop-change' (for which this file is a template), with the
# following ordered arguments:
#   [1] REPOS-PATH   (the path to this repository)
#   [2] REV          (the revision that was tweaked)
#   [3] USER         (the username of the person tweaking the property)
#   [4] PROPNAME     (the property that was changed)
#   [5] ACTION       (the property was 'A'dded, 'M'odified, or 'D'eleted)
#   [STDIN] PROPVAL  ** the old property value is passed via STDIN.
# Because the propchange has already completed and cannot be undone,
# the exit code of the hook program is ignored.  The hook program
# can use the 'svnlook' utility to help it examine the
# new property value.
# On a Unix system, the normal procedure is to have 'post-revprop-change'
# invoke other programs to do the real work, though it may do the
# work itself too.
# Note that 'post-revprop-change' must be executable by the user(s) who will
# invoke it (typically the user httpd runs as), and that user must
# have filesystem-level permission to access the repository.
# On a Windows system, you should name the hook program
# 'post-revprop-change.bat' or 'post-revprop-change.exe',
# but the basic idea is the same.
# The hook program typically does not inherit the environment of
# its parent process.  For example, a common problem is for the
# PATH environment variable to not be set to its usual value, so
# that subprograms fail to launch unless invoked via absolute path.
# If you're having unexpected problems with a hook program, the
# culprit may be unusual (or missing) environment variables.
# Here is an example hook script, for a Unix /bin/sh interpreter.
# For more examples and pre-written hooks, see those in
# the Subversion repository at
# http://svn.collab.net/repos/svn/trunk/tools/hook-scripts/ and
# http://svn.collab.net/repos/svn/trunk/contrib/hook-scripts/
REPOS="$1"
REV="$2"
USER="$3"
PROPNAME="$4"
ACTION="$5"
mailer.py propchange2 "$REPOS" "$REV" "$USER" "$PROPNAME" "$ACTION" /path/to/mailer.conf
Creating post-revprop-change hook
### This file controls the configuration of the svnserve daemon, if you
### use it to allow access to this repository.  (If you only allow
### access through http: and/or file: URLs, then this file is
### irrelevant.)
### Visit http://subversion.tigris.org/ for more information.
[general]
### These options control access to the repository for unauthenticated
### and authenticated users.  Valid values are "write", "read",
### and "none".  The sample settings below are the defaults.
# anon-access = read
# auth-access = write
### The password-db option controls the location of the password
### database file.  Unless you specify a path starting with a /,
### the file's location is relative to the directory containing
### this configuration file.
### If SASL is enabled (see below), this file will NOT be used.
### Uncomment the line below to use the default password file.
# password-db = passwd
### The authz-db option controls the location of the authorization
### rules for path-based access control.  Unless you specify a path
### starting with a /, the file's location is relative to the the
### directory containing this file.  If you don't specify an
### authz-db, no path-based access control is done.
### Uncomment the line below to use the default authorization file.
# authz-db = authz
### This option specifies the authentication realm of the repository.
### If two repositories have the same authentication realm, they should
### have the same password database, and vice versa.  The default realm
### is repository's uuid.
# realm = My First Repository
[sasl]
### This option specifies whether you want to use the Cyrus SASL
### library for authentication. Default is false.
### This section will be ignored if svnserve is not built with Cyrus
### SASL support; to check, run 'svnserve --version' and look for a line
### reading 'Cyrus SASL authentication is available.'
# use-sasl = true
### These options specify the desired strength of the security layer
### that you want SASL to provide. 0 means no encryption, 1 means
### integrity-checking only, values larger than 1 are correlated
### to the effective key length for encryption (e.g. 128 means 128-bit
### encryption). The values below are the defaults.
# min-encryption = 0
# max-encryption = 256
### This file is an example password file for svnserve.
### Its format is similar to that of svnserve.conf. As shown in the
### example below it contains one section labelled [users].
### The name and password for each user follow, one account per line.
[users]
# harry = harryssecret
# sally = sallyssecret
### This file is an example authorization file for svnserve.
### Its format is identical to that of mod_authz_svn authorization
### files.
### As shown below each section defines authorizations for the path and
### (optional) repository specified by the section name.
### The authorizations follow. An authorization line can refer to:
###  - a single user,
###  - a group of users defined in a special [groups] section,
###  - an alias defined in a special [aliases] section,
###  - all authenticated users, using the '$authenticated' token,
###  - only anonymous users, using the '$anonymous' token,
###  - anyone, using the '*' wildcard.
### A match can be inverted by prefixing the rule with '~'. Rules can
### grant read ('r') access, read-write ('rw') access, or no access
### ('').
[aliases]
# joe = /C=XZ/ST=Dessert/L=Snake City/O=Snake Oil, Ltd./OU=Research Institute/CN=Joe Average
[groups]
# harry_and_sally = harry,sally
# harry_sally_and_joe = harry,sally,&joe
# [/foo/bar]
# harry = rw
# &joe = r
# * =
# [repository:/baz/fuz]
# @harry_and_sally = rw
# * = r
This is a Subversion repository; use the 'svnadmin' tool to examine
it.  Do not add, delete, or modify files here unless you know how
to avoid corrupting the repository.
The directory "db" contains a Berkeley DB environment.
you may need to tweak the values in "db/DB_CONFIG" to match the
requirements of your site.
Visit http://subversion.tigris.org/ for more information.
DB logs lock file, representing locks on the versioned filesystem logs.
All log manipulators of the repository's Berkeley DB environment
take out exclusive locks on this file to ensure that only one
accessor manipulates the logs at a time.
You should never have to edit or remove this file.
This file is not used by Subversion 1.3.x or later.
However, its existence is required for compatibility with
Subversion 1.2.x or earlier.
DB lock file, representing locks on the versioned filesystem.
All accessors -- both readers and writers -- of the repository's
Berkeley DB environment take out shared locks on this file, and
each accessor removes its lock when done.  If and when the DB
recovery procedure is run, the recovery code takes out an
exclusive lock on this file, so we can be sure no one else is
using the DB during the recovery.
You should never have to edit or remove this file.
subversion/libsvn_repos/rev_hunt.c
'%s' is not a file in revision %ld
mainline_path_revisions->nelts > 0
Unreadable path encountered; access denied
location_revisions_orig->elt_size == sizeof(svn_revnum_t)
Failed to find time on revision %ld
%s:%ld
Invalid start revision %ld
Invalid end revision %ld
end_rev <= start_rev
start_rev <= peg_revision
fs_path != NULL
libsvn_repos-1.so.0.0.0.debug
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.rel.plt
.init
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.ctors
.dtors
.jcr
.data.rel.ro
.dynamic
.got
.got.plt
.bss
.gnu_debuglink
