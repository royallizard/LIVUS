yLu<
HPP8S
&}-6
.Gr'+o
MS"Cz
__gmon_start__
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
_ZN14bx_param_num_c3getEv
_ZN24bx_simulator_interface_c9get_paramEPKcP10bx_param_c
_ZN24bx_simulator_interface_c16get_param_stringEPKcP10bx_param_c
_ZN24bx_simulator_interface_c14get_param_boolEPKcP10bx_param_c
_ZN24bx_simulator_interface_c14get_param_enumEPKcP10bx_param_c
_ZN24bx_simulator_interface_c31register_runtime_config_handlerEPvPFvS0_E
_ZN24bx_simulator_interface_c14get_bochs_rootEv
_ZN13bx_devmodel_c4initEv
_ZN13bx_devmodel_c5resetEj
_ZN13bx_devmodel_c14register_stateEv
_ZN13bx_devmodel_c19after_restore_stateEv
_ZN20bx_hard_drive_stub_c17virt_read_handlerEjj
pluginlog
_ZN12logfunctions5panicEPKcz
_ZN20bx_hard_drive_stub_c18virt_write_handlerEjjj
_ZN14bx_cmos_stub_c7get_regEj
_ZN14bx_cmos_stub_c7set_regEjj
_ZN13bx_dma_stub_c19registerDMA8ChannelEjPFtPhtES2_PKc
_ZN13bx_dma_stub_c6get_TCEv
_ZN13bx_dma_stub_c7set_DRQEjj
_ZN13bx_pic_stub_c9raise_irqEj
_ZN13bx_pic_stub_c9lower_irqEj
_ZN13bx_devmodel_cD2Ev
_ZTV13bx_devmodel_c
_ZN12logfunctionsD2Ev
_ZN13bx_devmodel_cD1Ev
_ZN13bx_devmodel_cD0Ev
_ZdlPvm
_ZN16bx_floppy_ctrl_c19after_restore_stateEv
theFloppyController
bx_gui
_ZN8bx_gui_c17statusbar_setitemEijj
_ZN16bx_floppy_ctrl_c20floppy_param_handlerEP10bx_param_cil
strtol
_ZN16bx_floppy_ctrl_c14register_stateEv
_Znwm
_ZN9bx_list_cC1EP10bx_param_cPKcS3_
_ZN15bx_shadow_num_cC1EP10bx_param_cPKcPhihh
_ZN9bx_list_cC1EP10bx_param_cPKc
__sprintf_chk
_ZN16bx_shadow_bool_cC1EP10bx_param_cPKcPjh
_ZN15bx_shadow_num_cC1EP10bx_param_cPKcPjihh
_ZN16bx_shadow_data_cC1EP10bx_param_cPKcPhj
__stack_chk_fail
_Unwind_Resume
__gxx_personality_v0
_ZN16bx_floppy_ctrl_c27floppy_param_string_handlerEP17bx_param_string_ciPKcS3_i
_ZN10bx_param_c14get_param_pathEPci
_ZN12logfunctions5errorEPKcz
_ZN17bx_param_string_c3setEPKc
libfloppy_LTX_plugin_fini
_ZN16bx_floppy_ctrl_cC2Ev
_ZN12logfunctionsC2Ev
_ZTV16bx_floppy_ctrl_c
_ZN12logfunctions3putEPKcS1_
_ZN16bx_floppy_ctrl_cC1Ev
libfloppy_LTX_plugin_init
bx_devices
pluginRegisterDeviceDevmodel
_ZN16bx_floppy_ctrl_c14runtime_configEv
_ZN16bx_floppy_ctrl_c22runtime_config_handlerEPv
_ZN16bx_floppy_ctrl_c11floppy_xferEhjPhjh
_ZN12logfunctions6ldebugEPKcz
write
lseek64
read
_ZN12logfunctions4infoEPKcz
memset
_ZN16bx_floppy_ctrl_c15raise_interruptEv
_ZN16bx_floppy_ctrl_c15lower_interruptEv
_ZN16bx_floppy_ctrl_c11close_mediaEP8floppy_t
close
_ZN16bx_floppy_ctrl_cD2Ev
_ZN17bx_param_string_c11set_handlerEPFPKcPS_iS1_S1_iE
_ZN14bx_param_num_c11set_handlerEPFlP10bx_param_cilE
_ZN16bx_floppy_ctrl_cD1Ev
_ZN16bx_floppy_ctrl_cD0Ev
_ZN16bx_floppy_ctrl_c14evaluate_mediaEhhPcP8floppy_t
open64
__fxstat64
ioctl
__errno_location
strerror
_ZN16bx_floppy_ctrl_c4initEv
pluginRegisterIRQ
pluginRegisterIOReadHandler
pluginRegisterIOWriteHandler
_ZN16bx_floppy_ctrl_c12read_handlerEPvjj
_ZN16bx_floppy_ctrl_c13write_handlerEPvjjj
_ZN16bx_floppy_ctrl_c13timer_handlerEPv
bx_pc_system
_ZN14bx_pc_system_c14register_timerEPvPFvS0_EjjjPKc
_ZN8bx_gui_c19register_statusitemEPKcj
_ZN16bx_floppy_ctrl_c9dma_writeEPht
_ZN16bx_floppy_ctrl_c8dma_readEPht
_ZN16bx_floppy_ctrl_c16set_media_statusEjj
_ZN16bx_floppy_ctrl_c18enter_result_phaseEv
_ZN16bx_floppy_ctrl_c16enter_idle_phaseEv
_ZN16bx_floppy_ctrl_c5resetEj
_ZN16bx_floppy_ctrl_c5timerEv
_ZN16bx_floppy_ctrl_c16reset_changelineEv
_ZN16bx_floppy_ctrl_c16increment_sectorEv
_ZN16bx_floppy_ctrl_c20calculate_step_delayEhh
_ZN16bx_floppy_ctrl_c14floppy_commandEv
_ZN14bx_pc_system_c14activate_timerEjjj
_ZN16bx_floppy_ctrl_c6get_tcEv
memcpy
_ZTS12logfunctions
_ZTI12logfunctions
_ZTVN10__cxxabiv117__class_type_infoE
_ZTS13bx_devmodel_c
_ZTI13bx_devmodel_c
_ZTVN10__cxxabiv121__vmi_class_type_infoE
_ZTS16bx_floppy_stub_c
_ZTI16bx_floppy_stub_c
_ZTVN10__cxxabiv120__si_class_type_infoE
_ZTS16bx_floppy_ctrl_c
_ZTI16bx_floppy_ctrl_c
libstdc++.so.6
libm.so.6
libc.so.6
libgcc_s.so.1
_edata
__bss_start
_end
libbx_floppy.so.0
GCC_3.0
GLIBCXX_3.4
CXXABI_1.3
CXXABI_1.3.9
GLIBC_2.14
GLIBC_2.3.4
GLIBC_2.4
GLIBC_2.2.5
@_ t
AWAVAUATS1
A[A^
AYAZ
L0SL
A[A^H
AYAZ
A[A^
AYAZ
A[A^
AYAZ
AYAZ
[A\A]A^A_]
AWAVH
AUATA
[]A\A]A^A_
@PL9
J0L9
@PL9
J0L9
@@H;
ATUH
[]A\
eu[USH
AVAUATUS1
 []A\A]A^
@PH;
J0H;
AWAVD
AUATI
[]A\A]A^A_
[]A\A]A^A_H
[]A\A]A^A_
[]A\A]A^A_H
@0H;
@8H;
AWAVAUATI
-@x 
@0L;
@HH;
@PH;
([]A\A]A^A_
@@H;
AWAVA
AUATH
[]A\A]A^A_
L$`A
L$`H
=ls 
= s 
AWAVH
AUATI
D$H1
@0H;
=oq 
5Fo 
@PL9
-;p 
J0H9
@PL9
J0H9
@PL9
J0H9
@PL9
J0H9
@PL9
J0H9
@PL9
J0H9
=]m 
@8L9
5il 
,$XZ
D$0L
@0L;
@@L9
51k 
@HL9
@HL9
@PL9
5Gk 
@PL9
D$HdH3
X[]A\A]A^A_
5Vh 
@HH9
J0H9
5<h 
@@H9
@PL9
J0H9
@@H;D$
D$ D
L$ D
$AYAZD
@HH;D$
@HH9
J0H9
5|f 
D$ H
@@H9
@PL9
J0H9
L$ L
@@H;D$
D$,D
L$ 1
D$<H
L$0D
$^_D
@HH;D$
@PL9
@PL9
AWAVAUATA
@Pu 1
J0H;
[]A\A]A^A_
[]A\A]A^A_
@@H9
_AXD
@PL9
[]A\A]A^A_
@PL9
@@H9
@PL9
@HH;
@HH;
@PL9
AVAUATUSH
-m_ 
D$H1
GD<F
RESULT: 
D$HdH3
P[]A\A]A^
<JuDf
RESULT: 
@8H;
@x tMH
@PH;
ATUSH
[]A\
[]A\
Gx u
@PH;
[]A\H
[]A\
T/eH
T/aH
T/iH
[]A\
tI[]A\H
wy[]A\
[]A\
D9a@8
AWAVAUATUS
\$(H
l$ dH
D$X1
COMMAND:H
D$XdH3
h[]A\A]A^A_
D&eL
=*R 
B:t0at&H
@PH;
=.M 
L0i@
Bx t
@HH;
m@8t
AWAVD
AUATA
T/eH
T/aH
T/iH
[]A\A]A^A_
t(aL
t(eB
D(iD
@PH;
@PH;
ATUA
@HH;
[]A\
@HH;
gx D
G]8G^v.D
AWAV
AUATA
t(aH
t(eB
D(iD
@x t
[]A\A]A^A_
@PH;
D&e8
@PH;
AWAVAUATA
[]A\A]A^A_
@PH;
[]A\A]A^A_
[]A\A]A^A_
18W<
[]A\A]A^A_
=S; 
tcrA
virt_read_handler
%s called in %s stub. you must not have loaded the %s plugin
virt_write_handler
cmos
get_reg
set_reg
registerDMA8Channel
get_TC
set_DRQ
raise_irq
lower_irq
Floppy State
floppy
data_rate
command_index
command_size
command_complete
pending_command
multi_track
pending_irq
reset_sensei
format_count
format_fillbyte
result
result_index
result_size
main_status_reg
status_reg0
status_reg1
status_reg2
status_reg3
floppy_buffer_index
lock
config
pretrk
perp_mode
buffer
drive%d
cylinder
head
sector
media_present
none
floppy.0.path
floppy.1.path
floppy.%d.status
from
floppy_xfer: bad drive #%d
floppy.%d
Exit
vvfat:
unknown mode type
Floppy Drive
floppy.0.devtype
 A: 
floppy.0.type
floppy.0.status
floppy.0.readonly
floppy.1.devtype
 B: 
floppy.1.type
floppy.1.status
floppy.1.readonly
[%02x] 
controller reset in software
<<WRITE DONE>>
AFTER
  drive    = %u
  head     = %u
  cylinder = %u
  sector   = %u
sense interrupt status
configure (eis     = 0x%02x)
configure (efifo   = 0x%02x)
configure (no poll = 0x%02x)
configure (fifothr = 0x%02x)
configure (pretrk  = 0x%02x)
format track
read/write normal data
BEFORE
  eot      = %u
<<READ DONE>>
  motor on, drive1 = %d
  motor on, drive0 = %d
  normal_operation=%02x
  drive_select=%02x
command = 0x%02x
  500 Kbps
  300 Kbps
  250 Kbps
  1 Mbps
Cannot add a floppy drive at runtime
floppy_param_string_handler called with unknown parameter '%s'
floppy_xfer: drive=%u, offset=%u, bytes=%u, direction=%s floppy
could not perform lseek() to %d on floppy image file
partial read() on floppy image returns %u/%u
read() on floppy image returns 0
could not perform write() on floppy image file
evaluate_media: unknown media type %d
evaluate_media: media type %d not valid for this floppy drive
tried to open '%s' read/write: %s
tried to open '%s' read only: %s
fstat floppy 0 drive image file returns error: %s
evaluate_media: size of file '%s' (%lu) too large for selected type
evaluate_media: file '%s' of unknown size %lu
cannot determine media geometry, trying to use defaults
Init $Id: floppy.cc 11588 2013-01-23 17:56:57Z vruppert $
fd0: '%s' ro=%d, h=%d,t=%d,spt=%d
fd1: '%s' ro=%d, h=%d,t=%d,spt=%d
floppy:timer(): unknown case %02x
increment_sector: clamping cylinder to max
non DMA mode not fully implemented yet
floppy_command(): recalibrate drive %u
floppy_command(): read ID: motor not on
floppy_command(): read ID: bad drive #%d
attempt to read sector ID with media not present
floppy_command(): format track: motor not on
floppy_command(): format track: bad drive #%d
format track: sector size %d not supported
format track: %d sectors/track requested (%d expected)
attempt to format track with media not present
attempt to format track with media write-protected
non-DMA floppy format unimplemented
read/write command with DMA and int disabled
floppy_command(): read/write: motor not on
floppy_command(): read/write: bad drive #%d
head number in command[1] doesn't match head field
attempt to read/write sector %u with media not present
read/write command: sector size %d not supported
io: norm r/w parms out of range: sec#%02xh cyl#%02xh eot#%02xh head#%02xh
attempt to read/write sector %u past last sector %u
io: cylinder request != current cylinder
io: logical sector out of bounds
floppy_command(): unknown read/write command
perpendicular mode: config=0x%02x
You should never get here! cmd = 0x%02x
port 0x3f5: no results to read
io_read: unsupported address 0x%04x
read(): during command 0x%02x, port 0x%04x returns 0x%02x
head number does not match head field
dma_read: sector size %d not supported
formatting cylinder %u head %u sector %u
tried to write disk %u, which is write-protected
write access to port 0x%04x, value=0x%02x
DMA and interrupt capabilities disabled
io_write: digital output register
  dma_and_interrupt_enable=%02x
WARNING: non existing drive selected
write to data rate select register: unsupported bits set
write 0x03f5: receiving new command 0x%02x, old one (0x%02x) pending
io_write: 0x3f5: unsupported floppy command 0x%02x
io_write: 0x3f5: invalid floppy command 0x%02x
io_write: diskette controller data
io_write: reserved register 0x3f6 unsupported
io_write: config control register: 0x%02x
io_write ignored: 0x%04x = 0x%02x
12logfunctions
13bx_devmodel_c
16bx_floppy_stub_c
16bx_floppy_ctrl_c
;*3$"
zPLR
libbx_floppy.so.0.0.0.debug
7zXZ
3y4e
5EjwN
iZ z
X_c|
0}`;'
l4|2
;2tR
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rela.dyn
.init
.plt
.plt.got
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.gcc_except_table
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.data
.bss
.gnu_debuglink
.gnu_debugdata
