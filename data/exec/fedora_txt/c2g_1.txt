__gmon_start__
_init
_fini
_ITM_deregisterTMCloneTable
_ITM_registerTMCloneTable
__cxa_finalize
_Jv_RegisterClasses
g_snprintf
gegl_operation_area_filter_get_type
g_type_module_register_type
g_slice_alloc0
g_type_check_instance_cast
babl_format
gegl_operation_set_format
g_type_class_peek_parent
gegl_operation_get_type
g_type_check_class_cast
gegl_operation_filter_get_type
g_dgettext
gegl_operation_class_set_keys
gegl_param_spec_int
g_object_class_install_property
g_object_set_data_full
g_slice_free1
gegl_operation_source_get_bounding_box
g_type_name
g_log
g_value_set_int
g_value_get_int
g_rand_new
g_rand_double_range
g_rand_free
gegl_operation_get_required_for_output
gegl_cl_is_accelerated
g_malloc0_n
gegl_buffer_get
gegl_buffer_set
g_free
gegl_operation_get_format
gegl_buffer_cl_iterator_new
gegl_buffer_cl_iterator_add_2
gegl_clCreateBuffer
gegl_buffer_cl_iterator_next
gegl_clEnqueueWriteBuffer
gegl_cl_get_context
gegl_cl_get_command_queue
gegl_cl_errstring
gegl_cl_compile_and_build
gegl_clSetKernelArg
gegl_clEnqueueNDRangeKernel
gegl_clEnqueueBarrier
gegl_clFinish
gegl_clReleaseMemObject
gegl_chant_get_type
gegl_module_query
gegl_module_register
libgmodule-2.0.so.0
libgio-2.0.so.0
libgobject-2.0.so.0
libgthread-2.0.so.0
libglib-2.0.so.0
libm.so.6
libpthread.so.0
libc.so.6
__stack_chk_fail
_edata
__bss_start
_end
c2g.so
GLIBC_2.1.3
GLIBC_2.4
D$@$
UWVS
d$L[^_]
d$0[^_
d$0[^_
d$0[^_
d$0[^_
d$0[^_
d$0[^_
d$0[^_
d$0[^_
UWVS
d$,[^_]
D$he
D$@1
,D$09D$4~F
,T$09T$<~0
\$81
\$89D$X
D$`9D$l
[^_]
D$L1
D$4~
GeglChantc2g.c
RGBA float
input
YA float
output
gegl-0.2
description
enhance
categories
gegl:c2g
name
Radius
radius
Samples
samples
Iterations
iterations
chant-data
property
GEGL-../../gegl/gegl-chant.h
C2g_CL
GEGL-c2g.c
Color to grayscale conversion, uses envelopes formed from spatial  color differences to perform color-feature preserving grayscale  spatial contrast enhancement
Neighborhood taken into account, this is the radius in pixels taken into account when deciding which colors map to which gray values
Number of samples to do per iteration looking for the range of colors
Number of iterations, a higher number of iterations provides less noisy results at a computational cost
%s:%d: invalid %s id %u for "%s" of type '%s' in '%s'
#define TRUE true                                                     
                                                                      
#define FALSE false                                                   
#define ANGLE_PRIME 95273                                             
#define RADIUS_PRIME 29537                                            
                                                                      
void sample_min_max(const __global   float4 *src_buf,                 
                                     int     src_width,               
                                     int     src_height,              
                    const __global   float  *radiuses,                
                    const __global   float  *lut_cos,                 
                    const __global   float  *lut_sin,                 
                                     int     x,                       
                                     int     y,                       
                                     int     radius,                  
                                     int     samples,                 
                                     float4 *min,                     
                                     float4 *max,                     
                                     int     j,                       
                                     int     iterations)              
{                                                                     
    float4 best_min;                                                  
    float4 best_max;                                                  
    float4 center_pix = *(src_buf + src_width * y + x);               
    int i;                                                            
                                                                      
    best_min = center_pix;                                            
    best_max = center_pix;                                            
                                                                      
    int angle_no  = (src_width * y + x) * (iterations) *              
                       samples + j * samples;                         
    int radius_no = angle_no;                                         
    angle_no  %= ANGLE_PRIME;                                         
    radius_no %= RADIUS_PRIME;                                        
    for(i=0; i<samples; i++)                                          
    {                                                                 
        int angle;                                                    
        float rmag;                                                   
        /* if we've sampled outside the valid image                   
           area, we grab another sample instead, this                 
           should potentially work better than mirroring              
           or extending the image */                                  
                                                                      
         angle = angle_no++;                                          
         rmag  = radiuses[radius_no++] * radius;                      
                                                                      
         if( angle_no  >= ANGLE_PRIME)                                
             angle_no   = 0;                                          
         if( radius_no >= RADIUS_PRIME)                               
             radius_no  = 0;                                          
                                                                      
         int u = x + rmag * lut_cos[angle];                           
         int v = y + rmag * lut_sin[angle];                           
                                                                      
         if(u>=src_width || u <0 || v>=src_height || v<0)             
         {                                                            
             //--i;                                                   
             continue;                                                
         }                                                            
         float4 pixel = *(src_buf + (src_width * v + u));             
         if(pixel.w<=0.0f)                                            
         {                                                            
             //--i;                                                   
             continue;                                                
         }                                                            
                                                                      
         best_min = pixel < best_min ? pixel : best_min;              
         best_max = pixel > best_max ? pixel : best_max;              
    }                                                                 
                                                                      
    (*min).xyz = best_min.xyz;                                        
    (*max).xyz = best_max.xyz;                                        
}                                                                     
                                                                      
void compute_envelopes_CL(const __global  float4 *src_buf,            
                                          int     src_width,          
                                          int     src_height,         
                          const __global  float  *radiuses,           
                          const __global  float  *lut_cos,            
                          const __global  float  *lut_sin,            
                                          int     x,                  
                                          int     y,                  
                                          int     radius,             
                                          int     samples,            
                                          int     iterations,         
                                          float4 *min_envelope,       
                                          float4 *max_envelope)       
{                                                                     
    float4 range_sum = 0;                                             
    float4 relative_brightness_sum = 0;                               
    float4 pixel = *(src_buf + src_width * y + x);                    
                                                                      
    int i;                                                            
    for(i =0; i<iterations; i++)                                      
    {                                                                 
        float4 min,max;                                               
        float4 range, relative_brightness;                            
                                                                      
        sample_min_max(src_buf, src_width, src_height,                
                        radiuses, lut_cos, lut_sin, x, y,             
                        radius,samples,&min,&max,i,iterations);       
        range = max - min;                                            
        relative_brightness = range <= 0.0f ?                         
                               0.5f : (pixel - min) / range;          
        relative_brightness_sum += relative_brightness;               
        range_sum += range;                                           
    }                                                                 
                                                                      
    float4 relative_brightness = relative_brightness_sum / iterations;
    float4 range = range_sum / iterations;                            
                                                                      
    if(max_envelope)                                                  
        *max_envelope = pixel + (1.0f - relative_brightness) * range; 
                                                                      
    if(min_envelope)                                                  
        *min_envelope = pixel - relative_brightness * range;          
}                                                                     
                                                                      
__kernel void C2g_CL(const __global float4 *src_buf,                  
                                    int     src_width,                
                                    int     src_height,               
                     const __global float  *radiuses,                 
                     const __global float  *lut_cos,                  
                     const __global float  *lut_sin,                  
                           __global float2 *dst_buf,                  
                                    int     radius,                   
                                    int     samples,                  
                                    int     iterations)               
{                                                                     
    int gidx = get_global_id(0);                                      
    int gidy = get_global_id(1);                                      
                                                                      
    int x = gidx + radius;                                            
    int y = gidy + radius;                                            
                                                                      
    int src_offset = (src_width * y + x);                             
    int dst_offset = gidx + get_global_size(0) * gidy;                
    float4 min,max;                                                   
                                                                      
    compute_envelopes_CL(src_buf, src_width, src_height,              
                         radiuses, lut_cos, lut_sin, x, y,            
                         radius, samples, iterations, &min, &max);    
                                                                      
    float4 pixel = *(src_buf + src_offset);                           
                                                                      
    float nominator=0, denominator=0;                                 
    float4 t1 = (pixel - min) * (pixel - min);                        
    float4 t2 = (pixel - max) * (pixel - max);                        
                                                                      
    nominator   = t1.x + t1.y + t1.z;                                 
    denominator = t2.x + t2.y + t2.z;                                 
                                                                      
    nominator   = sqrt(nominator);                                    
    denominator = sqrt(denominator);                                  
    denominator+= nominator + denominator;                            
                                                                      
    dst_buf[dst_offset].x = (denominator > 0.000f)                    
                             ? (nominator / denominator) : 0.5f;      
    dst_buf[dst_offset].y =  src_buf[src_offset].w;                   
}                                                                     
                                                                      
[OpenCL] Error in gegl:c2g: %s
;*2$"
c2g.so.debug
7zXZ
;QF~"
%<HY
/udX
@/`.X,~
UB*3E9
v#Cn5
1o(X
D._7
Vk/0
'6d,
	((P 
4SH9
.shstrtab
.note.gnu.build-id
.gnu.hash
.dynsym
.dynstr
.gnu.version
.gnu.version_r
.rel.dyn
.init
.plt
.plt.got
.text
.fini
.rodata
.eh_frame_hdr
.eh_frame
.init_array
.fini_array
.jcr
.data.rel.ro
.dynamic
.bss
.gnu_debuglink
.gnu_debugdata
